
MDP_Project.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000e8f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000fbc  0800ea80  0800ea80  0001ea80  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fa3c  0800fa3c  00020204  2**0
                  CONTENTS
  4 .ARM          00000008  0800fa3c  0800fa3c  0001fa3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fa44  0800fa44  00020204  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fa44  0800fa44  0001fa44  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fa48  0800fa48  0001fa48  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000204  20000000  0800fa4c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020204  2**0
                  CONTENTS
 10 .bss          00005220  20000204  20000204  00020204  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20005424  20005424  00020204  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020204  2**0
                  CONTENTS, READONLY
 13 .debug_info   00021353  00000000  00000000  00020234  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00004008  00000000  00000000  00041587  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00001c60  00000000  00000000  00045590  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00001af0  00000000  00000000  000471f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00006079  00000000  00000000  00048ce0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0001fe05  00000000  00000000  0004ed59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000e9bb8  00000000  00000000  0006eb5e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00158716  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00008a04  00000000  00000000  00158768  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	20000204 	.word	0x20000204
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ea68 	.word	0x0800ea68

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	20000208 	.word	0x20000208
 80001cc:	0800ea68 	.word	0x0800ea68

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2f>:
 8000ba8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bac:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bb0:	bf24      	itt	cs
 8000bb2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bb6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bba:	d90d      	bls.n	8000bd8 <__aeabi_d2f+0x30>
 8000bbc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000bc0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bc4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bc8:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000bcc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000bd0:	bf08      	it	eq
 8000bd2:	f020 0001 	biceq.w	r0, r0, #1
 8000bd6:	4770      	bx	lr
 8000bd8:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000bdc:	d121      	bne.n	8000c22 <__aeabi_d2f+0x7a>
 8000bde:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000be2:	bfbc      	itt	lt
 8000be4:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000be8:	4770      	bxlt	lr
 8000bea:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000bee:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000bf2:	f1c2 0218 	rsb	r2, r2, #24
 8000bf6:	f1c2 0c20 	rsb	ip, r2, #32
 8000bfa:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bfe:	fa20 f002 	lsr.w	r0, r0, r2
 8000c02:	bf18      	it	ne
 8000c04:	f040 0001 	orrne.w	r0, r0, #1
 8000c08:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c0c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c10:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c14:	ea40 000c 	orr.w	r0, r0, ip
 8000c18:	fa23 f302 	lsr.w	r3, r3, r2
 8000c1c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c20:	e7cc      	b.n	8000bbc <__aeabi_d2f+0x14>
 8000c22:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c26:	d107      	bne.n	8000c38 <__aeabi_d2f+0x90>
 8000c28:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c2c:	bf1e      	ittt	ne
 8000c2e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c32:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c36:	4770      	bxne	lr
 8000c38:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c3c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c40:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c44:	4770      	bx	lr
 8000c46:	bf00      	nop

08000c48 <__aeabi_uldivmod>:
 8000c48:	b953      	cbnz	r3, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4a:	b94a      	cbnz	r2, 8000c60 <__aeabi_uldivmod+0x18>
 8000c4c:	2900      	cmp	r1, #0
 8000c4e:	bf08      	it	eq
 8000c50:	2800      	cmpeq	r0, #0
 8000c52:	bf1c      	itt	ne
 8000c54:	f04f 31ff 	movne.w	r1, #4294967295
 8000c58:	f04f 30ff 	movne.w	r0, #4294967295
 8000c5c:	f000 b974 	b.w	8000f48 <__aeabi_idiv0>
 8000c60:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c64:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c68:	f000 f806 	bl	8000c78 <__udivmoddi4>
 8000c6c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c70:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c74:	b004      	add	sp, #16
 8000c76:	4770      	bx	lr

08000c78 <__udivmoddi4>:
 8000c78:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c7c:	9d08      	ldr	r5, [sp, #32]
 8000c7e:	4604      	mov	r4, r0
 8000c80:	468e      	mov	lr, r1
 8000c82:	2b00      	cmp	r3, #0
 8000c84:	d14d      	bne.n	8000d22 <__udivmoddi4+0xaa>
 8000c86:	428a      	cmp	r2, r1
 8000c88:	4694      	mov	ip, r2
 8000c8a:	d969      	bls.n	8000d60 <__udivmoddi4+0xe8>
 8000c8c:	fab2 f282 	clz	r2, r2
 8000c90:	b152      	cbz	r2, 8000ca8 <__udivmoddi4+0x30>
 8000c92:	fa01 f302 	lsl.w	r3, r1, r2
 8000c96:	f1c2 0120 	rsb	r1, r2, #32
 8000c9a:	fa20 f101 	lsr.w	r1, r0, r1
 8000c9e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000ca2:	ea41 0e03 	orr.w	lr, r1, r3
 8000ca6:	4094      	lsls	r4, r2
 8000ca8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000cac:	0c21      	lsrs	r1, r4, #16
 8000cae:	fbbe f6f8 	udiv	r6, lr, r8
 8000cb2:	fa1f f78c 	uxth.w	r7, ip
 8000cb6:	fb08 e316 	mls	r3, r8, r6, lr
 8000cba:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000cbe:	fb06 f107 	mul.w	r1, r6, r7
 8000cc2:	4299      	cmp	r1, r3
 8000cc4:	d90a      	bls.n	8000cdc <__udivmoddi4+0x64>
 8000cc6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cca:	f106 30ff 	add.w	r0, r6, #4294967295
 8000cce:	f080 811f 	bcs.w	8000f10 <__udivmoddi4+0x298>
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	f240 811c 	bls.w	8000f10 <__udivmoddi4+0x298>
 8000cd8:	3e02      	subs	r6, #2
 8000cda:	4463      	add	r3, ip
 8000cdc:	1a5b      	subs	r3, r3, r1
 8000cde:	b2a4      	uxth	r4, r4
 8000ce0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000ce4:	fb08 3310 	mls	r3, r8, r0, r3
 8000ce8:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000cec:	fb00 f707 	mul.w	r7, r0, r7
 8000cf0:	42a7      	cmp	r7, r4
 8000cf2:	d90a      	bls.n	8000d0a <__udivmoddi4+0x92>
 8000cf4:	eb1c 0404 	adds.w	r4, ip, r4
 8000cf8:	f100 33ff 	add.w	r3, r0, #4294967295
 8000cfc:	f080 810a 	bcs.w	8000f14 <__udivmoddi4+0x29c>
 8000d00:	42a7      	cmp	r7, r4
 8000d02:	f240 8107 	bls.w	8000f14 <__udivmoddi4+0x29c>
 8000d06:	4464      	add	r4, ip
 8000d08:	3802      	subs	r0, #2
 8000d0a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000d0e:	1be4      	subs	r4, r4, r7
 8000d10:	2600      	movs	r6, #0
 8000d12:	b11d      	cbz	r5, 8000d1c <__udivmoddi4+0xa4>
 8000d14:	40d4      	lsrs	r4, r2
 8000d16:	2300      	movs	r3, #0
 8000d18:	e9c5 4300 	strd	r4, r3, [r5]
 8000d1c:	4631      	mov	r1, r6
 8000d1e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d22:	428b      	cmp	r3, r1
 8000d24:	d909      	bls.n	8000d3a <__udivmoddi4+0xc2>
 8000d26:	2d00      	cmp	r5, #0
 8000d28:	f000 80ef 	beq.w	8000f0a <__udivmoddi4+0x292>
 8000d2c:	2600      	movs	r6, #0
 8000d2e:	e9c5 0100 	strd	r0, r1, [r5]
 8000d32:	4630      	mov	r0, r6
 8000d34:	4631      	mov	r1, r6
 8000d36:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d3a:	fab3 f683 	clz	r6, r3
 8000d3e:	2e00      	cmp	r6, #0
 8000d40:	d14a      	bne.n	8000dd8 <__udivmoddi4+0x160>
 8000d42:	428b      	cmp	r3, r1
 8000d44:	d302      	bcc.n	8000d4c <__udivmoddi4+0xd4>
 8000d46:	4282      	cmp	r2, r0
 8000d48:	f200 80f9 	bhi.w	8000f3e <__udivmoddi4+0x2c6>
 8000d4c:	1a84      	subs	r4, r0, r2
 8000d4e:	eb61 0303 	sbc.w	r3, r1, r3
 8000d52:	2001      	movs	r0, #1
 8000d54:	469e      	mov	lr, r3
 8000d56:	2d00      	cmp	r5, #0
 8000d58:	d0e0      	beq.n	8000d1c <__udivmoddi4+0xa4>
 8000d5a:	e9c5 4e00 	strd	r4, lr, [r5]
 8000d5e:	e7dd      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000d60:	b902      	cbnz	r2, 8000d64 <__udivmoddi4+0xec>
 8000d62:	deff      	udf	#255	; 0xff
 8000d64:	fab2 f282 	clz	r2, r2
 8000d68:	2a00      	cmp	r2, #0
 8000d6a:	f040 8092 	bne.w	8000e92 <__udivmoddi4+0x21a>
 8000d6e:	eba1 010c 	sub.w	r1, r1, ip
 8000d72:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000d76:	fa1f fe8c 	uxth.w	lr, ip
 8000d7a:	2601      	movs	r6, #1
 8000d7c:	0c20      	lsrs	r0, r4, #16
 8000d7e:	fbb1 f3f7 	udiv	r3, r1, r7
 8000d82:	fb07 1113 	mls	r1, r7, r3, r1
 8000d86:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000d8a:	fb0e f003 	mul.w	r0, lr, r3
 8000d8e:	4288      	cmp	r0, r1
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x12c>
 8000d92:	eb1c 0101 	adds.w	r1, ip, r1
 8000d96:	f103 38ff 	add.w	r8, r3, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x12a>
 8000d9c:	4288      	cmp	r0, r1
 8000d9e:	f200 80cb 	bhi.w	8000f38 <__udivmoddi4+0x2c0>
 8000da2:	4643      	mov	r3, r8
 8000da4:	1a09      	subs	r1, r1, r0
 8000da6:	b2a4      	uxth	r4, r4
 8000da8:	fbb1 f0f7 	udiv	r0, r1, r7
 8000dac:	fb07 1110 	mls	r1, r7, r0, r1
 8000db0:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000db4:	fb0e fe00 	mul.w	lr, lr, r0
 8000db8:	45a6      	cmp	lr, r4
 8000dba:	d908      	bls.n	8000dce <__udivmoddi4+0x156>
 8000dbc:	eb1c 0404 	adds.w	r4, ip, r4
 8000dc0:	f100 31ff 	add.w	r1, r0, #4294967295
 8000dc4:	d202      	bcs.n	8000dcc <__udivmoddi4+0x154>
 8000dc6:	45a6      	cmp	lr, r4
 8000dc8:	f200 80bb 	bhi.w	8000f42 <__udivmoddi4+0x2ca>
 8000dcc:	4608      	mov	r0, r1
 8000dce:	eba4 040e 	sub.w	r4, r4, lr
 8000dd2:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000dd6:	e79c      	b.n	8000d12 <__udivmoddi4+0x9a>
 8000dd8:	f1c6 0720 	rsb	r7, r6, #32
 8000ddc:	40b3      	lsls	r3, r6
 8000dde:	fa22 fc07 	lsr.w	ip, r2, r7
 8000de2:	ea4c 0c03 	orr.w	ip, ip, r3
 8000de6:	fa20 f407 	lsr.w	r4, r0, r7
 8000dea:	fa01 f306 	lsl.w	r3, r1, r6
 8000dee:	431c      	orrs	r4, r3
 8000df0:	40f9      	lsrs	r1, r7
 8000df2:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000df6:	fa00 f306 	lsl.w	r3, r0, r6
 8000dfa:	fbb1 f8f9 	udiv	r8, r1, r9
 8000dfe:	0c20      	lsrs	r0, r4, #16
 8000e00:	fa1f fe8c 	uxth.w	lr, ip
 8000e04:	fb09 1118 	mls	r1, r9, r8, r1
 8000e08:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e0c:	fb08 f00e 	mul.w	r0, r8, lr
 8000e10:	4288      	cmp	r0, r1
 8000e12:	fa02 f206 	lsl.w	r2, r2, r6
 8000e16:	d90b      	bls.n	8000e30 <__udivmoddi4+0x1b8>
 8000e18:	eb1c 0101 	adds.w	r1, ip, r1
 8000e1c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000e20:	f080 8088 	bcs.w	8000f34 <__udivmoddi4+0x2bc>
 8000e24:	4288      	cmp	r0, r1
 8000e26:	f240 8085 	bls.w	8000f34 <__udivmoddi4+0x2bc>
 8000e2a:	f1a8 0802 	sub.w	r8, r8, #2
 8000e2e:	4461      	add	r1, ip
 8000e30:	1a09      	subs	r1, r1, r0
 8000e32:	b2a4      	uxth	r4, r4
 8000e34:	fbb1 f0f9 	udiv	r0, r1, r9
 8000e38:	fb09 1110 	mls	r1, r9, r0, r1
 8000e3c:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000e40:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e44:	458e      	cmp	lr, r1
 8000e46:	d908      	bls.n	8000e5a <__udivmoddi4+0x1e2>
 8000e48:	eb1c 0101 	adds.w	r1, ip, r1
 8000e4c:	f100 34ff 	add.w	r4, r0, #4294967295
 8000e50:	d26c      	bcs.n	8000f2c <__udivmoddi4+0x2b4>
 8000e52:	458e      	cmp	lr, r1
 8000e54:	d96a      	bls.n	8000f2c <__udivmoddi4+0x2b4>
 8000e56:	3802      	subs	r0, #2
 8000e58:	4461      	add	r1, ip
 8000e5a:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000e5e:	fba0 9402 	umull	r9, r4, r0, r2
 8000e62:	eba1 010e 	sub.w	r1, r1, lr
 8000e66:	42a1      	cmp	r1, r4
 8000e68:	46c8      	mov	r8, r9
 8000e6a:	46a6      	mov	lr, r4
 8000e6c:	d356      	bcc.n	8000f1c <__udivmoddi4+0x2a4>
 8000e6e:	d053      	beq.n	8000f18 <__udivmoddi4+0x2a0>
 8000e70:	b15d      	cbz	r5, 8000e8a <__udivmoddi4+0x212>
 8000e72:	ebb3 0208 	subs.w	r2, r3, r8
 8000e76:	eb61 010e 	sbc.w	r1, r1, lr
 8000e7a:	fa01 f707 	lsl.w	r7, r1, r7
 8000e7e:	fa22 f306 	lsr.w	r3, r2, r6
 8000e82:	40f1      	lsrs	r1, r6
 8000e84:	431f      	orrs	r7, r3
 8000e86:	e9c5 7100 	strd	r7, r1, [r5]
 8000e8a:	2600      	movs	r6, #0
 8000e8c:	4631      	mov	r1, r6
 8000e8e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e92:	f1c2 0320 	rsb	r3, r2, #32
 8000e96:	40d8      	lsrs	r0, r3
 8000e98:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e9c:	fa21 f303 	lsr.w	r3, r1, r3
 8000ea0:	4091      	lsls	r1, r2
 8000ea2:	4301      	orrs	r1, r0
 8000ea4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000ea8:	fa1f fe8c 	uxth.w	lr, ip
 8000eac:	fbb3 f0f7 	udiv	r0, r3, r7
 8000eb0:	fb07 3610 	mls	r6, r7, r0, r3
 8000eb4:	0c0b      	lsrs	r3, r1, #16
 8000eb6:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000eba:	fb00 f60e 	mul.w	r6, r0, lr
 8000ebe:	429e      	cmp	r6, r3
 8000ec0:	fa04 f402 	lsl.w	r4, r4, r2
 8000ec4:	d908      	bls.n	8000ed8 <__udivmoddi4+0x260>
 8000ec6:	eb1c 0303 	adds.w	r3, ip, r3
 8000eca:	f100 38ff 	add.w	r8, r0, #4294967295
 8000ece:	d22f      	bcs.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed0:	429e      	cmp	r6, r3
 8000ed2:	d92d      	bls.n	8000f30 <__udivmoddi4+0x2b8>
 8000ed4:	3802      	subs	r0, #2
 8000ed6:	4463      	add	r3, ip
 8000ed8:	1b9b      	subs	r3, r3, r6
 8000eda:	b289      	uxth	r1, r1
 8000edc:	fbb3 f6f7 	udiv	r6, r3, r7
 8000ee0:	fb07 3316 	mls	r3, r7, r6, r3
 8000ee4:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee8:	fb06 f30e 	mul.w	r3, r6, lr
 8000eec:	428b      	cmp	r3, r1
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x28a>
 8000ef0:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef4:	f106 38ff 	add.w	r8, r6, #4294967295
 8000ef8:	d216      	bcs.n	8000f28 <__udivmoddi4+0x2b0>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	d914      	bls.n	8000f28 <__udivmoddi4+0x2b0>
 8000efe:	3e02      	subs	r6, #2
 8000f00:	4461      	add	r1, ip
 8000f02:	1ac9      	subs	r1, r1, r3
 8000f04:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000f08:	e738      	b.n	8000d7c <__udivmoddi4+0x104>
 8000f0a:	462e      	mov	r6, r5
 8000f0c:	4628      	mov	r0, r5
 8000f0e:	e705      	b.n	8000d1c <__udivmoddi4+0xa4>
 8000f10:	4606      	mov	r6, r0
 8000f12:	e6e3      	b.n	8000cdc <__udivmoddi4+0x64>
 8000f14:	4618      	mov	r0, r3
 8000f16:	e6f8      	b.n	8000d0a <__udivmoddi4+0x92>
 8000f18:	454b      	cmp	r3, r9
 8000f1a:	d2a9      	bcs.n	8000e70 <__udivmoddi4+0x1f8>
 8000f1c:	ebb9 0802 	subs.w	r8, r9, r2
 8000f20:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000f24:	3801      	subs	r0, #1
 8000f26:	e7a3      	b.n	8000e70 <__udivmoddi4+0x1f8>
 8000f28:	4646      	mov	r6, r8
 8000f2a:	e7ea      	b.n	8000f02 <__udivmoddi4+0x28a>
 8000f2c:	4620      	mov	r0, r4
 8000f2e:	e794      	b.n	8000e5a <__udivmoddi4+0x1e2>
 8000f30:	4640      	mov	r0, r8
 8000f32:	e7d1      	b.n	8000ed8 <__udivmoddi4+0x260>
 8000f34:	46d0      	mov	r8, sl
 8000f36:	e77b      	b.n	8000e30 <__udivmoddi4+0x1b8>
 8000f38:	3b02      	subs	r3, #2
 8000f3a:	4461      	add	r1, ip
 8000f3c:	e732      	b.n	8000da4 <__udivmoddi4+0x12c>
 8000f3e:	4630      	mov	r0, r6
 8000f40:	e709      	b.n	8000d56 <__udivmoddi4+0xde>
 8000f42:	4464      	add	r4, ip
 8000f44:	3802      	subs	r0, #2
 8000f46:	e742      	b.n	8000dce <__udivmoddi4+0x156>

08000f48 <__aeabi_idiv0>:
 8000f48:	4770      	bx	lr
 8000f4a:	bf00      	nop

08000f4c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b082      	sub	sp, #8
 8000f50:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000f52:	f003 f823 	bl	8003f9c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000f56:	f000 f8c7 	bl	80010e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000f5a:	f000 fc0f 	bl	800177c <MX_GPIO_Init>
  MX_TIM8_Init();
 8000f5e:	f000 fb39 	bl	80015d4 <MX_TIM8_Init>
  MX_TIM2_Init();
 8000f62:	f000 fa8f 	bl	8001484 <MX_TIM2_Init>
  MX_TIM1_Init();
 8000f66:	f000 f9ef 	bl	8001348 <MX_TIM1_Init>
  MX_TIM3_Init();
 8000f6a:	f000 fadf 	bl	800152c <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8000f6e:	f000 fbdb 	bl	8001728 <MX_USART3_UART_Init>
  MX_I2C1_Init();
 8000f72:	f000 f9bb 	bl	80012ec <MX_I2C1_Init>
  MX_ADC1_Init();
 8000f76:	f000 f915 	bl	80011a4 <MX_ADC1_Init>
  MX_ADC2_Init();
 8000f7a:	f000 f965 	bl	8001248 <MX_ADC2_Init>
  /* USER CODE BEGIN 2 */

  	//Initialise commandQueue
  	int i;
	commandQueue.head = 0;
 8000f7e:	4b3e      	ldr	r3, [pc, #248]	; (8001078 <main+0x12c>)
 8000f80:	2200      	movs	r2, #0
 8000f82:	701a      	strb	r2, [r3, #0]
	commandQueue.tail = 0;
 8000f84:	4b3c      	ldr	r3, [pc, #240]	; (8001078 <main+0x12c>)
 8000f86:	2200      	movs	r2, #0
 8000f88:	705a      	strb	r2, [r3, #1]
	commandQueue.size = CMD_BUFFER_SIZE;
 8000f8a:	4b3b      	ldr	r3, [pc, #236]	; (8001078 <main+0x12c>)
 8000f8c:	220c      	movs	r2, #12
 8000f8e:	709a      	strb	r2, [r3, #2]

	for (i = 0; i < CMD_BUFFER_SIZE; i++) {
 8000f90:	2300      	movs	r3, #0
 8000f92:	607b      	str	r3, [r7, #4]
 8000f94:	e00c      	b.n	8000fb0 <main+0x64>
	  Command cmd;
	  cmd.index = 100;
 8000f96:	2364      	movs	r3, #100	; 0x64
 8000f98:	703b      	strb	r3, [r7, #0]
	  cmd.val = 0;
 8000f9a:	2300      	movs	r3, #0
 8000f9c:	807b      	strh	r3, [r7, #2]
	  commandQueue.buffer[i] = cmd;
 8000f9e:	4a36      	ldr	r2, [pc, #216]	; (8001078 <main+0x12c>)
 8000fa0:	687b      	ldr	r3, [r7, #4]
 8000fa2:	009b      	lsls	r3, r3, #2
 8000fa4:	4413      	add	r3, r2
 8000fa6:	683a      	ldr	r2, [r7, #0]
 8000fa8:	605a      	str	r2, [r3, #4]
	for (i = 0; i < CMD_BUFFER_SIZE; i++) {
 8000faa:	687b      	ldr	r3, [r7, #4]
 8000fac:	3301      	adds	r3, #1
 8000fae:	607b      	str	r3, [r7, #4]
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	2b0b      	cmp	r3, #11
 8000fb4:	ddef      	ble.n	8000f96 <main+0x4a>
	}

	//Initialise OLED
	OLED_Init();
 8000fb6:	f00a fd07 	bl	800b9c8 <OLED_Init>

	//Initialise Gyroscope
	ICM20948_init(&hi2c1,0,GYRO_FULL_SCALE_2000DPS);
 8000fba:	2203      	movs	r2, #3
 8000fbc:	2100      	movs	r1, #0
 8000fbe:	482f      	ldr	r0, [pc, #188]	; (800107c <main+0x130>)
 8000fc0:	f00a fafd 	bl	800b5be <ICM20948_init>

	//Initiate UART
	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer, ARX_BUFFER_SIZE);
 8000fc4:	2206      	movs	r2, #6
 8000fc6:	492e      	ldr	r1, [pc, #184]	; (8001080 <main+0x134>)
 8000fc8:	482e      	ldr	r0, [pc, #184]	; (8001084 <main+0x138>)
 8000fca:	f006 fd46 	bl	8007a5a <HAL_UART_Receive_IT>

	//Initiate the motors
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_1);
 8000fce:	2100      	movs	r1, #0
 8000fd0:	482d      	ldr	r0, [pc, #180]	; (8001088 <main+0x13c>)
 8000fd2:	f005 fb61 	bl	8006698 <HAL_TIM_PWM_Start>
	HAL_TIM_PWM_Start(&htim8, TIM_CHANNEL_2);
 8000fd6:	2104      	movs	r1, #4
 8000fd8:	482b      	ldr	r0, [pc, #172]	; (8001088 <main+0x13c>)
 8000fda:	f005 fb5d 	bl	8006698 <HAL_TIM_PWM_Start>

	//Initiate ServoMotor
	HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
 8000fde:	210c      	movs	r1, #12
 8000fe0:	482a      	ldr	r0, [pc, #168]	; (800108c <main+0x140>)
 8000fe2:	f005 fb59 	bl	8006698 <HAL_TIM_PWM_Start>

	//Start MotorA Encoder
	HAL_TIM_Encoder_Start_IT(&htim2, TIM_CHANNEL_ALL);
 8000fe6:	213c      	movs	r1, #60	; 0x3c
 8000fe8:	4829      	ldr	r0, [pc, #164]	; (8001090 <main+0x144>)
 8000fea:	f005 fcc3 	bl	8006974 <HAL_TIM_Encoder_Start_IT>
	//Start MotorB Encoder
	HAL_TIM_Encoder_Start_IT(&htim3, TIM_CHANNEL_ALL);
 8000fee:	213c      	movs	r1, #60	; 0x3c
 8000ff0:	4828      	ldr	r0, [pc, #160]	; (8001094 <main+0x148>)
 8000ff2:	f005 fcbf 	bl	8006974 <HAL_TIM_Encoder_Start_IT>

	//Init left wheel 1st tick before PID
	dutyL.millisOld = HAL_GetTick();
 8000ff6:	f003 f807 	bl	8004008 <HAL_GetTick>
 8000ffa:	4603      	mov	r3, r0
 8000ffc:	461a      	mov	r2, r3
 8000ffe:	4b26      	ldr	r3, [pc, #152]	; (8001098 <main+0x14c>)
 8001000:	631a      	str	r2, [r3, #48]	; 0x30
	//Init right wheel 1st tick before PID
	dutyR.millisOld = HAL_GetTick();
 8001002:	f003 f801 	bl	8004008 <HAL_GetTick>
 8001006:	4603      	mov	r3, r0
 8001008:	461a      	mov	r2, r3
 800100a:	4b24      	ldr	r3, [pc, #144]	; (800109c <main+0x150>)
 800100c:	631a      	str	r2, [r3, #48]	; 0x30
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 800100e:	f007 fd01 	bl	8008a14 <osKernelInitialize>
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of defaultTask */
  defaultTaskHandle = osThreadNew(StartDefaultTask, NULL, &defaultTask_attributes);
 8001012:	4a23      	ldr	r2, [pc, #140]	; (80010a0 <main+0x154>)
 8001014:	2100      	movs	r1, #0
 8001016:	4823      	ldr	r0, [pc, #140]	; (80010a4 <main+0x158>)
 8001018:	f007 fd46 	bl	8008aa8 <osThreadNew>
 800101c:	4603      	mov	r3, r0
 800101e:	4a22      	ldr	r2, [pc, #136]	; (80010a8 <main+0x15c>)
 8001020:	6013      	str	r3, [r2, #0]

  /* creation of displayOLED */
  displayOLEDHandle = osThreadNew(displayOLED_Task, NULL, &displayOLED_attributes);
 8001022:	4a22      	ldr	r2, [pc, #136]	; (80010ac <main+0x160>)
 8001024:	2100      	movs	r1, #0
 8001026:	4822      	ldr	r0, [pc, #136]	; (80010b0 <main+0x164>)
 8001028:	f007 fd3e 	bl	8008aa8 <osThreadNew>
 800102c:	4603      	mov	r3, r0
 800102e:	4a21      	ldr	r2, [pc, #132]	; (80010b4 <main+0x168>)
 8001030:	6013      	str	r3, [r2, #0]

  /* creation of commandTask */
  commandTaskHandle = osThreadNew(Command_Task, NULL, &commandTask_attributes);
 8001032:	4a21      	ldr	r2, [pc, #132]	; (80010b8 <main+0x16c>)
 8001034:	2100      	movs	r1, #0
 8001036:	4821      	ldr	r0, [pc, #132]	; (80010bc <main+0x170>)
 8001038:	f007 fd36 	bl	8008aa8 <osThreadNew>
 800103c:	4603      	mov	r3, r0
 800103e:	4a20      	ldr	r2, [pc, #128]	; (80010c0 <main+0x174>)
 8001040:	6013      	str	r3, [r2, #0]

  /* creation of moveDistTask */
  moveDistTaskHandle = osThreadNew(MoveDistance_Task, NULL, &moveDistTask_attributes);
 8001042:	4a20      	ldr	r2, [pc, #128]	; (80010c4 <main+0x178>)
 8001044:	2100      	movs	r1, #0
 8001046:	4820      	ldr	r0, [pc, #128]	; (80010c8 <main+0x17c>)
 8001048:	f007 fd2e 	bl	8008aa8 <osThreadNew>
 800104c:	4603      	mov	r3, r0
 800104e:	4a1f      	ldr	r2, [pc, #124]	; (80010cc <main+0x180>)
 8001050:	6013      	str	r3, [r2, #0]

  /* creation of servoMotor */
  servoMotorHandle = osThreadNew(servoMotor_Task, NULL, &servoMotor_attributes);
 8001052:	4a1f      	ldr	r2, [pc, #124]	; (80010d0 <main+0x184>)
 8001054:	2100      	movs	r1, #0
 8001056:	481f      	ldr	r0, [pc, #124]	; (80010d4 <main+0x188>)
 8001058:	f007 fd26 	bl	8008aa8 <osThreadNew>
 800105c:	4603      	mov	r3, r0
 800105e:	4a1e      	ldr	r2, [pc, #120]	; (80010d8 <main+0x18c>)
 8001060:	6013      	str	r3, [r2, #0]

  /* creation of batteryReader */
  batteryReaderHandle = osThreadNew(BatterReader_Task, NULL, &batteryReader_attributes);
 8001062:	4a1e      	ldr	r2, [pc, #120]	; (80010dc <main+0x190>)
 8001064:	2100      	movs	r1, #0
 8001066:	481e      	ldr	r0, [pc, #120]	; (80010e0 <main+0x194>)
 8001068:	f007 fd1e 	bl	8008aa8 <osThreadNew>
 800106c:	4603      	mov	r3, r0
 800106e:	4a1d      	ldr	r2, [pc, #116]	; (80010e4 <main+0x198>)
 8001070:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 8001072:	f007 fcf3 	bl	8008a5c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001076:	e7fe      	b.n	8001076 <main+0x12a>
 8001078:	20000564 	.word	0x20000564
 800107c:	200002b0 	.word	0x200002b0
 8001080:	20000550 	.word	0x20000550
 8001084:	20000424 	.word	0x20000424
 8001088:	200003dc 	.word	0x200003dc
 800108c:	20000304 	.word	0x20000304
 8001090:	2000034c 	.word	0x2000034c
 8001094:	20000394 	.word	0x20000394
 8001098:	2000049c 	.word	0x2000049c
 800109c:	200004d8 	.word	0x200004d8
 80010a0:	0800eb10 	.word	0x0800eb10
 80010a4:	08003131 	.word	0x08003131
 80010a8:	20000468 	.word	0x20000468
 80010ac:	0800eb34 	.word	0x0800eb34
 80010b0:	0800316d 	.word	0x0800316d
 80010b4:	2000046c 	.word	0x2000046c
 80010b8:	0800eb58 	.word	0x0800eb58
 80010bc:	080031f1 	.word	0x080031f1
 80010c0:	20000470 	.word	0x20000470
 80010c4:	0800eb7c 	.word	0x0800eb7c
 80010c8:	080034ad 	.word	0x080034ad
 80010cc:	20000474 	.word	0x20000474
 80010d0:	0800eba0 	.word	0x0800eba0
 80010d4:	08003735 	.word	0x08003735
 80010d8:	20000478 	.word	0x20000478
 80010dc:	0800ebc4 	.word	0x0800ebc4
 80010e0:	0800373f 	.word	0x0800373f
 80010e4:	2000047c 	.word	0x2000047c

080010e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b094      	sub	sp, #80	; 0x50
 80010ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80010ee:	f107 0320 	add.w	r3, r7, #32
 80010f2:	2230      	movs	r2, #48	; 0x30
 80010f4:	2100      	movs	r1, #0
 80010f6:	4618      	mov	r0, r3
 80010f8:	f00a fe23 	bl	800bd42 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80010fc:	f107 030c 	add.w	r3, r7, #12
 8001100:	2200      	movs	r2, #0
 8001102:	601a      	str	r2, [r3, #0]
 8001104:	605a      	str	r2, [r3, #4]
 8001106:	609a      	str	r2, [r3, #8]
 8001108:	60da      	str	r2, [r3, #12]
 800110a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800110c:	2300      	movs	r3, #0
 800110e:	60bb      	str	r3, [r7, #8]
 8001110:	4b22      	ldr	r3, [pc, #136]	; (800119c <SystemClock_Config+0xb4>)
 8001112:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001114:	4a21      	ldr	r2, [pc, #132]	; (800119c <SystemClock_Config+0xb4>)
 8001116:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800111a:	6413      	str	r3, [r2, #64]	; 0x40
 800111c:	4b1f      	ldr	r3, [pc, #124]	; (800119c <SystemClock_Config+0xb4>)
 800111e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001120:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001124:	60bb      	str	r3, [r7, #8]
 8001126:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001128:	2300      	movs	r3, #0
 800112a:	607b      	str	r3, [r7, #4]
 800112c:	4b1c      	ldr	r3, [pc, #112]	; (80011a0 <SystemClock_Config+0xb8>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	4a1b      	ldr	r2, [pc, #108]	; (80011a0 <SystemClock_Config+0xb8>)
 8001132:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001136:	6013      	str	r3, [r2, #0]
 8001138:	4b19      	ldr	r3, [pc, #100]	; (80011a0 <SystemClock_Config+0xb8>)
 800113a:	681b      	ldr	r3, [r3, #0]
 800113c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001144:	2302      	movs	r3, #2
 8001146:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001148:	2301      	movs	r3, #1
 800114a:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800114c:	2310      	movs	r3, #16
 800114e:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 8001150:	2300      	movs	r3, #0
 8001152:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001154:	f107 0320 	add.w	r3, r7, #32
 8001158:	4618      	mov	r0, r3
 800115a:	f004 fcf9 	bl	8005b50 <HAL_RCC_OscConfig>
 800115e:	4603      	mov	r3, r0
 8001160:	2b00      	cmp	r3, #0
 8001162:	d001      	beq.n	8001168 <SystemClock_Config+0x80>
  {
    Error_Handler();
 8001164:	f002 fb02 	bl	800376c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001168:	230f      	movs	r3, #15
 800116a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800116c:	2300      	movs	r3, #0
 800116e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001170:	2300      	movs	r3, #0
 8001172:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8001174:	2300      	movs	r3, #0
 8001176:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001178:	2300      	movs	r3, #0
 800117a:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 800117c:	f107 030c 	add.w	r3, r7, #12
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f004 ff5c 	bl	8006040 <HAL_RCC_ClockConfig>
 8001188:	4603      	mov	r3, r0
 800118a:	2b00      	cmp	r3, #0
 800118c:	d001      	beq.n	8001192 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 800118e:	f002 faed 	bl	800376c <Error_Handler>
  }
}
 8001192:	bf00      	nop
 8001194:	3750      	adds	r7, #80	; 0x50
 8001196:	46bd      	mov	sp, r7
 8001198:	bd80      	pop	{r7, pc}
 800119a:	bf00      	nop
 800119c:	40023800 	.word	0x40023800
 80011a0:	40007000 	.word	0x40007000

080011a4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80011a4:	b580      	push	{r7, lr}
 80011a6:	b084      	sub	sp, #16
 80011a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80011aa:	463b      	mov	r3, r7
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80011b6:	4b21      	ldr	r3, [pc, #132]	; (800123c <MX_ADC1_Init+0x98>)
 80011b8:	4a21      	ldr	r2, [pc, #132]	; (8001240 <MX_ADC1_Init+0x9c>)
 80011ba:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 80011bc:	4b1f      	ldr	r3, [pc, #124]	; (800123c <MX_ADC1_Init+0x98>)
 80011be:	2200      	movs	r2, #0
 80011c0:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80011c2:	4b1e      	ldr	r3, [pc, #120]	; (800123c <MX_ADC1_Init+0x98>)
 80011c4:	2200      	movs	r2, #0
 80011c6:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = DISABLE;
 80011c8:	4b1c      	ldr	r3, [pc, #112]	; (800123c <MX_ADC1_Init+0x98>)
 80011ca:	2200      	movs	r2, #0
 80011cc:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80011ce:	4b1b      	ldr	r3, [pc, #108]	; (800123c <MX_ADC1_Init+0x98>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80011d4:	4b19      	ldr	r3, [pc, #100]	; (800123c <MX_ADC1_Init+0x98>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80011dc:	4b17      	ldr	r3, [pc, #92]	; (800123c <MX_ADC1_Init+0x98>)
 80011de:	2200      	movs	r2, #0
 80011e0:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80011e2:	4b16      	ldr	r3, [pc, #88]	; (800123c <MX_ADC1_Init+0x98>)
 80011e4:	4a17      	ldr	r2, [pc, #92]	; (8001244 <MX_ADC1_Init+0xa0>)
 80011e6:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80011e8:	4b14      	ldr	r3, [pc, #80]	; (800123c <MX_ADC1_Init+0x98>)
 80011ea:	2200      	movs	r2, #0
 80011ec:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80011ee:	4b13      	ldr	r3, [pc, #76]	; (800123c <MX_ADC1_Init+0x98>)
 80011f0:	2201      	movs	r2, #1
 80011f2:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80011f4:	4b11      	ldr	r3, [pc, #68]	; (800123c <MX_ADC1_Init+0x98>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80011fc:	4b0f      	ldr	r3, [pc, #60]	; (800123c <MX_ADC1_Init+0x98>)
 80011fe:	2201      	movs	r2, #1
 8001200:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8001202:	480e      	ldr	r0, [pc, #56]	; (800123c <MX_ADC1_Init+0x98>)
 8001204:	f002 ff30 	bl	8004068 <HAL_ADC_Init>
 8001208:	4603      	mov	r3, r0
 800120a:	2b00      	cmp	r3, #0
 800120c:	d001      	beq.n	8001212 <MX_ADC1_Init+0x6e>
  {
    Error_Handler();
 800120e:	f002 faad 	bl	800376c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_10;
 8001212:	230a      	movs	r3, #10
 8001214:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 8001216:	2301      	movs	r3, #1
 8001218:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800121a:	2300      	movs	r3, #0
 800121c:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 800121e:	463b      	mov	r3, r7
 8001220:	4619      	mov	r1, r3
 8001222:	4806      	ldr	r0, [pc, #24]	; (800123c <MX_ADC1_Init+0x98>)
 8001224:	f002 ff64 	bl	80040f0 <HAL_ADC_ConfigChannel>
 8001228:	4603      	mov	r3, r0
 800122a:	2b00      	cmp	r3, #0
 800122c:	d001      	beq.n	8001232 <MX_ADC1_Init+0x8e>
  {
    Error_Handler();
 800122e:	f002 fa9d 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8001232:	bf00      	nop
 8001234:	3710      	adds	r7, #16
 8001236:	46bd      	mov	sp, r7
 8001238:	bd80      	pop	{r7, pc}
 800123a:	bf00      	nop
 800123c:	20000220 	.word	0x20000220
 8001240:	40012000 	.word	0x40012000
 8001244:	0f000001 	.word	0x0f000001

08001248 <MX_ADC2_Init>:
  * @brief ADC2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC2_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	b084      	sub	sp, #16
 800124c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800124e:	463b      	mov	r3, r7
 8001250:	2200      	movs	r2, #0
 8001252:	601a      	str	r2, [r3, #0]
 8001254:	605a      	str	r2, [r3, #4]
 8001256:	609a      	str	r2, [r3, #8]
 8001258:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 800125a:	4b21      	ldr	r3, [pc, #132]	; (80012e0 <MX_ADC2_Init+0x98>)
 800125c:	4a21      	ldr	r2, [pc, #132]	; (80012e4 <MX_ADC2_Init+0x9c>)
 800125e:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV2;
 8001260:	4b1f      	ldr	r3, [pc, #124]	; (80012e0 <MX_ADC2_Init+0x98>)
 8001262:	2200      	movs	r2, #0
 8001264:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8001266:	4b1e      	ldr	r3, [pc, #120]	; (80012e0 <MX_ADC2_Init+0x98>)
 8001268:	2200      	movs	r2, #0
 800126a:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = DISABLE;
 800126c:	4b1c      	ldr	r3, [pc, #112]	; (80012e0 <MX_ADC2_Init+0x98>)
 800126e:	2200      	movs	r2, #0
 8001270:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 8001272:	4b1b      	ldr	r3, [pc, #108]	; (80012e0 <MX_ADC2_Init+0x98>)
 8001274:	2200      	movs	r2, #0
 8001276:	761a      	strb	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8001278:	4b19      	ldr	r3, [pc, #100]	; (80012e0 <MX_ADC2_Init+0x98>)
 800127a:	2200      	movs	r2, #0
 800127c:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8001280:	4b17      	ldr	r3, [pc, #92]	; (80012e0 <MX_ADC2_Init+0x98>)
 8001282:	2200      	movs	r2, #0
 8001284:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8001286:	4b16      	ldr	r3, [pc, #88]	; (80012e0 <MX_ADC2_Init+0x98>)
 8001288:	4a17      	ldr	r2, [pc, #92]	; (80012e8 <MX_ADC2_Init+0xa0>)
 800128a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800128c:	4b14      	ldr	r3, [pc, #80]	; (80012e0 <MX_ADC2_Init+0x98>)
 800128e:	2200      	movs	r2, #0
 8001290:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 8001292:	4b13      	ldr	r3, [pc, #76]	; (80012e0 <MX_ADC2_Init+0x98>)
 8001294:	2201      	movs	r2, #1
 8001296:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 8001298:	4b11      	ldr	r3, [pc, #68]	; (80012e0 <MX_ADC2_Init+0x98>)
 800129a:	2200      	movs	r2, #0
 800129c:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80012a0:	4b0f      	ldr	r3, [pc, #60]	; (80012e0 <MX_ADC2_Init+0x98>)
 80012a2:	2201      	movs	r2, #1
 80012a4:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80012a6:	480e      	ldr	r0, [pc, #56]	; (80012e0 <MX_ADC2_Init+0x98>)
 80012a8:	f002 fede 	bl	8004068 <HAL_ADC_Init>
 80012ac:	4603      	mov	r3, r0
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d001      	beq.n	80012b6 <MX_ADC2_Init+0x6e>
  {
    Error_Handler();
 80012b2:	f002 fa5b 	bl	800376c <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80012b6:	230e      	movs	r3, #14
 80012b8:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80012ba:	2301      	movs	r3, #1
 80012bc:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80012be:	2300      	movs	r3, #0
 80012c0:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80012c2:	463b      	mov	r3, r7
 80012c4:	4619      	mov	r1, r3
 80012c6:	4806      	ldr	r0, [pc, #24]	; (80012e0 <MX_ADC2_Init+0x98>)
 80012c8:	f002 ff12 	bl	80040f0 <HAL_ADC_ConfigChannel>
 80012cc:	4603      	mov	r3, r0
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d001      	beq.n	80012d6 <MX_ADC2_Init+0x8e>
  {
    Error_Handler();
 80012d2:	f002 fa4b 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80012d6:	bf00      	nop
 80012d8:	3710      	adds	r7, #16
 80012da:	46bd      	mov	sp, r7
 80012dc:	bd80      	pop	{r7, pc}
 80012de:	bf00      	nop
 80012e0:	20000268 	.word	0x20000268
 80012e4:	40012100 	.word	0x40012100
 80012e8:	0f000001 	.word	0x0f000001

080012ec <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80012f0:	4b12      	ldr	r3, [pc, #72]	; (800133c <MX_I2C1_Init+0x50>)
 80012f2:	4a13      	ldr	r2, [pc, #76]	; (8001340 <MX_I2C1_Init+0x54>)
 80012f4:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80012f6:	4b11      	ldr	r3, [pc, #68]	; (800133c <MX_I2C1_Init+0x50>)
 80012f8:	4a12      	ldr	r2, [pc, #72]	; (8001344 <MX_I2C1_Init+0x58>)
 80012fa:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80012fc:	4b0f      	ldr	r3, [pc, #60]	; (800133c <MX_I2C1_Init+0x50>)
 80012fe:	2200      	movs	r2, #0
 8001300:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001302:	4b0e      	ldr	r3, [pc, #56]	; (800133c <MX_I2C1_Init+0x50>)
 8001304:	2200      	movs	r2, #0
 8001306:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001308:	4b0c      	ldr	r3, [pc, #48]	; (800133c <MX_I2C1_Init+0x50>)
 800130a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800130e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001310:	4b0a      	ldr	r3, [pc, #40]	; (800133c <MX_I2C1_Init+0x50>)
 8001312:	2200      	movs	r2, #0
 8001314:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001316:	4b09      	ldr	r3, [pc, #36]	; (800133c <MX_I2C1_Init+0x50>)
 8001318:	2200      	movs	r2, #0
 800131a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800131c:	4b07      	ldr	r3, [pc, #28]	; (800133c <MX_I2C1_Init+0x50>)
 800131e:	2200      	movs	r2, #0
 8001320:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001322:	4b06      	ldr	r3, [pc, #24]	; (800133c <MX_I2C1_Init+0x50>)
 8001324:	2200      	movs	r2, #0
 8001326:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001328:	4804      	ldr	r0, [pc, #16]	; (800133c <MX_I2C1_Init+0x50>)
 800132a:	f003 fc29 	bl	8004b80 <HAL_I2C_Init>
 800132e:	4603      	mov	r3, r0
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001334:	f002 fa1a 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001338:	bf00      	nop
 800133a:	bd80      	pop	{r7, pc}
 800133c:	200002b0 	.word	0x200002b0
 8001340:	40005400 	.word	0x40005400
 8001344:	000186a0 	.word	0x000186a0

08001348 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b096      	sub	sp, #88	; 0x58
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001360:	2200      	movs	r2, #0
 8001362:	601a      	str	r2, [r3, #0]
 8001364:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001366:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]
 8001370:	609a      	str	r2, [r3, #8]
 8001372:	60da      	str	r2, [r3, #12]
 8001374:	611a      	str	r2, [r3, #16]
 8001376:	615a      	str	r2, [r3, #20]
 8001378:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 800137a:	1d3b      	adds	r3, r7, #4
 800137c:	2220      	movs	r2, #32
 800137e:	2100      	movs	r1, #0
 8001380:	4618      	mov	r0, r3
 8001382:	f00a fcde 	bl	800bd42 <memset>

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 8001386:	4b3d      	ldr	r3, [pc, #244]	; (800147c <MX_TIM1_Init+0x134>)
 8001388:	4a3d      	ldr	r2, [pc, #244]	; (8001480 <MX_TIM1_Init+0x138>)
 800138a:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 160;
 800138c:	4b3b      	ldr	r3, [pc, #236]	; (800147c <MX_TIM1_Init+0x134>)
 800138e:	22a0      	movs	r2, #160	; 0xa0
 8001390:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001392:	4b3a      	ldr	r3, [pc, #232]	; (800147c <MX_TIM1_Init+0x134>)
 8001394:	2200      	movs	r2, #0
 8001396:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 1000;
 8001398:	4b38      	ldr	r3, [pc, #224]	; (800147c <MX_TIM1_Init+0x134>)
 800139a:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800139e:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a0:	4b36      	ldr	r3, [pc, #216]	; (800147c <MX_TIM1_Init+0x134>)
 80013a2:	2200      	movs	r2, #0
 80013a4:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80013a6:	4b35      	ldr	r3, [pc, #212]	; (800147c <MX_TIM1_Init+0x134>)
 80013a8:	2200      	movs	r2, #0
 80013aa:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80013ac:	4b33      	ldr	r3, [pc, #204]	; (800147c <MX_TIM1_Init+0x134>)
 80013ae:	2280      	movs	r2, #128	; 0x80
 80013b0:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim1) != HAL_OK)
 80013b2:	4832      	ldr	r0, [pc, #200]	; (800147c <MX_TIM1_Init+0x134>)
 80013b4:	f005 f856 	bl	8006464 <HAL_TIM_Base_Init>
 80013b8:	4603      	mov	r3, r0
 80013ba:	2b00      	cmp	r3, #0
 80013bc:	d001      	beq.n	80013c2 <MX_TIM1_Init+0x7a>
  {
    Error_Handler();
 80013be:	f002 f9d5 	bl	800376c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c2:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c6:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim1, &sClockSourceConfig) != HAL_OK)
 80013c8:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80013cc:	4619      	mov	r1, r3
 80013ce:	482b      	ldr	r0, [pc, #172]	; (800147c <MX_TIM1_Init+0x134>)
 80013d0:	f005 fd48 	bl	8006e64 <HAL_TIM_ConfigClockSource>
 80013d4:	4603      	mov	r3, r0
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d001      	beq.n	80013de <MX_TIM1_Init+0x96>
  {
    Error_Handler();
 80013da:	f002 f9c7 	bl	800376c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim1) != HAL_OK)
 80013de:	4827      	ldr	r0, [pc, #156]	; (800147c <MX_TIM1_Init+0x134>)
 80013e0:	f005 f900 	bl	80065e4 <HAL_TIM_PWM_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM1_Init+0xa6>
  {
    Error_Handler();
 80013ea:	f002 f9bf 	bl	800376c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013ee:	2300      	movs	r3, #0
 80013f0:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013f2:	2300      	movs	r3, #0
 80013f4:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80013f6:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80013fa:	4619      	mov	r1, r3
 80013fc:	481f      	ldr	r0, [pc, #124]	; (800147c <MX_TIM1_Init+0x134>)
 80013fe:	f006 f96b 	bl	80076d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	d001      	beq.n	800140c <MX_TIM1_Init+0xc4>
  {
    Error_Handler();
 8001408:	f002 f9b0 	bl	800376c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800140c:	2360      	movs	r3, #96	; 0x60
 800140e:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 8001410:	2300      	movs	r3, #0
 8001412:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001414:	2300      	movs	r3, #0
 8001416:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001418:	2300      	movs	r3, #0
 800141a:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 800141c:	2300      	movs	r3, #0
 800141e:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 8001420:	2300      	movs	r3, #0
 8001422:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim1, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 8001424:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8001428:	220c      	movs	r2, #12
 800142a:	4619      	mov	r1, r3
 800142c:	4813      	ldr	r0, [pc, #76]	; (800147c <MX_TIM1_Init+0x134>)
 800142e:	f005 fc57 	bl	8006ce0 <HAL_TIM_PWM_ConfigChannel>
 8001432:	4603      	mov	r3, r0
 8001434:	2b00      	cmp	r3, #0
 8001436:	d001      	beq.n	800143c <MX_TIM1_Init+0xf4>
  {
    Error_Handler();
 8001438:	f002 f998 	bl	800376c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 800143c:	2300      	movs	r3, #0
 800143e:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 8001440:	2300      	movs	r3, #0
 8001442:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 8001444:	2300      	movs	r3, #0
 8001446:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 8001448:	2300      	movs	r3, #0
 800144a:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 800144c:	2300      	movs	r3, #0
 800144e:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 8001450:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001454:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 8001456:	2300      	movs	r3, #0
 8001458:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim1, &sBreakDeadTimeConfig) != HAL_OK)
 800145a:	1d3b      	adds	r3, r7, #4
 800145c:	4619      	mov	r1, r3
 800145e:	4807      	ldr	r0, [pc, #28]	; (800147c <MX_TIM1_Init+0x134>)
 8001460:	f006 f9b6 	bl	80077d0 <HAL_TIMEx_ConfigBreakDeadTime>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM1_Init+0x126>
  {
    Error_Handler();
 800146a:	f002 f97f 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */
  HAL_TIM_MspPostInit(&htim1);
 800146e:	4803      	ldr	r0, [pc, #12]	; (800147c <MX_TIM1_Init+0x134>)
 8001470:	f002 fb62 	bl	8003b38 <HAL_TIM_MspPostInit>

}
 8001474:	bf00      	nop
 8001476:	3758      	adds	r7, #88	; 0x58
 8001478:	46bd      	mov	sp, r7
 800147a:	bd80      	pop	{r7, pc}
 800147c:	20000304 	.word	0x20000304
 8001480:	40010000 	.word	0x40010000

08001484 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001484:	b580      	push	{r7, lr}
 8001486:	b08c      	sub	sp, #48	; 0x30
 8001488:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800148a:	f107 030c 	add.w	r3, r7, #12
 800148e:	2224      	movs	r2, #36	; 0x24
 8001490:	2100      	movs	r1, #0
 8001492:	4618      	mov	r0, r3
 8001494:	f00a fc55 	bl	800bd42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001498:	1d3b      	adds	r3, r7, #4
 800149a:	2200      	movs	r2, #0
 800149c:	601a      	str	r2, [r3, #0]
 800149e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80014a0:	4b21      	ldr	r3, [pc, #132]	; (8001528 <MX_TIM2_Init+0xa4>)
 80014a2:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80014a6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 80014a8:	4b1f      	ldr	r3, [pc, #124]	; (8001528 <MX_TIM2_Init+0xa4>)
 80014aa:	2200      	movs	r2, #0
 80014ac:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80014ae:	4b1e      	ldr	r3, [pc, #120]	; (8001528 <MX_TIM2_Init+0xa4>)
 80014b0:	2200      	movs	r2, #0
 80014b2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80014b4:	4b1c      	ldr	r3, [pc, #112]	; (8001528 <MX_TIM2_Init+0xa4>)
 80014b6:	f04f 32ff 	mov.w	r2, #4294967295
 80014ba:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80014bc:	4b1a      	ldr	r3, [pc, #104]	; (8001528 <MX_TIM2_Init+0xa4>)
 80014be:	2200      	movs	r2, #0
 80014c0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80014c2:	4b19      	ldr	r3, [pc, #100]	; (8001528 <MX_TIM2_Init+0xa4>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80014c8:	2303      	movs	r3, #3
 80014ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80014cc:	2300      	movs	r3, #0
 80014ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80014d0:	2301      	movs	r3, #1
 80014d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80014d4:	2300      	movs	r3, #0
 80014d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 10;
 80014d8:	230a      	movs	r3, #10
 80014da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80014dc:	2300      	movs	r3, #0
 80014de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80014e0:	2301      	movs	r3, #1
 80014e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80014e4:	2300      	movs	r3, #0
 80014e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 10;
 80014e8:	230a      	movs	r3, #10
 80014ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim2, &sConfig) != HAL_OK)
 80014ec:	f107 030c 	add.w	r3, r7, #12
 80014f0:	4619      	mov	r1, r3
 80014f2:	480d      	ldr	r0, [pc, #52]	; (8001528 <MX_TIM2_Init+0xa4>)
 80014f4:	f005 f998 	bl	8006828 <HAL_TIM_Encoder_Init>
 80014f8:	4603      	mov	r3, r0
 80014fa:	2b00      	cmp	r3, #0
 80014fc:	d001      	beq.n	8001502 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80014fe:	f002 f935 	bl	800376c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001502:	2300      	movs	r3, #0
 8001504:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001506:	2300      	movs	r3, #0
 8001508:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800150a:	1d3b      	adds	r3, r7, #4
 800150c:	4619      	mov	r1, r3
 800150e:	4806      	ldr	r0, [pc, #24]	; (8001528 <MX_TIM2_Init+0xa4>)
 8001510:	f006 f8e2 	bl	80076d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_TIM2_Init+0x9a>
  {
    Error_Handler();
 800151a:	f002 f927 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	3730      	adds	r7, #48	; 0x30
 8001522:	46bd      	mov	sp, r7
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	2000034c 	.word	0x2000034c

0800152c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	b08c      	sub	sp, #48	; 0x30
 8001530:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001532:	f107 030c 	add.w	r3, r7, #12
 8001536:	2224      	movs	r2, #36	; 0x24
 8001538:	2100      	movs	r1, #0
 800153a:	4618      	mov	r0, r3
 800153c:	f00a fc01 	bl	800bd42 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001540:	1d3b      	adds	r3, r7, #4
 8001542:	2200      	movs	r2, #0
 8001544:	601a      	str	r2, [r3, #0]
 8001546:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001548:	4b20      	ldr	r3, [pc, #128]	; (80015cc <MX_TIM3_Init+0xa0>)
 800154a:	4a21      	ldr	r2, [pc, #132]	; (80015d0 <MX_TIM3_Init+0xa4>)
 800154c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800154e:	4b1f      	ldr	r3, [pc, #124]	; (80015cc <MX_TIM3_Init+0xa0>)
 8001550:	2200      	movs	r2, #0
 8001552:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001554:	4b1d      	ldr	r3, [pc, #116]	; (80015cc <MX_TIM3_Init+0xa0>)
 8001556:	2200      	movs	r2, #0
 8001558:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800155a:	4b1c      	ldr	r3, [pc, #112]	; (80015cc <MX_TIM3_Init+0xa0>)
 800155c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8001560:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001562:	4b1a      	ldr	r3, [pc, #104]	; (80015cc <MX_TIM3_Init+0xa0>)
 8001564:	2200      	movs	r2, #0
 8001566:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001568:	4b18      	ldr	r3, [pc, #96]	; (80015cc <MX_TIM3_Init+0xa0>)
 800156a:	2200      	movs	r2, #0
 800156c:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 800156e:	2303      	movs	r3, #3
 8001570:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 8001572:	2300      	movs	r3, #0
 8001574:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001576:	2301      	movs	r3, #1
 8001578:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 800157a:	2300      	movs	r3, #0
 800157c:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 800157e:	2300      	movs	r3, #0
 8001580:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001582:	2300      	movs	r3, #0
 8001584:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001586:	2301      	movs	r3, #1
 8001588:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 800158a:	2300      	movs	r3, #0
 800158c:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 800158e:	2300      	movs	r3, #0
 8001590:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim3, &sConfig) != HAL_OK)
 8001592:	f107 030c 	add.w	r3, r7, #12
 8001596:	4619      	mov	r1, r3
 8001598:	480c      	ldr	r0, [pc, #48]	; (80015cc <MX_TIM3_Init+0xa0>)
 800159a:	f005 f945 	bl	8006828 <HAL_TIM_Encoder_Init>
 800159e:	4603      	mov	r3, r0
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <MX_TIM3_Init+0x7c>
  {
    Error_Handler();
 80015a4:	f002 f8e2 	bl	800376c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80015a8:	2300      	movs	r3, #0
 80015aa:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80015ac:	2300      	movs	r3, #0
 80015ae:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80015b0:	1d3b      	adds	r3, r7, #4
 80015b2:	4619      	mov	r1, r3
 80015b4:	4805      	ldr	r0, [pc, #20]	; (80015cc <MX_TIM3_Init+0xa0>)
 80015b6:	f006 f88f 	bl	80076d8 <HAL_TIMEx_MasterConfigSynchronization>
 80015ba:	4603      	mov	r3, r0
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d001      	beq.n	80015c4 <MX_TIM3_Init+0x98>
  {
    Error_Handler();
 80015c0:	f002 f8d4 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80015c4:	bf00      	nop
 80015c6:	3730      	adds	r7, #48	; 0x30
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bd80      	pop	{r7, pc}
 80015cc:	20000394 	.word	0x20000394
 80015d0:	40000400 	.word	0x40000400

080015d4 <MX_TIM8_Init>:
  * @brief TIM8 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM8_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b096      	sub	sp, #88	; 0x58
 80015d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM8_Init 0 */

  /* USER CODE END TIM8_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80015da:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80015e8:	f107 0340 	add.w	r3, r7, #64	; 0x40
 80015ec:	2200      	movs	r2, #0
 80015ee:	601a      	str	r2, [r3, #0]
 80015f0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80015f2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80015f6:	2200      	movs	r2, #0
 80015f8:	601a      	str	r2, [r3, #0]
 80015fa:	605a      	str	r2, [r3, #4]
 80015fc:	609a      	str	r2, [r3, #8]
 80015fe:	60da      	str	r2, [r3, #12]
 8001600:	611a      	str	r2, [r3, #16]
 8001602:	615a      	str	r2, [r3, #20]
 8001604:	619a      	str	r2, [r3, #24]
  TIM_BreakDeadTimeConfigTypeDef sBreakDeadTimeConfig = {0};
 8001606:	1d3b      	adds	r3, r7, #4
 8001608:	2220      	movs	r2, #32
 800160a:	2100      	movs	r1, #0
 800160c:	4618      	mov	r0, r3
 800160e:	f00a fb98 	bl	800bd42 <memset>

  /* USER CODE BEGIN TIM8_Init 1 */

  /* USER CODE END TIM8_Init 1 */
  htim8.Instance = TIM8;
 8001612:	4b43      	ldr	r3, [pc, #268]	; (8001720 <MX_TIM8_Init+0x14c>)
 8001614:	4a43      	ldr	r2, [pc, #268]	; (8001724 <MX_TIM8_Init+0x150>)
 8001616:	601a      	str	r2, [r3, #0]
  htim8.Init.Prescaler = 0;
 8001618:	4b41      	ldr	r3, [pc, #260]	; (8001720 <MX_TIM8_Init+0x14c>)
 800161a:	2200      	movs	r2, #0
 800161c:	605a      	str	r2, [r3, #4]
  htim8.Init.CounterMode = TIM_COUNTERMODE_UP;
 800161e:	4b40      	ldr	r3, [pc, #256]	; (8001720 <MX_TIM8_Init+0x14c>)
 8001620:	2200      	movs	r2, #0
 8001622:	609a      	str	r2, [r3, #8]
  htim8.Init.Period = 7199;
 8001624:	4b3e      	ldr	r3, [pc, #248]	; (8001720 <MX_TIM8_Init+0x14c>)
 8001626:	f641 421f 	movw	r2, #7199	; 0x1c1f
 800162a:	60da      	str	r2, [r3, #12]
  htim8.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800162c:	4b3c      	ldr	r3, [pc, #240]	; (8001720 <MX_TIM8_Init+0x14c>)
 800162e:	2200      	movs	r2, #0
 8001630:	611a      	str	r2, [r3, #16]
  htim8.Init.RepetitionCounter = 0;
 8001632:	4b3b      	ldr	r3, [pc, #236]	; (8001720 <MX_TIM8_Init+0x14c>)
 8001634:	2200      	movs	r2, #0
 8001636:	615a      	str	r2, [r3, #20]
  htim8.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001638:	4b39      	ldr	r3, [pc, #228]	; (8001720 <MX_TIM8_Init+0x14c>)
 800163a:	2200      	movs	r2, #0
 800163c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim8) != HAL_OK)
 800163e:	4838      	ldr	r0, [pc, #224]	; (8001720 <MX_TIM8_Init+0x14c>)
 8001640:	f004 ff10 	bl	8006464 <HAL_TIM_Base_Init>
 8001644:	4603      	mov	r3, r0
 8001646:	2b00      	cmp	r3, #0
 8001648:	d001      	beq.n	800164e <MX_TIM8_Init+0x7a>
  {
    Error_Handler();
 800164a:	f002 f88f 	bl	800376c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800164e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001652:	64bb      	str	r3, [r7, #72]	; 0x48
  if (HAL_TIM_ConfigClockSource(&htim8, &sClockSourceConfig) != HAL_OK)
 8001654:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8001658:	4619      	mov	r1, r3
 800165a:	4831      	ldr	r0, [pc, #196]	; (8001720 <MX_TIM8_Init+0x14c>)
 800165c:	f005 fc02 	bl	8006e64 <HAL_TIM_ConfigClockSource>
 8001660:	4603      	mov	r3, r0
 8001662:	2b00      	cmp	r3, #0
 8001664:	d001      	beq.n	800166a <MX_TIM8_Init+0x96>
  {
    Error_Handler();
 8001666:	f002 f881 	bl	800376c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim8) != HAL_OK)
 800166a:	482d      	ldr	r0, [pc, #180]	; (8001720 <MX_TIM8_Init+0x14c>)
 800166c:	f004 ffba 	bl	80065e4 <HAL_TIM_PWM_Init>
 8001670:	4603      	mov	r3, r0
 8001672:	2b00      	cmp	r3, #0
 8001674:	d001      	beq.n	800167a <MX_TIM8_Init+0xa6>
  {
    Error_Handler();
 8001676:	f002 f879 	bl	800376c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800167a:	2300      	movs	r3, #0
 800167c:	643b      	str	r3, [r7, #64]	; 0x40
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800167e:	2300      	movs	r3, #0
 8001680:	647b      	str	r3, [r7, #68]	; 0x44
  if (HAL_TIMEx_MasterConfigSynchronization(&htim8, &sMasterConfig) != HAL_OK)
 8001682:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8001686:	4619      	mov	r1, r3
 8001688:	4825      	ldr	r0, [pc, #148]	; (8001720 <MX_TIM8_Init+0x14c>)
 800168a:	f006 f825 	bl	80076d8 <HAL_TIMEx_MasterConfigSynchronization>
 800168e:	4603      	mov	r3, r0
 8001690:	2b00      	cmp	r3, #0
 8001692:	d001      	beq.n	8001698 <MX_TIM8_Init+0xc4>
  {
    Error_Handler();
 8001694:	f002 f86a 	bl	800376c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001698:	2360      	movs	r3, #96	; 0x60
 800169a:	627b      	str	r3, [r7, #36]	; 0x24
  sConfigOC.Pulse = 0;
 800169c:	2300      	movs	r3, #0
 800169e:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80016a0:	2300      	movs	r3, #0
 80016a2:	62fb      	str	r3, [r7, #44]	; 0x2c
  sConfigOC.OCNPolarity = TIM_OCNPOLARITY_HIGH;
 80016a4:	2300      	movs	r3, #0
 80016a6:	633b      	str	r3, [r7, #48]	; 0x30
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80016a8:	2300      	movs	r3, #0
 80016aa:	637b      	str	r3, [r7, #52]	; 0x34
  sConfigOC.OCIdleState = TIM_OCIDLESTATE_RESET;
 80016ac:	2300      	movs	r3, #0
 80016ae:	63bb      	str	r3, [r7, #56]	; 0x38
  sConfigOC.OCNIdleState = TIM_OCNIDLESTATE_RESET;
 80016b0:	2300      	movs	r3, #0
 80016b2:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80016b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016b8:	2200      	movs	r2, #0
 80016ba:	4619      	mov	r1, r3
 80016bc:	4818      	ldr	r0, [pc, #96]	; (8001720 <MX_TIM8_Init+0x14c>)
 80016be:	f005 fb0f 	bl	8006ce0 <HAL_TIM_PWM_ConfigChannel>
 80016c2:	4603      	mov	r3, r0
 80016c4:	2b00      	cmp	r3, #0
 80016c6:	d001      	beq.n	80016cc <MX_TIM8_Init+0xf8>
  {
    Error_Handler();
 80016c8:	f002 f850 	bl	800376c <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim8, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 80016cc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80016d0:	2204      	movs	r2, #4
 80016d2:	4619      	mov	r1, r3
 80016d4:	4812      	ldr	r0, [pc, #72]	; (8001720 <MX_TIM8_Init+0x14c>)
 80016d6:	f005 fb03 	bl	8006ce0 <HAL_TIM_PWM_ConfigChannel>
 80016da:	4603      	mov	r3, r0
 80016dc:	2b00      	cmp	r3, #0
 80016de:	d001      	beq.n	80016e4 <MX_TIM8_Init+0x110>
  {
    Error_Handler();
 80016e0:	f002 f844 	bl	800376c <Error_Handler>
  }
  sBreakDeadTimeConfig.OffStateRunMode = TIM_OSSR_DISABLE;
 80016e4:	2300      	movs	r3, #0
 80016e6:	607b      	str	r3, [r7, #4]
  sBreakDeadTimeConfig.OffStateIDLEMode = TIM_OSSI_DISABLE;
 80016e8:	2300      	movs	r3, #0
 80016ea:	60bb      	str	r3, [r7, #8]
  sBreakDeadTimeConfig.LockLevel = TIM_LOCKLEVEL_OFF;
 80016ec:	2300      	movs	r3, #0
 80016ee:	60fb      	str	r3, [r7, #12]
  sBreakDeadTimeConfig.DeadTime = 0;
 80016f0:	2300      	movs	r3, #0
 80016f2:	613b      	str	r3, [r7, #16]
  sBreakDeadTimeConfig.BreakState = TIM_BREAK_DISABLE;
 80016f4:	2300      	movs	r3, #0
 80016f6:	617b      	str	r3, [r7, #20]
  sBreakDeadTimeConfig.BreakPolarity = TIM_BREAKPOLARITY_HIGH;
 80016f8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80016fc:	61bb      	str	r3, [r7, #24]
  sBreakDeadTimeConfig.AutomaticOutput = TIM_AUTOMATICOUTPUT_DISABLE;
 80016fe:	2300      	movs	r3, #0
 8001700:	623b      	str	r3, [r7, #32]
  if (HAL_TIMEx_ConfigBreakDeadTime(&htim8, &sBreakDeadTimeConfig) != HAL_OK)
 8001702:	1d3b      	adds	r3, r7, #4
 8001704:	4619      	mov	r1, r3
 8001706:	4806      	ldr	r0, [pc, #24]	; (8001720 <MX_TIM8_Init+0x14c>)
 8001708:	f006 f862 	bl	80077d0 <HAL_TIMEx_ConfigBreakDeadTime>
 800170c:	4603      	mov	r3, r0
 800170e:	2b00      	cmp	r3, #0
 8001710:	d001      	beq.n	8001716 <MX_TIM8_Init+0x142>
  {
    Error_Handler();
 8001712:	f002 f82b 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN TIM8_Init 2 */

  /* USER CODE END TIM8_Init 2 */

}
 8001716:	bf00      	nop
 8001718:	3758      	adds	r7, #88	; 0x58
 800171a:	46bd      	mov	sp, r7
 800171c:	bd80      	pop	{r7, pc}
 800171e:	bf00      	nop
 8001720:	200003dc 	.word	0x200003dc
 8001724:	40010400 	.word	0x40010400

08001728 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001728:	b580      	push	{r7, lr}
 800172a:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_USART3_UART_Init+0x4c>)
 800172e:	4a12      	ldr	r2, [pc, #72]	; (8001778 <MX_USART3_UART_Init+0x50>)
 8001730:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 8001732:	4b10      	ldr	r3, [pc, #64]	; (8001774 <MX_USART3_UART_Init+0x4c>)
 8001734:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001738:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_USART3_UART_Init+0x4c>)
 800173c:	2200      	movs	r2, #0
 800173e:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_USART3_UART_Init+0x4c>)
 8001742:	2200      	movs	r2, #0
 8001744:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_USART3_UART_Init+0x4c>)
 8001748:	2200      	movs	r2, #0
 800174a:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_USART3_UART_Init+0x4c>)
 800174e:	220c      	movs	r2, #12
 8001750:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_USART3_UART_Init+0x4c>)
 8001754:	2200      	movs	r2, #0
 8001756:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_USART3_UART_Init+0x4c>)
 800175a:	2200      	movs	r2, #0
 800175c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_USART3_UART_Init+0x4c>)
 8001760:	f006 f89c 	bl	800789c <HAL_UART_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800176a:	f001 ffff 	bl	800376c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000424 	.word	0x20000424
 8001778:	40004800 	.word	0x40004800

0800177c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b08a      	sub	sp, #40	; 0x28
 8001780:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001782:	f107 0314 	add.w	r3, r7, #20
 8001786:	2200      	movs	r2, #0
 8001788:	601a      	str	r2, [r3, #0]
 800178a:	605a      	str	r2, [r3, #4]
 800178c:	609a      	str	r2, [r3, #8]
 800178e:	60da      	str	r2, [r3, #12]
 8001790:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8001792:	2300      	movs	r3, #0
 8001794:	613b      	str	r3, [r7, #16]
 8001796:	4b3b      	ldr	r3, [pc, #236]	; (8001884 <MX_GPIO_Init+0x108>)
 8001798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800179a:	4a3a      	ldr	r2, [pc, #232]	; (8001884 <MX_GPIO_Init+0x108>)
 800179c:	f043 0310 	orr.w	r3, r3, #16
 80017a0:	6313      	str	r3, [r2, #48]	; 0x30
 80017a2:	4b38      	ldr	r3, [pc, #224]	; (8001884 <MX_GPIO_Init+0x108>)
 80017a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017a6:	f003 0310 	and.w	r3, r3, #16
 80017aa:	613b      	str	r3, [r7, #16]
 80017ac:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80017ae:	2300      	movs	r3, #0
 80017b0:	60fb      	str	r3, [r7, #12]
 80017b2:	4b34      	ldr	r3, [pc, #208]	; (8001884 <MX_GPIO_Init+0x108>)
 80017b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017b6:	4a33      	ldr	r2, [pc, #204]	; (8001884 <MX_GPIO_Init+0x108>)
 80017b8:	f043 0304 	orr.w	r3, r3, #4
 80017bc:	6313      	str	r3, [r2, #48]	; 0x30
 80017be:	4b31      	ldr	r3, [pc, #196]	; (8001884 <MX_GPIO_Init+0x108>)
 80017c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017c2:	f003 0304 	and.w	r3, r3, #4
 80017c6:	60fb      	str	r3, [r7, #12]
 80017c8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80017ca:	2300      	movs	r3, #0
 80017cc:	60bb      	str	r3, [r7, #8]
 80017ce:	4b2d      	ldr	r3, [pc, #180]	; (8001884 <MX_GPIO_Init+0x108>)
 80017d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017d2:	4a2c      	ldr	r2, [pc, #176]	; (8001884 <MX_GPIO_Init+0x108>)
 80017d4:	f043 0301 	orr.w	r3, r3, #1
 80017d8:	6313      	str	r3, [r2, #48]	; 0x30
 80017da:	4b2a      	ldr	r3, [pc, #168]	; (8001884 <MX_GPIO_Init+0x108>)
 80017dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017de:	f003 0301 	and.w	r3, r3, #1
 80017e2:	60bb      	str	r3, [r7, #8]
 80017e4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80017e6:	2300      	movs	r3, #0
 80017e8:	607b      	str	r3, [r7, #4]
 80017ea:	4b26      	ldr	r3, [pc, #152]	; (8001884 <MX_GPIO_Init+0x108>)
 80017ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017ee:	4a25      	ldr	r2, [pc, #148]	; (8001884 <MX_GPIO_Init+0x108>)
 80017f0:	f043 0302 	orr.w	r3, r3, #2
 80017f4:	6313      	str	r3, [r2, #48]	; 0x30
 80017f6:	4b23      	ldr	r3, [pc, #140]	; (8001884 <MX_GPIO_Init+0x108>)
 80017f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80017fa:	f003 0302 	and.w	r3, r3, #2
 80017fe:	607b      	str	r3, [r7, #4]
 8001800:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001802:	2200      	movs	r2, #0
 8001804:	f44f 61fc 	mov.w	r1, #2016	; 0x7e0
 8001808:	481f      	ldr	r0, [pc, #124]	; (8001888 <MX_GPIO_Init+0x10c>)
 800180a:	f003 f99f 	bl	8004b4c <HAL_GPIO_WritePin>
                          |TRIG_Pin|LED3_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin, GPIO_PIN_RESET);
 800180e:	2200      	movs	r2, #0
 8001810:	213c      	movs	r1, #60	; 0x3c
 8001812:	481e      	ldr	r0, [pc, #120]	; (800188c <MX_GPIO_Init+0x110>)
 8001814:	f003 f99a 	bl	8004b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Buzzer_GPIO_Port, Buzzer_Pin, GPIO_PIN_RESET);
 8001818:	2200      	movs	r2, #0
 800181a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800181e:	481c      	ldr	r0, [pc, #112]	; (8001890 <MX_GPIO_Init+0x114>)
 8001820:	f003 f994 	bl	8004b4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : OLED_SCL_Pin OLED_SDA_Pin OLED_RST_Pin OLED_DC_Pin
                           TRIG_Pin LED3_Pin */
  GPIO_InitStruct.Pin = OLED_SCL_Pin|OLED_SDA_Pin|OLED_RST_Pin|OLED_DC_Pin
 8001824:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8001828:	617b      	str	r3, [r7, #20]
                          |TRIG_Pin|LED3_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800182a:	2301      	movs	r3, #1
 800182c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800182e:	2300      	movs	r3, #0
 8001830:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001832:	2300      	movs	r3, #0
 8001834:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001836:	f107 0314 	add.w	r3, r7, #20
 800183a:	4619      	mov	r1, r3
 800183c:	4812      	ldr	r0, [pc, #72]	; (8001888 <MX_GPIO_Init+0x10c>)
 800183e:	f002 ffe9 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pins : AIN2_Pin AIN1_Pin BIN1_Pin BIN2_Pin */
  GPIO_InitStruct.Pin = AIN2_Pin|AIN1_Pin|BIN1_Pin|BIN2_Pin;
 8001842:	233c      	movs	r3, #60	; 0x3c
 8001844:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001846:	2301      	movs	r3, #1
 8001848:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800184a:	2300      	movs	r3, #0
 800184c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 800184e:	2302      	movs	r3, #2
 8001850:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001852:	f107 0314 	add.w	r3, r7, #20
 8001856:	4619      	mov	r1, r3
 8001858:	480c      	ldr	r0, [pc, #48]	; (800188c <MX_GPIO_Init+0x110>)
 800185a:	f002 ffdb 	bl	8004814 <HAL_GPIO_Init>

  /*Configure GPIO pin : Buzzer_Pin */
  GPIO_InitStruct.Pin = Buzzer_Pin;
 800185e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001862:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001864:	2301      	movs	r3, #1
 8001866:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001868:	2300      	movs	r3, #0
 800186a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800186c:	2300      	movs	r3, #0
 800186e:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(Buzzer_GPIO_Port, &GPIO_InitStruct);
 8001870:	f107 0314 	add.w	r3, r7, #20
 8001874:	4619      	mov	r1, r3
 8001876:	4806      	ldr	r0, [pc, #24]	; (8001890 <MX_GPIO_Init+0x114>)
 8001878:	f002 ffcc 	bl	8004814 <HAL_GPIO_Init>

}
 800187c:	bf00      	nop
 800187e:	3728      	adds	r7, #40	; 0x28
 8001880:	46bd      	mov	sp, r7
 8001882:	bd80      	pop	{r7, pc}
 8001884:	40023800 	.word	0x40023800
 8001888:	40021000 	.word	0x40021000
 800188c:	40020000 	.word	0x40020000
 8001890:	40020400 	.word	0x40020400

08001894 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b084      	sub	sp, #16
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
	/*Prevent unused argument(s) compliation warning */
	UNUSED(huart);
	int val = 0;
 800189c:	2300      	movs	r3, #0
 800189e:	60fb      	str	r3, [r7, #12]

	val = ((aRxBuffer[2] - '0') * 100 + (aRxBuffer[3] - '0') * 10 + (aRxBuffer[4] - '0'));
 80018a0:	4b8e      	ldr	r3, [pc, #568]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80018a2:	789b      	ldrb	r3, [r3, #2]
 80018a4:	3b30      	subs	r3, #48	; 0x30
 80018a6:	2264      	movs	r2, #100	; 0x64
 80018a8:	fb02 f103 	mul.w	r1, r2, r3
 80018ac:	4b8b      	ldr	r3, [pc, #556]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80018ae:	78db      	ldrb	r3, [r3, #3]
 80018b0:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
 80018b4:	4613      	mov	r3, r2
 80018b6:	009b      	lsls	r3, r3, #2
 80018b8:	4413      	add	r3, r2
 80018ba:	005b      	lsls	r3, r3, #1
 80018bc:	18ca      	adds	r2, r1, r3
 80018be:	4b87      	ldr	r3, [pc, #540]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80018c0:	791b      	ldrb	r3, [r3, #4]
 80018c2:	3b30      	subs	r3, #48	; 0x30
 80018c4:	4413      	add	r3, r2
 80018c6:	60fb      	str	r3, [r7, #12]

	if (aRxBuffer[0] == 'S' && aRxBuffer[1] == 'T') { // only STOP can preempt any greedy task
 80018c8:	4b84      	ldr	r3, [pc, #528]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80018ca:	781b      	ldrb	r3, [r3, #0]
 80018cc:	2b53      	cmp	r3, #83	; 0x53
 80018ce:	d115      	bne.n	80018fc <HAL_UART_RxCpltCallback+0x68>
 80018d0:	4b82      	ldr	r3, [pc, #520]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80018d2:	785b      	ldrb	r3, [r3, #1]
 80018d4:	2b54      	cmp	r3, #84	; 0x54
 80018d6:	d111      	bne.n	80018fc <HAL_UART_RxCpltCallback+0x68>
		Task_END();
 80018d8:	f001 fba2 	bl	8003020 <Task_END>
		manualMode = 0;
 80018dc:	4b80      	ldr	r3, [pc, #512]	; (8001ae0 <HAL_UART_RxCpltCallback+0x24c>)
 80018de:	2200      	movs	r2, #0
 80018e0:	701a      	strb	r2, [r3, #0]

		if (CommandQueue_IsEmpty(&commandQueue)) {
 80018e2:	4880      	ldr	r0, [pc, #512]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 80018e4:	f001 fb02 	bl	8002eec <CommandQueue_IsEmpty>
 80018e8:	4603      	mov	r3, r0
 80018ea:	2b00      	cmp	r3, #0
 80018ec:	f000 8119 	beq.w	8001b22 <HAL_UART_RxCpltCallback+0x28e>
			CurrentCommand_Clear(&currCmd);
 80018f0:	487d      	ldr	r0, [pc, #500]	; (8001ae8 <HAL_UART_RxCpltCallback+0x254>)
 80018f2:	f001 fb5f 	bl	8002fb4 <CurrentCommand_Clear>
			Task_ACK();
 80018f6:	f001 fb7b 	bl	8002ff0 <Task_ACK>
		if (CommandQueue_IsEmpty(&commandQueue)) {
 80018fa:	e112      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
		else {
			//CommandQueue_Dequeue(&commandQueue, &currCmd);
		}

	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'W') { //FW
 80018fc:	4b77      	ldr	r3, [pc, #476]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	2b46      	cmp	r3, #70	; 0x46
 8001902:	d119      	bne.n	8001938 <HAL_UART_RxCpltCallback+0xa4>
 8001904:	4b75      	ldr	r3, [pc, #468]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001906:	785b      	ldrb	r3, [r3, #1]
 8001908:	2b57      	cmp	r3, #87	; 0x57
 800190a:	d115      	bne.n	8001938 <HAL_UART_RxCpltCallback+0xa4>
		if(aRxBuffer[2] == '-' && aRxBuffer[3] == '-'){
 800190c:	4b73      	ldr	r3, [pc, #460]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 800190e:	789b      	ldrb	r3, [r3, #2]
 8001910:	2b2d      	cmp	r3, #45	; 0x2d
 8001912:	d109      	bne.n	8001928 <HAL_UART_RxCpltCallback+0x94>
 8001914:	4b71      	ldr	r3, [pc, #452]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001916:	78db      	ldrb	r3, [r3, #3]
 8001918:	2b2d      	cmp	r3, #45	; 0x2d
 800191a:	d105      	bne.n	8001928 <HAL_UART_RxCpltCallback+0x94>
			CommandQueue_Enqueue(&commandQueue, 11, 0);
 800191c:	2200      	movs	r2, #0
 800191e:	210b      	movs	r1, #11
 8001920:	4870      	ldr	r0, [pc, #448]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 8001922:	f001 faf6 	bl	8002f12 <CommandQueue_Enqueue>
		if(aRxBuffer[2] == '-' && aRxBuffer[3] == '-'){
 8001926:	e0fc      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
		}else{
			//val *= 10;
			CommandQueue_Enqueue(&commandQueue, 1, val);
 8001928:	68fb      	ldr	r3, [r7, #12]
 800192a:	b29b      	uxth	r3, r3
 800192c:	461a      	mov	r2, r3
 800192e:	2101      	movs	r1, #1
 8001930:	486c      	ldr	r0, [pc, #432]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 8001932:	f001 faee 	bl	8002f12 <CommandQueue_Enqueue>
		if(aRxBuffer[2] == '-' && aRxBuffer[3] == '-'){
 8001936:	e0f4      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
		}
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'W') { //BW
 8001938:	4b68      	ldr	r3, [pc, #416]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 800193a:	781b      	ldrb	r3, [r3, #0]
 800193c:	2b42      	cmp	r3, #66	; 0x42
 800193e:	d119      	bne.n	8001974 <HAL_UART_RxCpltCallback+0xe0>
 8001940:	4b66      	ldr	r3, [pc, #408]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001942:	785b      	ldrb	r3, [r3, #1]
 8001944:	2b57      	cmp	r3, #87	; 0x57
 8001946:	d115      	bne.n	8001974 <HAL_UART_RxCpltCallback+0xe0>
		if(aRxBuffer[2] == '-' && aRxBuffer[3] == '-'){
 8001948:	4b64      	ldr	r3, [pc, #400]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 800194a:	789b      	ldrb	r3, [r3, #2]
 800194c:	2b2d      	cmp	r3, #45	; 0x2d
 800194e:	d109      	bne.n	8001964 <HAL_UART_RxCpltCallback+0xd0>
 8001950:	4b62      	ldr	r3, [pc, #392]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001952:	78db      	ldrb	r3, [r3, #3]
 8001954:	2b2d      	cmp	r3, #45	; 0x2d
 8001956:	d105      	bne.n	8001964 <HAL_UART_RxCpltCallback+0xd0>
			CommandQueue_Enqueue(&commandQueue, 12, 0);
 8001958:	2200      	movs	r2, #0
 800195a:	210c      	movs	r1, #12
 800195c:	4861      	ldr	r0, [pc, #388]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 800195e:	f001 fad8 	bl	8002f12 <CommandQueue_Enqueue>
		if(aRxBuffer[2] == '-' && aRxBuffer[3] == '-'){
 8001962:	e0de      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
		}else{
			//val *= 10;
			CommandQueue_Enqueue(&commandQueue, 2, val);
 8001964:	68fb      	ldr	r3, [r7, #12]
 8001966:	b29b      	uxth	r3, r3
 8001968:	461a      	mov	r2, r3
 800196a:	2102      	movs	r1, #2
 800196c:	485d      	ldr	r0, [pc, #372]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 800196e:	f001 fad0 	bl	8002f12 <CommandQueue_Enqueue>
		if(aRxBuffer[2] == '-' && aRxBuffer[3] == '-'){
 8001972:	e0d6      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
		}
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L' && aRxBuffer[2] == '9') { //Forward Left 90
 8001974:	4b59      	ldr	r3, [pc, #356]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001976:	781b      	ldrb	r3, [r3, #0]
 8001978:	2b46      	cmp	r3, #70	; 0x46
 800197a:	d10d      	bne.n	8001998 <HAL_UART_RxCpltCallback+0x104>
 800197c:	4b57      	ldr	r3, [pc, #348]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 800197e:	785b      	ldrb	r3, [r3, #1]
 8001980:	2b4c      	cmp	r3, #76	; 0x4c
 8001982:	d109      	bne.n	8001998 <HAL_UART_RxCpltCallback+0x104>
 8001984:	4b55      	ldr	r3, [pc, #340]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001986:	789b      	ldrb	r3, [r3, #2]
 8001988:	2b39      	cmp	r3, #57	; 0x39
 800198a:	d105      	bne.n	8001998 <HAL_UART_RxCpltCallback+0x104>
		CommandQueue_Enqueue(&commandQueue, 3, 0);
 800198c:	2200      	movs	r2, #0
 800198e:	2103      	movs	r1, #3
 8001990:	4854      	ldr	r0, [pc, #336]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 8001992:	f001 fabe 	bl	8002f12 <CommandQueue_Enqueue>
 8001996:	e0c4      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R' && aRxBuffer[2] == '9') { //Forward Right 90
 8001998:	4b50      	ldr	r3, [pc, #320]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 800199a:	781b      	ldrb	r3, [r3, #0]
 800199c:	2b46      	cmp	r3, #70	; 0x46
 800199e:	d10d      	bne.n	80019bc <HAL_UART_RxCpltCallback+0x128>
 80019a0:	4b4e      	ldr	r3, [pc, #312]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80019a2:	785b      	ldrb	r3, [r3, #1]
 80019a4:	2b52      	cmp	r3, #82	; 0x52
 80019a6:	d109      	bne.n	80019bc <HAL_UART_RxCpltCallback+0x128>
 80019a8:	4b4c      	ldr	r3, [pc, #304]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80019aa:	789b      	ldrb	r3, [r3, #2]
 80019ac:	2b39      	cmp	r3, #57	; 0x39
 80019ae:	d105      	bne.n	80019bc <HAL_UART_RxCpltCallback+0x128>
		CommandQueue_Enqueue(&commandQueue, 4, 0);
 80019b0:	2200      	movs	r2, #0
 80019b2:	2104      	movs	r1, #4
 80019b4:	484b      	ldr	r0, [pc, #300]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 80019b6:	f001 faac 	bl	8002f12 <CommandQueue_Enqueue>
 80019ba:	e0b2      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L' && aRxBuffer[2] == '9') { //Backward Left 90
 80019bc:	4b47      	ldr	r3, [pc, #284]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80019be:	781b      	ldrb	r3, [r3, #0]
 80019c0:	2b42      	cmp	r3, #66	; 0x42
 80019c2:	d10d      	bne.n	80019e0 <HAL_UART_RxCpltCallback+0x14c>
 80019c4:	4b45      	ldr	r3, [pc, #276]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80019c6:	785b      	ldrb	r3, [r3, #1]
 80019c8:	2b4c      	cmp	r3, #76	; 0x4c
 80019ca:	d109      	bne.n	80019e0 <HAL_UART_RxCpltCallback+0x14c>
 80019cc:	4b43      	ldr	r3, [pc, #268]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80019ce:	789b      	ldrb	r3, [r3, #2]
 80019d0:	2b39      	cmp	r3, #57	; 0x39
 80019d2:	d105      	bne.n	80019e0 <HAL_UART_RxCpltCallback+0x14c>
		CommandQueue_Enqueue(&commandQueue, 5, 0);
 80019d4:	2200      	movs	r2, #0
 80019d6:	2105      	movs	r1, #5
 80019d8:	4842      	ldr	r0, [pc, #264]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 80019da:	f001 fa9a 	bl	8002f12 <CommandQueue_Enqueue>
 80019de:	e0a0      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R' && aRxBuffer[2] == '9') { //Backward Right 90
 80019e0:	4b3e      	ldr	r3, [pc, #248]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80019e2:	781b      	ldrb	r3, [r3, #0]
 80019e4:	2b42      	cmp	r3, #66	; 0x42
 80019e6:	d10d      	bne.n	8001a04 <HAL_UART_RxCpltCallback+0x170>
 80019e8:	4b3c      	ldr	r3, [pc, #240]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80019ea:	785b      	ldrb	r3, [r3, #1]
 80019ec:	2b52      	cmp	r3, #82	; 0x52
 80019ee:	d109      	bne.n	8001a04 <HAL_UART_RxCpltCallback+0x170>
 80019f0:	4b3a      	ldr	r3, [pc, #232]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 80019f2:	789b      	ldrb	r3, [r3, #2]
 80019f4:	2b39      	cmp	r3, #57	; 0x39
 80019f6:	d105      	bne.n	8001a04 <HAL_UART_RxCpltCallback+0x170>
		CommandQueue_Enqueue(&commandQueue, 6, 0);
 80019f8:	2200      	movs	r2, #0
 80019fa:	2106      	movs	r1, #6
 80019fc:	4839      	ldr	r0, [pc, #228]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 80019fe:	f001 fa88 	bl	8002f12 <CommandQueue_Enqueue>
 8001a02:	e08e      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L' && aRxBuffer[2] == '1') { //Forward Left 180
 8001a04:	4b35      	ldr	r3, [pc, #212]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a06:	781b      	ldrb	r3, [r3, #0]
 8001a08:	2b46      	cmp	r3, #70	; 0x46
 8001a0a:	d10d      	bne.n	8001a28 <HAL_UART_RxCpltCallback+0x194>
 8001a0c:	4b33      	ldr	r3, [pc, #204]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a0e:	785b      	ldrb	r3, [r3, #1]
 8001a10:	2b4c      	cmp	r3, #76	; 0x4c
 8001a12:	d109      	bne.n	8001a28 <HAL_UART_RxCpltCallback+0x194>
 8001a14:	4b31      	ldr	r3, [pc, #196]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a16:	789b      	ldrb	r3, [r3, #2]
 8001a18:	2b31      	cmp	r3, #49	; 0x31
 8001a1a:	d105      	bne.n	8001a28 <HAL_UART_RxCpltCallback+0x194>
		CommandQueue_Enqueue(&commandQueue, 7, 0);
 8001a1c:	2200      	movs	r2, #0
 8001a1e:	2107      	movs	r1, #7
 8001a20:	4830      	ldr	r0, [pc, #192]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 8001a22:	f001 fa76 	bl	8002f12 <CommandQueue_Enqueue>
 8001a26:	e07c      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
	}
	else if (aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R' && aRxBuffer[2] == '1') { //Forward Right 180
 8001a28:	4b2c      	ldr	r3, [pc, #176]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a2a:	781b      	ldrb	r3, [r3, #0]
 8001a2c:	2b46      	cmp	r3, #70	; 0x46
 8001a2e:	d10d      	bne.n	8001a4c <HAL_UART_RxCpltCallback+0x1b8>
 8001a30:	4b2a      	ldr	r3, [pc, #168]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a32:	785b      	ldrb	r3, [r3, #1]
 8001a34:	2b52      	cmp	r3, #82	; 0x52
 8001a36:	d109      	bne.n	8001a4c <HAL_UART_RxCpltCallback+0x1b8>
 8001a38:	4b28      	ldr	r3, [pc, #160]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a3a:	789b      	ldrb	r3, [r3, #2]
 8001a3c:	2b31      	cmp	r3, #49	; 0x31
 8001a3e:	d105      	bne.n	8001a4c <HAL_UART_RxCpltCallback+0x1b8>
		CommandQueue_Enqueue(&commandQueue, 8, 0);
 8001a40:	2200      	movs	r2, #0
 8001a42:	2108      	movs	r1, #8
 8001a44:	4827      	ldr	r0, [pc, #156]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 8001a46:	f001 fa64 	bl	8002f12 <CommandQueue_Enqueue>
 8001a4a:	e06a      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'L' && aRxBuffer[2] == '1') { //Backward Left 180
 8001a4c:	4b23      	ldr	r3, [pc, #140]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a4e:	781b      	ldrb	r3, [r3, #0]
 8001a50:	2b42      	cmp	r3, #66	; 0x42
 8001a52:	d10d      	bne.n	8001a70 <HAL_UART_RxCpltCallback+0x1dc>
 8001a54:	4b21      	ldr	r3, [pc, #132]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a56:	785b      	ldrb	r3, [r3, #1]
 8001a58:	2b4c      	cmp	r3, #76	; 0x4c
 8001a5a:	d109      	bne.n	8001a70 <HAL_UART_RxCpltCallback+0x1dc>
 8001a5c:	4b1f      	ldr	r3, [pc, #124]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a5e:	789b      	ldrb	r3, [r3, #2]
 8001a60:	2b31      	cmp	r3, #49	; 0x31
 8001a62:	d105      	bne.n	8001a70 <HAL_UART_RxCpltCallback+0x1dc>
		CommandQueue_Enqueue(&commandQueue, 9, 0);
 8001a64:	2200      	movs	r2, #0
 8001a66:	2109      	movs	r1, #9
 8001a68:	481e      	ldr	r0, [pc, #120]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 8001a6a:	f001 fa52 	bl	8002f12 <CommandQueue_Enqueue>
 8001a6e:	e058      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
	}
	else if (aRxBuffer[0] == 'B' && aRxBuffer[1] == 'R' && aRxBuffer[2] == '1') { //Backward Right 180
 8001a70:	4b1a      	ldr	r3, [pc, #104]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a72:	781b      	ldrb	r3, [r3, #0]
 8001a74:	2b42      	cmp	r3, #66	; 0x42
 8001a76:	d10d      	bne.n	8001a94 <HAL_UART_RxCpltCallback+0x200>
 8001a78:	4b18      	ldr	r3, [pc, #96]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a7a:	785b      	ldrb	r3, [r3, #1]
 8001a7c:	2b52      	cmp	r3, #82	; 0x52
 8001a7e:	d109      	bne.n	8001a94 <HAL_UART_RxCpltCallback+0x200>
 8001a80:	4b16      	ldr	r3, [pc, #88]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a82:	789b      	ldrb	r3, [r3, #2]
 8001a84:	2b31      	cmp	r3, #49	; 0x31
 8001a86:	d105      	bne.n	8001a94 <HAL_UART_RxCpltCallback+0x200>
		CommandQueue_Enqueue(&commandQueue, 10, 0);
 8001a88:	2200      	movs	r2, #0
 8001a8a:	210a      	movs	r1, #10
 8001a8c:	4815      	ldr	r0, [pc, #84]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 8001a8e:	f001 fa40 	bl	8002f12 <CommandQueue_Enqueue>
 8001a92:	e046      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
	}
	else if(aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R' && aRxBuffer[2] == 'L') {
 8001a94:	4b11      	ldr	r3, [pc, #68]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a96:	781b      	ldrb	r3, [r3, #0]
 8001a98:	2b46      	cmp	r3, #70	; 0x46
 8001a9a:	d10d      	bne.n	8001ab8 <HAL_UART_RxCpltCallback+0x224>
 8001a9c:	4b0f      	ldr	r3, [pc, #60]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001a9e:	785b      	ldrb	r3, [r3, #1]
 8001aa0:	2b52      	cmp	r3, #82	; 0x52
 8001aa2:	d109      	bne.n	8001ab8 <HAL_UART_RxCpltCallback+0x224>
 8001aa4:	4b0d      	ldr	r3, [pc, #52]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001aa6:	789b      	ldrb	r3, [r3, #2]
 8001aa8:	2b4c      	cmp	r3, #76	; 0x4c
 8001aaa:	d105      	bne.n	8001ab8 <HAL_UART_RxCpltCallback+0x224>
		CommandQueue_Enqueue(&commandQueue, 11, 0);
 8001aac:	2200      	movs	r2, #0
 8001aae:	210b      	movs	r1, #11
 8001ab0:	480c      	ldr	r0, [pc, #48]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 8001ab2:	f001 fa2e 	bl	8002f12 <CommandQueue_Enqueue>
 8001ab6:	e034      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
	}
	else if(aRxBuffer[0] == 'F' && aRxBuffer[1] == 'L' && aRxBuffer[2] == 'R') {
 8001ab8:	4b08      	ldr	r3, [pc, #32]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001aba:	781b      	ldrb	r3, [r3, #0]
 8001abc:	2b46      	cmp	r3, #70	; 0x46
 8001abe:	d115      	bne.n	8001aec <HAL_UART_RxCpltCallback+0x258>
 8001ac0:	4b06      	ldr	r3, [pc, #24]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001ac2:	785b      	ldrb	r3, [r3, #1]
 8001ac4:	2b4c      	cmp	r3, #76	; 0x4c
 8001ac6:	d111      	bne.n	8001aec <HAL_UART_RxCpltCallback+0x258>
 8001ac8:	4b04      	ldr	r3, [pc, #16]	; (8001adc <HAL_UART_RxCpltCallback+0x248>)
 8001aca:	789b      	ldrb	r3, [r3, #2]
 8001acc:	2b52      	cmp	r3, #82	; 0x52
 8001ace:	d10d      	bne.n	8001aec <HAL_UART_RxCpltCallback+0x258>
		CommandQueue_Enqueue(&commandQueue, 12, 0);
 8001ad0:	2200      	movs	r2, #0
 8001ad2:	210c      	movs	r1, #12
 8001ad4:	4803      	ldr	r0, [pc, #12]	; (8001ae4 <HAL_UART_RxCpltCallback+0x250>)
 8001ad6:	f001 fa1c 	bl	8002f12 <CommandQueue_Enqueue>
 8001ada:	e022      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>
 8001adc:	20000550 	.word	0x20000550
 8001ae0:	2000059c 	.word	0x2000059c
 8001ae4:	20000564 	.word	0x20000564
 8001ae8:	2000001c 	.word	0x2000001c
	}
	else if(aRxBuffer[0] == 'O'){ //Ultrasonic Sensor Distance
 8001aec:	4b1a      	ldr	r3, [pc, #104]	; (8001b58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001aee:	781b      	ldrb	r3, [r3, #0]
 8001af0:	2b4f      	cmp	r3, #79	; 0x4f
 8001af2:	d116      	bne.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>

		if(aRxBuffer[1] == 'L'){
 8001af4:	4b18      	ldr	r3, [pc, #96]	; (8001b58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001af6:	785b      	ldrb	r3, [r3, #1]
 8001af8:	2b4c      	cmp	r3, #76	; 0x4c
 8001afa:	d107      	bne.n	8001b0c <HAL_UART_RxCpltCallback+0x278>

			CommandQueue_Enqueue(&commandQueue, 13, val);
 8001afc:	68fb      	ldr	r3, [r7, #12]
 8001afe:	b29b      	uxth	r3, r3
 8001b00:	461a      	mov	r2, r3
 8001b02:	210d      	movs	r1, #13
 8001b04:	4815      	ldr	r0, [pc, #84]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c8>)
 8001b06:	f001 fa04 	bl	8002f12 <CommandQueue_Enqueue>
 8001b0a:	e00a      	b.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>

		}

		else if(aRxBuffer[1] == 'R'){
 8001b0c:	4b12      	ldr	r3, [pc, #72]	; (8001b58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001b0e:	785b      	ldrb	r3, [r3, #1]
 8001b10:	2b52      	cmp	r3, #82	; 0x52
 8001b12:	d106      	bne.n	8001b22 <HAL_UART_RxCpltCallback+0x28e>

			CommandQueue_Enqueue(&commandQueue, 14, val);
 8001b14:	68fb      	ldr	r3, [r7, #12]
 8001b16:	b29b      	uxth	r3, r3
 8001b18:	461a      	mov	r2, r3
 8001b1a:	210e      	movs	r1, #14
 8001b1c:	480f      	ldr	r0, [pc, #60]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c8>)
 8001b1e:	f001 f9f8 	bl	8002f12 <CommandQueue_Enqueue>
//	else if(aRxBuffer[0] == 'F' && aRxBuffer[1] == 'R' && aRxBuffer[2] == '-'){
//		CommandQueue_Enqueue(&commandQueue, 4, 0);
//	}
	//Every callback, dequeue the latest command if the task is empty
	//if (!CommandQueue_IsEmpty(&commandQueue) && currTask == TASK_NONE) {
	if (!CommandQueue_IsEmpty(&commandQueue) || currTask == TASK_NONE) {
 8001b22:	480e      	ldr	r0, [pc, #56]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c8>)
 8001b24:	f001 f9e2 	bl	8002eec <CommandQueue_IsEmpty>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d003      	beq.n	8001b36 <HAL_UART_RxCpltCallback+0x2a2>
 8001b2e:	4b0c      	ldr	r3, [pc, #48]	; (8001b60 <HAL_UART_RxCpltCallback+0x2cc>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	2b07      	cmp	r3, #7
 8001b34:	d103      	bne.n	8001b3e <HAL_UART_RxCpltCallback+0x2aa>
		CommandQueue_Dequeue(&commandQueue, &currCmd);
 8001b36:	490b      	ldr	r1, [pc, #44]	; (8001b64 <HAL_UART_RxCpltCallback+0x2d0>)
 8001b38:	4808      	ldr	r0, [pc, #32]	; (8001b5c <HAL_UART_RxCpltCallback+0x2c8>)
 8001b3a:	f001 fa13 	bl	8002f64 <CommandQueue_Dequeue>
	}

	// clear ARX buffer
	__HAL_UART_FLUSH_DRREGISTER(&huart3);
 8001b3e:	4b0a      	ldr	r3, [pc, #40]	; (8001b68 <HAL_UART_RxCpltCallback+0x2d4>)
 8001b40:	681b      	ldr	r3, [r3, #0]
 8001b42:	685b      	ldr	r3, [r3, #4]
	HAL_UART_Receive_IT(&huart3,(uint8_t *) aRxBuffer, ARX_BUFFER_SIZE);
 8001b44:	2206      	movs	r2, #6
 8001b46:	4904      	ldr	r1, [pc, #16]	; (8001b58 <HAL_UART_RxCpltCallback+0x2c4>)
 8001b48:	4807      	ldr	r0, [pc, #28]	; (8001b68 <HAL_UART_RxCpltCallback+0x2d4>)
 8001b4a:	f005 ff86 	bl	8007a5a <HAL_UART_Receive_IT>

}
 8001b4e:	bf00      	nop
 8001b50:	3710      	adds	r7, #16
 8001b52:	46bd      	mov	sp, r7
 8001b54:	bd80      	pop	{r7, pc}
 8001b56:	bf00      	nop
 8001b58:	20000550 	.word	0x20000550
 8001b5c:	20000564 	.word	0x20000564
 8001b60:	20000020 	.word	0x20000020
 8001b64:	2000001c 	.word	0x2000001c
 8001b68:	20000424 	.word	0x20000424

08001b6c <Set_Motor_Direction>:

void Set_Motor_Direction(uint8_t dir) {
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	4603      	mov	r3, r0
 8001b74:	71fb      	strb	r3, [r7, #7]
	if (dir){// move forward
 8001b76:	79fb      	ldrb	r3, [r7, #7]
 8001b78:	2b00      	cmp	r3, #0
 8001b7a:	d014      	beq.n	8001ba6 <Set_Motor_Direction+0x3a>
		// GPIO_PIN_SET = Turn on, GPIO_PIN_RESET = Turn Off
		//To enable the motor circuit, one pin must be enabled and the other must be disabled.
		//MotorA(Left wheel)
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_RESET);
 8001b7c:	2200      	movs	r2, #0
 8001b7e:	2104      	movs	r1, #4
 8001b80:	4815      	ldr	r0, [pc, #84]	; (8001bd8 <Set_Motor_Direction+0x6c>)
 8001b82:	f002 ffe3 	bl	8004b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_SET);
 8001b86:	2201      	movs	r2, #1
 8001b88:	2108      	movs	r1, #8
 8001b8a:	4813      	ldr	r0, [pc, #76]	; (8001bd8 <Set_Motor_Direction+0x6c>)
 8001b8c:	f002 ffde 	bl	8004b4c <HAL_GPIO_WritePin>
		//MotorB(Right wheel)
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_RESET);
 8001b90:	2200      	movs	r2, #0
 8001b92:	2120      	movs	r1, #32
 8001b94:	4810      	ldr	r0, [pc, #64]	; (8001bd8 <Set_Motor_Direction+0x6c>)
 8001b96:	f002 ffd9 	bl	8004b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_SET);
 8001b9a:	2201      	movs	r2, #1
 8001b9c:	2110      	movs	r1, #16
 8001b9e:	480e      	ldr	r0, [pc, #56]	; (8001bd8 <Set_Motor_Direction+0x6c>)
 8001ba0:	f002 ffd4 	bl	8004b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
		//MotorB(Right wheel)
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
	}
}
 8001ba4:	e013      	b.n	8001bce <Set_Motor_Direction+0x62>
		HAL_GPIO_WritePin(GPIOA, AIN2_Pin, GPIO_PIN_SET);
 8001ba6:	2201      	movs	r2, #1
 8001ba8:	2104      	movs	r1, #4
 8001baa:	480b      	ldr	r0, [pc, #44]	; (8001bd8 <Set_Motor_Direction+0x6c>)
 8001bac:	f002 ffce 	bl	8004b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, AIN1_Pin, GPIO_PIN_RESET);
 8001bb0:	2200      	movs	r2, #0
 8001bb2:	2108      	movs	r1, #8
 8001bb4:	4808      	ldr	r0, [pc, #32]	; (8001bd8 <Set_Motor_Direction+0x6c>)
 8001bb6:	f002 ffc9 	bl	8004b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN2_Pin, GPIO_PIN_SET);
 8001bba:	2201      	movs	r2, #1
 8001bbc:	2120      	movs	r1, #32
 8001bbe:	4806      	ldr	r0, [pc, #24]	; (8001bd8 <Set_Motor_Direction+0x6c>)
 8001bc0:	f002 ffc4 	bl	8004b4c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOA, BIN1_Pin, GPIO_PIN_RESET);
 8001bc4:	2200      	movs	r2, #0
 8001bc6:	2110      	movs	r1, #16
 8001bc8:	4803      	ldr	r0, [pc, #12]	; (8001bd8 <Set_Motor_Direction+0x6c>)
 8001bca:	f002 ffbf 	bl	8004b4c <HAL_GPIO_WritePin>
}
 8001bce:	bf00      	nop
 8001bd0:	3708      	adds	r7, #8
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40020000 	.word	0x40020000

08001bdc <Calculate_IntervalPulse>:

int Calculate_IntervalPulse(int oldCount, int newCount, int dutyLR){
 8001bdc:	b480      	push	{r7}
 8001bde:	b087      	sub	sp, #28
 8001be0:	af00      	add	r7, sp, #0
 8001be2:	60f8      	str	r0, [r7, #12]
 8001be4:	60b9      	str	r1, [r7, #8]
 8001be6:	607a      	str	r2, [r7, #4]
	int diff = 0, timerLR;
 8001be8:	2300      	movs	r3, #0
 8001bea:	617b      	str	r3, [r7, #20]

	if(dutyLR) //Determine if it is left duty or right duty
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2b00      	cmp	r3, #0
 8001bf0:	d00b      	beq.n	8001c0a <Calculate_IntervalPulse+0x2e>
		timerLR = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim2); //left wheel
 8001bf2:	4b21      	ldr	r3, [pc, #132]	; (8001c78 <Calculate_IntervalPulse+0x9c>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	681b      	ldr	r3, [r3, #0]
 8001bf8:	f003 0310 	and.w	r3, r3, #16
 8001bfc:	2b10      	cmp	r3, #16
 8001bfe:	bf0c      	ite	eq
 8001c00:	2301      	moveq	r3, #1
 8001c02:	2300      	movne	r3, #0
 8001c04:	b2db      	uxtb	r3, r3
 8001c06:	613b      	str	r3, [r7, #16]
 8001c08:	e00a      	b.n	8001c20 <Calculate_IntervalPulse+0x44>
	else
		timerLR = __HAL_TIM_IS_TIM_COUNTING_DOWN(&htim3); //right wheel
 8001c0a:	4b1c      	ldr	r3, [pc, #112]	; (8001c7c <Calculate_IntervalPulse+0xa0>)
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	f003 0310 	and.w	r3, r3, #16
 8001c14:	2b10      	cmp	r3, #16
 8001c16:	bf0c      	ite	eq
 8001c18:	2301      	moveq	r3, #1
 8001c1a:	2300      	movne	r3, #0
 8001c1c:	b2db      	uxtb	r3, r3
 8001c1e:	613b      	str	r3, [r7, #16]

	if(timerLR){ //To consider overflow and underflow problem
 8001c20:	693b      	ldr	r3, [r7, #16]
 8001c22:	2b00      	cmp	r3, #0
 8001c24:	d010      	beq.n	8001c48 <Calculate_IntervalPulse+0x6c>
		if(newCount < oldCount)
 8001c26:	68ba      	ldr	r2, [r7, #8]
 8001c28:	68fb      	ldr	r3, [r7, #12]
 8001c2a:	429a      	cmp	r2, r3
 8001c2c:	da04      	bge.n	8001c38 <Calculate_IntervalPulse+0x5c>
			diff = oldCount - newCount;
 8001c2e:	68fa      	ldr	r2, [r7, #12]
 8001c30:	68bb      	ldr	r3, [r7, #8]
 8001c32:	1ad3      	subs	r3, r2, r3
 8001c34:	617b      	str	r3, [r7, #20]
 8001c36:	e017      	b.n	8001c68 <Calculate_IntervalPulse+0x8c>
		else
			diff = (65535 - newCount) + oldCount; //Prevent overflow/underflow
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001c3e:	33ff      	adds	r3, #255	; 0xff
 8001c40:	68fa      	ldr	r2, [r7, #12]
 8001c42:	4413      	add	r3, r2
 8001c44:	617b      	str	r3, [r7, #20]
 8001c46:	e00f      	b.n	8001c68 <Calculate_IntervalPulse+0x8c>
	}else{
		if(newCount > oldCount)
 8001c48:	68ba      	ldr	r2, [r7, #8]
 8001c4a:	68fb      	ldr	r3, [r7, #12]
 8001c4c:	429a      	cmp	r2, r3
 8001c4e:	dd04      	ble.n	8001c5a <Calculate_IntervalPulse+0x7e>
			diff = newCount - oldCount;
 8001c50:	68ba      	ldr	r2, [r7, #8]
 8001c52:	68fb      	ldr	r3, [r7, #12]
 8001c54:	1ad3      	subs	r3, r2, r3
 8001c56:	617b      	str	r3, [r7, #20]
 8001c58:	e006      	b.n	8001c68 <Calculate_IntervalPulse+0x8c>
		else
			diff = (65535 - oldCount) + newCount; //Prevent overflow/underflow
 8001c5a:	68fb      	ldr	r3, [r7, #12]
 8001c5c:	f5c3 437f 	rsb	r3, r3, #65280	; 0xff00
 8001c60:	33ff      	adds	r3, #255	; 0xff
 8001c62:	68ba      	ldr	r2, [r7, #8]
 8001c64:	4413      	add	r3, r2
 8001c66:	617b      	str	r3, [r7, #20]
		}

	return diff;
 8001c68:	697b      	ldr	r3, [r7, #20]
}
 8001c6a:	4618      	mov	r0, r3
 8001c6c:	371c      	adds	r7, #28
 8001c6e:	46bd      	mov	sp, r7
 8001c70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c74:	4770      	bx	lr
 8001c76:	bf00      	nop
 8001c78:	2000034c 	.word	0x2000034c
 8001c7c:	20000394 	.word	0x20000394

08001c80 <Calculate_Target_Ticks>:

void Calculate_Target_Ticks(float targetDistance, DistanceTickConfig * distTick){
 8001c80:	b580      	push	{r7, lr}
 8001c82:	b082      	sub	sp, #8
 8001c84:	af00      	add	r7, sp, #0
 8001c86:	ed87 0a01 	vstr	s0, [r7, #4]
 8001c8a:	6038      	str	r0, [r7, #0]

	distTick->targetTick = targetDistance/(WHEEL_CIRCUMFERENCE/TICKS_PER_REVOLUTION);
 8001c8c:	6878      	ldr	r0, [r7, #4]
 8001c8e:	f7fe fc5b 	bl	8000548 <__aeabi_f2d>
 8001c92:	a309      	add	r3, pc, #36	; (adr r3, 8001cb8 <Calculate_Target_Ticks+0x38>)
 8001c94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c98:	f7fe fdd8 	bl	800084c <__aeabi_ddiv>
 8001c9c:	4602      	mov	r2, r0
 8001c9e:	460b      	mov	r3, r1
 8001ca0:	4610      	mov	r0, r2
 8001ca2:	4619      	mov	r1, r3
 8001ca4:	f7fe ff58 	bl	8000b58 <__aeabi_d2iz>
 8001ca8:	4602      	mov	r2, r0
 8001caa:	683b      	ldr	r3, [r7, #0]
 8001cac:	601a      	str	r2, [r3, #0]
}
 8001cae:	bf00      	nop
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	9cbd821e 	.word	0x9cbd821e
 8001cbc:	3f2179ec 	.word	0x3f2179ec

08001cc0 <Calculate_Car_Distance>:

void Calculate_Car_Distance(DistanceTickConfig * distTick, WheelEncoderConfig *encoderL, WheelEncoderConfig *encoderR){
 8001cc0:	b580      	push	{r7, lr}
 8001cc2:	b088      	sub	sp, #32
 8001cc4:	af00      	add	r7, sp, #0
 8001cc6:	60f8      	str	r0, [r7, #12]
 8001cc8:	60b9      	str	r1, [r7, #8]
 8001cca:	607a      	str	r2, [r7, #4]
	int deltaTicks = 0, rightTick = 0, leftTick = 0;
 8001ccc:	2300      	movs	r3, #0
 8001cce:	617b      	str	r3, [r7, #20]
 8001cd0:	2300      	movs	r3, #0
 8001cd2:	61fb      	str	r3, [r7, #28]
 8001cd4:	2300      	movs	r3, #0
 8001cd6:	61bb      	str	r3, [r7, #24]

	encoderL->newCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001cd8:	4b26      	ldr	r3, [pc, #152]	; (8001d74 <Calculate_Car_Distance+0xb4>)
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cde:	461a      	mov	r2, r3
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	605a      	str	r2, [r3, #4]
	encoderR->newCount = __HAL_TIM_GET_COUNTER(&htim3);
 8001ce4:	4b24      	ldr	r3, [pc, #144]	; (8001d78 <Calculate_Car_Distance+0xb8>)
 8001ce6:	681b      	ldr	r3, [r3, #0]
 8001ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001cea:	461a      	mov	r2, r3
 8001cec:	687b      	ldr	r3, [r7, #4]
 8001cee:	605a      	str	r2, [r3, #4]

	if(encoderL->newCount != encoderL->oldCount)
 8001cf0:	68bb      	ldr	r3, [r7, #8]
 8001cf2:	685a      	ldr	r2, [r3, #4]
 8001cf4:	68bb      	ldr	r3, [r7, #8]
 8001cf6:	681b      	ldr	r3, [r3, #0]
 8001cf8:	429a      	cmp	r2, r3
 8001cfa:	d008      	beq.n	8001d0e <Calculate_Car_Distance+0x4e>
		leftTick = Calculate_IntervalPulse(encoderL->oldCount, encoderL->newCount, 1);
 8001cfc:	68bb      	ldr	r3, [r7, #8]
 8001cfe:	6818      	ldr	r0, [r3, #0]
 8001d00:	68bb      	ldr	r3, [r7, #8]
 8001d02:	685b      	ldr	r3, [r3, #4]
 8001d04:	2201      	movs	r2, #1
 8001d06:	4619      	mov	r1, r3
 8001d08:	f7ff ff68 	bl	8001bdc <Calculate_IntervalPulse>
 8001d0c:	61b8      	str	r0, [r7, #24]
	if(encoderR->newCount != encoderR->oldCount)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	685a      	ldr	r2, [r3, #4]
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	681b      	ldr	r3, [r3, #0]
 8001d16:	429a      	cmp	r2, r3
 8001d18:	d008      	beq.n	8001d2c <Calculate_Car_Distance+0x6c>
		rightTick = Calculate_IntervalPulse(encoderR->oldCount, encoderR->newCount, 0);
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	6818      	ldr	r0, [r3, #0]
 8001d1e:	687b      	ldr	r3, [r7, #4]
 8001d20:	685b      	ldr	r3, [r3, #4]
 8001d22:	2200      	movs	r2, #0
 8001d24:	4619      	mov	r1, r3
 8001d26:	f7ff ff59 	bl	8001bdc <Calculate_IntervalPulse>
 8001d2a:	61f8      	str	r0, [r7, #28]


	if(leftTick < 65000 && rightTick < 65000){
 8001d2c:	69bb      	ldr	r3, [r7, #24]
 8001d2e:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001d32:	4293      	cmp	r3, r2
 8001d34:	dc11      	bgt.n	8001d5a <Calculate_Car_Distance+0x9a>
 8001d36:	69fb      	ldr	r3, [r7, #28]
 8001d38:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001d3c:	4293      	cmp	r3, r2
 8001d3e:	dc0c      	bgt.n	8001d5a <Calculate_Car_Distance+0x9a>
		deltaTicks = (leftTick + rightTick)/2;
 8001d40:	69ba      	ldr	r2, [r7, #24]
 8001d42:	69fb      	ldr	r3, [r7, #28]
 8001d44:	4413      	add	r3, r2
 8001d46:	0fda      	lsrs	r2, r3, #31
 8001d48:	4413      	add	r3, r2
 8001d4a:	105b      	asrs	r3, r3, #1
 8001d4c:	617b      	str	r3, [r7, #20]
		distTick->currDistTick += deltaTicks;
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	685a      	ldr	r2, [r3, #4]
 8001d52:	697b      	ldr	r3, [r7, #20]
 8001d54:	441a      	add	r2, r3
 8001d56:	68fb      	ldr	r3, [r7, #12]
 8001d58:	605a      	str	r2, [r3, #4]
	}

	//Bring the previous count to the next iteration
	encoderL->oldCount = encoderL->newCount;
 8001d5a:	68bb      	ldr	r3, [r7, #8]
 8001d5c:	685a      	ldr	r2, [r3, #4]
 8001d5e:	68bb      	ldr	r3, [r7, #8]
 8001d60:	601a      	str	r2, [r3, #0]
	encoderR->oldCount = encoderR->newCount;
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	685a      	ldr	r2, [r3, #4]
 8001d66:	687b      	ldr	r3, [r7, #4]
 8001d68:	601a      	str	r2, [r3, #0]
}
 8001d6a:	bf00      	nop
 8001d6c:	3720      	adds	r7, #32
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
 8001d72:	bf00      	nop
 8001d74:	2000034c 	.word	0x2000034c
 8001d78:	20000394 	.word	0x20000394

08001d7c <Init_Duty_Config>:

void Init_Duty_Config(int rpm, float distance){
 8001d7c:	b580      	push	{r7, lr}
 8001d7e:	b082      	sub	sp, #8
 8001d80:	af00      	add	r7, sp, #0
 8001d82:	6078      	str	r0, [r7, #4]
 8001d84:	ed87 0a00 	vstr	s0, [r7]
	//Set the desired wheel's RPM target, roughly 2200+-PWM = 500RPM(330PPR) 500pwm = 20rpm(1500PPR)
	dutyL.target_Rpm = rpm;
 8001d88:	4a13      	ldr	r2, [pc, #76]	; (8001dd8 <Init_Duty_Config+0x5c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6153      	str	r3, [r2, #20]
	dutyR.target_Rpm = rpm;
 8001d8e:	4a13      	ldr	r2, [pc, #76]	; (8001ddc <Init_Duty_Config+0x60>)
 8001d90:	687b      	ldr	r3, [r7, #4]
 8001d92:	6153      	str	r3, [r2, #20]

	//Set desire target distance, in metres
	Calculate_Target_Ticks(distance, &distTick); //Result of target ticks will be stored in distTick.targetTick
 8001d94:	4812      	ldr	r0, [pc, #72]	; (8001de0 <Init_Duty_Config+0x64>)
 8001d96:	ed97 0a00 	vldr	s0, [r7]
 8001d9a:	f7ff ff71 	bl	8001c80 <Calculate_Target_Ticks>

	//Get left wheel 1st Tick count (MotorA Encoder) for PID
	dutyL.oldCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001d9e:	4b11      	ldr	r3, [pc, #68]	; (8001de4 <Init_Duty_Config+0x68>)
 8001da0:	681b      	ldr	r3, [r3, #0]
 8001da2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001da4:	461a      	mov	r2, r3
 8001da6:	4b0c      	ldr	r3, [pc, #48]	; (8001dd8 <Init_Duty_Config+0x5c>)
 8001da8:	605a      	str	r2, [r3, #4]
	//Get right wheel 1st Tick count (MotorB Encoder) for PID
	dutyR.oldCount = __HAL_TIM_GET_COUNTER(&htim3);
 8001daa:	4b0f      	ldr	r3, [pc, #60]	; (8001de8 <Init_Duty_Config+0x6c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001db0:	461a      	mov	r2, r3
 8001db2:	4b0a      	ldr	r3, [pc, #40]	; (8001ddc <Init_Duty_Config+0x60>)
 8001db4:	605a      	str	r2, [r3, #4]

	//Get left wheel 1st Tick count (MotorA Encoder) for DistEst
	encoderL.oldCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001db6:	4b0b      	ldr	r3, [pc, #44]	; (8001de4 <Init_Duty_Config+0x68>)
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dbc:	461a      	mov	r2, r3
 8001dbe:	4b0b      	ldr	r3, [pc, #44]	; (8001dec <Init_Duty_Config+0x70>)
 8001dc0:	601a      	str	r2, [r3, #0]
	//Get right wheel 1st Tick count (MotorB Encoder) for DistEst
	encoderR.oldCount = __HAL_TIM_GET_COUNTER(&htim3);
 8001dc2:	4b09      	ldr	r3, [pc, #36]	; (8001de8 <Init_Duty_Config+0x6c>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001dc8:	461a      	mov	r2, r3
 8001dca:	4b09      	ldr	r3, [pc, #36]	; (8001df0 <Init_Duty_Config+0x74>)
 8001dcc:	601a      	str	r2, [r3, #0]
}
 8001dce:	bf00      	nop
 8001dd0:	3708      	adds	r7, #8
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd80      	pop	{r7, pc}
 8001dd6:	bf00      	nop
 8001dd8:	2000049c 	.word	0x2000049c
 8001ddc:	200004d8 	.word	0x200004d8
 8001de0:	20000490 	.word	0x20000490
 8001de4:	2000034c 	.word	0x2000034c
 8001de8:	20000394 	.word	0x20000394
 8001dec:	20000480 	.word	0x20000480
 8001df0:	20000488 	.word	0x20000488

08001df4 <Reset_Duty_Config>:

void Reset_Duty_Config(){
 8001df4:	b580      	push	{r7, lr}
 8001df6:	af00      	add	r7, sp, #0
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0); //Update PWM to 0 to halt
 8001df8:	4b13      	ldr	r3, [pc, #76]	; (8001e48 <Reset_Duty_Config+0x54>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	2200      	movs	r2, #0
 8001dfe:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0); //Update PWM to 0 to halt
 8001e00:	4b11      	ldr	r3, [pc, #68]	; (8001e48 <Reset_Duty_Config+0x54>)
 8001e02:	681b      	ldr	r3, [r3, #0]
 8001e04:	2200      	movs	r2, #0
 8001e06:	639a      	str	r2, [r3, #56]	; 0x38

	dutyL = emptyDuty; //Reset struct DutyConfig var to 0
 8001e08:	4b10      	ldr	r3, [pc, #64]	; (8001e4c <Reset_Duty_Config+0x58>)
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	233c      	movs	r3, #60	; 0x3c
 8001e0e:	461a      	mov	r2, r3
 8001e10:	2100      	movs	r1, #0
 8001e12:	f009 ff96 	bl	800bd42 <memset>
	dutyR = emptyDuty; //Reset struct DutyConfig var to 0
 8001e16:	4b0e      	ldr	r3, [pc, #56]	; (8001e50 <Reset_Duty_Config+0x5c>)
 8001e18:	4618      	mov	r0, r3
 8001e1a:	233c      	movs	r3, #60	; 0x3c
 8001e1c:	461a      	mov	r2, r3
 8001e1e:	2100      	movs	r1, #0
 8001e20:	f009 ff8f 	bl	800bd42 <memset>

	encoderL = emptyEncoder; //Reset struct WheelEncoderConfig var to 0
 8001e24:	4b0b      	ldr	r3, [pc, #44]	; (8001e54 <Reset_Duty_Config+0x60>)
 8001e26:	461a      	mov	r2, r3
 8001e28:	2300      	movs	r3, #0
 8001e2a:	6013      	str	r3, [r2, #0]
 8001e2c:	6053      	str	r3, [r2, #4]
	encoderR = emptyEncoder; //Reset struct WheelEncoderConfig var to 0
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <Reset_Duty_Config+0x64>)
 8001e30:	461a      	mov	r2, r3
 8001e32:	2300      	movs	r3, #0
 8001e34:	6013      	str	r3, [r2, #0]
 8001e36:	6053      	str	r3, [r2, #4]

	distTick = emptyDistTick; //Reset struct WheelEncoderConfig var to 0
 8001e38:	4b08      	ldr	r3, [pc, #32]	; (8001e5c <Reset_Duty_Config+0x68>)
 8001e3a:	461a      	mov	r2, r3
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	6013      	str	r3, [r2, #0]
 8001e40:	6053      	str	r3, [r2, #4]
 8001e42:	6093      	str	r3, [r2, #8]

//	servo = emptyServo; //Reset struct ServoConfig var to 0
//	currAngle = 0.0; //Reset currAngle to 0 to start another journey
//	gyroZAxis = 0;
}
 8001e44:	bf00      	nop
 8001e46:	bd80      	pop	{r7, pc}
 8001e48:	200003dc 	.word	0x200003dc
 8001e4c:	2000049c 	.word	0x2000049c
 8001e50:	200004d8 	.word	0x200004d8
 8001e54:	20000480 	.word	0x20000480
 8001e58:	20000488 	.word	0x20000488
 8001e5c:	20000490 	.word	0x20000490

08001e60 <DC_PID_Control>:

void DC_PID_Control(PIDConfig *dcPidCfg, DutyConfig *duty, WheelEncoderConfig *wheelEncoder){
 8001e60:	b580      	push	{r7, lr}
 8001e62:	b086      	sub	sp, #24
 8001e64:	af00      	add	r7, sp, #0
 8001e66:	60f8      	str	r0, [r7, #12]
 8001e68:	60b9      	str	r1, [r7, #8]
 8001e6a:	607a      	str	r2, [r7, #4]
	//Control Loop
	//char displayStr[20];
	int ppr=0, dutyLR = 0; //dutyLR = 1(Left), =0(right)
 8001e6c:	2300      	movs	r3, #0
 8001e6e:	617b      	str	r3, [r7, #20]
 8001e70:	2300      	movs	r3, #0
 8001e72:	613b      	str	r3, [r7, #16]
	if(duty->target_Rpm == 0)
 8001e74:	68bb      	ldr	r3, [r7, #8]
 8001e76:	695b      	ldr	r3, [r3, #20]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	f000 80c3 	beq.w	8002004 <DC_PID_Control+0x1a4>
		return;

	if(duty == &dutyL){
 8001e7e:	68bb      	ldr	r3, [r7, #8]
 8001e80:	4a62      	ldr	r2, [pc, #392]	; (800200c <DC_PID_Control+0x1ac>)
 8001e82:	4293      	cmp	r3, r2
 8001e84:	d108      	bne.n	8001e98 <DC_PID_Control+0x38>
		dutyLR = 1;
 8001e86:	2301      	movs	r3, #1
 8001e88:	613b      	str	r3, [r7, #16]
		duty->newCount = __HAL_TIM_GET_COUNTER(&htim2);
 8001e8a:	4b61      	ldr	r3, [pc, #388]	; (8002010 <DC_PID_Control+0x1b0>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001e90:	461a      	mov	r2, r3
 8001e92:	68bb      	ldr	r3, [r7, #8]
 8001e94:	601a      	str	r2, [r3, #0]
 8001e96:	e009      	b.n	8001eac <DC_PID_Control+0x4c>
	}
	else if(duty == &dutyR)
 8001e98:	68bb      	ldr	r3, [r7, #8]
 8001e9a:	4a5e      	ldr	r2, [pc, #376]	; (8002014 <DC_PID_Control+0x1b4>)
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	d105      	bne.n	8001eac <DC_PID_Control+0x4c>
		duty->newCount = __HAL_TIM_GET_COUNTER(&htim3);
 8001ea0:	4b5d      	ldr	r3, [pc, #372]	; (8002018 <DC_PID_Control+0x1b8>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001ea6:	461a      	mov	r2, r3
 8001ea8:	68bb      	ldr	r3, [r7, #8]
 8001eaa:	601a      	str	r2, [r3, #0]

	if(duty->newCount != duty->oldCount)
 8001eac:	68bb      	ldr	r3, [r7, #8]
 8001eae:	681a      	ldr	r2, [r3, #0]
 8001eb0:	68bb      	ldr	r3, [r7, #8]
 8001eb2:	685b      	ldr	r3, [r3, #4]
 8001eb4:	429a      	cmp	r2, r3
 8001eb6:	d008      	beq.n	8001eca <DC_PID_Control+0x6a>
		ppr = Calculate_IntervalPulse(duty->oldCount, duty->newCount, dutyLR);
 8001eb8:	68bb      	ldr	r3, [r7, #8]
 8001eba:	6858      	ldr	r0, [r3, #4]
 8001ebc:	68bb      	ldr	r3, [r7, #8]
 8001ebe:	681b      	ldr	r3, [r3, #0]
 8001ec0:	693a      	ldr	r2, [r7, #16]
 8001ec2:	4619      	mov	r1, r3
 8001ec4:	f7ff fe8a 	bl	8001bdc <Calculate_IntervalPulse>
 8001ec8:	6178      	str	r0, [r7, #20]
//	if(dutyLR && ppr < 65000)
//		wheelEncoder->ppr = ppr; //Store the ppr of this interval for Odometry fn Leftwheel
//	else if(!dutyLR && ppr < 65000) //65535
//		wheelEncoder->ppr = ppr; //Store the ppr of this interval for Odometry fn Rightwheel

	if(ppr < 65000)
 8001eca:	697b      	ldr	r3, [r7, #20]
 8001ecc:	f64f 52e7 	movw	r2, #64999	; 0xfde7
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	dc0c      	bgt.n	8001eee <DC_PID_Control+0x8e>
		duty->current_Rpm = ((ppr * 60)/ (PULSE_PER_REVOLUTION));  // ppr = ticks per encoder sample ,PULSE_PER_REV * frequency (0.5s == 500 ticks)
 8001ed4:	697a      	ldr	r2, [r7, #20]
 8001ed6:	4613      	mov	r3, r2
 8001ed8:	011b      	lsls	r3, r3, #4
 8001eda:	1a9b      	subs	r3, r3, r2
 8001edc:	009b      	lsls	r3, r3, #2
 8001ede:	4a4f      	ldr	r2, [pc, #316]	; (800201c <DC_PID_Control+0x1bc>)
 8001ee0:	fb82 1203 	smull	r1, r2, r2, r3
 8001ee4:	11d2      	asrs	r2, r2, #7
 8001ee6:	17db      	asrs	r3, r3, #31
 8001ee8:	1ad2      	subs	r2, r2, r3
 8001eea:	68bb      	ldr	r3, [r7, #8]
 8001eec:	611a      	str	r2, [r3, #16]

	//When car is stationary, accurate RPM will not be defined
	if(duty->current_Rpm > 11000) //11915
 8001eee:	68bb      	ldr	r3, [r7, #8]
 8001ef0:	691b      	ldr	r3, [r3, #16]
 8001ef2:	f642 22f8 	movw	r2, #11000	; 0x2af8
 8001ef6:	4293      	cmp	r3, r2
 8001ef8:	dd02      	ble.n	8001f00 <DC_PID_Control+0xa0>
		duty->current_Rpm = 0;
 8001efa:	68bb      	ldr	r3, [r7, #8]
 8001efc:	2200      	movs	r2, #0
 8001efe:	611a      	str	r2, [r3, #16]

	duty->error = duty->target_Rpm - duty->current_Rpm;
 8001f00:	68bb      	ldr	r3, [r7, #8]
 8001f02:	695a      	ldr	r2, [r3, #20]
 8001f04:	68bb      	ldr	r3, [r7, #8]
 8001f06:	691b      	ldr	r3, [r3, #16]
 8001f08:	1ad2      	subs	r2, r2, r3
 8001f0a:	68bb      	ldr	r3, [r7, #8]
 8001f0c:	61da      	str	r2, [r3, #28]

	duty->millisNow = HAL_GetTick();
 8001f0e:	f002 f87b 	bl	8004008 <HAL_GetTick>
 8001f12:	4603      	mov	r3, r0
 8001f14:	461a      	mov	r2, r3
 8001f16:	68bb      	ldr	r3, [r7, #8]
 8001f18:	635a      	str	r2, [r3, #52]	; 0x34
	duty->dt = (duty->millisNow - duty->millisOld); // time elapsed in millisecond (delta time)
 8001f1a:	68bb      	ldr	r3, [r7, #8]
 8001f1c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f1e:	68bb      	ldr	r3, [r7, #8]
 8001f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001f22:	1ad2      	subs	r2, r2, r3
 8001f24:	68bb      	ldr	r3, [r7, #8]
 8001f26:	639a      	str	r2, [r3, #56]	; 0x38
	duty->millisOld = duty->millisNow; // store the current time for next round
 8001f28:	68bb      	ldr	r3, [r7, #8]
 8001f2a:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001f2c:	68bb      	ldr	r3, [r7, #8]
 8001f2e:	631a      	str	r2, [r3, #48]	; 0x30

	duty->error_area = duty->error_area + duty->error*duty->dt; // area under error for Ki
 8001f30:	68bb      	ldr	r3, [r7, #8]
 8001f32:	6a1a      	ldr	r2, [r3, #32]
 8001f34:	68bb      	ldr	r3, [r7, #8]
 8001f36:	69db      	ldr	r3, [r3, #28]
 8001f38:	68b9      	ldr	r1, [r7, #8]
 8001f3a:	6b89      	ldr	r1, [r1, #56]	; 0x38
 8001f3c:	fb01 f303 	mul.w	r3, r1, r3
 8001f40:	441a      	add	r2, r3
 8001f42:	68bb      	ldr	r3, [r7, #8]
 8001f44:	621a      	str	r2, [r3, #32]

	duty->error_change = duty->error - duty->error_old; // change in error
 8001f46:	68bb      	ldr	r3, [r7, #8]
 8001f48:	69da      	ldr	r2, [r3, #28]
 8001f4a:	68bb      	ldr	r3, [r7, #8]
 8001f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f4e:	1ad2      	subs	r2, r2, r3
 8001f50:	68bb      	ldr	r3, [r7, #8]
 8001f52:	629a      	str	r2, [r3, #40]	; 0x28
	duty->error_old = duty->error; //store the error for next round
 8001f54:	68bb      	ldr	r3, [r7, #8]
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	68bb      	ldr	r3, [r7, #8]
 8001f5a:	625a      	str	r2, [r3, #36]	; 0x24
	duty->error_rate = duty->error_change/duty->dt; // for Kd
 8001f5c:	68bb      	ldr	r3, [r7, #8]
 8001f5e:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8001f60:	68bb      	ldr	r3, [r7, #8]
 8001f62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001f64:	fb92 f3f3 	sdiv	r3, r2, r3
 8001f68:	ee07 3a90 	vmov	s15, r3
 8001f6c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001f70:	68bb      	ldr	r3, [r7, #8]
 8001f72:	edc3 7a0b 	vstr	s15, [r3, #44]	; 0x2c

	duty->newPwmVal = (int)(duty->error * dcPidCfg->Kp + duty->error_area * dcPidCfg->Ki + duty->error_rate * dcPidCfg->Kd);  // PID
 8001f76:	68bb      	ldr	r3, [r7, #8]
 8001f78:	69db      	ldr	r3, [r3, #28]
 8001f7a:	ee07 3a90 	vmov	s15, r3
 8001f7e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001f82:	68fb      	ldr	r3, [r7, #12]
 8001f84:	edd3 7a00 	vldr	s15, [r3]
 8001f88:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	6a1b      	ldr	r3, [r3, #32]
 8001f90:	ee07 3a90 	vmov	s15, r3
 8001f94:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f9e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fa2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001fa6:	68bb      	ldr	r3, [r7, #8]
 8001fa8:	edd3 6a0b 	vldr	s13, [r3, #44]	; 0x2c
 8001fac:	68fb      	ldr	r3, [r7, #12]
 8001fae:	edd3 7a02 	vldr	s15, [r3, #8]
 8001fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001fbe:	ee17 2a90 	vmov	r2, s15
 8001fc2:	68bb      	ldr	r3, [r7, #8]
 8001fc4:	609a      	str	r2, [r3, #8]

	duty->pwmVal += duty->newPwmVal;
 8001fc6:	68bb      	ldr	r3, [r7, #8]
 8001fc8:	68da      	ldr	r2, [r3, #12]
 8001fca:	68bb      	ldr	r3, [r7, #8]
 8001fcc:	689b      	ldr	r3, [r3, #8]
 8001fce:	441a      	add	r2, r3
 8001fd0:	68bb      	ldr	r3, [r7, #8]
 8001fd2:	60da      	str	r2, [r3, #12]

//	sprintf(displayStr, "pwmVO:%6d\0", duty->pwmVal);
//	OLED_ShowString(10, 50, displayStr);

	if (duty->pwmVal > PWM_MAX) // Clamp the PWM to its maximum value
 8001fd4:	68bb      	ldr	r3, [r7, #8]
 8001fd6:	68db      	ldr	r3, [r3, #12]
 8001fd8:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	dd04      	ble.n	8001fea <DC_PID_Control+0x18a>
		duty->pwmVal = PWM_MAX;
 8001fe0:	68bb      	ldr	r3, [r7, #8]
 8001fe2:	f641 3258 	movw	r2, #7000	; 0x1b58
 8001fe6:	60da      	str	r2, [r3, #12]
 8001fe8:	e007      	b.n	8001ffa <DC_PID_Control+0x19a>
	else if(duty->pwmVal < PWM_MIN){ //If PWMValue goes to negative value, restart the PWMvalue back to 500
 8001fea:	68bb      	ldr	r3, [r7, #8]
 8001fec:	68db      	ldr	r3, [r3, #12]
 8001fee:	2b00      	cmp	r3, #0
 8001ff0:	da03      	bge.n	8001ffa <DC_PID_Control+0x19a>
		duty->pwmVal = 500;
 8001ff2:	68bb      	ldr	r3, [r7, #8]
 8001ff4:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
 8001ff8:	60da      	str	r2, [r3, #12]
	}

	duty->oldCount = duty->newCount; //Bring over the newCount to the next iteration
 8001ffa:	68bb      	ldr	r3, [r7, #8]
 8001ffc:	681a      	ldr	r2, [r3, #0]
 8001ffe:	68bb      	ldr	r3, [r7, #8]
 8002000:	605a      	str	r2, [r3, #4]
 8002002:	e000      	b.n	8002006 <DC_PID_Control+0x1a6>
		return;
 8002004:	bf00      	nop
}
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	2000049c 	.word	0x2000049c
 8002010:	2000034c 	.word	0x2000034c
 8002014:	200004d8 	.word	0x200004d8
 8002018:	20000394 	.word	0x20000394
 800201c:	634c0635 	.word	0x634c0635

08002020 <SERVO_PID_Control>:

void SERVO_PID_Control(PIDConfig *servoPidCfg, ServoConfig *servo, int dir){
 8002020:	b580      	push	{r7, lr}
 8002022:	b084      	sub	sp, #16
 8002024:	af00      	add	r7, sp, #0
 8002026:	60f8      	str	r0, [r7, #12]
 8002028:	60b9      	str	r1, [r7, #8]
 800202a:	607a      	str	r2, [r7, #4]
	//Control Loop

	if(dir)
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	2b00      	cmp	r3, #0
 8002030:	d00b      	beq.n	800204a <SERVO_PID_Control+0x2a>
		servo->error =  servo->current_Angle - servo->target_Angle;
 8002032:	68bb      	ldr	r3, [r7, #8]
 8002034:	ed93 7a01 	vldr	s14, [r3, #4]
 8002038:	68bb      	ldr	r3, [r7, #8]
 800203a:	edd3 7a02 	vldr	s15, [r3, #8]
 800203e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002042:	68bb      	ldr	r3, [r7, #8]
 8002044:	edc3 7a03 	vstr	s15, [r3, #12]
 8002048:	e00a      	b.n	8002060 <SERVO_PID_Control+0x40>
	else
		servo->error =  servo->target_Angle - servo->current_Angle;
 800204a:	68bb      	ldr	r3, [r7, #8]
 800204c:	ed93 7a02 	vldr	s14, [r3, #8]
 8002050:	68bb      	ldr	r3, [r7, #8]
 8002052:	edd3 7a01 	vldr	s15, [r3, #4]
 8002056:	ee77 7a67 	vsub.f32	s15, s14, s15
 800205a:	68bb      	ldr	r3, [r7, #8]
 800205c:	edc3 7a03 	vstr	s15, [r3, #12]

	servo->millisNow = HAL_GetTick();
 8002060:	f001 ffd2 	bl	8004008 <HAL_GetTick>
 8002064:	4603      	mov	r3, r0
 8002066:	461a      	mov	r2, r3
 8002068:	68bb      	ldr	r3, [r7, #8]
 800206a:	625a      	str	r2, [r3, #36]	; 0x24
	servo->dt = (servo->millisNow - servo->millisOld); // time elapsed in millisecond (delta time)
 800206c:	68bb      	ldr	r3, [r7, #8]
 800206e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002070:	68bb      	ldr	r3, [r7, #8]
 8002072:	6a1b      	ldr	r3, [r3, #32]
 8002074:	1ad2      	subs	r2, r2, r3
 8002076:	68bb      	ldr	r3, [r7, #8]
 8002078:	629a      	str	r2, [r3, #40]	; 0x28
	servo->millisOld = servo->millisNow; // store the current time for next round
 800207a:	68bb      	ldr	r3, [r7, #8]
 800207c:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800207e:	68bb      	ldr	r3, [r7, #8]
 8002080:	621a      	str	r2, [r3, #32]

	servo->error_area = servo->error_area + servo->error*servo->dt; // area under error for Ki
 8002082:	68bb      	ldr	r3, [r7, #8]
 8002084:	ed93 7a04 	vldr	s14, [r3, #16]
 8002088:	68bb      	ldr	r3, [r7, #8]
 800208a:	edd3 6a03 	vldr	s13, [r3, #12]
 800208e:	68bb      	ldr	r3, [r7, #8]
 8002090:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8002092:	ee07 3a90 	vmov	s15, r3
 8002096:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800209a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800209e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	edc3 7a04 	vstr	s15, [r3, #16]

	servo->error_change = servo->error - servo->error_old; // change in error
 80020a8:	68bb      	ldr	r3, [r7, #8]
 80020aa:	ed93 7a03 	vldr	s14, [r3, #12]
 80020ae:	68bb      	ldr	r3, [r7, #8]
 80020b0:	edd3 7a05 	vldr	s15, [r3, #20]
 80020b4:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020b8:	68bb      	ldr	r3, [r7, #8]
 80020ba:	edc3 7a06 	vstr	s15, [r3, #24]
	servo->error_old = servo->error; //store the error for next round
 80020be:	68bb      	ldr	r3, [r7, #8]
 80020c0:	68da      	ldr	r2, [r3, #12]
 80020c2:	68bb      	ldr	r3, [r7, #8]
 80020c4:	615a      	str	r2, [r3, #20]
	servo->error_rate = servo->error_change/servo->dt; // for Kd
 80020c6:	68bb      	ldr	r3, [r7, #8]
 80020c8:	edd3 6a06 	vldr	s13, [r3, #24]
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80020d8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	edc3 7a07 	vstr	s15, [r3, #28]

	servo->servoValue = (int)(servo->error * servoPidCfg->Kp + servo->error_area * servoPidCfg->Ki + servo->error_rate * servoPidCfg->Kd);  // PID
 80020e2:	68bb      	ldr	r3, [r7, #8]
 80020e4:	ed93 7a03 	vldr	s14, [r3, #12]
 80020e8:	68fb      	ldr	r3, [r7, #12]
 80020ea:	edd3 7a00 	vldr	s15, [r3]
 80020ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020f2:	68bb      	ldr	r3, [r7, #8]
 80020f4:	edd3 6a04 	vldr	s13, [r3, #16]
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80020fe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002102:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002106:	68bb      	ldr	r3, [r7, #8]
 8002108:	edd3 6a07 	vldr	s13, [r3, #28]
 800210c:	68fb      	ldr	r3, [r7, #12]
 800210e:	edd3 7a02 	vldr	s15, [r3, #8]
 8002112:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002116:	ee77 7a27 	vadd.f32	s15, s14, s15
 800211a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800211e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002122:	68bb      	ldr	r3, [r7, #8]
 8002124:	edc3 7a00 	vstr	s15, [r3]

	if (servo->servoValue > 75) // Clamp the degree angle to its maximum value 75 for LEFT
 8002128:	68bb      	ldr	r3, [r7, #8]
 800212a:	edd3 7a00 	vldr	s15, [r3]
 800212e:	ed9f 7a0e 	vldr	s14, [pc, #56]	; 8002168 <SERVO_PID_Control+0x148>
 8002132:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002136:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800213a:	dd03      	ble.n	8002144 <SERVO_PID_Control+0x124>
		servo->servoValue = 75;
 800213c:	68bb      	ldr	r3, [r7, #8]
 800213e:	4a0b      	ldr	r2, [pc, #44]	; (800216c <SERVO_PID_Control+0x14c>)
 8002140:	601a      	str	r2, [r3, #0]
	else if(servo->servoValue < -72){ //Clamp the degree angle to its minimum value -72 for RIGHT
		servo->servoValue = -72;
	}
}
 8002142:	e00d      	b.n	8002160 <SERVO_PID_Control+0x140>
	else if(servo->servoValue < -72){ //Clamp the degree angle to its minimum value -72 for RIGHT
 8002144:	68bb      	ldr	r3, [r7, #8]
 8002146:	edd3 7a00 	vldr	s15, [r3]
 800214a:	ed9f 7a09 	vldr	s14, [pc, #36]	; 8002170 <SERVO_PID_Control+0x150>
 800214e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002152:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002156:	d400      	bmi.n	800215a <SERVO_PID_Control+0x13a>
}
 8002158:	e002      	b.n	8002160 <SERVO_PID_Control+0x140>
		servo->servoValue = -72;
 800215a:	68bb      	ldr	r3, [r7, #8]
 800215c:	4a05      	ldr	r2, [pc, #20]	; (8002174 <SERVO_PID_Control+0x154>)
 800215e:	601a      	str	r2, [r3, #0]
}
 8002160:	bf00      	nop
 8002162:	3710      	adds	r7, #16
 8002164:	46bd      	mov	sp, r7
 8002166:	bd80      	pop	{r7, pc}
 8002168:	42960000 	.word	0x42960000
 800216c:	42960000 	.word	0x42960000
 8002170:	c2900000 	.word	0xc2900000
 8002174:	c2900000 	.word	0xc2900000

08002178 <Read_Gyro_DataZ>:
//	pos->x += deltaDistance * cos(pos->theta + deltaTheta / 2.0); //Car, X horizontal position (X axis) in meters
//	pos->y += deltaDistance * sin(pos->theta + deltaTheta / 2.0); //Car, Y vertical position (Y axis) in meters
//	pos->theta += deltaTheta; //Car, Orientation of car in Radians
}

void Read_Gyro_DataZ(int16_t * gyroZAxis){
 8002178:	b580      	push	{r7, lr}
 800217a:	b086      	sub	sp, #24
 800217c:	af04      	add	r7, sp, #16
 800217e:	6078      	str	r0, [r7, #4]
	HAL_I2C_Mem_Read(&hi2c1,ICM20948__I2C_SLAVE_ADDRESS_1 << 1, ICM20948__USER_BANK_0__GYRO_ZOUT_H__REGISTER, I2C_MEMADD_SIZE_8BIT, gyroData, 2, 0xFFFF);
 8002180:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002184:	9302      	str	r3, [sp, #8]
 8002186:	2302      	movs	r3, #2
 8002188:	9301      	str	r3, [sp, #4]
 800218a:	4b0b      	ldr	r3, [pc, #44]	; (80021b8 <Read_Gyro_DataZ+0x40>)
 800218c:	9300      	str	r3, [sp, #0]
 800218e:	2301      	movs	r3, #1
 8002190:	2237      	movs	r2, #55	; 0x37
 8002192:	21d0      	movs	r1, #208	; 0xd0
 8002194:	4809      	ldr	r0, [pc, #36]	; (80021bc <Read_Gyro_DataZ+0x44>)
 8002196:	f002 ff31 	bl	8004ffc <HAL_I2C_Mem_Read>
	*gyroZAxis = gyroData[0] << 8 | gyroData[1];
 800219a:	4b07      	ldr	r3, [pc, #28]	; (80021b8 <Read_Gyro_DataZ+0x40>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	021b      	lsls	r3, r3, #8
 80021a0:	b21a      	sxth	r2, r3
 80021a2:	4b05      	ldr	r3, [pc, #20]	; (80021b8 <Read_Gyro_DataZ+0x40>)
 80021a4:	785b      	ldrb	r3, [r3, #1]
 80021a6:	b21b      	sxth	r3, r3
 80021a8:	4313      	orrs	r3, r2
 80021aa:	b21a      	sxth	r2, r3
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	801a      	strh	r2, [r3, #0]
}
 80021b0:	bf00      	nop
 80021b2:	3708      	adds	r7, #8
 80021b4:	46bd      	mov	sp, r7
 80021b6:	bd80      	pop	{r7, pc}
 80021b8:	20000540 	.word	0x20000540
 80021bc:	200002b0 	.word	0x200002b0

080021c0 <SERVO_Straight_Control>:

void SERVO_Straight_Control(int dir){
 80021c0:	b5b0      	push	{r4, r5, r7, lr}
 80021c2:	b08a      	sub	sp, #40	; 0x28
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
	//Straight value of servo = 150
	int servoOutput = CENTER, offset = 0;
 80021c8:	2391      	movs	r3, #145	; 0x91
 80021ca:	627b      	str	r3, [r7, #36]	; 0x24
 80021cc:	2300      	movs	r3, #0
 80021ce:	623b      	str	r3, [r7, #32]
	char displayStr1[20];

	//Read from gyro
	Read_Gyro_DataZ(&gyroZAxis);
 80021d0:	483d      	ldr	r0, [pc, #244]	; (80022c8 <SERVO_Straight_Control+0x108>)
 80021d2:	f7ff ffd1 	bl	8002178 <Read_Gyro_DataZ>
	currAngle += gyroZAxis / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 80021d6:	4b3d      	ldr	r3, [pc, #244]	; (80022cc <SERVO_Straight_Control+0x10c>)
 80021d8:	681b      	ldr	r3, [r3, #0]
 80021da:	4618      	mov	r0, r3
 80021dc:	f7fe f9b4 	bl	8000548 <__aeabi_f2d>
 80021e0:	4604      	mov	r4, r0
 80021e2:	460d      	mov	r5, r1
 80021e4:	4b38      	ldr	r3, [pc, #224]	; (80022c8 <SERVO_Straight_Control+0x108>)
 80021e6:	f9b3 3000 	ldrsh.w	r3, [r3]
 80021ea:	4618      	mov	r0, r3
 80021ec:	f7fe f99a 	bl	8000524 <__aeabi_i2d>
 80021f0:	a331      	add	r3, pc, #196	; (adr r3, 80022b8 <SERVO_Straight_Control+0xf8>)
 80021f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021f6:	f7fe fb29 	bl	800084c <__aeabi_ddiv>
 80021fa:	4602      	mov	r2, r0
 80021fc:	460b      	mov	r3, r1
 80021fe:	4610      	mov	r0, r2
 8002200:	4619      	mov	r1, r3
 8002202:	a32f      	add	r3, pc, #188	; (adr r3, 80022c0 <SERVO_Straight_Control+0x100>)
 8002204:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002208:	f7fe f9f6 	bl	80005f8 <__aeabi_dmul>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4620      	mov	r0, r4
 8002212:	4629      	mov	r1, r5
 8002214:	f7fe f83a 	bl	800028c <__adddf3>
 8002218:	4602      	mov	r2, r0
 800221a:	460b      	mov	r3, r1
 800221c:	4610      	mov	r0, r2
 800221e:	4619      	mov	r1, r3
 8002220:	f7fe fcc2 	bl	8000ba8 <__aeabi_d2f>
 8002224:	4603      	mov	r3, r0
 8002226:	4a29      	ldr	r2, [pc, #164]	; (80022cc <SERVO_Straight_Control+0x10c>)
 8002228:	6013      	str	r3, [r2, #0]

	servo.target_Angle = 0;
 800222a:	4b29      	ldr	r3, [pc, #164]	; (80022d0 <SERVO_Straight_Control+0x110>)
 800222c:	f04f 0200 	mov.w	r2, #0
 8002230:	609a      	str	r2, [r3, #8]
	servo.current_Angle = currAngle;
 8002232:	4b26      	ldr	r3, [pc, #152]	; (80022cc <SERVO_Straight_Control+0x10c>)
 8002234:	681b      	ldr	r3, [r3, #0]
 8002236:	4a26      	ldr	r2, [pc, #152]	; (80022d0 <SERVO_Straight_Control+0x110>)
 8002238:	6053      	str	r3, [r2, #4]

//	if(servo.error >= 0 && servo.current_Angle < 0)// If wheel is recovering from right turn, require extra effort to straighten car
//		offset = -20;

	//Call PID to calculate the servo output required to hit the target angle (straight)
	SERVO_PID_Control(&servoPidCfg, &servo, dir);
 800223a:	687a      	ldr	r2, [r7, #4]
 800223c:	4924      	ldr	r1, [pc, #144]	; (80022d0 <SERVO_Straight_Control+0x110>)
 800223e:	4825      	ldr	r0, [pc, #148]	; (80022d4 <SERVO_Straight_Control+0x114>)
 8002240:	f7ff feee 	bl	8002020 <SERVO_PID_Control>

	//servo_output = round((output - MIN_PID_OUTPUT) * (MAX_SERVO_RANGE - MIN_SERVO_RANGE) / (MAX_PID_OUTPUT - MIN_PID_OUTPUT) + MIN_SERVO_RANGE);
	servoOutput = round((servo.servoValue - (-72)) * (240 - 54) / (75 - (-72)) + 54);
 8002244:	4b22      	ldr	r3, [pc, #136]	; (80022d0 <SERVO_Straight_Control+0x110>)
 8002246:	edd3 7a00 	vldr	s15, [r3]
 800224a:	ed9f 7a23 	vldr	s14, [pc, #140]	; 80022d8 <SERVO_Straight_Control+0x118>
 800224e:	ee77 7a87 	vadd.f32	s15, s15, s14
 8002252:	ed9f 7a22 	vldr	s14, [pc, #136]	; 80022dc <SERVO_Straight_Control+0x11c>
 8002256:	ee27 7a87 	vmul.f32	s14, s15, s14
 800225a:	eddf 6a21 	vldr	s13, [pc, #132]	; 80022e0 <SERVO_Straight_Control+0x120>
 800225e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002262:	ed9f 7a20 	vldr	s14, [pc, #128]	; 80022e4 <SERVO_Straight_Control+0x124>
 8002266:	ee77 7a87 	vadd.f32	s15, s15, s14
 800226a:	ee17 0a90 	vmov	r0, s15
 800226e:	f7fe f96b 	bl	8000548 <__aeabi_f2d>
 8002272:	4602      	mov	r2, r0
 8002274:	460b      	mov	r3, r1
 8002276:	ec43 2b10 	vmov	d0, r2, r3
 800227a:	f00c fbaf 	bl	800e9dc <round>
 800227e:	ec53 2b10 	vmov	r2, r3, d0
 8002282:	4610      	mov	r0, r2
 8002284:	4619      	mov	r1, r3
 8002286:	f7fe fc67 	bl	8000b58 <__aeabi_d2iz>
 800228a:	4603      	mov	r3, r0
 800228c:	627b      	str	r3, [r7, #36]	; 0x24
//			  servoOutput = 140 - offset;
//		  } else {
//			  servoOutput = 160 + offset;
//		  }
//		}
	if(servoOutput > RIGHT_MAX)
 800228e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002290:	2bf0      	cmp	r3, #240	; 0xf0
 8002292:	dd02      	ble.n	800229a <SERVO_Straight_Control+0xda>
		servoOutput = RIGHT_MAX;
 8002294:	23f0      	movs	r3, #240	; 0xf0
 8002296:	627b      	str	r3, [r7, #36]	; 0x24
 8002298:	e004      	b.n	80022a4 <SERVO_Straight_Control+0xe4>
	else if(servoOutput < LEFT_MAX)
 800229a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800229c:	2b5e      	cmp	r3, #94	; 0x5e
 800229e:	dc01      	bgt.n	80022a4 <SERVO_Straight_Control+0xe4>
		servoOutput = LEFT_MAX;
 80022a0:	235f      	movs	r3, #95	; 0x5f
 80022a2:	627b      	str	r3, [r7, #36]	; 0x24

//		sprintf(displayStr1, "S: %6d\0", servoOutput);
//		OLED_ShowString(10, 40, displayStr1);

	htim1.Instance->CCR4 = servoOutput;
 80022a4:	4b10      	ldr	r3, [pc, #64]	; (80022e8 <SERVO_Straight_Control+0x128>)
 80022a6:	681b      	ldr	r3, [r3, #0]
 80022a8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80022aa:	641a      	str	r2, [r3, #64]	; 0x40

}
 80022ac:	bf00      	nop
 80022ae:	3728      	adds	r7, #40	; 0x28
 80022b0:	46bd      	mov	sp, r7
 80022b2:	bdb0      	pop	{r4, r5, r7, pc}
 80022b4:	f3af 8000 	nop.w
 80022b8:	66666666 	.word	0x66666666
 80022bc:	40306666 	.word	0x40306666
 80022c0:	47ae147b 	.word	0x47ae147b
 80022c4:	3f847ae1 	.word	0x3f847ae1
 80022c8:	2000054c 	.word	0x2000054c
 80022cc:	20000544 	.word	0x20000544
 80022d0:	20000514 	.word	0x20000514
 80022d4:	2000000c 	.word	0x2000000c
 80022d8:	42900000 	.word	0x42900000
 80022dc:	433a0000 	.word	0x433a0000
 80022e0:	43130000 	.word	0x43130000
 80022e4:	42580000 	.word	0x42580000
 80022e8:	20000304 	.word	0x20000304
 80022ec:	00000000 	.word	0x00000000

080022f0 <Calculate_StraightLine>:

void Calculate_StraightLine(float * targetAngle, int RLDir){ //RLDir = Left/Right
 80022f0:	b5b0      	push	{r4, r5, r7, lr}
 80022f2:	b084      	sub	sp, #16
 80022f4:	af00      	add	r7, sp, #0
 80022f6:	6078      	str	r0, [r7, #4]
 80022f8:	6039      	str	r1, [r7, #0]
	int lastTick;
	currAngle = 0.0; gyroZAxis = 0;
 80022fa:	4b47      	ldr	r3, [pc, #284]	; (8002418 <Calculate_StraightLine+0x128>)
 80022fc:	f04f 0200 	mov.w	r2, #0
 8002300:	601a      	str	r2, [r3, #0]
 8002302:	4b46      	ldr	r3, [pc, #280]	; (800241c <Calculate_StraightLine+0x12c>)
 8002304:	2200      	movs	r2, #0
 8002306:	801a      	strh	r2, [r3, #0]

	lastTick = HAL_GetTick();
 8002308:	f001 fe7e 	bl	8004008 <HAL_GetTick>
 800230c:	4603      	mov	r3, r0
 800230e:	60fb      	str	r3, [r7, #12]

	do{
		if(HAL_GetTick() - lastTick >= 10){
 8002310:	f001 fe7a 	bl	8004008 <HAL_GetTick>
 8002314:	4602      	mov	r2, r0
 8002316:	68fb      	ldr	r3, [r7, #12]
 8002318:	1ad3      	subs	r3, r2, r3
 800231a:	2b09      	cmp	r3, #9
 800231c:	d9f8      	bls.n	8002310 <Calculate_StraightLine+0x20>
			Read_Gyro_DataZ(&gyroZAxis);
 800231e:	483f      	ldr	r0, [pc, #252]	; (800241c <Calculate_StraightLine+0x12c>)
 8002320:	f7ff ff2a 	bl	8002178 <Read_Gyro_DataZ>
			currAngle += gyroZAxis / GRYO_SENSITIVITY_SCALE_FACTOR_2000DPS * 0.01;
 8002324:	4b3c      	ldr	r3, [pc, #240]	; (8002418 <Calculate_StraightLine+0x128>)
 8002326:	681b      	ldr	r3, [r3, #0]
 8002328:	4618      	mov	r0, r3
 800232a:	f7fe f90d 	bl	8000548 <__aeabi_f2d>
 800232e:	4604      	mov	r4, r0
 8002330:	460d      	mov	r5, r1
 8002332:	4b3a      	ldr	r3, [pc, #232]	; (800241c <Calculate_StraightLine+0x12c>)
 8002334:	f9b3 3000 	ldrsh.w	r3, [r3]
 8002338:	4618      	mov	r0, r3
 800233a:	f7fe f8f3 	bl	8000524 <__aeabi_i2d>
 800233e:	a332      	add	r3, pc, #200	; (adr r3, 8002408 <Calculate_StraightLine+0x118>)
 8002340:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002344:	f7fe fa82 	bl	800084c <__aeabi_ddiv>
 8002348:	4602      	mov	r2, r0
 800234a:	460b      	mov	r3, r1
 800234c:	4610      	mov	r0, r2
 800234e:	4619      	mov	r1, r3
 8002350:	a32f      	add	r3, pc, #188	; (adr r3, 8002410 <Calculate_StraightLine+0x120>)
 8002352:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002356:	f7fe f94f 	bl	80005f8 <__aeabi_dmul>
 800235a:	4602      	mov	r2, r0
 800235c:	460b      	mov	r3, r1
 800235e:	4620      	mov	r0, r4
 8002360:	4629      	mov	r1, r5
 8002362:	f7fd ff93 	bl	800028c <__adddf3>
 8002366:	4602      	mov	r2, r0
 8002368:	460b      	mov	r3, r1
 800236a:	4610      	mov	r0, r2
 800236c:	4619      	mov	r1, r3
 800236e:	f7fe fc1b 	bl	8000ba8 <__aeabi_d2f>
 8002372:	4603      	mov	r3, r0
 8002374:	4a28      	ldr	r2, [pc, #160]	; (8002418 <Calculate_StraightLine+0x128>)
 8002376:	6013      	str	r3, [r2, #0]

			if(abs(currAngle - *targetAngle) < 0.01)
 8002378:	4b27      	ldr	r3, [pc, #156]	; (8002418 <Calculate_StraightLine+0x128>)
 800237a:	ed93 7a00 	vldr	s14, [r3]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	edd3 7a00 	vldr	s15, [r3]
 8002384:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002388:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800238c:	ee17 3a90 	vmov	r3, s15
 8002390:	2b00      	cmp	r3, #0
 8002392:	db0d      	blt.n	80023b0 <Calculate_StraightLine+0xc0>
 8002394:	4b20      	ldr	r3, [pc, #128]	; (8002418 <Calculate_StraightLine+0x128>)
 8002396:	ed93 7a00 	vldr	s14, [r3]
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023a8:	ee17 3a90 	vmov	r3, s15
 80023ac:	2b00      	cmp	r3, #0
 80023ae:	dd04      	ble.n	80023ba <Calculate_StraightLine+0xca>
				break;

			lastTick = HAL_GetTick();
 80023b0:	f001 fe2a 	bl	8004008 <HAL_GetTick>
 80023b4:	4603      	mov	r3, r0
 80023b6:	60fb      	str	r3, [r7, #12]
		if(HAL_GetTick() - lastTick >= 10){
 80023b8:	e7aa      	b.n	8002310 <Calculate_StraightLine+0x20>
				break;
 80023ba:	bf00      	nop
		}
	}while(1);
	htim8.Instance->CCR1 = 0;
 80023bc:	4b18      	ldr	r3, [pc, #96]	; (8002420 <Calculate_StraightLine+0x130>)
 80023be:	681b      	ldr	r3, [r3, #0]
 80023c0:	2200      	movs	r2, #0
 80023c2:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 0;
 80023c4:	4b16      	ldr	r3, [pc, #88]	; (8002420 <Calculate_StraightLine+0x130>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	2200      	movs	r2, #0
 80023ca:	639a      	str	r2, [r3, #56]	; 0x38

	if(RLDir)
 80023cc:	683b      	ldr	r3, [r7, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	d004      	beq.n	80023dc <Calculate_StraightLine+0xec>
		htim1.Instance->CCR4 = CENTER;
 80023d2:	4b14      	ldr	r3, [pc, #80]	; (8002424 <Calculate_StraightLine+0x134>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	2291      	movs	r2, #145	; 0x91
 80023d8:	641a      	str	r2, [r3, #64]	; 0x40
 80023da:	e003      	b.n	80023e4 <Calculate_StraightLine+0xf4>
	else
		htim1.Instance->CCR4 = CENTER;
 80023dc:	4b11      	ldr	r3, [pc, #68]	; (8002424 <Calculate_StraightLine+0x134>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	2291      	movs	r2, #145	; 0x91
 80023e2:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 80023e4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80023e8:	f006 fbf0 	bl	8008bcc <osDelay>

	currAngle = 0.0; gyroZAxis = 0;
 80023ec:	4b0a      	ldr	r3, [pc, #40]	; (8002418 <Calculate_StraightLine+0x128>)
 80023ee:	f04f 0200 	mov.w	r2, #0
 80023f2:	601a      	str	r2, [r3, #0]
 80023f4:	4b09      	ldr	r3, [pc, #36]	; (800241c <Calculate_StraightLine+0x12c>)
 80023f6:	2200      	movs	r2, #0
 80023f8:	801a      	strh	r2, [r3, #0]
}
 80023fa:	bf00      	nop
 80023fc:	3710      	adds	r7, #16
 80023fe:	46bd      	mov	sp, r7
 8002400:	bdb0      	pop	{r4, r5, r7, pc}
 8002402:	bf00      	nop
 8002404:	f3af 8000 	nop.w
 8002408:	66666666 	.word	0x66666666
 800240c:	40306666 	.word	0x40306666
 8002410:	47ae147b 	.word	0x47ae147b
 8002414:	3f847ae1 	.word	0x3f847ae1
 8002418:	20000544 	.word	0x20000544
 800241c:	2000054c 	.word	0x2000054c
 8002420:	200003dc 	.word	0x200003dc
 8002424:	20000304 	.word	0x20000304

08002428 <Servo_Turn_Right_90>:

void Servo_Turn_Right_90(){
 8002428:	b580      	push	{r7, lr}
 800242a:	af00      	add	r7, sp, #0
	currAngle = 0.0; gyroZAxis = 0;
 800242c:	4b1c      	ldr	r3, [pc, #112]	; (80024a0 <Servo_Turn_Right_90+0x78>)
 800242e:	f04f 0200 	mov.w	r2, #0
 8002432:	601a      	str	r2, [r3, #0]
 8002434:	4b1b      	ldr	r3, [pc, #108]	; (80024a4 <Servo_Turn_Right_90+0x7c>)
 8002436:	2200      	movs	r2, #0
 8002438:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 800243a:	4b1b      	ldr	r3, [pc, #108]	; (80024a8 <Servo_Turn_Right_90+0x80>)
 800243c:	4618      	mov	r0, r3
 800243e:	232c      	movs	r3, #44	; 0x2c
 8002440:	461a      	mov	r2, r3
 8002442:	2100      	movs	r1, #0
 8002444:	f009 fc7d 	bl	800bd42 <memset>

	targetAngle = -80;
 8002448:	4b18      	ldr	r3, [pc, #96]	; (80024ac <Servo_Turn_Right_90+0x84>)
 800244a:	4a19      	ldr	r2, [pc, #100]	; (80024b0 <Servo_Turn_Right_90+0x88>)
 800244c:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR4 = RIGHT_MAX;
 800244e:	4b19      	ldr	r3, [pc, #100]	; (80024b4 <Servo_Turn_Right_90+0x8c>)
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	22f0      	movs	r2, #240	; 0xf0
 8002454:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 8002456:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800245a:	f006 fbb7 	bl	8008bcc <osDelay>

	Set_Motor_Direction(1);
 800245e:	2001      	movs	r0, #1
 8002460:	f7ff fb84 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 4000;
 8002464:	4b14      	ldr	r3, [pc, #80]	; (80024b8 <Servo_Turn_Right_90+0x90>)
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800246c:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 3500;
 800246e:	4b12      	ldr	r3, [pc, #72]	; (80024b8 <Servo_Turn_Right_90+0x90>)
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	f640 52ac 	movw	r2, #3500	; 0xdac
 8002476:	639a      	str	r2, [r3, #56]	; 0x38

	Calculate_StraightLine(&targetAngle, 0);
 8002478:	2100      	movs	r1, #0
 800247a:	480c      	ldr	r0, [pc, #48]	; (80024ac <Servo_Turn_Right_90+0x84>)
 800247c:	f7ff ff38 	bl	80022f0 <Calculate_StraightLine>
	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
 8002480:	4b07      	ldr	r3, [pc, #28]	; (80024a0 <Servo_Turn_Right_90+0x78>)
 8002482:	f04f 0200 	mov.w	r2, #0
 8002486:	601a      	str	r2, [r3, #0]
 8002488:	4b06      	ldr	r3, [pc, #24]	; (80024a4 <Servo_Turn_Right_90+0x7c>)
 800248a:	2200      	movs	r2, #0
 800248c:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 800248e:	4b06      	ldr	r3, [pc, #24]	; (80024a8 <Servo_Turn_Right_90+0x80>)
 8002490:	4618      	mov	r0, r3
 8002492:	232c      	movs	r3, #44	; 0x2c
 8002494:	461a      	mov	r2, r3
 8002496:	2100      	movs	r1, #0
 8002498:	f009 fc53 	bl	800bd42 <memset>
}
 800249c:	bf00      	nop
 800249e:	bd80      	pop	{r7, pc}
 80024a0:	20000544 	.word	0x20000544
 80024a4:	2000054c 	.word	0x2000054c
 80024a8:	20000514 	.word	0x20000514
 80024ac:	20000548 	.word	0x20000548
 80024b0:	c2a00000 	.word	0xc2a00000
 80024b4:	20000304 	.word	0x20000304
 80024b8:	200003dc 	.word	0x200003dc

080024bc <Servo_Turn_Right_90_2>:

void Servo_Turn_Right_90_2(){
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
	currAngle = 0.0; gyroZAxis = 0;
 80024c0:	4b20      	ldr	r3, [pc, #128]	; (8002544 <Servo_Turn_Right_90_2+0x88>)
 80024c2:	f04f 0200 	mov.w	r2, #0
 80024c6:	601a      	str	r2, [r3, #0]
 80024c8:	4b1f      	ldr	r3, [pc, #124]	; (8002548 <Servo_Turn_Right_90_2+0x8c>)
 80024ca:	2200      	movs	r2, #0
 80024cc:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 80024ce:	4b1f      	ldr	r3, [pc, #124]	; (800254c <Servo_Turn_Right_90_2+0x90>)
 80024d0:	4618      	mov	r0, r3
 80024d2:	232c      	movs	r3, #44	; 0x2c
 80024d4:	461a      	mov	r2, r3
 80024d6:	2100      	movs	r1, #0
 80024d8:	f009 fc33 	bl	800bd42 <memset>

	targetAngle = -84;
 80024dc:	4b1c      	ldr	r3, [pc, #112]	; (8002550 <Servo_Turn_Right_90_2+0x94>)
 80024de:	4a1d      	ldr	r2, [pc, #116]	; (8002554 <Servo_Turn_Right_90_2+0x98>)
 80024e0:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR4 = RIGHT_MAX;
 80024e2:	4b1d      	ldr	r3, [pc, #116]	; (8002558 <Servo_Turn_Right_90_2+0x9c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	22f0      	movs	r2, #240	; 0xf0
 80024e8:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 80024ea:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024ee:	f006 fb6d 	bl	8008bcc <osDelay>

	Set_Motor_Direction(1);
 80024f2:	2001      	movs	r0, #1
 80024f4:	f7ff fb3a 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 3000;
 80024f8:	4b18      	ldr	r3, [pc, #96]	; (800255c <Servo_Turn_Right_90_2+0xa0>)
 80024fa:	681b      	ldr	r3, [r3, #0]
 80024fc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002500:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 800;
 8002502:	4b16      	ldr	r3, [pc, #88]	; (800255c <Servo_Turn_Right_90_2+0xa0>)
 8002504:	681b      	ldr	r3, [r3, #0]
 8002506:	f44f 7248 	mov.w	r2, #800	; 0x320
 800250a:	639a      	str	r2, [r3, #56]	; 0x38

	Calculate_StraightLine(&targetAngle, 0);
 800250c:	2100      	movs	r1, #0
 800250e:	4810      	ldr	r0, [pc, #64]	; (8002550 <Servo_Turn_Right_90_2+0x94>)
 8002510:	f7ff feee 	bl	80022f0 <Calculate_StraightLine>
	DC_MoveDistForward(400, 0.2, 0);
 8002514:	2100      	movs	r1, #0
 8002516:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002560 <Servo_Turn_Right_90_2+0xa4>
 800251a:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800251e:	f000 fc1f 	bl	8002d60 <DC_MoveDistForward>
	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
 8002522:	4b08      	ldr	r3, [pc, #32]	; (8002544 <Servo_Turn_Right_90_2+0x88>)
 8002524:	f04f 0200 	mov.w	r2, #0
 8002528:	601a      	str	r2, [r3, #0]
 800252a:	4b07      	ldr	r3, [pc, #28]	; (8002548 <Servo_Turn_Right_90_2+0x8c>)
 800252c:	2200      	movs	r2, #0
 800252e:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 8002530:	4b06      	ldr	r3, [pc, #24]	; (800254c <Servo_Turn_Right_90_2+0x90>)
 8002532:	4618      	mov	r0, r3
 8002534:	232c      	movs	r3, #44	; 0x2c
 8002536:	461a      	mov	r2, r3
 8002538:	2100      	movs	r1, #0
 800253a:	f009 fc02 	bl	800bd42 <memset>
}
 800253e:	bf00      	nop
 8002540:	bd80      	pop	{r7, pc}
 8002542:	bf00      	nop
 8002544:	20000544 	.word	0x20000544
 8002548:	2000054c 	.word	0x2000054c
 800254c:	20000514 	.word	0x20000514
 8002550:	20000548 	.word	0x20000548
 8002554:	c2a80000 	.word	0xc2a80000
 8002558:	20000304 	.word	0x20000304
 800255c:	200003dc 	.word	0x200003dc
 8002560:	3e4ccccd 	.word	0x3e4ccccd

08002564 <Servo_Turn_Left_90_2>:
	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
	servo = emptyServo;
}

void Servo_Turn_Left_90_2(){
 8002564:	b580      	push	{r7, lr}
 8002566:	af00      	add	r7, sp, #0
	currAngle = 0.0; gyroZAxis = 0;
 8002568:	4b23      	ldr	r3, [pc, #140]	; (80025f8 <Servo_Turn_Left_90_2+0x94>)
 800256a:	f04f 0200 	mov.w	r2, #0
 800256e:	601a      	str	r2, [r3, #0]
 8002570:	4b22      	ldr	r3, [pc, #136]	; (80025fc <Servo_Turn_Left_90_2+0x98>)
 8002572:	2200      	movs	r2, #0
 8002574:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 8002576:	4b22      	ldr	r3, [pc, #136]	; (8002600 <Servo_Turn_Left_90_2+0x9c>)
 8002578:	4618      	mov	r0, r3
 800257a:	232c      	movs	r3, #44	; 0x2c
 800257c:	461a      	mov	r2, r3
 800257e:	2100      	movs	r1, #0
 8002580:	f009 fbdf 	bl	800bd42 <memset>

	targetAngle = 82;
 8002584:	4b1f      	ldr	r3, [pc, #124]	; (8002604 <Servo_Turn_Left_90_2+0xa0>)
 8002586:	4a20      	ldr	r2, [pc, #128]	; (8002608 <Servo_Turn_Left_90_2+0xa4>)
 8002588:	601a      	str	r2, [r3, #0]
	DC_MoveDistForward(400, 0.015, 1);
 800258a:	2101      	movs	r1, #1
 800258c:	ed9f 0a1f 	vldr	s0, [pc, #124]	; 800260c <Servo_Turn_Left_90_2+0xa8>
 8002590:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002594:	f000 fbe4 	bl	8002d60 <DC_MoveDistForward>
	htim1.Instance->CCR4 = 82;
 8002598:	4b1d      	ldr	r3, [pc, #116]	; (8002610 <Servo_Turn_Left_90_2+0xac>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	2252      	movs	r2, #82	; 0x52
 800259e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 80025a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80025a4:	f006 fb12 	bl	8008bcc <osDelay>

	Set_Motor_Direction(1);
 80025a8:	2001      	movs	r0, #1
 80025aa:	f7ff fadf 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 800;
 80025ae:	4b19      	ldr	r3, [pc, #100]	; (8002614 <Servo_Turn_Left_90_2+0xb0>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	f44f 7248 	mov.w	r2, #800	; 0x320
 80025b6:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 3000;
 80025b8:	4b16      	ldr	r3, [pc, #88]	; (8002614 <Servo_Turn_Left_90_2+0xb0>)
 80025ba:	681b      	ldr	r3, [r3, #0]
 80025bc:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80025c0:	639a      	str	r2, [r3, #56]	; 0x38

	Calculate_StraightLine(&targetAngle, 1);
 80025c2:	2101      	movs	r1, #1
 80025c4:	480f      	ldr	r0, [pc, #60]	; (8002604 <Servo_Turn_Left_90_2+0xa0>)
 80025c6:	f7ff fe93 	bl	80022f0 <Calculate_StraightLine>
	DC_MoveDistForward(400, 0.303, 0);
 80025ca:	2100      	movs	r1, #0
 80025cc:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002618 <Servo_Turn_Left_90_2+0xb4>
 80025d0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80025d4:	f000 fbc4 	bl	8002d60 <DC_MoveDistForward>
	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <Servo_Turn_Left_90_2+0x94>)
 80025da:	f04f 0200 	mov.w	r2, #0
 80025de:	601a      	str	r2, [r3, #0]
 80025e0:	4b06      	ldr	r3, [pc, #24]	; (80025fc <Servo_Turn_Left_90_2+0x98>)
 80025e2:	2200      	movs	r2, #0
 80025e4:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 80025e6:	4b06      	ldr	r3, [pc, #24]	; (8002600 <Servo_Turn_Left_90_2+0x9c>)
 80025e8:	4618      	mov	r0, r3
 80025ea:	232c      	movs	r3, #44	; 0x2c
 80025ec:	461a      	mov	r2, r3
 80025ee:	2100      	movs	r1, #0
 80025f0:	f009 fba7 	bl	800bd42 <memset>
}
 80025f4:	bf00      	nop
 80025f6:	bd80      	pop	{r7, pc}
 80025f8:	20000544 	.word	0x20000544
 80025fc:	2000054c 	.word	0x2000054c
 8002600:	20000514 	.word	0x20000514
 8002604:	20000548 	.word	0x20000548
 8002608:	42a40000 	.word	0x42a40000
 800260c:	3c75c28f 	.word	0x3c75c28f
 8002610:	20000304 	.word	0x20000304
 8002614:	200003dc 	.word	0x200003dc
 8002618:	3e9b22d1 	.word	0x3e9b22d1

0800261c <Servo_Turn_LeftRight_Outdoor>:
	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
	servo = emptyServo;
}

void Servo_Turn_LeftRight_Outdoor(){
 800261c:	b580      	push	{r7, lr}
 800261e:	af00      	add	r7, sp, #0
	currAngle = 0.0; gyroZAxis = 0;
 8002620:	4b2e      	ldr	r3, [pc, #184]	; (80026dc <Servo_Turn_LeftRight_Outdoor+0xc0>)
 8002622:	f04f 0200 	mov.w	r2, #0
 8002626:	601a      	str	r2, [r3, #0]
 8002628:	4b2d      	ldr	r3, [pc, #180]	; (80026e0 <Servo_Turn_LeftRight_Outdoor+0xc4>)
 800262a:	2200      	movs	r2, #0
 800262c:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 800262e:	4b2d      	ldr	r3, [pc, #180]	; (80026e4 <Servo_Turn_LeftRight_Outdoor+0xc8>)
 8002630:	4618      	mov	r0, r3
 8002632:	232c      	movs	r3, #44	; 0x2c
 8002634:	461a      	mov	r2, r3
 8002636:	2100      	movs	r1, #0
 8002638:	f009 fb83 	bl	800bd42 <memset>

	targetAngle = 80;
 800263c:	4b2a      	ldr	r3, [pc, #168]	; (80026e8 <Servo_Turn_LeftRight_Outdoor+0xcc>)
 800263e:	4a2b      	ldr	r2, [pc, #172]	; (80026ec <Servo_Turn_LeftRight_Outdoor+0xd0>)
 8002640:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR4 = LEFT_MAX;
 8002642:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <Servo_Turn_LeftRight_Outdoor+0xd4>)
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	225f      	movs	r2, #95	; 0x5f
 8002648:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 800264a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800264e:	f006 fabd 	bl	8008bcc <osDelay>

	Set_Motor_Direction(1);
 8002652:	2001      	movs	r0, #1
 8002654:	f7ff fa8a 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 800;
 8002658:	4b26      	ldr	r3, [pc, #152]	; (80026f4 <Servo_Turn_LeftRight_Outdoor+0xd8>)
 800265a:	681b      	ldr	r3, [r3, #0]
 800265c:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002660:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 4000;
 8002662:	4b24      	ldr	r3, [pc, #144]	; (80026f4 <Servo_Turn_LeftRight_Outdoor+0xd8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 800266a:	639a      	str	r2, [r3, #56]	; 0x38
	Calculate_StraightLine(&targetAngle, 1);
 800266c:	2101      	movs	r1, #1
 800266e:	481e      	ldr	r0, [pc, #120]	; (80026e8 <Servo_Turn_LeftRight_Outdoor+0xcc>)
 8002670:	f7ff fe3e 	bl	80022f0 <Calculate_StraightLine>

	DC_MoveDistForward(300, 0.1, 1);
 8002674:	2101      	movs	r1, #1
 8002676:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80026f8 <Servo_Turn_LeftRight_Outdoor+0xdc>
 800267a:	f44f 7096 	mov.w	r0, #300	; 0x12c
 800267e:	f000 fb6f 	bl	8002d60 <DC_MoveDistForward>

	targetAngle = -82;
 8002682:	4b19      	ldr	r3, [pc, #100]	; (80026e8 <Servo_Turn_LeftRight_Outdoor+0xcc>)
 8002684:	4a1d      	ldr	r2, [pc, #116]	; (80026fc <Servo_Turn_LeftRight_Outdoor+0xe0>)
 8002686:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR4 = RIGHT_MAX;
 8002688:	4b19      	ldr	r3, [pc, #100]	; (80026f0 <Servo_Turn_LeftRight_Outdoor+0xd4>)
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	22f0      	movs	r2, #240	; 0xf0
 800268e:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 8002690:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002694:	f006 fa9a 	bl	8008bcc <osDelay>

	Set_Motor_Direction(1);
 8002698:	2001      	movs	r0, #1
 800269a:	f7ff fa67 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 4000;
 800269e:	4b15      	ldr	r3, [pc, #84]	; (80026f4 <Servo_Turn_LeftRight_Outdoor+0xd8>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 80026a6:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 800;
 80026a8:	4b12      	ldr	r3, [pc, #72]	; (80026f4 <Servo_Turn_LeftRight_Outdoor+0xd8>)
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	f44f 7248 	mov.w	r2, #800	; 0x320
 80026b0:	639a      	str	r2, [r3, #56]	; 0x38
	Calculate_StraightLine(&targetAngle, 0);
 80026b2:	2100      	movs	r1, #0
 80026b4:	480c      	ldr	r0, [pc, #48]	; (80026e8 <Servo_Turn_LeftRight_Outdoor+0xcc>)
 80026b6:	f7ff fe1b 	bl	80022f0 <Calculate_StraightLine>
	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
 80026ba:	4b08      	ldr	r3, [pc, #32]	; (80026dc <Servo_Turn_LeftRight_Outdoor+0xc0>)
 80026bc:	f04f 0200 	mov.w	r2, #0
 80026c0:	601a      	str	r2, [r3, #0]
 80026c2:	4b07      	ldr	r3, [pc, #28]	; (80026e0 <Servo_Turn_LeftRight_Outdoor+0xc4>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 80026c8:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <Servo_Turn_LeftRight_Outdoor+0xc8>)
 80026ca:	4618      	mov	r0, r3
 80026cc:	232c      	movs	r3, #44	; 0x2c
 80026ce:	461a      	mov	r2, r3
 80026d0:	2100      	movs	r1, #0
 80026d2:	f009 fb36 	bl	800bd42 <memset>
}
 80026d6:	bf00      	nop
 80026d8:	bd80      	pop	{r7, pc}
 80026da:	bf00      	nop
 80026dc:	20000544 	.word	0x20000544
 80026e0:	2000054c 	.word	0x2000054c
 80026e4:	20000514 	.word	0x20000514
 80026e8:	20000548 	.word	0x20000548
 80026ec:	42a00000 	.word	0x42a00000
 80026f0:	20000304 	.word	0x20000304
 80026f4:	200003dc 	.word	0x200003dc
 80026f8:	3dcccccd 	.word	0x3dcccccd
 80026fc:	c2a40000 	.word	0xc2a40000

08002700 <Servo_Turn_RightLeft_Outdoor>:

void Servo_Turn_RightLeft_Outdoor(){
 8002700:	b580      	push	{r7, lr}
 8002702:	af00      	add	r7, sp, #0
	currAngle = 0.0; gyroZAxis = 0;
 8002704:	4b2e      	ldr	r3, [pc, #184]	; (80027c0 <Servo_Turn_RightLeft_Outdoor+0xc0>)
 8002706:	f04f 0200 	mov.w	r2, #0
 800270a:	601a      	str	r2, [r3, #0]
 800270c:	4b2d      	ldr	r3, [pc, #180]	; (80027c4 <Servo_Turn_RightLeft_Outdoor+0xc4>)
 800270e:	2200      	movs	r2, #0
 8002710:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 8002712:	4b2d      	ldr	r3, [pc, #180]	; (80027c8 <Servo_Turn_RightLeft_Outdoor+0xc8>)
 8002714:	4618      	mov	r0, r3
 8002716:	232c      	movs	r3, #44	; 0x2c
 8002718:	461a      	mov	r2, r3
 800271a:	2100      	movs	r1, #0
 800271c:	f009 fb11 	bl	800bd42 <memset>

	targetAngle = -80;
 8002720:	4b2a      	ldr	r3, [pc, #168]	; (80027cc <Servo_Turn_RightLeft_Outdoor+0xcc>)
 8002722:	4a2b      	ldr	r2, [pc, #172]	; (80027d0 <Servo_Turn_RightLeft_Outdoor+0xd0>)
 8002724:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR4 = RIGHT_MAX;
 8002726:	4b2b      	ldr	r3, [pc, #172]	; (80027d4 <Servo_Turn_RightLeft_Outdoor+0xd4>)
 8002728:	681b      	ldr	r3, [r3, #0]
 800272a:	22f0      	movs	r2, #240	; 0xf0
 800272c:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 800272e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002732:	f006 fa4b 	bl	8008bcc <osDelay>

	Set_Motor_Direction(1);
 8002736:	2001      	movs	r0, #1
 8002738:	f7ff fa18 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 4000;
 800273c:	4b26      	ldr	r3, [pc, #152]	; (80027d8 <Servo_Turn_RightLeft_Outdoor+0xd8>)
 800273e:	681b      	ldr	r3, [r3, #0]
 8002740:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002744:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 800;
 8002746:	4b24      	ldr	r3, [pc, #144]	; (80027d8 <Servo_Turn_RightLeft_Outdoor+0xd8>)
 8002748:	681b      	ldr	r3, [r3, #0]
 800274a:	f44f 7248 	mov.w	r2, #800	; 0x320
 800274e:	639a      	str	r2, [r3, #56]	; 0x38
	Calculate_StraightLine(&targetAngle, 0);
 8002750:	2100      	movs	r1, #0
 8002752:	481e      	ldr	r0, [pc, #120]	; (80027cc <Servo_Turn_RightLeft_Outdoor+0xcc>)
 8002754:	f7ff fdcc 	bl	80022f0 <Calculate_StraightLine>

	DC_MoveDistForward(300, 0.1, 1);
 8002758:	2101      	movs	r1, #1
 800275a:	ed9f 0a20 	vldr	s0, [pc, #128]	; 80027dc <Servo_Turn_RightLeft_Outdoor+0xdc>
 800275e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002762:	f000 fafd 	bl	8002d60 <DC_MoveDistForward>

	targetAngle = 82;
 8002766:	4b19      	ldr	r3, [pc, #100]	; (80027cc <Servo_Turn_RightLeft_Outdoor+0xcc>)
 8002768:	4a1d      	ldr	r2, [pc, #116]	; (80027e0 <Servo_Turn_RightLeft_Outdoor+0xe0>)
 800276a:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR4 = LEFT_MAX;
 800276c:	4b19      	ldr	r3, [pc, #100]	; (80027d4 <Servo_Turn_RightLeft_Outdoor+0xd4>)
 800276e:	681b      	ldr	r3, [r3, #0]
 8002770:	225f      	movs	r2, #95	; 0x5f
 8002772:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 8002774:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002778:	f006 fa28 	bl	8008bcc <osDelay>

	Set_Motor_Direction(1);
 800277c:	2001      	movs	r0, #1
 800277e:	f7ff f9f5 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 800;
 8002782:	4b15      	ldr	r3, [pc, #84]	; (80027d8 <Servo_Turn_RightLeft_Outdoor+0xd8>)
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	f44f 7248 	mov.w	r2, #800	; 0x320
 800278a:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 4000;
 800278c:	4b12      	ldr	r3, [pc, #72]	; (80027d8 <Servo_Turn_RightLeft_Outdoor+0xd8>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	f44f 627a 	mov.w	r2, #4000	; 0xfa0
 8002794:	639a      	str	r2, [r3, #56]	; 0x38
	Calculate_StraightLine(&targetAngle, 1);
 8002796:	2101      	movs	r1, #1
 8002798:	480c      	ldr	r0, [pc, #48]	; (80027cc <Servo_Turn_RightLeft_Outdoor+0xcc>)
 800279a:	f7ff fda9 	bl	80022f0 <Calculate_StraightLine>
	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
 800279e:	4b08      	ldr	r3, [pc, #32]	; (80027c0 <Servo_Turn_RightLeft_Outdoor+0xc0>)
 80027a0:	f04f 0200 	mov.w	r2, #0
 80027a4:	601a      	str	r2, [r3, #0]
 80027a6:	4b07      	ldr	r3, [pc, #28]	; (80027c4 <Servo_Turn_RightLeft_Outdoor+0xc4>)
 80027a8:	2200      	movs	r2, #0
 80027aa:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 80027ac:	4b06      	ldr	r3, [pc, #24]	; (80027c8 <Servo_Turn_RightLeft_Outdoor+0xc8>)
 80027ae:	4618      	mov	r0, r3
 80027b0:	232c      	movs	r3, #44	; 0x2c
 80027b2:	461a      	mov	r2, r3
 80027b4:	2100      	movs	r1, #0
 80027b6:	f009 fac4 	bl	800bd42 <memset>
}
 80027ba:	bf00      	nop
 80027bc:	bd80      	pop	{r7, pc}
 80027be:	bf00      	nop
 80027c0:	20000544 	.word	0x20000544
 80027c4:	2000054c 	.word	0x2000054c
 80027c8:	20000514 	.word	0x20000514
 80027cc:	20000548 	.word	0x20000548
 80027d0:	c2a00000 	.word	0xc2a00000
 80027d4:	20000304 	.word	0x20000304
 80027d8:	200003dc 	.word	0x200003dc
 80027dc:	3dcccccd 	.word	0x3dcccccd
 80027e0:	42a40000 	.word	0x42a40000

080027e4 <Servo_Turn_Right_180>:
	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
	servo = emptyServo;
}

void Servo_Turn_Right_180(){
 80027e4:	b580      	push	{r7, lr}
 80027e6:	af00      	add	r7, sp, #0
	targetAngle = -150;
 80027e8:	4b15      	ldr	r3, [pc, #84]	; (8002840 <Servo_Turn_Right_180+0x5c>)
 80027ea:	4a16      	ldr	r2, [pc, #88]	; (8002844 <Servo_Turn_Right_180+0x60>)
 80027ec:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR4 = RIGHT_MAX;
 80027ee:	4b16      	ldr	r3, [pc, #88]	; (8002848 <Servo_Turn_Right_180+0x64>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	22f0      	movs	r2, #240	; 0xf0
 80027f4:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 80027f6:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80027fa:	f006 f9e7 	bl	8008bcc <osDelay>

	Set_Motor_Direction(1);
 80027fe:	2001      	movs	r0, #1
 8002800:	f7ff f9b4 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 3000;
 8002804:	4b11      	ldr	r3, [pc, #68]	; (800284c <Servo_Turn_Right_180+0x68>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800280c:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 800;
 800280e:	4b0f      	ldr	r3, [pc, #60]	; (800284c <Servo_Turn_Right_180+0x68>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002816:	639a      	str	r2, [r3, #56]	; 0x38

	Calculate_StraightLine(&targetAngle, 0);
 8002818:	2100      	movs	r1, #0
 800281a:	4809      	ldr	r0, [pc, #36]	; (8002840 <Servo_Turn_Right_180+0x5c>)
 800281c:	f7ff fd68 	bl	80022f0 <Calculate_StraightLine>
	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
 8002820:	4b0b      	ldr	r3, [pc, #44]	; (8002850 <Servo_Turn_Right_180+0x6c>)
 8002822:	f04f 0200 	mov.w	r2, #0
 8002826:	601a      	str	r2, [r3, #0]
 8002828:	4b0a      	ldr	r3, [pc, #40]	; (8002854 <Servo_Turn_Right_180+0x70>)
 800282a:	2200      	movs	r2, #0
 800282c:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 800282e:	4b0a      	ldr	r3, [pc, #40]	; (8002858 <Servo_Turn_Right_180+0x74>)
 8002830:	4618      	mov	r0, r3
 8002832:	232c      	movs	r3, #44	; 0x2c
 8002834:	461a      	mov	r2, r3
 8002836:	2100      	movs	r1, #0
 8002838:	f009 fa83 	bl	800bd42 <memset>
}
 800283c:	bf00      	nop
 800283e:	bd80      	pop	{r7, pc}
 8002840:	20000548 	.word	0x20000548
 8002844:	c3160000 	.word	0xc3160000
 8002848:	20000304 	.word	0x20000304
 800284c:	200003dc 	.word	0x200003dc
 8002850:	20000544 	.word	0x20000544
 8002854:	2000054c 	.word	0x2000054c
 8002858:	20000514 	.word	0x20000514

0800285c <Servo_Turn_Left_180>:

void Servo_Turn_Left_180(){
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
	targetAngle = 149;
 8002860:	4b15      	ldr	r3, [pc, #84]	; (80028b8 <Servo_Turn_Left_180+0x5c>)
 8002862:	4a16      	ldr	r2, [pc, #88]	; (80028bc <Servo_Turn_Left_180+0x60>)
 8002864:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR4 = LEFT_MAX;
 8002866:	4b16      	ldr	r3, [pc, #88]	; (80028c0 <Servo_Turn_Left_180+0x64>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	225f      	movs	r2, #95	; 0x5f
 800286c:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 800286e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002872:	f006 f9ab 	bl	8008bcc <osDelay>

	Set_Motor_Direction(1);
 8002876:	2001      	movs	r0, #1
 8002878:	f7ff f978 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 800;
 800287c:	4b11      	ldr	r3, [pc, #68]	; (80028c4 <Servo_Turn_Left_180+0x68>)
 800287e:	681b      	ldr	r3, [r3, #0]
 8002880:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002884:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 3000;
 8002886:	4b0f      	ldr	r3, [pc, #60]	; (80028c4 <Servo_Turn_Left_180+0x68>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800288e:	639a      	str	r2, [r3, #56]	; 0x38

	Calculate_StraightLine(&targetAngle, 1);
 8002890:	2101      	movs	r1, #1
 8002892:	4809      	ldr	r0, [pc, #36]	; (80028b8 <Servo_Turn_Left_180+0x5c>)
 8002894:	f7ff fd2c 	bl	80022f0 <Calculate_StraightLine>

	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
 8002898:	4b0b      	ldr	r3, [pc, #44]	; (80028c8 <Servo_Turn_Left_180+0x6c>)
 800289a:	f04f 0200 	mov.w	r2, #0
 800289e:	601a      	str	r2, [r3, #0]
 80028a0:	4b0a      	ldr	r3, [pc, #40]	; (80028cc <Servo_Turn_Left_180+0x70>)
 80028a2:	2200      	movs	r2, #0
 80028a4:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 80028a6:	4b0a      	ldr	r3, [pc, #40]	; (80028d0 <Servo_Turn_Left_180+0x74>)
 80028a8:	4618      	mov	r0, r3
 80028aa:	232c      	movs	r3, #44	; 0x2c
 80028ac:	461a      	mov	r2, r3
 80028ae:	2100      	movs	r1, #0
 80028b0:	f009 fa47 	bl	800bd42 <memset>
}
 80028b4:	bf00      	nop
 80028b6:	bd80      	pop	{r7, pc}
 80028b8:	20000548 	.word	0x20000548
 80028bc:	43150000 	.word	0x43150000
 80028c0:	20000304 	.word	0x20000304
 80028c4:	200003dc 	.word	0x200003dc
 80028c8:	20000544 	.word	0x20000544
 80028cc:	2000054c 	.word	0x2000054c
 80028d0:	20000514 	.word	0x20000514

080028d4 <Servo_Turn_Right_90_Back>:

void Servo_Turn_Right_90_Back(){
 80028d4:	b580      	push	{r7, lr}
 80028d6:	af00      	add	r7, sp, #0
	currAngle = 0.0; gyroZAxis = 0;
 80028d8:	4b25      	ldr	r3, [pc, #148]	; (8002970 <Servo_Turn_Right_90_Back+0x9c>)
 80028da:	f04f 0200 	mov.w	r2, #0
 80028de:	601a      	str	r2, [r3, #0]
 80028e0:	4b24      	ldr	r3, [pc, #144]	; (8002974 <Servo_Turn_Right_90_Back+0xa0>)
 80028e2:	2200      	movs	r2, #0
 80028e4:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 80028e6:	4b24      	ldr	r3, [pc, #144]	; (8002978 <Servo_Turn_Right_90_Back+0xa4>)
 80028e8:	4618      	mov	r0, r3
 80028ea:	232c      	movs	r3, #44	; 0x2c
 80028ec:	461a      	mov	r2, r3
 80028ee:	2100      	movs	r1, #0
 80028f0:	f009 fa27 	bl	800bd42 <memset>

	targetAngle = 85;
 80028f4:	4b21      	ldr	r3, [pc, #132]	; (800297c <Servo_Turn_Right_90_Back+0xa8>)
 80028f6:	4a22      	ldr	r2, [pc, #136]	; (8002980 <Servo_Turn_Right_90_Back+0xac>)
 80028f8:	601a      	str	r2, [r3, #0]
	DC_MoveDistForward(400, 0.24, 1);
 80028fa:	2101      	movs	r1, #1
 80028fc:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8002984 <Servo_Turn_Right_90_Back+0xb0>
 8002900:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002904:	f000 fa2c 	bl	8002d60 <DC_MoveDistForward>
	osDelay(TURN_TIME);
 8002908:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800290c:	f006 f95e 	bl	8008bcc <osDelay>
	htim1.Instance->CCR4 = RIGHT_MAX;
 8002910:	4b1d      	ldr	r3, [pc, #116]	; (8002988 <Servo_Turn_Right_90_Back+0xb4>)
 8002912:	681b      	ldr	r3, [r3, #0]
 8002914:	22f0      	movs	r2, #240	; 0xf0
 8002916:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 8002918:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800291c:	f006 f956 	bl	8008bcc <osDelay>

	Set_Motor_Direction(0);
 8002920:	2000      	movs	r0, #0
 8002922:	f7ff f923 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 3000;
 8002926:	4b19      	ldr	r3, [pc, #100]	; (800298c <Servo_Turn_Right_90_Back+0xb8>)
 8002928:	681b      	ldr	r3, [r3, #0]
 800292a:	f640 32b8 	movw	r2, #3000	; 0xbb8
 800292e:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 800;
 8002930:	4b16      	ldr	r3, [pc, #88]	; (800298c <Servo_Turn_Right_90_Back+0xb8>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002938:	639a      	str	r2, [r3, #56]	; 0x38

	Calculate_StraightLine(&targetAngle, 0);
 800293a:	2100      	movs	r1, #0
 800293c:	480f      	ldr	r0, [pc, #60]	; (800297c <Servo_Turn_Right_90_Back+0xa8>)
 800293e:	f7ff fcd7 	bl	80022f0 <Calculate_StraightLine>
	DC_MoveDistForward(400, 0.06, 0);
 8002942:	2100      	movs	r1, #0
 8002944:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002990 <Servo_Turn_Right_90_Back+0xbc>
 8002948:	f44f 70c8 	mov.w	r0, #400	; 0x190
 800294c:	f000 fa08 	bl	8002d60 <DC_MoveDistForward>

	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
 8002950:	4b07      	ldr	r3, [pc, #28]	; (8002970 <Servo_Turn_Right_90_Back+0x9c>)
 8002952:	f04f 0200 	mov.w	r2, #0
 8002956:	601a      	str	r2, [r3, #0]
 8002958:	4b06      	ldr	r3, [pc, #24]	; (8002974 <Servo_Turn_Right_90_Back+0xa0>)
 800295a:	2200      	movs	r2, #0
 800295c:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 800295e:	4b06      	ldr	r3, [pc, #24]	; (8002978 <Servo_Turn_Right_90_Back+0xa4>)
 8002960:	4618      	mov	r0, r3
 8002962:	232c      	movs	r3, #44	; 0x2c
 8002964:	461a      	mov	r2, r3
 8002966:	2100      	movs	r1, #0
 8002968:	f009 f9eb 	bl	800bd42 <memset>
}
 800296c:	bf00      	nop
 800296e:	bd80      	pop	{r7, pc}
 8002970:	20000544 	.word	0x20000544
 8002974:	2000054c 	.word	0x2000054c
 8002978:	20000514 	.word	0x20000514
 800297c:	20000548 	.word	0x20000548
 8002980:	42aa0000 	.word	0x42aa0000
 8002984:	3e75c28f 	.word	0x3e75c28f
 8002988:	20000304 	.word	0x20000304
 800298c:	200003dc 	.word	0x200003dc
 8002990:	3d75c28f 	.word	0x3d75c28f

08002994 <Servo_Turn_Left_90_Back>:

void Servo_Turn_Left_90_Back(){
 8002994:	b580      	push	{r7, lr}
 8002996:	af00      	add	r7, sp, #0
	currAngle = 0.0; gyroZAxis = 0;
 8002998:	4b25      	ldr	r3, [pc, #148]	; (8002a30 <Servo_Turn_Left_90_Back+0x9c>)
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	4b24      	ldr	r3, [pc, #144]	; (8002a34 <Servo_Turn_Left_90_Back+0xa0>)
 80029a2:	2200      	movs	r2, #0
 80029a4:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 80029a6:	4b24      	ldr	r3, [pc, #144]	; (8002a38 <Servo_Turn_Left_90_Back+0xa4>)
 80029a8:	4618      	mov	r0, r3
 80029aa:	232c      	movs	r3, #44	; 0x2c
 80029ac:	461a      	mov	r2, r3
 80029ae:	2100      	movs	r1, #0
 80029b0:	f009 f9c7 	bl	800bd42 <memset>

	targetAngle = -81;
 80029b4:	4b21      	ldr	r3, [pc, #132]	; (8002a3c <Servo_Turn_Left_90_Back+0xa8>)
 80029b6:	4a22      	ldr	r2, [pc, #136]	; (8002a40 <Servo_Turn_Left_90_Back+0xac>)
 80029b8:	601a      	str	r2, [r3, #0]
	DC_MoveDistForward(400, 0.29, 1);
 80029ba:	2101      	movs	r1, #1
 80029bc:	ed9f 0a21 	vldr	s0, [pc, #132]	; 8002a44 <Servo_Turn_Left_90_Back+0xb0>
 80029c0:	f44f 70c8 	mov.w	r0, #400	; 0x190
 80029c4:	f000 f9cc 	bl	8002d60 <DC_MoveDistForward>
	osDelay(TURN_TIME);
 80029c8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029cc:	f006 f8fe 	bl	8008bcc <osDelay>
	htim1.Instance->CCR4 = 82;
 80029d0:	4b1d      	ldr	r3, [pc, #116]	; (8002a48 <Servo_Turn_Left_90_Back+0xb4>)
 80029d2:	681b      	ldr	r3, [r3, #0]
 80029d4:	2252      	movs	r2, #82	; 0x52
 80029d6:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 80029d8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80029dc:	f006 f8f6 	bl	8008bcc <osDelay>

	Set_Motor_Direction(0);
 80029e0:	2000      	movs	r0, #0
 80029e2:	f7ff f8c3 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 800;
 80029e6:	4b19      	ldr	r3, [pc, #100]	; (8002a4c <Servo_Turn_Left_90_Back+0xb8>)
 80029e8:	681b      	ldr	r3, [r3, #0]
 80029ea:	f44f 7248 	mov.w	r2, #800	; 0x320
 80029ee:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 3000;
 80029f0:	4b16      	ldr	r3, [pc, #88]	; (8002a4c <Servo_Turn_Left_90_Back+0xb8>)
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f640 32b8 	movw	r2, #3000	; 0xbb8
 80029f8:	639a      	str	r2, [r3, #56]	; 0x38
	Calculate_StraightLine(&targetAngle, 1);
 80029fa:	2101      	movs	r1, #1
 80029fc:	480f      	ldr	r0, [pc, #60]	; (8002a3c <Servo_Turn_Left_90_Back+0xa8>)
 80029fe:	f7ff fc77 	bl	80022f0 <Calculate_StraightLine>

	DC_MoveDistForward(400, 0.02, 0);
 8002a02:	2100      	movs	r1, #0
 8002a04:	ed9f 0a12 	vldr	s0, [pc, #72]	; 8002a50 <Servo_Turn_Left_90_Back+0xbc>
 8002a08:	f44f 70c8 	mov.w	r0, #400	; 0x190
 8002a0c:	f000 f9a8 	bl	8002d60 <DC_MoveDistForward>
	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <Servo_Turn_Left_90_Back+0x9c>)
 8002a12:	f04f 0200 	mov.w	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	4b06      	ldr	r3, [pc, #24]	; (8002a34 <Servo_Turn_Left_90_Back+0xa0>)
 8002a1a:	2200      	movs	r2, #0
 8002a1c:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 8002a1e:	4b06      	ldr	r3, [pc, #24]	; (8002a38 <Servo_Turn_Left_90_Back+0xa4>)
 8002a20:	4618      	mov	r0, r3
 8002a22:	232c      	movs	r3, #44	; 0x2c
 8002a24:	461a      	mov	r2, r3
 8002a26:	2100      	movs	r1, #0
 8002a28:	f009 f98b 	bl	800bd42 <memset>
}
 8002a2c:	bf00      	nop
 8002a2e:	bd80      	pop	{r7, pc}
 8002a30:	20000544 	.word	0x20000544
 8002a34:	2000054c 	.word	0x2000054c
 8002a38:	20000514 	.word	0x20000514
 8002a3c:	20000548 	.word	0x20000548
 8002a40:	c2a20000 	.word	0xc2a20000
 8002a44:	3e947ae1 	.word	0x3e947ae1
 8002a48:	20000304 	.word	0x20000304
 8002a4c:	200003dc 	.word	0x200003dc
 8002a50:	3ca3d70a 	.word	0x3ca3d70a

08002a54 <Servo_Turn_Right_180_Back>:


void Servo_Turn_Right_180_Back(){
 8002a54:	b580      	push	{r7, lr}
 8002a56:	af00      	add	r7, sp, #0
	targetAngle = 149;
 8002a58:	4b15      	ldr	r3, [pc, #84]	; (8002ab0 <Servo_Turn_Right_180_Back+0x5c>)
 8002a5a:	4a16      	ldr	r2, [pc, #88]	; (8002ab4 <Servo_Turn_Right_180_Back+0x60>)
 8002a5c:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR4 = RIGHT_MAX;
 8002a5e:	4b16      	ldr	r3, [pc, #88]	; (8002ab8 <Servo_Turn_Right_180_Back+0x64>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	22f0      	movs	r2, #240	; 0xf0
 8002a64:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 8002a66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002a6a:	f006 f8af 	bl	8008bcc <osDelay>

	Set_Motor_Direction(0);
 8002a6e:	2000      	movs	r0, #0
 8002a70:	f7ff f87c 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 3000;
 8002a74:	4b11      	ldr	r3, [pc, #68]	; (8002abc <Servo_Turn_Right_180_Back+0x68>)
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002a7c:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 800;
 8002a7e:	4b0f      	ldr	r3, [pc, #60]	; (8002abc <Servo_Turn_Right_180_Back+0x68>)
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002a86:	639a      	str	r2, [r3, #56]	; 0x38

	Calculate_StraightLine(&targetAngle, 0);
 8002a88:	2100      	movs	r1, #0
 8002a8a:	4809      	ldr	r0, [pc, #36]	; (8002ab0 <Servo_Turn_Right_180_Back+0x5c>)
 8002a8c:	f7ff fc30 	bl	80022f0 <Calculate_StraightLine>

	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
 8002a90:	4b0b      	ldr	r3, [pc, #44]	; (8002ac0 <Servo_Turn_Right_180_Back+0x6c>)
 8002a92:	f04f 0200 	mov.w	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	4b0a      	ldr	r3, [pc, #40]	; (8002ac4 <Servo_Turn_Right_180_Back+0x70>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 8002a9e:	4b0a      	ldr	r3, [pc, #40]	; (8002ac8 <Servo_Turn_Right_180_Back+0x74>)
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	232c      	movs	r3, #44	; 0x2c
 8002aa4:	461a      	mov	r2, r3
 8002aa6:	2100      	movs	r1, #0
 8002aa8:	f009 f94b 	bl	800bd42 <memset>
}
 8002aac:	bf00      	nop
 8002aae:	bd80      	pop	{r7, pc}
 8002ab0:	20000548 	.word	0x20000548
 8002ab4:	43150000 	.word	0x43150000
 8002ab8:	20000304 	.word	0x20000304
 8002abc:	200003dc 	.word	0x200003dc
 8002ac0:	20000544 	.word	0x20000544
 8002ac4:	2000054c 	.word	0x2000054c
 8002ac8:	20000514 	.word	0x20000514

08002acc <Servo_Turn_Left_180_Back>:

void Servo_Turn_Left_180_Back(){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	af00      	add	r7, sp, #0
	targetAngle = -150;
 8002ad0:	4b15      	ldr	r3, [pc, #84]	; (8002b28 <Servo_Turn_Left_180_Back+0x5c>)
 8002ad2:	4a16      	ldr	r2, [pc, #88]	; (8002b2c <Servo_Turn_Left_180_Back+0x60>)
 8002ad4:	601a      	str	r2, [r3, #0]
	htim1.Instance->CCR4 = LEFT_MAX;
 8002ad6:	4b16      	ldr	r3, [pc, #88]	; (8002b30 <Servo_Turn_Left_180_Back+0x64>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	225f      	movs	r2, #95	; 0x5f
 8002adc:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 8002ade:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ae2:	f006 f873 	bl	8008bcc <osDelay>

	Set_Motor_Direction(0);
 8002ae6:	2000      	movs	r0, #0
 8002ae8:	f7ff f840 	bl	8001b6c <Set_Motor_Direction>
	htim8.Instance->CCR1 = 800;
 8002aec:	4b11      	ldr	r3, [pc, #68]	; (8002b34 <Servo_Turn_Left_180_Back+0x68>)
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f44f 7248 	mov.w	r2, #800	; 0x320
 8002af4:	635a      	str	r2, [r3, #52]	; 0x34
	htim8.Instance->CCR2 = 3000;
 8002af6:	4b0f      	ldr	r3, [pc, #60]	; (8002b34 <Servo_Turn_Left_180_Back+0x68>)
 8002af8:	681b      	ldr	r3, [r3, #0]
 8002afa:	f640 32b8 	movw	r2, #3000	; 0xbb8
 8002afe:	639a      	str	r2, [r3, #56]	; 0x38

	Calculate_StraightLine(&targetAngle, 1);
 8002b00:	2101      	movs	r1, #1
 8002b02:	4809      	ldr	r0, [pc, #36]	; (8002b28 <Servo_Turn_Left_180_Back+0x5c>)
 8002b04:	f7ff fbf4 	bl	80022f0 <Calculate_StraightLine>

	//Reset Servo PID configuration
	currAngle = 0.0; gyroZAxis = 0;
 8002b08:	4b0b      	ldr	r3, [pc, #44]	; (8002b38 <Servo_Turn_Left_180_Back+0x6c>)
 8002b0a:	f04f 0200 	mov.w	r2, #0
 8002b0e:	601a      	str	r2, [r3, #0]
 8002b10:	4b0a      	ldr	r3, [pc, #40]	; (8002b3c <Servo_Turn_Left_180_Back+0x70>)
 8002b12:	2200      	movs	r2, #0
 8002b14:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 8002b16:	4b0a      	ldr	r3, [pc, #40]	; (8002b40 <Servo_Turn_Left_180_Back+0x74>)
 8002b18:	4618      	mov	r0, r3
 8002b1a:	232c      	movs	r3, #44	; 0x2c
 8002b1c:	461a      	mov	r2, r3
 8002b1e:	2100      	movs	r1, #0
 8002b20:	f009 f90f 	bl	800bd42 <memset>
}
 8002b24:	bf00      	nop
 8002b26:	bd80      	pop	{r7, pc}
 8002b28:	20000548 	.word	0x20000548
 8002b2c:	c3160000 	.word	0xc3160000
 8002b30:	20000304 	.word	0x20000304
 8002b34:	200003dc 	.word	0x200003dc
 8002b38:	20000544 	.word	0x20000544
 8002b3c:	2000054c 	.word	0x2000054c
 8002b40:	20000514 	.word	0x20000514

08002b44 <Task2_Part1_Servo_Turn_Left_Outdoor>:

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0); //Update the latest PWMValue after PID update for L
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0); //Update the latest PWMValue after PID update for R
}

void Task2_Part1_Servo_Turn_Left_Outdoor(){
 8002b44:	b580      	push	{r7, lr}
 8002b46:	af00      	add	r7, sp, #0
	Set_Motor_Direction(1);
 8002b48:	2001      	movs	r0, #1
 8002b4a:	f7ff f80f 	bl	8001b6c <Set_Motor_Direction>
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 2500); //Update the latest PWMValue after PID update for L
 8002b4e:	4b18      	ldr	r3, [pc, #96]	; (8002bb0 <Task2_Part1_Servo_Turn_Left_Outdoor+0x6c>)
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002b56:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 2500); //Update the latest PWMValue after PID update for R
 8002b58:	4b15      	ldr	r3, [pc, #84]	; (8002bb0 <Task2_Part1_Servo_Turn_Left_Outdoor+0x6c>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002b60:	639a      	str	r2, [r3, #56]	; 0x38

	htim1.Instance->CCR4 = 120;
 8002b62:	4b14      	ldr	r3, [pc, #80]	; (8002bb4 <Task2_Part1_Servo_Turn_Left_Outdoor+0x70>)
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	2278      	movs	r2, #120	; 0x78
 8002b68:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(900);
 8002b6a:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002b6e:	f006 f82d 	bl	8008bcc <osDelay>

	 htim1.Instance->CCR4 = RIGHT_MAX;
 8002b72:	4b10      	ldr	r3, [pc, #64]	; (8002bb4 <Task2_Part1_Servo_Turn_Left_Outdoor+0x70>)
 8002b74:	681b      	ldr	r3, [r3, #0]
 8002b76:	22f0      	movs	r2, #240	; 0xf0
 8002b78:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(1200);
 8002b7a:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8002b7e:	f006 f825 	bl	8008bcc <osDelay>

	 htim1.Instance->CCR4 = LEFT_MAX;
 8002b82:	4b0c      	ldr	r3, [pc, #48]	; (8002bb4 <Task2_Part1_Servo_Turn_Left_Outdoor+0x70>)
 8002b84:	681b      	ldr	r3, [r3, #0]
 8002b86:	225f      	movs	r2, #95	; 0x5f
 8002b88:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(1000);
 8002b8a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002b8e:	f006 f81d 	bl	8008bcc <osDelay>

	 htim1.Instance->CCR4 = CENTER;
 8002b92:	4b08      	ldr	r3, [pc, #32]	; (8002bb4 <Task2_Part1_Servo_Turn_Left_Outdoor+0x70>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	2291      	movs	r2, #145	; 0x91
 8002b98:	641a      	str	r2, [r3, #64]	; 0x40


	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0); //Update the latest PWMValue after PID update for L
 8002b9a:	4b05      	ldr	r3, [pc, #20]	; (8002bb0 <Task2_Part1_Servo_Turn_Left_Outdoor+0x6c>)
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	2200      	movs	r2, #0
 8002ba0:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0); //Update the latest PWMValue after PID update for R
 8002ba2:	4b03      	ldr	r3, [pc, #12]	; (8002bb0 <Task2_Part1_Servo_Turn_Left_Outdoor+0x6c>)
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002baa:	bf00      	nop
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	200003dc 	.word	0x200003dc
 8002bb4:	20000304 	.word	0x20000304

08002bb8 <Task2_Part1_Servo_Turn_Right_Outdoor>:

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0); //Update the latest PWMValue after PID update for L
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0); //Update the latest PWMValue after PID update for R
}*/

void Task2_Part1_Servo_Turn_Right_Outdoor(){
 8002bb8:	b580      	push	{r7, lr}
 8002bba:	af00      	add	r7, sp, #0
	Set_Motor_Direction(1);
 8002bbc:	2001      	movs	r0, #1
 8002bbe:	f7fe ffd5 	bl	8001b6c <Set_Motor_Direction>
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 1800); //Update the latest PWMValue after PID update for L
 8002bc2:	4b1c      	ldr	r3, [pc, #112]	; (8002c34 <Task2_Part1_Servo_Turn_Right_Outdoor+0x7c>)
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002bca:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 1800); //Update the latest PWMValue after PID update for R
 8002bcc:	4b19      	ldr	r3, [pc, #100]	; (8002c34 <Task2_Part1_Servo_Turn_Right_Outdoor+0x7c>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f44f 62e1 	mov.w	r2, #1800	; 0x708
 8002bd4:	639a      	str	r2, [r3, #56]	; 0x38

	htim1.Instance->CCR4 = 190;
 8002bd6:	4b18      	ldr	r3, [pc, #96]	; (8002c38 <Task2_Part1_Servo_Turn_Right_Outdoor+0x80>)
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	22be      	movs	r2, #190	; 0xbe
 8002bdc:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(1000);
 8002bde:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002be2:	f005 fff3 	bl	8008bcc <osDelay>

	 htim1.Instance->CCR4 = LEFT_MAX;
 8002be6:	4b14      	ldr	r3, [pc, #80]	; (8002c38 <Task2_Part1_Servo_Turn_Right_Outdoor+0x80>)
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	225f      	movs	r2, #95	; 0x5f
 8002bec:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(300);
 8002bee:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8002bf2:	f005 ffeb 	bl	8008bcc <osDelay>

	 htim1.Instance->CCR4 = CENTER;
 8002bf6:	4b10      	ldr	r3, [pc, #64]	; (8002c38 <Task2_Part1_Servo_Turn_Right_Outdoor+0x80>)
 8002bf8:	681b      	ldr	r3, [r3, #0]
 8002bfa:	2291      	movs	r2, #145	; 0x91
 8002bfc:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(800);
 8002bfe:	f44f 7048 	mov.w	r0, #800	; 0x320
 8002c02:	f005 ffe3 	bl	8008bcc <osDelay>

	 htim1.Instance->CCR4 = LEFT_MAX;
 8002c06:	4b0c      	ldr	r3, [pc, #48]	; (8002c38 <Task2_Part1_Servo_Turn_Right_Outdoor+0x80>)
 8002c08:	681b      	ldr	r3, [r3, #0]
 8002c0a:	225f      	movs	r2, #95	; 0x5f
 8002c0c:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(900);
 8002c0e:	f44f 7061 	mov.w	r0, #900	; 0x384
 8002c12:	f005 ffdb 	bl	8008bcc <osDelay>

	 htim1.Instance->CCR4 = CENTER;
 8002c16:	4b08      	ldr	r3, [pc, #32]	; (8002c38 <Task2_Part1_Servo_Turn_Right_Outdoor+0x80>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	2291      	movs	r2, #145	; 0x91
 8002c1c:	641a      	str	r2, [r3, #64]	; 0x40


	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0); //Update the latest PWMValue after PID update for L
 8002c1e:	4b05      	ldr	r3, [pc, #20]	; (8002c34 <Task2_Part1_Servo_Turn_Right_Outdoor+0x7c>)
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	2200      	movs	r2, #0
 8002c24:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0); //Update the latest PWMValue after PID update for R
 8002c26:	4b03      	ldr	r3, [pc, #12]	; (8002c34 <Task2_Part1_Servo_Turn_Right_Outdoor+0x7c>)
 8002c28:	681b      	ldr	r3, [r3, #0]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002c2e:	bf00      	nop
 8002c30:	bd80      	pop	{r7, pc}
 8002c32:	bf00      	nop
 8002c34:	200003dc 	.word	0x200003dc
 8002c38:	20000304 	.word	0x20000304

08002c3c <Task2_Part2_Servo_Turn_Left_Outdoor>:

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0); //Update the latest PWMValue after PID update for L
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0); //Update the latest PWMValue after PID update for R
}

void Task2_Part2_Servo_Turn_Left_Outdoor(){
 8002c3c:	b580      	push	{r7, lr}
 8002c3e:	af00      	add	r7, sp, #0
	Set_Motor_Direction(1);
 8002c40:	2001      	movs	r0, #1
 8002c42:	f7fe ff93 	bl	8001b6c <Set_Motor_Direction>
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 2500); //Update the latest PWMValue after PID update for L
 8002c46:	4b1c      	ldr	r3, [pc, #112]	; (8002cb8 <Task2_Part2_Servo_Turn_Left_Outdoor+0x7c>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002c4e:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 2500); //Update the latest PWMValue after PID update for R
 8002c50:	4b19      	ldr	r3, [pc, #100]	; (8002cb8 <Task2_Part2_Servo_Turn_Left_Outdoor+0x7c>)
 8002c52:	681b      	ldr	r3, [r3, #0]
 8002c54:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002c58:	639a      	str	r2, [r3, #56]	; 0x38

	htim1.Instance->CCR4 = LEFT_MAX;
 8002c5a:	4b18      	ldr	r3, [pc, #96]	; (8002cbc <Task2_Part2_Servo_Turn_Left_Outdoor+0x80>)
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	225f      	movs	r2, #95	; 0x5f
 8002c60:	641a      	str	r2, [r3, #64]	; 0x40
	 //DC_MoveDistForward(400, 1, 1);
	osDelay(1000);
 8002c62:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002c66:	f005 ffb1 	bl	8008bcc <osDelay>

	 htim1.Instance->CCR4 = RIGHT_MAX;
 8002c6a:	4b14      	ldr	r3, [pc, #80]	; (8002cbc <Task2_Part2_Servo_Turn_Left_Outdoor+0x80>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	22f0      	movs	r2, #240	; 0xf0
 8002c70:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(2500);
 8002c72:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002c76:	f005 ffa9 	bl	8008bcc <osDelay>


	 htim1.Instance->CCR4 = CENTER;
 8002c7a:	4b10      	ldr	r3, [pc, #64]	; (8002cbc <Task2_Part2_Servo_Turn_Left_Outdoor+0x80>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	2291      	movs	r2, #145	; 0x91
 8002c80:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(1200);
 8002c82:	f44f 6096 	mov.w	r0, #1200	; 0x4b0
 8002c86:	f005 ffa1 	bl	8008bcc <osDelay>

	 htim1.Instance->CCR4 = RIGHT_MAX;
 8002c8a:	4b0c      	ldr	r3, [pc, #48]	; (8002cbc <Task2_Part2_Servo_Turn_Left_Outdoor+0x80>)
 8002c8c:	681b      	ldr	r3, [r3, #0]
 8002c8e:	22f0      	movs	r2, #240	; 0xf0
 8002c90:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(1300);
 8002c92:	f240 5014 	movw	r0, #1300	; 0x514
 8002c96:	f005 ff99 	bl	8008bcc <osDelay>

	 //htim1.Instance->CCR4 = RIGHT_MAX;
	 //osDelay(950);

	 htim1.Instance->CCR4 = CENTER;
 8002c9a:	4b08      	ldr	r3, [pc, #32]	; (8002cbc <Task2_Part2_Servo_Turn_Left_Outdoor+0x80>)
 8002c9c:	681b      	ldr	r3, [r3, #0]
 8002c9e:	2291      	movs	r2, #145	; 0x91
 8002ca0:	641a      	str	r2, [r3, #64]	; 0x40


	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0); //Update the latest PWMValue after PID update for L
 8002ca2:	4b05      	ldr	r3, [pc, #20]	; (8002cb8 <Task2_Part2_Servo_Turn_Left_Outdoor+0x7c>)
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	2200      	movs	r2, #0
 8002ca8:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0); //Update the latest PWMValue after PID update for R
 8002caa:	4b03      	ldr	r3, [pc, #12]	; (8002cb8 <Task2_Part2_Servo_Turn_Left_Outdoor+0x7c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	2200      	movs	r2, #0
 8002cb0:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002cb2:	bf00      	nop
 8002cb4:	bd80      	pop	{r7, pc}
 8002cb6:	bf00      	nop
 8002cb8:	200003dc 	.word	0x200003dc
 8002cbc:	20000304 	.word	0x20000304

08002cc0 <Task2_Part2_Servo_Turn_Right_Outdoor>:

	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0); //Update the latest PWMValue after PID update for L
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0); //Update the latest PWMValue after PID update for R
}

void Task2_Part2_Servo_Turn_Right_Outdoor(){
 8002cc0:	b580      	push	{r7, lr}
 8002cc2:	af00      	add	r7, sp, #0
	Set_Motor_Direction(1);
 8002cc4:	2001      	movs	r0, #1
 8002cc6:	f7fe ff51 	bl	8001b6c <Set_Motor_Direction>
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 2500); //Update the latest PWMValue after PID update for L
 8002cca:	4b1c      	ldr	r3, [pc, #112]	; (8002d3c <Task2_Part2_Servo_Turn_Right_Outdoor+0x7c>)
 8002ccc:	681b      	ldr	r3, [r3, #0]
 8002cce:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002cd2:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 2500); //Update the latest PWMValue after PID update for R
 8002cd4:	4b19      	ldr	r3, [pc, #100]	; (8002d3c <Task2_Part2_Servo_Turn_Right_Outdoor+0x7c>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	f640 12c4 	movw	r2, #2500	; 0x9c4
 8002cdc:	639a      	str	r2, [r3, #56]	; 0x38

	htim1.Instance->CCR4 = RIGHT_MAX;
 8002cde:	4b18      	ldr	r3, [pc, #96]	; (8002d40 <Task2_Part2_Servo_Turn_Right_Outdoor+0x80>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	22f0      	movs	r2, #240	; 0xf0
 8002ce4:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(1000);
 8002ce6:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002cea:	f005 ff6f 	bl	8008bcc <osDelay>

	 htim1.Instance->CCR4 = LEFT_MAX;
 8002cee:	4b14      	ldr	r3, [pc, #80]	; (8002d40 <Task2_Part2_Servo_Turn_Right_Outdoor+0x80>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	225f      	movs	r2, #95	; 0x5f
 8002cf4:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(2500);
 8002cf6:	f640 10c4 	movw	r0, #2500	; 0x9c4
 8002cfa:	f005 ff67 	bl	8008bcc <osDelay>


	 htim1.Instance->CCR4 = CENTER;
 8002cfe:	4b10      	ldr	r3, [pc, #64]	; (8002d40 <Task2_Part2_Servo_Turn_Right_Outdoor+0x80>)
 8002d00:	681b      	ldr	r3, [r3, #0]
 8002d02:	2291      	movs	r2, #145	; 0x91
 8002d04:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(1300);
 8002d06:	f240 5014 	movw	r0, #1300	; 0x514
 8002d0a:	f005 ff5f 	bl	8008bcc <osDelay>

	 htim1.Instance->CCR4 = LEFT_MAX;
 8002d0e:	4b0c      	ldr	r3, [pc, #48]	; (8002d40 <Task2_Part2_Servo_Turn_Right_Outdoor+0x80>)
 8002d10:	681b      	ldr	r3, [r3, #0]
 8002d12:	225f      	movs	r2, #95	; 0x5f
 8002d14:	641a      	str	r2, [r3, #64]	; 0x40
	 osDelay(1150);
 8002d16:	f240 407e 	movw	r0, #1150	; 0x47e
 8002d1a:	f005 ff57 	bl	8008bcc <osDelay>

	 htim1.Instance->CCR4 = CENTER;
 8002d1e:	4b08      	ldr	r3, [pc, #32]	; (8002d40 <Task2_Part2_Servo_Turn_Right_Outdoor+0x80>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	2291      	movs	r2, #145	; 0x91
 8002d24:	641a      	str	r2, [r3, #64]	; 0x40


	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, 0); //Update the latest PWMValue after PID update for L
 8002d26:	4b05      	ldr	r3, [pc, #20]	; (8002d3c <Task2_Part2_Servo_Turn_Right_Outdoor+0x7c>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	2200      	movs	r2, #0
 8002d2c:	635a      	str	r2, [r3, #52]	; 0x34
	__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, 0); //Update the latest PWMValue after PID update for R
 8002d2e:	4b03      	ldr	r3, [pc, #12]	; (8002d3c <Task2_Part2_Servo_Turn_Right_Outdoor+0x7c>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	2200      	movs	r2, #0
 8002d34:	639a      	str	r2, [r3, #56]	; 0x38
}
 8002d36:	bf00      	nop
 8002d38:	bd80      	pop	{r7, pc}
 8002d3a:	bf00      	nop
 8002d3c:	200003dc 	.word	0x200003dc
 8002d40:	20000304 	.word	0x20000304

08002d44 <Task2_Part3_Servo_Return_Right>:
//		htim1.Instance->CCR4 = CENTER;
//	else
//		htim1.Instance->CCR4 = CENTER;
//}

void Task2_Part3_Servo_Return_Right(){
 8002d44:	b580      	push	{r7, lr}
 8002d46:	af00      	add	r7, sp, #0
	Servo_Turn_LeftRight_Outdoor();
 8002d48:	f7ff fc68 	bl	800261c <Servo_Turn_LeftRight_Outdoor>
}
 8002d4c:	bf00      	nop
 8002d4e:	bd80      	pop	{r7, pc}

08002d50 <Task2_Part3_Servo_Return_Left>:

void Task2_Part3_Servo_Return_Left(){
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
	Servo_Turn_RightLeft_Outdoor();
 8002d54:	f7ff fcd4 	bl	8002700 <Servo_Turn_RightLeft_Outdoor>
}
 8002d58:	bf00      	nop
 8002d5a:	bd80      	pop	{r7, pc}
 8002d5c:	0000      	movs	r0, r0
	...

08002d60 <DC_MoveDistForward>:

		Reset_Duty_Config();

}

void DC_MoveDistForward(int rpm, float distance, int dir){
 8002d60:	b580      	push	{r7, lr}
 8002d62:	b088      	sub	sp, #32
 8002d64:	af00      	add	r7, sp, #0
 8002d66:	60f8      	str	r0, [r7, #12]
 8002d68:	ed87 0a02 	vstr	s0, [r7, #8]
 8002d6c:	6079      	str	r1, [r7, #4]
	uint32_t dcTick, servoTick, offset = 0;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	617b      	str	r3, [r7, #20]

	//Check if direction changed, if change reset gyro value
	if(prevDir != dir){
 8002d72:	4b53      	ldr	r3, [pc, #332]	; (8002ec0 <DC_MoveDistForward+0x160>)
 8002d74:	681b      	ldr	r3, [r3, #0]
 8002d76:	687a      	ldr	r2, [r7, #4]
 8002d78:	429a      	cmp	r2, r3
 8002d7a:	d010      	beq.n	8002d9e <DC_MoveDistForward+0x3e>
		currAngle = 0.0; gyroZAxis = 0;
 8002d7c:	4b51      	ldr	r3, [pc, #324]	; (8002ec4 <DC_MoveDistForward+0x164>)
 8002d7e:	f04f 0200 	mov.w	r2, #0
 8002d82:	601a      	str	r2, [r3, #0]
 8002d84:	4b50      	ldr	r3, [pc, #320]	; (8002ec8 <DC_MoveDistForward+0x168>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	801a      	strh	r2, [r3, #0]
		servo = emptyServo;
 8002d8a:	4b50      	ldr	r3, [pc, #320]	; (8002ecc <DC_MoveDistForward+0x16c>)
 8002d8c:	4618      	mov	r0, r3
 8002d8e:	232c      	movs	r3, #44	; 0x2c
 8002d90:	461a      	mov	r2, r3
 8002d92:	2100      	movs	r1, #0
 8002d94:	f008 ffd5 	bl	800bd42 <memset>
		prevDir = dir;
 8002d98:	4a49      	ldr	r2, [pc, #292]	; (8002ec0 <DC_MoveDistForward+0x160>)
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	6013      	str	r3, [r2, #0]
	}
	//Initiate timer to count when to trigger PID
	dcTick = HAL_GetTick();
 8002d9e:	f001 f933 	bl	8004008 <HAL_GetTick>
 8002da2:	61f8      	str	r0, [r7, #28]
	//Initiate timer to count when to trigger PID
	servoTick = HAL_GetTick();
 8002da4:	f001 f930 	bl	8004008 <HAL_GetTick>
 8002da8:	61b8      	str	r0, [r7, #24]
	//Initiate timer to count when to trigger DistEst
	distTick.startTick = HAL_GetTick();
 8002daa:	f001 f92d 	bl	8004008 <HAL_GetTick>
 8002dae:	4603      	mov	r3, r0
 8002db0:	4a47      	ldr	r2, [pc, #284]	; (8002ed0 <DC_MoveDistForward+0x170>)
 8002db2:	6093      	str	r3, [r2, #8]

	if(distance <= 0.45){
 8002db4:	68b8      	ldr	r0, [r7, #8]
 8002db6:	f7fd fbc7 	bl	8000548 <__aeabi_f2d>
 8002dba:	a33f      	add	r3, pc, #252	; (adr r3, 8002eb8 <DC_MoveDistForward+0x158>)
 8002dbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002dc0:	f7fd fe96 	bl	8000af0 <__aeabi_dcmple>
 8002dc4:	4603      	mov	r3, r0
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d005      	beq.n	8002dd6 <DC_MoveDistForward+0x76>
		rpm = 300;
 8002dca:	f44f 7396 	mov.w	r3, #300	; 0x12c
 8002dce:	60fb      	str	r3, [r7, #12]
		offset = 75;
 8002dd0:	234b      	movs	r3, #75	; 0x4b
 8002dd2:	617b      	str	r3, [r7, #20]
 8002dd4:	e002      	b.n	8002ddc <DC_MoveDistForward+0x7c>
	}else{
		offset = 650;
 8002dd6:	f240 238a 	movw	r3, #650	; 0x28a
 8002dda:	617b      	str	r3, [r7, #20]
	}

	//Start the motor
	Set_Motor_Direction(dir);
 8002ddc:	687b      	ldr	r3, [r7, #4]
 8002dde:	b2db      	uxtb	r3, r3
 8002de0:	4618      	mov	r0, r3
 8002de2:	f7fe fec3 	bl	8001b6c <Set_Motor_Direction>
	Init_Duty_Config(rpm, distance);
 8002de6:	ed97 0a02 	vldr	s0, [r7, #8]
 8002dea:	68f8      	ldr	r0, [r7, #12]
 8002dec:	f7fe ffc6 	bl	8001d7c <Init_Duty_Config>
	currAngle = 0.0; gyroZAxis = 0;
 8002df0:	4b34      	ldr	r3, [pc, #208]	; (8002ec4 <DC_MoveDistForward+0x164>)
 8002df2:	f04f 0200 	mov.w	r2, #0
 8002df6:	601a      	str	r2, [r3, #0]
 8002df8:	4b33      	ldr	r3, [pc, #204]	; (8002ec8 <DC_MoveDistForward+0x168>)
 8002dfa:	2200      	movs	r2, #0
 8002dfc:	801a      	strh	r2, [r3, #0]
	servo = emptyServo;
 8002dfe:	4b33      	ldr	r3, [pc, #204]	; (8002ecc <DC_MoveDistForward+0x16c>)
 8002e00:	4618      	mov	r0, r3
 8002e02:	232c      	movs	r3, #44	; 0x2c
 8002e04:	461a      	mov	r2, r3
 8002e06:	2100      	movs	r1, #0
 8002e08:	f008 ff9b 	bl	800bd42 <memset>
	//htim1.Instance->CCR4 = CENTER;
//	osDelay(TURN_TIME);


	do{
		if(HAL_GetTick() - servoTick >= 10){ //Sample frequency of 10ms
 8002e0c:	f001 f8fc 	bl	8004008 <HAL_GetTick>
 8002e10:	4602      	mov	r2, r0
 8002e12:	69bb      	ldr	r3, [r7, #24]
 8002e14:	1ad3      	subs	r3, r2, r3
 8002e16:	2b09      	cmp	r3, #9
 8002e18:	d905      	bls.n	8002e26 <DC_MoveDistForward+0xc6>
			SERVO_Straight_Control(dir);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f7ff f9d0 	bl	80021c0 <SERVO_Straight_Control>
			servoTick = HAL_GetTick();
 8002e20:	f001 f8f2 	bl	8004008 <HAL_GetTick>
 8002e24:	61b8      	str	r0, [r7, #24]
		}

		if(HAL_GetTick() - distTick.startTick >= 20){ //Sample frequency of 50ms
 8002e26:	f001 f8ef 	bl	8004008 <HAL_GetTick>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	4b28      	ldr	r3, [pc, #160]	; (8002ed0 <DC_MoveDistForward+0x170>)
 8002e2e:	689b      	ldr	r3, [r3, #8]
 8002e30:	1ad3      	subs	r3, r2, r3
 8002e32:	2b13      	cmp	r3, #19
 8002e34:	d916      	bls.n	8002e64 <DC_MoveDistForward+0x104>
			Calculate_Car_Distance(&distTick, &encoderL, &encoderR); //Calculate dist and update the currentTick
 8002e36:	4a27      	ldr	r2, [pc, #156]	; (8002ed4 <DC_MoveDistForward+0x174>)
 8002e38:	4927      	ldr	r1, [pc, #156]	; (8002ed8 <DC_MoveDistForward+0x178>)
 8002e3a:	4825      	ldr	r0, [pc, #148]	; (8002ed0 <DC_MoveDistForward+0x170>)
 8002e3c:	f7fe ff40 	bl	8001cc0 <Calculate_Car_Distance>
//			if(distTick.targetTick - distTick.currDistTick <= 330){ //Once target distance reached, slow the car
//				dutyL.target_Rpm -= 100;
//				dutyR.target_Rpm -= 100;
//			}

			if(distTick.currDistTick >= distTick.targetTick - offset){ //Once target distance reached, stop the car
 8002e40:	4b23      	ldr	r3, [pc, #140]	; (8002ed0 <DC_MoveDistForward+0x170>)
 8002e42:	685b      	ldr	r3, [r3, #4]
 8002e44:	461a      	mov	r2, r3
 8002e46:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <DC_MoveDistForward+0x170>)
 8002e48:	681b      	ldr	r3, [r3, #0]
 8002e4a:	4619      	mov	r1, r3
 8002e4c:	697b      	ldr	r3, [r7, #20]
 8002e4e:	1acb      	subs	r3, r1, r3
 8002e50:	429a      	cmp	r2, r3
 8002e52:	d302      	bcc.n	8002e5a <DC_MoveDistForward+0xfa>
				Reset_Duty_Config(); //Set all duty param to 0 & stop the vehicle
 8002e54:	f7fe ffce 	bl	8001df4 <Reset_Duty_Config>
				break;
 8002e58:	e024      	b.n	8002ea4 <DC_MoveDistForward+0x144>
			}

			distTick.startTick = HAL_GetTick();
 8002e5a:	f001 f8d5 	bl	8004008 <HAL_GetTick>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	4a1b      	ldr	r2, [pc, #108]	; (8002ed0 <DC_MoveDistForward+0x170>)
 8002e62:	6093      	str	r3, [r2, #8]
		}

		if(HAL_GetTick() - dcTick >= 1000L){
 8002e64:	f001 f8d0 	bl	8004008 <HAL_GetTick>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	69fb      	ldr	r3, [r7, #28]
 8002e6c:	1ad3      	subs	r3, r2, r3
 8002e6e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8002e72:	d3cb      	bcc.n	8002e0c <DC_MoveDistForward+0xac>
			DC_PID_Control(&dcPidCfg, &dutyL, &encoderL); //Call PID Control for LeftWheel
 8002e74:	4a18      	ldr	r2, [pc, #96]	; (8002ed8 <DC_MoveDistForward+0x178>)
 8002e76:	4919      	ldr	r1, [pc, #100]	; (8002edc <DC_MoveDistForward+0x17c>)
 8002e78:	4819      	ldr	r0, [pc, #100]	; (8002ee0 <DC_MoveDistForward+0x180>)
 8002e7a:	f7fe fff1 	bl	8001e60 <DC_PID_Control>
			DC_PID_Control(&dcPidCfg, &dutyR, &encoderR); //Call PID Control for RightWheel
 8002e7e:	4a15      	ldr	r2, [pc, #84]	; (8002ed4 <DC_MoveDistForward+0x174>)
 8002e80:	4918      	ldr	r1, [pc, #96]	; (8002ee4 <DC_MoveDistForward+0x184>)
 8002e82:	4817      	ldr	r0, [pc, #92]	; (8002ee0 <DC_MoveDistForward+0x180>)
 8002e84:	f7fe ffec 	bl	8001e60 <DC_PID_Control>


			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_1, dutyL.pwmVal); //Update the latest PWMValue after PID update for L
 8002e88:	4b14      	ldr	r3, [pc, #80]	; (8002edc <DC_MoveDistForward+0x17c>)
 8002e8a:	68da      	ldr	r2, [r3, #12]
 8002e8c:	4b16      	ldr	r3, [pc, #88]	; (8002ee8 <DC_MoveDistForward+0x188>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	635a      	str	r2, [r3, #52]	; 0x34
			__HAL_TIM_SetCompare(&htim8, TIM_CHANNEL_2, dutyR.pwmVal); //Update the latest PWMValue after PID update for R
 8002e92:	4b14      	ldr	r3, [pc, #80]	; (8002ee4 <DC_MoveDistForward+0x184>)
 8002e94:	68da      	ldr	r2, [r3, #12]
 8002e96:	4b14      	ldr	r3, [pc, #80]	; (8002ee8 <DC_MoveDistForward+0x188>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	639a      	str	r2, [r3, #56]	; 0x38
			dcTick = HAL_GetTick(); //Reset tick for comparison in later iteration
 8002e9c:	f001 f8b4 	bl	8004008 <HAL_GetTick>
 8002ea0:	61f8      	str	r0, [r7, #28]
		if(HAL_GetTick() - servoTick >= 10){ //Sample frequency of 10ms
 8002ea2:	e7b3      	b.n	8002e0c <DC_MoveDistForward+0xac>
		}
	}while(1);

	osDelay(500);
 8002ea4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8002ea8:	f005 fe90 	bl	8008bcc <osDelay>

}
 8002eac:	bf00      	nop
 8002eae:	3720      	adds	r7, #32
 8002eb0:	46bd      	mov	sp, r7
 8002eb2:	bd80      	pop	{r7, pc}
 8002eb4:	f3af 8000 	nop.w
 8002eb8:	cccccccd 	.word	0xcccccccd
 8002ebc:	3fdccccc 	.word	0x3fdccccc
 8002ec0:	20000018 	.word	0x20000018
 8002ec4:	20000544 	.word	0x20000544
 8002ec8:	2000054c 	.word	0x2000054c
 8002ecc:	20000514 	.word	0x20000514
 8002ed0:	20000490 	.word	0x20000490
 8002ed4:	20000488 	.word	0x20000488
 8002ed8:	20000480 	.word	0x20000480
 8002edc:	2000049c 	.word	0x2000049c
 8002ee0:	20000000 	.word	0x20000000
 8002ee4:	200004d8 	.word	0x200004d8
 8002ee8:	200003dc 	.word	0x200003dc

08002eec <CommandQueue_IsEmpty>:

int CommandQueue_IsEmpty(CommandQueue *commandQueue){
 8002eec:	b480      	push	{r7}
 8002eee:	b083      	sub	sp, #12
 8002ef0:	af00      	add	r7, sp, #0
 8002ef2:	6078      	str	r0, [r7, #4]
	if(commandQueue->head == commandQueue->tail)
 8002ef4:	687b      	ldr	r3, [r7, #4]
 8002ef6:	781a      	ldrb	r2, [r3, #0]
 8002ef8:	687b      	ldr	r3, [r7, #4]
 8002efa:	785b      	ldrb	r3, [r3, #1]
 8002efc:	429a      	cmp	r2, r3
 8002efe:	d101      	bne.n	8002f04 <CommandQueue_IsEmpty+0x18>
		return 1;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e000      	b.n	8002f06 <CommandQueue_IsEmpty+0x1a>

	return 0;
 8002f04:	2300      	movs	r3, #0
}
 8002f06:	4618      	mov	r0, r3
 8002f08:	370c      	adds	r7, #12
 8002f0a:	46bd      	mov	sp, r7
 8002f0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f10:	4770      	bx	lr

08002f12 <CommandQueue_Enqueue>:

void CommandQueue_Enqueue(CommandQueue *commandQueue, uint8_t index, uint16_t val){
 8002f12:	b480      	push	{r7}
 8002f14:	b083      	sub	sp, #12
 8002f16:	af00      	add	r7, sp, #0
 8002f18:	6078      	str	r0, [r7, #4]
 8002f1a:	460b      	mov	r3, r1
 8002f1c:	70fb      	strb	r3, [r7, #3]
 8002f1e:	4613      	mov	r3, r2
 8002f20:	803b      	strh	r3, [r7, #0]
	commandQueue->buffer[commandQueue->head].index = index;
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	781b      	ldrb	r3, [r3, #0]
 8002f26:	687a      	ldr	r2, [r7, #4]
 8002f28:	009b      	lsls	r3, r3, #2
 8002f2a:	4413      	add	r3, r2
 8002f2c:	78fa      	ldrb	r2, [r7, #3]
 8002f2e:	711a      	strb	r2, [r3, #4]
	commandQueue->buffer[commandQueue->head].val = val;
 8002f30:	687b      	ldr	r3, [r7, #4]
 8002f32:	781b      	ldrb	r3, [r3, #0]
 8002f34:	687a      	ldr	r2, [r7, #4]
 8002f36:	009b      	lsls	r3, r3, #2
 8002f38:	4413      	add	r3, r2
 8002f3a:	883a      	ldrh	r2, [r7, #0]
 8002f3c:	80da      	strh	r2, [r3, #6]
	commandQueue->head = (commandQueue->head + 1) % commandQueue->size; //Move head to the next empty buffer
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	781b      	ldrb	r3, [r3, #0]
 8002f42:	3301      	adds	r3, #1
 8002f44:	687a      	ldr	r2, [r7, #4]
 8002f46:	7892      	ldrb	r2, [r2, #2]
 8002f48:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f4c:	fb01 f202 	mul.w	r2, r1, r2
 8002f50:	1a9b      	subs	r3, r3, r2
 8002f52:	b2da      	uxtb	r2, r3
 8002f54:	687b      	ldr	r3, [r7, #4]
 8002f56:	701a      	strb	r2, [r3, #0]
}
 8002f58:	bf00      	nop
 8002f5a:	370c      	adds	r7, #12
 8002f5c:	46bd      	mov	sp, r7
 8002f5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f62:	4770      	bx	lr

08002f64 <CommandQueue_Dequeue>:

void CommandQueue_Dequeue(CommandQueue *commandQueue, Command *currCmd){
 8002f64:	b480      	push	{r7}
 8002f66:	b083      	sub	sp, #12
 8002f68:	af00      	add	r7, sp, #0
 8002f6a:	6078      	str	r0, [r7, #4]
 8002f6c:	6039      	str	r1, [r7, #0]
	currCmd->index = commandQueue->buffer[commandQueue->tail].index; //Assign the latest command into currCommand
 8002f6e:	687b      	ldr	r3, [r7, #4]
 8002f70:	785b      	ldrb	r3, [r3, #1]
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	009b      	lsls	r3, r3, #2
 8002f76:	4413      	add	r3, r2
 8002f78:	791a      	ldrb	r2, [r3, #4]
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	701a      	strb	r2, [r3, #0]
	currCmd->val = commandQueue->buffer[commandQueue->tail].val; //Assign the latest command into currCommand
 8002f7e:	687b      	ldr	r3, [r7, #4]
 8002f80:	785b      	ldrb	r3, [r3, #1]
 8002f82:	687a      	ldr	r2, [r7, #4]
 8002f84:	009b      	lsls	r3, r3, #2
 8002f86:	4413      	add	r3, r2
 8002f88:	88da      	ldrh	r2, [r3, #6]
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	805a      	strh	r2, [r3, #2]
	commandQueue->tail = (commandQueue->tail +1) % commandQueue->size; //Move tail to the next command in the buffer (Dequeue process)
 8002f8e:	687b      	ldr	r3, [r7, #4]
 8002f90:	785b      	ldrb	r3, [r3, #1]
 8002f92:	3301      	adds	r3, #1
 8002f94:	687a      	ldr	r2, [r7, #4]
 8002f96:	7892      	ldrb	r2, [r2, #2]
 8002f98:	fb93 f1f2 	sdiv	r1, r3, r2
 8002f9c:	fb01 f202 	mul.w	r2, r1, r2
 8002fa0:	1a9b      	subs	r3, r3, r2
 8002fa2:	b2da      	uxtb	r2, r3
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	705a      	strb	r2, [r3, #1]
}
 8002fa8:	bf00      	nop
 8002faa:	370c      	adds	r7, #12
 8002fac:	46bd      	mov	sp, r7
 8002fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb2:	4770      	bx	lr

08002fb4 <CurrentCommand_Clear>:

void CurrentCommand_Clear(Command *currCmd){
 8002fb4:	b480      	push	{r7}
 8002fb6:	b083      	sub	sp, #12
 8002fb8:	af00      	add	r7, sp, #0
 8002fba:	6078      	str	r0, [r7, #4]
	currCmd->index = 100;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2264      	movs	r2, #100	; 0x64
 8002fc0:	701a      	strb	r2, [r3, #0]
	currCmd->val = 0;
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	2200      	movs	r2, #0
 8002fc6:	805a      	strh	r2, [r3, #2]
}
 8002fc8:	bf00      	nop
 8002fca:	370c      	adds	r7, #12
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd2:	4770      	bx	lr

08002fd4 <CurrentCommand_Pending>:

void CurrentCommand_Pending(Command *currCmd){
 8002fd4:	b480      	push	{r7}
 8002fd6:	b083      	sub	sp, #12
 8002fd8:	af00      	add	r7, sp, #0
 8002fda:	6078      	str	r0, [r7, #4]
	currCmd->index = 99;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2263      	movs	r2, #99	; 0x63
 8002fe0:	701a      	strb	r2, [r3, #0]
}
 8002fe2:	bf00      	nop
 8002fe4:	370c      	adds	r7, #12
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fec:	4770      	bx	lr
	...

08002ff0 <Task_ACK>:

void Task_ACK(){
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b084      	sub	sp, #16
 8002ff4:	af00      	add	r7, sp, #0
	char msg[11];
	sprintf(msg, "ACK");
 8002ff6:	1d3b      	adds	r3, r7, #4
 8002ff8:	4907      	ldr	r1, [pc, #28]	; (8003018 <Task_ACK+0x28>)
 8002ffa:	4618      	mov	r0, r3
 8002ffc:	f009 fc22 	bl	800c844 <siprintf>
	HAL_UART_Transmit(&huart3, (uint8_t *) msg, 10, 0xFFFF);
 8003000:	1d39      	adds	r1, r7, #4
 8003002:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003006:	220a      	movs	r2, #10
 8003008:	4804      	ldr	r0, [pc, #16]	; (800301c <Task_ACK+0x2c>)
 800300a:	f004 fc94 	bl	8007936 <HAL_UART_Transmit>
}
 800300e:	bf00      	nop
 8003010:	3710      	adds	r7, #16
 8003012:	46bd      	mov	sp, r7
 8003014:	bd80      	pop	{r7, pc}
 8003016:	bf00      	nop
 8003018:	0800ead0 	.word	0x0800ead0
 800301c:	20000424 	.word	0x20000424

08003020 <Task_END>:

void Task_END(){
 8003020:	b480      	push	{r7}
 8003022:	af00      	add	r7, sp, #0
	currTask = TASK_NONE;
 8003024:	4b03      	ldr	r3, [pc, #12]	; (8003034 <Task_END+0x14>)
 8003026:	2207      	movs	r2, #7
 8003028:	701a      	strb	r2, [r3, #0]
}
 800302a:	bf00      	nop
 800302c:	46bd      	mov	sp, r7
 800302e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003032:	4770      	bx	lr
 8003034:	20000020 	.word	0x20000020

08003038 <HAL_TIM_IC_CaptureCallback>:

	__HAL_TIM_ENABLE_IT(&htim3, TIM_IT_CC1);
}

void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003038:	b580      	push	{r7, lr}
 800303a:	b082      	sub	sp, #8
 800303c:	af00      	add	r7, sp, #0
 800303e:	6078      	str	r0, [r7, #4]
	if (htim->Channel == HAL_TIM_ACTIVE_CHANNEL_1)  // if the interrupt source is channel1
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	7f1b      	ldrb	r3, [r3, #28]
 8003044:	2b01      	cmp	r3, #1
 8003046:	d164      	bne.n	8003112 <HAL_TIM_IC_CaptureCallback+0xda>
	{
		if (Is_First_Captured==0) // if the first value is not captured
 8003048:	4b34      	ldr	r3, [pc, #208]	; (800311c <HAL_TIM_IC_CaptureCallback+0xe4>)
 800304a:	781b      	ldrb	r3, [r3, #0]
 800304c:	2b00      	cmp	r3, #0
 800304e:	d11a      	bne.n	8003086 <HAL_TIM_IC_CaptureCallback+0x4e>
		{
			IC_Val1 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1); // read the first value
 8003050:	2100      	movs	r1, #0
 8003052:	6878      	ldr	r0, [r7, #4]
 8003054:	f003 ffce 	bl	8006ff4 <HAL_TIM_ReadCapturedValue>
 8003058:	4603      	mov	r3, r0
 800305a:	4a31      	ldr	r2, [pc, #196]	; (8003120 <HAL_TIM_IC_CaptureCallback+0xe8>)
 800305c:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 1;  // set the first captured as true
 800305e:	4b2f      	ldr	r3, [pc, #188]	; (800311c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8003060:	2201      	movs	r2, #1
 8003062:	701a      	strb	r2, [r3, #0]
			// Now change the polarity to falling edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_FALLING);
 8003064:	687b      	ldr	r3, [r7, #4]
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	6a1a      	ldr	r2, [r3, #32]
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f022 020a 	bic.w	r2, r2, #10
 8003072:	621a      	str	r2, [r3, #32]
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	6a1a      	ldr	r2, [r3, #32]
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f042 0202 	orr.w	r2, r2, #2
 8003082:	621a      	str	r2, [r3, #32]
			// set polarity to rising edge
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
		}
	}
}
 8003084:	e045      	b.n	8003112 <HAL_TIM_IC_CaptureCallback+0xda>
		else if (Is_First_Captured==1)   // if the first is already captured
 8003086:	4b25      	ldr	r3, [pc, #148]	; (800311c <HAL_TIM_IC_CaptureCallback+0xe4>)
 8003088:	781b      	ldrb	r3, [r3, #0]
 800308a:	2b01      	cmp	r3, #1
 800308c:	d141      	bne.n	8003112 <HAL_TIM_IC_CaptureCallback+0xda>
			IC_Val2 = HAL_TIM_ReadCapturedValue(htim, TIM_CHANNEL_1);  // read second value
 800308e:	2100      	movs	r1, #0
 8003090:	6878      	ldr	r0, [r7, #4]
 8003092:	f003 ffaf 	bl	8006ff4 <HAL_TIM_ReadCapturedValue>
 8003096:	4603      	mov	r3, r0
 8003098:	4a22      	ldr	r2, [pc, #136]	; (8003124 <HAL_TIM_IC_CaptureCallback+0xec>)
 800309a:	6013      	str	r3, [r2, #0]
			__HAL_TIM_SET_COUNTER(htim, 0);  // reset the counter
 800309c:	687b      	ldr	r3, [r7, #4]
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	2200      	movs	r2, #0
 80030a2:	625a      	str	r2, [r3, #36]	; 0x24
			if (IC_Val2 > IC_Val1)
 80030a4:	4b1f      	ldr	r3, [pc, #124]	; (8003124 <HAL_TIM_IC_CaptureCallback+0xec>)
 80030a6:	681a      	ldr	r2, [r3, #0]
 80030a8:	4b1d      	ldr	r3, [pc, #116]	; (8003120 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	429a      	cmp	r2, r3
 80030ae:	d907      	bls.n	80030c0 <HAL_TIM_IC_CaptureCallback+0x88>
				Difference = IC_Val2-IC_Val1;
 80030b0:	4b1c      	ldr	r3, [pc, #112]	; (8003124 <HAL_TIM_IC_CaptureCallback+0xec>)
 80030b2:	681a      	ldr	r2, [r3, #0]
 80030b4:	4b1a      	ldr	r3, [pc, #104]	; (8003120 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	1ad3      	subs	r3, r2, r3
 80030ba:	4a1b      	ldr	r2, [pc, #108]	; (8003128 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80030bc:	6013      	str	r3, [r2, #0]
 80030be:	e00f      	b.n	80030e0 <HAL_TIM_IC_CaptureCallback+0xa8>
			else if (IC_Val1 > IC_Val2)
 80030c0:	4b17      	ldr	r3, [pc, #92]	; (8003120 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80030c2:	681a      	ldr	r2, [r3, #0]
 80030c4:	4b17      	ldr	r3, [pc, #92]	; (8003124 <HAL_TIM_IC_CaptureCallback+0xec>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	429a      	cmp	r2, r3
 80030ca:	d909      	bls.n	80030e0 <HAL_TIM_IC_CaptureCallback+0xa8>
				Difference = (0xffff - IC_Val1) + IC_Val2;
 80030cc:	4b15      	ldr	r3, [pc, #84]	; (8003124 <HAL_TIM_IC_CaptureCallback+0xec>)
 80030ce:	681a      	ldr	r2, [r3, #0]
 80030d0:	4b13      	ldr	r3, [pc, #76]	; (8003120 <HAL_TIM_IC_CaptureCallback+0xe8>)
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	1ad3      	subs	r3, r2, r3
 80030d6:	f503 437f 	add.w	r3, r3, #65280	; 0xff00
 80030da:	33ff      	adds	r3, #255	; 0xff
 80030dc:	4a12      	ldr	r2, [pc, #72]	; (8003128 <HAL_TIM_IC_CaptureCallback+0xf0>)
 80030de:	6013      	str	r3, [r2, #0]
			Is_First_Captured = 0; // set it back to false
 80030e0:	4b0e      	ldr	r3, [pc, #56]	; (800311c <HAL_TIM_IC_CaptureCallback+0xe4>)
 80030e2:	2200      	movs	r2, #0
 80030e4:	701a      	strb	r2, [r3, #0]
			__HAL_TIM_SET_CAPTUREPOLARITY(htim, TIM_CHANNEL_1, TIM_INPUTCHANNELPOLARITY_RISING);
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	681b      	ldr	r3, [r3, #0]
 80030ea:	6a1a      	ldr	r2, [r3, #32]
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	f022 020a 	bic.w	r2, r2, #10
 80030f4:	621a      	str	r2, [r3, #32]
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	681a      	ldr	r2, [r3, #0]
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	6a12      	ldr	r2, [r2, #32]
 8003100:	621a      	str	r2, [r3, #32]
			__HAL_TIM_DISABLE_IT(&htim1, TIM_IT_CC1);
 8003102:	4b0a      	ldr	r3, [pc, #40]	; (800312c <HAL_TIM_IC_CaptureCallback+0xf4>)
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	4b08      	ldr	r3, [pc, #32]	; (800312c <HAL_TIM_IC_CaptureCallback+0xf4>)
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f022 0202 	bic.w	r2, r2, #2
 8003110:	60da      	str	r2, [r3, #12]
}
 8003112:	bf00      	nop
 8003114:	3708      	adds	r7, #8
 8003116:	46bd      	mov	sp, r7
 8003118:	bd80      	pop	{r7, pc}
 800311a:	bf00      	nop
 800311c:	200005ac 	.word	0x200005ac
 8003120:	200005a0 	.word	0x200005a0
 8003124:	200005a4 	.word	0x200005a4
 8003128:	200005a8 	.word	0x200005a8
 800312c:	20000304 	.word	0x20000304

08003130 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void *argument)
{
 8003130:	b580      	push	{r7, lr}
 8003132:	b08a      	sub	sp, #40	; 0x28
 8003134:	af00      	add	r7, sp, #0
 8003136:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	uint32_t tick, servoTick;
	char displayStr[20];
	int dir = 1; //By default enable
 8003138:	2301      	movs	r3, #1
 800313a:	627b      	str	r3, [r7, #36]	; 0x24

	//Initiate timer to count when to trigger PID
	tick = HAL_GetTick();
 800313c:	f000 ff64 	bl	8004008 <HAL_GetTick>
 8003140:	6238      	str	r0, [r7, #32]
	//Initiate timer to count when to trigger PID
	servoTick = HAL_GetTick();
 8003142:	f000 ff61 	bl	8004008 <HAL_GetTick>
 8003146:	61f8      	str	r0, [r7, #28]
	//Initiate timer to count when to trigger DistEst
	distTick.startTick = HAL_GetTick();
 8003148:	f000 ff5e 	bl	8004008 <HAL_GetTick>
 800314c:	4603      	mov	r3, r0
 800314e:	4a05      	ldr	r2, [pc, #20]	; (8003164 <StartDefaultTask+0x34>)
 8003150:	6093      	str	r3, [r2, #8]

	//Straighten wheels upon starting
	htim1.Instance->CCR4 = CENTER;
 8003152:	4b05      	ldr	r3, [pc, #20]	; (8003168 <StartDefaultTask+0x38>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	2291      	movs	r2, #145	; 0x91
 8003158:	641a      	str	r2, [r3, #64]	; 0x40
	osDelay(TURN_TIME);
 800315a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800315e:	f005 fd35 	bl	8008bcc <osDelay>

  /* Infinite loop */
	for(;;)
 8003162:	e7fe      	b.n	8003162 <StartDefaultTask+0x32>
 8003164:	20000490 	.word	0x20000490
 8003168:	20000304 	.word	0x20000304

0800316c <displayOLED_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_displayOLED_Task */
void displayOLED_Task(void *argument)
{
 800316c:	b580      	push	{r7, lr}
 800316e:	b092      	sub	sp, #72	; 0x48
 8003170:	af00      	add	r7, sp, #0
 8003172:	6078      	str	r0, [r7, #4]
//	OLED_ShowString(10, 20, displayStr1);
//
//	sprintf(displayStr1, "C: %5d\0", currCmd.index);
//	OLED_ShowString(10, 40, displayStr1);

	sprintf(displayStr1, "Msg: %s\0", aRxBuffer);
 8003174:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003178:	4a17      	ldr	r2, [pc, #92]	; (80031d8 <displayOLED_Task+0x6c>)
 800317a:	4918      	ldr	r1, [pc, #96]	; (80031dc <displayOLED_Task+0x70>)
 800317c:	4618      	mov	r0, r3
 800317e:	f009 fb61 	bl	800c844 <siprintf>
	OLED_ShowString(10, 30, displayStr1);
 8003182:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003186:	461a      	mov	r2, r3
 8003188:	211e      	movs	r1, #30
 800318a:	200a      	movs	r0, #10
 800318c:	f008 fbea 	bl	800b964 <OLED_ShowString>
//	sprintf(displayStr1, "IR: %s\0", dist);
//	OLED_ShowString(10, 30, displayStr1);
//
//	sprintf(displayStr1, "US: %d\0", Distance);
//	OLED_ShowString(10, 40, displayStr1);
	sprintf(displayStr1, "rpmA: %5d\0", dutyL.current_Rpm);
 8003190:	4b13      	ldr	r3, [pc, #76]	; (80031e0 <displayOLED_Task+0x74>)
 8003192:	691a      	ldr	r2, [r3, #16]
 8003194:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8003198:	4912      	ldr	r1, [pc, #72]	; (80031e4 <displayOLED_Task+0x78>)
 800319a:	4618      	mov	r0, r3
 800319c:	f009 fb52 	bl	800c844 <siprintf>
	//Arg1 pos x, Arg2 pos y
	OLED_ShowString(10, 10, displayStr1);
 80031a0:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031a4:	461a      	mov	r2, r3
 80031a6:	210a      	movs	r1, #10
 80031a8:	200a      	movs	r0, #10
 80031aa:	f008 fbdb 	bl	800b964 <OLED_ShowString>
	sprintf(displayStr1, "rpmB: %5d\0", dutyR.current_Rpm);
 80031ae:	4b0e      	ldr	r3, [pc, #56]	; (80031e8 <displayOLED_Task+0x7c>)
 80031b0:	691a      	ldr	r2, [r3, #16]
 80031b2:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031b6:	490d      	ldr	r1, [pc, #52]	; (80031ec <displayOLED_Task+0x80>)
 80031b8:	4618      	mov	r0, r3
 80031ba:	f009 fb43 	bl	800c844 <siprintf>
	OLED_ShowString(10, 20, displayStr1);
 80031be:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80031c2:	461a      	mov	r2, r3
 80031c4:	2114      	movs	r1, #20
 80031c6:	200a      	movs	r0, #10
 80031c8:	f008 fbcc 	bl	800b964 <OLED_ShowString>
//	osDelay(5);
//	sprintf(displayStr1, "IR: %.4f\0", obsDist_IR);
//	OLED_ShowString(10, 40, displayStr1);

	//Refreshing of the status on the hardware to ensure that new display value will be updated.
	OLED_Refresh_Gram();
 80031cc:	f008 fa56 	bl	800b67c <OLED_Refresh_Gram>
	osDelay(100);
 80031d0:	2064      	movs	r0, #100	; 0x64
 80031d2:	f005 fcfb 	bl	8008bcc <osDelay>
	sprintf(displayStr1, "Msg: %s\0", aRxBuffer);
 80031d6:	e7cd      	b.n	8003174 <displayOLED_Task+0x8>
 80031d8:	20000550 	.word	0x20000550
 80031dc:	0800ead4 	.word	0x0800ead4
 80031e0:	2000049c 	.word	0x2000049c
 80031e4:	0800eae0 	.word	0x0800eae0
 80031e8:	200004d8 	.word	0x200004d8
 80031ec:	0800eaec 	.word	0x0800eaec

080031f0 <Command_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_Command_Task */
void Command_Task(void *argument)
{
 80031f0:	b580      	push	{r7, lr}
 80031f2:	b082      	sub	sp, #8
 80031f4:	af00      	add	r7, sp, #0
 80031f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Command_Task */
  /* Infinite loop */
  for(;;)
  {
	  switch(currCmd.index) {
 80031f8:	4ba8      	ldr	r3, [pc, #672]	; (800349c <Command_Task+0x2ac>)
 80031fa:	781b      	ldrb	r3, [r3, #0]
 80031fc:	3b01      	subs	r3, #1
 80031fe:	2b62      	cmp	r3, #98	; 0x62
 8003200:	f200 8147 	bhi.w	8003492 <Command_Task+0x2a2>
 8003204:	a201      	add	r2, pc, #4	; (adr r2, 800320c <Command_Task+0x1c>)
 8003206:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800320a:	bf00      	nop
 800320c:	08003399 	.word	0x08003399
 8003210:	08003399 	.word	0x08003399
 8003214:	080033bb 	.word	0x080033bb
 8003218:	080033cf 	.word	0x080033cf
 800321c:	080033e3 	.word	0x080033e3
 8003220:	080033f7 	.word	0x080033f7
 8003224:	0800340b 	.word	0x0800340b
 8003228:	0800341f 	.word	0x0800341f
 800322c:	08003433 	.word	0x08003433
 8003230:	08003447 	.word	0x08003447
 8003234:	0800345b 	.word	0x0800345b
 8003238:	08003469 	.word	0x08003469
 800323c:	08003477 	.word	0x08003477
 8003240:	08003485 	.word	0x08003485
 8003244:	08003493 	.word	0x08003493
 8003248:	08003493 	.word	0x08003493
 800324c:	08003493 	.word	0x08003493
 8003250:	08003493 	.word	0x08003493
 8003254:	08003493 	.word	0x08003493
 8003258:	08003493 	.word	0x08003493
 800325c:	08003493 	.word	0x08003493
 8003260:	08003493 	.word	0x08003493
 8003264:	08003493 	.word	0x08003493
 8003268:	08003493 	.word	0x08003493
 800326c:	08003493 	.word	0x08003493
 8003270:	08003493 	.word	0x08003493
 8003274:	08003493 	.word	0x08003493
 8003278:	08003493 	.word	0x08003493
 800327c:	08003493 	.word	0x08003493
 8003280:	08003493 	.word	0x08003493
 8003284:	08003493 	.word	0x08003493
 8003288:	08003493 	.word	0x08003493
 800328c:	08003493 	.word	0x08003493
 8003290:	08003493 	.word	0x08003493
 8003294:	08003493 	.word	0x08003493
 8003298:	08003493 	.word	0x08003493
 800329c:	08003493 	.word	0x08003493
 80032a0:	08003493 	.word	0x08003493
 80032a4:	08003493 	.word	0x08003493
 80032a8:	08003493 	.word	0x08003493
 80032ac:	08003493 	.word	0x08003493
 80032b0:	08003493 	.word	0x08003493
 80032b4:	08003493 	.word	0x08003493
 80032b8:	08003493 	.word	0x08003493
 80032bc:	08003493 	.word	0x08003493
 80032c0:	08003493 	.word	0x08003493
 80032c4:	08003493 	.word	0x08003493
 80032c8:	08003493 	.word	0x08003493
 80032cc:	08003493 	.word	0x08003493
 80032d0:	08003493 	.word	0x08003493
 80032d4:	08003493 	.word	0x08003493
 80032d8:	08003493 	.word	0x08003493
 80032dc:	08003493 	.word	0x08003493
 80032e0:	08003493 	.word	0x08003493
 80032e4:	08003493 	.word	0x08003493
 80032e8:	08003493 	.word	0x08003493
 80032ec:	08003493 	.word	0x08003493
 80032f0:	08003493 	.word	0x08003493
 80032f4:	08003493 	.word	0x08003493
 80032f8:	08003493 	.word	0x08003493
 80032fc:	08003493 	.word	0x08003493
 8003300:	08003493 	.word	0x08003493
 8003304:	08003493 	.word	0x08003493
 8003308:	08003493 	.word	0x08003493
 800330c:	08003493 	.word	0x08003493
 8003310:	08003493 	.word	0x08003493
 8003314:	08003493 	.word	0x08003493
 8003318:	08003493 	.word	0x08003493
 800331c:	08003493 	.word	0x08003493
 8003320:	08003493 	.word	0x08003493
 8003324:	08003493 	.word	0x08003493
 8003328:	08003493 	.word	0x08003493
 800332c:	08003493 	.word	0x08003493
 8003330:	08003493 	.word	0x08003493
 8003334:	08003493 	.word	0x08003493
 8003338:	08003493 	.word	0x08003493
 800333c:	08003493 	.word	0x08003493
 8003340:	08003493 	.word	0x08003493
 8003344:	08003493 	.word	0x08003493
 8003348:	08003493 	.word	0x08003493
 800334c:	08003493 	.word	0x08003493
 8003350:	08003493 	.word	0x08003493
 8003354:	08003493 	.word	0x08003493
 8003358:	08003493 	.word	0x08003493
 800335c:	08003493 	.word	0x08003493
 8003360:	08003493 	.word	0x08003493
 8003364:	08003493 	.word	0x08003493
 8003368:	08003493 	.word	0x08003493
 800336c:	08003493 	.word	0x08003493
 8003370:	08003493 	.word	0x08003493
 8003374:	08003493 	.word	0x08003493
 8003378:	08003493 	.word	0x08003493
 800337c:	08003493 	.word	0x08003493
 8003380:	08003493 	.word	0x08003493
 8003384:	08003493 	.word	0x08003493
 8003388:	08003493 	.word	0x08003493
 800338c:	08003493 	.word	0x08003493
 8003390:	08003493 	.word	0x08003493
 8003394:	08003493 	.word	0x08003493
	  	  	 case 1: //Manual FW
	  	  	 case 2: //Manual BW
	  	  		currTask = currCmd.index == 1 ? TASK_MOVE : TASK_MOVE_BACKWARD;
 8003398:	4b40      	ldr	r3, [pc, #256]	; (800349c <Command_Task+0x2ac>)
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	2b01      	cmp	r3, #1
 800339e:	bf14      	ite	ne
 80033a0:	2301      	movne	r3, #1
 80033a2:	2300      	moveq	r3, #0
 80033a4:	b2db      	uxtb	r3, r3
 80033a6:	461a      	mov	r2, r3
 80033a8:	4b3d      	ldr	r3, [pc, #244]	; (80034a0 <Command_Task+0x2b0>)
 80033aa:	701a      	strb	r2, [r3, #0]
	  	  		manualMode = 1;
 80033ac:	4b3d      	ldr	r3, [pc, #244]	; (80034a4 <Command_Task+0x2b4>)
 80033ae:	2201      	movs	r2, #1
 80033b0:	701a      	strb	r2, [r3, #0]
	  	  		CurrentCommand_Pending(&currCmd);
 80033b2:	483a      	ldr	r0, [pc, #232]	; (800349c <Command_Task+0x2ac>)
 80033b4:	f7ff fe0e 	bl	8002fd4 <CurrentCommand_Pending>
	  	  		 break;
 80033b8:	e06c      	b.n	8003494 <Command_Task+0x2a4>
	  	  	 case 3:
	  	  		 currTask = TASK_FL;
 80033ba:	4b39      	ldr	r3, [pc, #228]	; (80034a0 <Command_Task+0x2b0>)
 80033bc:	2202      	movs	r2, #2
 80033be:	701a      	strb	r2, [r3, #0]
	  	  		 angle = 90;
 80033c0:	4b39      	ldr	r3, [pc, #228]	; (80034a8 <Command_Task+0x2b8>)
 80033c2:	225a      	movs	r2, #90	; 0x5a
 80033c4:	601a      	str	r2, [r3, #0]
	  	  		 CurrentCommand_Pending(&currCmd);
 80033c6:	4835      	ldr	r0, [pc, #212]	; (800349c <Command_Task+0x2ac>)
 80033c8:	f7ff fe04 	bl	8002fd4 <CurrentCommand_Pending>
	  	  		 break;
 80033cc:	e062      	b.n	8003494 <Command_Task+0x2a4>
	  	  	 case 4:
	  	  		 currTask = TASK_FR;
 80033ce:	4b34      	ldr	r3, [pc, #208]	; (80034a0 <Command_Task+0x2b0>)
 80033d0:	2203      	movs	r2, #3
 80033d2:	701a      	strb	r2, [r3, #0]
	  	  		 angle = 90;
 80033d4:	4b34      	ldr	r3, [pc, #208]	; (80034a8 <Command_Task+0x2b8>)
 80033d6:	225a      	movs	r2, #90	; 0x5a
 80033d8:	601a      	str	r2, [r3, #0]
	  	  		 CurrentCommand_Pending(&currCmd);
 80033da:	4830      	ldr	r0, [pc, #192]	; (800349c <Command_Task+0x2ac>)
 80033dc:	f7ff fdfa 	bl	8002fd4 <CurrentCommand_Pending>
	  	  		 break;
 80033e0:	e058      	b.n	8003494 <Command_Task+0x2a4>
	  	     case 5:
	  	  	  	 currTask = TASK_BL;
 80033e2:	4b2f      	ldr	r3, [pc, #188]	; (80034a0 <Command_Task+0x2b0>)
 80033e4:	2204      	movs	r2, #4
 80033e6:	701a      	strb	r2, [r3, #0]
	  	  	  	 angle = 90;
 80033e8:	4b2f      	ldr	r3, [pc, #188]	; (80034a8 <Command_Task+0x2b8>)
 80033ea:	225a      	movs	r2, #90	; 0x5a
 80033ec:	601a      	str	r2, [r3, #0]
	  	  	     CurrentCommand_Pending(&currCmd);
 80033ee:	482b      	ldr	r0, [pc, #172]	; (800349c <Command_Task+0x2ac>)
 80033f0:	f7ff fdf0 	bl	8002fd4 <CurrentCommand_Pending>
	  	  	  	 break;
 80033f4:	e04e      	b.n	8003494 <Command_Task+0x2a4>
	  	     case 6:
	  	   	  	 currTask = TASK_BR;
 80033f6:	4b2a      	ldr	r3, [pc, #168]	; (80034a0 <Command_Task+0x2b0>)
 80033f8:	2205      	movs	r2, #5
 80033fa:	701a      	strb	r2, [r3, #0]
	  	   	  	 angle = 90;
 80033fc:	4b2a      	ldr	r3, [pc, #168]	; (80034a8 <Command_Task+0x2b8>)
 80033fe:	225a      	movs	r2, #90	; 0x5a
 8003400:	601a      	str	r2, [r3, #0]
	  	   	  	 CurrentCommand_Pending(&currCmd);
 8003402:	4826      	ldr	r0, [pc, #152]	; (800349c <Command_Task+0x2ac>)
 8003404:	f7ff fde6 	bl	8002fd4 <CurrentCommand_Pending>
	  	   	  	 break;
 8003408:	e044      	b.n	8003494 <Command_Task+0x2a4>
	  	     case 7:
	  	  	  	 currTask = TASK_FL;
 800340a:	4b25      	ldr	r3, [pc, #148]	; (80034a0 <Command_Task+0x2b0>)
 800340c:	2202      	movs	r2, #2
 800340e:	701a      	strb	r2, [r3, #0]
	  	  	  	 angle = 180;
 8003410:	4b25      	ldr	r3, [pc, #148]	; (80034a8 <Command_Task+0x2b8>)
 8003412:	22b4      	movs	r2, #180	; 0xb4
 8003414:	601a      	str	r2, [r3, #0]
	  	  	  	 CurrentCommand_Pending(&currCmd);
 8003416:	4821      	ldr	r0, [pc, #132]	; (800349c <Command_Task+0x2ac>)
 8003418:	f7ff fddc 	bl	8002fd4 <CurrentCommand_Pending>
	  	  	  	 break;
 800341c:	e03a      	b.n	8003494 <Command_Task+0x2a4>
	  	  	 case 8:
	  	  	  	 currTask = TASK_FR;
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <Command_Task+0x2b0>)
 8003420:	2203      	movs	r2, #3
 8003422:	701a      	strb	r2, [r3, #0]
	  	  	  	 angle = 180;
 8003424:	4b20      	ldr	r3, [pc, #128]	; (80034a8 <Command_Task+0x2b8>)
 8003426:	22b4      	movs	r2, #180	; 0xb4
 8003428:	601a      	str	r2, [r3, #0]
	  	  	  	 CurrentCommand_Pending(&currCmd);
 800342a:	481c      	ldr	r0, [pc, #112]	; (800349c <Command_Task+0x2ac>)
 800342c:	f7ff fdd2 	bl	8002fd4 <CurrentCommand_Pending>
	  	  	  	 break;
 8003430:	e030      	b.n	8003494 <Command_Task+0x2a4>
	  	  	 case 9:
	  	  	  	 currTask = TASK_BL;
 8003432:	4b1b      	ldr	r3, [pc, #108]	; (80034a0 <Command_Task+0x2b0>)
 8003434:	2204      	movs	r2, #4
 8003436:	701a      	strb	r2, [r3, #0]
	  	  	  	 angle = 180;
 8003438:	4b1b      	ldr	r3, [pc, #108]	; (80034a8 <Command_Task+0x2b8>)
 800343a:	22b4      	movs	r2, #180	; 0xb4
 800343c:	601a      	str	r2, [r3, #0]
	  	  	  	 CurrentCommand_Pending(&currCmd);
 800343e:	4817      	ldr	r0, [pc, #92]	; (800349c <Command_Task+0x2ac>)
 8003440:	f7ff fdc8 	bl	8002fd4 <CurrentCommand_Pending>
	  	  	  	 break;
 8003444:	e026      	b.n	8003494 <Command_Task+0x2a4>
	  	  	 case 10:
	  	  	  	 currTask = TASK_BR;
 8003446:	4b16      	ldr	r3, [pc, #88]	; (80034a0 <Command_Task+0x2b0>)
 8003448:	2205      	movs	r2, #5
 800344a:	701a      	strb	r2, [r3, #0]
	  	  	  	 angle = 180;
 800344c:	4b16      	ldr	r3, [pc, #88]	; (80034a8 <Command_Task+0x2b8>)
 800344e:	22b4      	movs	r2, #180	; 0xb4
 8003450:	601a      	str	r2, [r3, #0]
	  	  	  	 CurrentCommand_Pending(&currCmd);
 8003452:	4812      	ldr	r0, [pc, #72]	; (800349c <Command_Task+0x2ac>)
 8003454:	f7ff fdbe 	bl	8002fd4 <CurrentCommand_Pending>
	  	  	  	 break;
 8003458:	e01c      	b.n	8003494 <Command_Task+0x2a4>
	  	  	 case 11:
	  	  		 currTask = TASK_FRL;
 800345a:	4b11      	ldr	r3, [pc, #68]	; (80034a0 <Command_Task+0x2b0>)
 800345c:	220a      	movs	r2, #10
 800345e:	701a      	strb	r2, [r3, #0]
	  	  		 CurrentCommand_Pending(&currCmd);
 8003460:	480e      	ldr	r0, [pc, #56]	; (800349c <Command_Task+0x2ac>)
 8003462:	f7ff fdb7 	bl	8002fd4 <CurrentCommand_Pending>
	  	  		 break;
 8003466:	e015      	b.n	8003494 <Command_Task+0x2a4>
	  	  	 case 12:
	  	  		 currTask = TASK_FLR;
 8003468:	4b0d      	ldr	r3, [pc, #52]	; (80034a0 <Command_Task+0x2b0>)
 800346a:	220b      	movs	r2, #11
 800346c:	701a      	strb	r2, [r3, #0]
				 CurrentCommand_Pending(&currCmd);
 800346e:	480b      	ldr	r0, [pc, #44]	; (800349c <Command_Task+0x2ac>)
 8003470:	f7ff fdb0 	bl	8002fd4 <CurrentCommand_Pending>
				break;
 8003474:	e00e      	b.n	8003494 <Command_Task+0x2a4>
	  	  	 case 13:
	  	  		 currTask = TASK_P1L;
 8003476:	4b0a      	ldr	r3, [pc, #40]	; (80034a0 <Command_Task+0x2b0>)
 8003478:	220f      	movs	r2, #15
 800347a:	701a      	strb	r2, [r3, #0]
	  	  		 CurrentCommand_Pending(&currCmd);
 800347c:	4807      	ldr	r0, [pc, #28]	; (800349c <Command_Task+0x2ac>)
 800347e:	f7ff fda9 	bl	8002fd4 <CurrentCommand_Pending>
	  	  		 break;
 8003482:	e007      	b.n	8003494 <Command_Task+0x2a4>
	  	  	 case 14:
				 currTask = TASK_P1R;
 8003484:	4b06      	ldr	r3, [pc, #24]	; (80034a0 <Command_Task+0x2b0>)
 8003486:	220c      	movs	r2, #12
 8003488:	701a      	strb	r2, [r3, #0]
				 CurrentCommand_Pending(&currCmd);
 800348a:	4804      	ldr	r0, [pc, #16]	; (800349c <Command_Task+0x2ac>)
 800348c:	f7ff fda2 	bl	8002fd4 <CurrentCommand_Pending>
				 break;
 8003490:	e000      	b.n	8003494 <Command_Task+0x2a4>
	  	  	 case 99:
	  	  		 break;
	  	  	 default:
	  	  		 break;
 8003492:	bf00      	nop
	  	  	 }

	  	  osDelay(100);
 8003494:	2064      	movs	r0, #100	; 0x64
 8003496:	f005 fb99 	bl	8008bcc <osDelay>
	  switch(currCmd.index) {
 800349a:	e6ad      	b.n	80031f8 <Command_Task+0x8>
 800349c:	2000001c 	.word	0x2000001c
 80034a0:	20000020 	.word	0x20000020
 80034a4:	2000059c 	.word	0x2000059c
 80034a8:	20000598 	.word	0x20000598

080034ac <MoveDistance_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_MoveDistance_Task */
void MoveDistance_Task(void *argument)
{
 80034ac:	b580      	push	{r7, lr}
 80034ae:	b084      	sub	sp, #16
 80034b0:	af00      	add	r7, sp, #0
 80034b2:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN MoveDistance_Task */
  /* Infinite loop */
	float dist;
  for(;;)
  {
	  if(currTask == TASK_MOVE){
 80034b4:	4b9a      	ldr	r3, [pc, #616]	; (8003720 <MoveDistance_Task+0x274>)
 80034b6:	781b      	ldrb	r3, [r3, #0]
 80034b8:	2b00      	cmp	r3, #0
 80034ba:	d11c      	bne.n	80034f6 <MoveDistance_Task+0x4a>
		  dist = currCmd.val;
 80034bc:	4b99      	ldr	r3, [pc, #612]	; (8003724 <MoveDistance_Task+0x278>)
 80034be:	885b      	ldrh	r3, [r3, #2]
 80034c0:	ee07 3a90 	vmov	s15, r3
 80034c4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80034c8:	edc7 7a03 	vstr	s15, [r7, #12]
		  CurrentCommand_Clear(&currCmd);
 80034cc:	4895      	ldr	r0, [pc, #596]	; (8003724 <MoveDistance_Task+0x278>)
 80034ce:	f7ff fd71 	bl	8002fb4 <CurrentCommand_Clear>
		  DC_MoveDistForward(600, (dist/100), 1);
 80034d2:	edd7 7a03 	vldr	s15, [r7, #12]
 80034d6:	eddf 6a94 	vldr	s13, [pc, #592]	; 8003728 <MoveDistance_Task+0x27c>
 80034da:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 80034de:	2101      	movs	r1, #1
 80034e0:	eeb0 0a47 	vmov.f32	s0, s14
 80034e4:	f44f 7016 	mov.w	r0, #600	; 0x258
 80034e8:	f7ff fc3a 	bl	8002d60 <DC_MoveDistForward>
		  Task_ACK();
 80034ec:	f7ff fd80 	bl	8002ff0 <Task_ACK>
		  Task_END();
 80034f0:	f7ff fd96 	bl	8003020 <Task_END>
 80034f4:	e7de      	b.n	80034b4 <MoveDistance_Task+0x8>
	  }
	  else if(currTask == TASK_MOVE_BACKWARD){
 80034f6:	4b8a      	ldr	r3, [pc, #552]	; (8003720 <MoveDistance_Task+0x274>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	2b01      	cmp	r3, #1
 80034fc:	d11c      	bne.n	8003538 <MoveDistance_Task+0x8c>
		  dist = currCmd.val;
 80034fe:	4b89      	ldr	r3, [pc, #548]	; (8003724 <MoveDistance_Task+0x278>)
 8003500:	885b      	ldrh	r3, [r3, #2]
 8003502:	ee07 3a90 	vmov	s15, r3
 8003506:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800350a:	edc7 7a03 	vstr	s15, [r7, #12]
		  CurrentCommand_Clear(&currCmd);
 800350e:	4885      	ldr	r0, [pc, #532]	; (8003724 <MoveDistance_Task+0x278>)
 8003510:	f7ff fd50 	bl	8002fb4 <CurrentCommand_Clear>
		  //0.07
		  DC_MoveDistForward(600, (dist/100), 0);
 8003514:	edd7 7a03 	vldr	s15, [r7, #12]
 8003518:	eddf 6a83 	vldr	s13, [pc, #524]	; 8003728 <MoveDistance_Task+0x27c>
 800351c:	ee87 7aa6 	vdiv.f32	s14, s15, s13
 8003520:	2100      	movs	r1, #0
 8003522:	eeb0 0a47 	vmov.f32	s0, s14
 8003526:	f44f 7016 	mov.w	r0, #600	; 0x258
 800352a:	f7ff fc19 	bl	8002d60 <DC_MoveDistForward>
		  Task_ACK();
 800352e:	f7ff fd5f 	bl	8002ff0 <Task_ACK>
		  Task_END();
 8003532:	f7ff fd75 	bl	8003020 <Task_END>
 8003536:	e7bd      	b.n	80034b4 <MoveDistance_Task+0x8>
	  }
	  else if(currTask == TASK_FL){
 8003538:	4b79      	ldr	r3, [pc, #484]	; (8003720 <MoveDistance_Task+0x274>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b02      	cmp	r3, #2
 800353e:	d113      	bne.n	8003568 <MoveDistance_Task+0xbc>
	 	CurrentCommand_Clear(&currCmd);
 8003540:	4878      	ldr	r0, [pc, #480]	; (8003724 <MoveDistance_Task+0x278>)
 8003542:	f7ff fd37 	bl	8002fb4 <CurrentCommand_Clear>
	 	if(angle == 90){
 8003546:	4b79      	ldr	r3, [pc, #484]	; (800372c <MoveDistance_Task+0x280>)
 8003548:	681b      	ldr	r3, [r3, #0]
 800354a:	2b5a      	cmp	r3, #90	; 0x5a
 800354c:	d102      	bne.n	8003554 <MoveDistance_Task+0xa8>
	 		Servo_Turn_Left_90_2();
 800354e:	f7ff f809 	bl	8002564 <Servo_Turn_Left_90_2>
 8003552:	e001      	b.n	8003558 <MoveDistance_Task+0xac>
	 	}
	 	else{
	 		Servo_Turn_Left_180();
 8003554:	f7ff f982 	bl	800285c <Servo_Turn_Left_180>
	 	}
	 	angle = 0;
 8003558:	4b74      	ldr	r3, [pc, #464]	; (800372c <MoveDistance_Task+0x280>)
 800355a:	2200      	movs	r2, #0
 800355c:	601a      	str	r2, [r3, #0]
	 	Task_ACK();
 800355e:	f7ff fd47 	bl	8002ff0 <Task_ACK>
	 	Task_END();
 8003562:	f7ff fd5d 	bl	8003020 <Task_END>
 8003566:	e7a5      	b.n	80034b4 <MoveDistance_Task+0x8>
	  }
	  else if(currTask == TASK_FR){
 8003568:	4b6d      	ldr	r3, [pc, #436]	; (8003720 <MoveDistance_Task+0x274>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	2b03      	cmp	r3, #3
 800356e:	d113      	bne.n	8003598 <MoveDistance_Task+0xec>
		  CurrentCommand_Clear(&currCmd);
 8003570:	486c      	ldr	r0, [pc, #432]	; (8003724 <MoveDistance_Task+0x278>)
 8003572:	f7ff fd1f 	bl	8002fb4 <CurrentCommand_Clear>
		  if(angle == 90){
 8003576:	4b6d      	ldr	r3, [pc, #436]	; (800372c <MoveDistance_Task+0x280>)
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	2b5a      	cmp	r3, #90	; 0x5a
 800357c:	d102      	bne.n	8003584 <MoveDistance_Task+0xd8>
		  	 Servo_Turn_Right_90();
 800357e:	f7fe ff53 	bl	8002428 <Servo_Turn_Right_90>
 8003582:	e001      	b.n	8003588 <MoveDistance_Task+0xdc>
		  }
		  else{
		  	 Servo_Turn_Right_180();
 8003584:	f7ff f92e 	bl	80027e4 <Servo_Turn_Right_180>
		  }
		  angle = 0;
 8003588:	4b68      	ldr	r3, [pc, #416]	; (800372c <MoveDistance_Task+0x280>)
 800358a:	2200      	movs	r2, #0
 800358c:	601a      	str	r2, [r3, #0]
		  Task_ACK();
 800358e:	f7ff fd2f 	bl	8002ff0 <Task_ACK>
		  Task_END();
 8003592:	f7ff fd45 	bl	8003020 <Task_END>
 8003596:	e78d      	b.n	80034b4 <MoveDistance_Task+0x8>
	  }
	  else if(currTask == TASK_BL){
 8003598:	4b61      	ldr	r3, [pc, #388]	; (8003720 <MoveDistance_Task+0x274>)
 800359a:	781b      	ldrb	r3, [r3, #0]
 800359c:	2b04      	cmp	r3, #4
 800359e:	d113      	bne.n	80035c8 <MoveDistance_Task+0x11c>
		 CurrentCommand_Clear(&currCmd);
 80035a0:	4860      	ldr	r0, [pc, #384]	; (8003724 <MoveDistance_Task+0x278>)
 80035a2:	f7ff fd07 	bl	8002fb4 <CurrentCommand_Clear>
		 if(angle == 90){
 80035a6:	4b61      	ldr	r3, [pc, #388]	; (800372c <MoveDistance_Task+0x280>)
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	2b5a      	cmp	r3, #90	; 0x5a
 80035ac:	d102      	bne.n	80035b4 <MoveDistance_Task+0x108>
	  		Servo_Turn_Left_90_Back();
 80035ae:	f7ff f9f1 	bl	8002994 <Servo_Turn_Left_90_Back>
 80035b2:	e001      	b.n	80035b8 <MoveDistance_Task+0x10c>
		 }
		 else{
	  	 	Servo_Turn_Left_180_Back();
 80035b4:	f7ff fa8a 	bl	8002acc <Servo_Turn_Left_180_Back>
	  	 }
		 angle = 0;
 80035b8:	4b5c      	ldr	r3, [pc, #368]	; (800372c <MoveDistance_Task+0x280>)
 80035ba:	2200      	movs	r2, #0
 80035bc:	601a      	str	r2, [r3, #0]
	  	 Task_ACK();
 80035be:	f7ff fd17 	bl	8002ff0 <Task_ACK>
	  	 Task_END();
 80035c2:	f7ff fd2d 	bl	8003020 <Task_END>
 80035c6:	e775      	b.n	80034b4 <MoveDistance_Task+0x8>
	  }
	  else if(currTask == TASK_BR){
 80035c8:	4b55      	ldr	r3, [pc, #340]	; (8003720 <MoveDistance_Task+0x274>)
 80035ca:	781b      	ldrb	r3, [r3, #0]
 80035cc:	2b05      	cmp	r3, #5
 80035ce:	d113      	bne.n	80035f8 <MoveDistance_Task+0x14c>
		CurrentCommand_Clear(&currCmd);
 80035d0:	4854      	ldr	r0, [pc, #336]	; (8003724 <MoveDistance_Task+0x278>)
 80035d2:	f7ff fcef 	bl	8002fb4 <CurrentCommand_Clear>
	  	if(angle == 90){
 80035d6:	4b55      	ldr	r3, [pc, #340]	; (800372c <MoveDistance_Task+0x280>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	2b5a      	cmp	r3, #90	; 0x5a
 80035dc:	d102      	bne.n	80035e4 <MoveDistance_Task+0x138>
	  		Servo_Turn_Right_90_Back();
 80035de:	f7ff f979 	bl	80028d4 <Servo_Turn_Right_90_Back>
 80035e2:	e001      	b.n	80035e8 <MoveDistance_Task+0x13c>
	  	}
	  	else{
	  		Servo_Turn_Right_180_Back();
 80035e4:	f7ff fa36 	bl	8002a54 <Servo_Turn_Right_180_Back>
	  	}
	  	angle = 0;
 80035e8:	4b50      	ldr	r3, [pc, #320]	; (800372c <MoveDistance_Task+0x280>)
 80035ea:	2200      	movs	r2, #0
 80035ec:	601a      	str	r2, [r3, #0]
	  	Task_ACK();
 80035ee:	f7ff fcff 	bl	8002ff0 <Task_ACK>
	  	Task_END();
 80035f2:	f7ff fd15 	bl	8003020 <Task_END>
 80035f6:	e75d      	b.n	80034b4 <MoveDistance_Task+0x8>
	  }
	  else if(currTask == TASK_FRL){
 80035f8:	4b49      	ldr	r3, [pc, #292]	; (8003720 <MoveDistance_Task+0x274>)
 80035fa:	781b      	ldrb	r3, [r3, #0]
 80035fc:	2b0a      	cmp	r3, #10
 80035fe:	d109      	bne.n	8003614 <MoveDistance_Task+0x168>
		  CurrentCommand_Clear(&currCmd);
 8003600:	4848      	ldr	r0, [pc, #288]	; (8003724 <MoveDistance_Task+0x278>)
 8003602:	f7ff fcd7 	bl	8002fb4 <CurrentCommand_Clear>
		  Servo_Turn_RightLeft_Outdoor();
 8003606:	f7ff f87b 	bl	8002700 <Servo_Turn_RightLeft_Outdoor>
		  Task_ACK();
 800360a:	f7ff fcf1 	bl	8002ff0 <Task_ACK>
		  Task_END();
 800360e:	f7ff fd07 	bl	8003020 <Task_END>
 8003612:	e74f      	b.n	80034b4 <MoveDistance_Task+0x8>
	  }
	  else if(currTask == TASK_FLR){
 8003614:	4b42      	ldr	r3, [pc, #264]	; (8003720 <MoveDistance_Task+0x274>)
 8003616:	781b      	ldrb	r3, [r3, #0]
 8003618:	2b0b      	cmp	r3, #11
 800361a:	d109      	bne.n	8003630 <MoveDistance_Task+0x184>
		  CurrentCommand_Clear(&currCmd);
 800361c:	4841      	ldr	r0, [pc, #260]	; (8003724 <MoveDistance_Task+0x278>)
 800361e:	f7ff fcc9 	bl	8002fb4 <CurrentCommand_Clear>
		  Servo_Turn_LeftRight_Outdoor();
 8003622:	f7fe fffb 	bl	800261c <Servo_Turn_LeftRight_Outdoor>
		  Task_ACK();
 8003626:	f7ff fce3 	bl	8002ff0 <Task_ACK>
		  Task_END();
 800362a:	f7ff fcf9 	bl	8003020 <Task_END>
 800362e:	e741      	b.n	80034b4 <MoveDistance_Task+0x8>
	  }
	  else if(currTask == TASK_FL2){
 8003630:	4b3b      	ldr	r3, [pc, #236]	; (8003720 <MoveDistance_Task+0x274>)
 8003632:	781b      	ldrb	r3, [r3, #0]
 8003634:	2b08      	cmp	r3, #8
 8003636:	d10d      	bne.n	8003654 <MoveDistance_Task+0x1a8>
		  CurrentCommand_Clear(&currCmd);
 8003638:	483a      	ldr	r0, [pc, #232]	; (8003724 <MoveDistance_Task+0x278>)
 800363a:	f7ff fcbb 	bl	8002fb4 <CurrentCommand_Clear>
		  Servo_Turn_Left_90_2();
 800363e:	f7fe ff91 	bl	8002564 <Servo_Turn_Left_90_2>
		  osDelay(1000);
 8003642:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003646:	f005 fac1 	bl	8008bcc <osDelay>
		  Task_ACK();
 800364a:	f7ff fcd1 	bl	8002ff0 <Task_ACK>
		  Task_END();
 800364e:	f7ff fce7 	bl	8003020 <Task_END>
 8003652:	e72f      	b.n	80034b4 <MoveDistance_Task+0x8>
	  }
	  else if(currTask == TASK_FR2){
 8003654:	4b32      	ldr	r3, [pc, #200]	; (8003720 <MoveDistance_Task+0x274>)
 8003656:	781b      	ldrb	r3, [r3, #0]
 8003658:	2b09      	cmp	r3, #9
 800365a:	d10d      	bne.n	8003678 <MoveDistance_Task+0x1cc>
		  CurrentCommand_Clear(&currCmd);
 800365c:	4831      	ldr	r0, [pc, #196]	; (8003724 <MoveDistance_Task+0x278>)
 800365e:	f7ff fca9 	bl	8002fb4 <CurrentCommand_Clear>
	      Servo_Turn_Right_90_2();
 8003662:	f7fe ff2b 	bl	80024bc <Servo_Turn_Right_90_2>
		  osDelay(1000);
 8003666:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 800366a:	f005 faaf 	bl	8008bcc <osDelay>
		  Task_ACK();
 800366e:	f7ff fcbf 	bl	8002ff0 <Task_ACK>
	      Task_END();
 8003672:	f7ff fcd5 	bl	8003020 <Task_END>
 8003676:	e71d      	b.n	80034b4 <MoveDistance_Task+0x8>
	  }
	  else if(currTask == TASK_P1L){
 8003678:	4b29      	ldr	r3, [pc, #164]	; (8003720 <MoveDistance_Task+0x274>)
 800367a:	781b      	ldrb	r3, [r3, #0]
 800367c:	2b0f      	cmp	r3, #15
 800367e:	d124      	bne.n	80036ca <MoveDistance_Task+0x21e>
		  part = currCmd.val;
 8003680:	4b28      	ldr	r3, [pc, #160]	; (8003724 <MoveDistance_Task+0x278>)
 8003682:	885b      	ldrh	r3, [r3, #2]
 8003684:	461a      	mov	r2, r3
 8003686:	4b2a      	ldr	r3, [pc, #168]	; (8003730 <MoveDistance_Task+0x284>)
 8003688:	601a      	str	r2, [r3, #0]
		  CurrentCommand_Clear(&currCmd);
 800368a:	4826      	ldr	r0, [pc, #152]	; (8003724 <MoveDistance_Task+0x278>)
 800368c:	f7ff fc92 	bl	8002fb4 <CurrentCommand_Clear>
		  if(part == 1){
 8003690:	4b27      	ldr	r3, [pc, #156]	; (8003730 <MoveDistance_Task+0x284>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	2b01      	cmp	r3, #1
 8003696:	d102      	bne.n	800369e <MoveDistance_Task+0x1f2>
			  Task2_Part1_Servo_Turn_Left_Outdoor();
 8003698:	f7ff fa54 	bl	8002b44 <Task2_Part1_Servo_Turn_Left_Outdoor>
 800369c:	e00c      	b.n	80036b8 <MoveDistance_Task+0x20c>
		  }
		  else if(part == 2){
 800369e:	4b24      	ldr	r3, [pc, #144]	; (8003730 <MoveDistance_Task+0x284>)
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	2b02      	cmp	r3, #2
 80036a4:	d102      	bne.n	80036ac <MoveDistance_Task+0x200>
			  Task2_Part2_Servo_Turn_Left_Outdoor();
 80036a6:	f7ff fac9 	bl	8002c3c <Task2_Part2_Servo_Turn_Left_Outdoor>
 80036aa:	e005      	b.n	80036b8 <MoveDistance_Task+0x20c>
		  }
		  else if(part == 3){
 80036ac:	4b20      	ldr	r3, [pc, #128]	; (8003730 <MoveDistance_Task+0x284>)
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	2b03      	cmp	r3, #3
 80036b2:	d101      	bne.n	80036b8 <MoveDistance_Task+0x20c>
			  Task2_Part3_Servo_Return_Right();
 80036b4:	f7ff fb46 	bl	8002d44 <Task2_Part3_Servo_Return_Right>
		  }
		  osDelay(1000);
 80036b8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80036bc:	f005 fa86 	bl	8008bcc <osDelay>
		  Task_ACK();
 80036c0:	f7ff fc96 	bl	8002ff0 <Task_ACK>
		  Task_END();
 80036c4:	f7ff fcac 	bl	8003020 <Task_END>
 80036c8:	e6f4      	b.n	80034b4 <MoveDistance_Task+0x8>
	  }

	  else if(currTask == TASK_P1R){
 80036ca:	4b15      	ldr	r3, [pc, #84]	; (8003720 <MoveDistance_Task+0x274>)
 80036cc:	781b      	ldrb	r3, [r3, #0]
 80036ce:	2b0c      	cmp	r3, #12
 80036d0:	f47f aef0 	bne.w	80034b4 <MoveDistance_Task+0x8>
		  part = currCmd.val;
 80036d4:	4b13      	ldr	r3, [pc, #76]	; (8003724 <MoveDistance_Task+0x278>)
 80036d6:	885b      	ldrh	r3, [r3, #2]
 80036d8:	461a      	mov	r2, r3
 80036da:	4b15      	ldr	r3, [pc, #84]	; (8003730 <MoveDistance_Task+0x284>)
 80036dc:	601a      	str	r2, [r3, #0]
		  CurrentCommand_Clear(&currCmd);
 80036de:	4811      	ldr	r0, [pc, #68]	; (8003724 <MoveDistance_Task+0x278>)
 80036e0:	f7ff fc68 	bl	8002fb4 <CurrentCommand_Clear>
		  if(part == 1){
 80036e4:	4b12      	ldr	r3, [pc, #72]	; (8003730 <MoveDistance_Task+0x284>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	2b01      	cmp	r3, #1
 80036ea:	d102      	bne.n	80036f2 <MoveDistance_Task+0x246>
			  Task2_Part1_Servo_Turn_Right_Outdoor();
 80036ec:	f7ff fa64 	bl	8002bb8 <Task2_Part1_Servo_Turn_Right_Outdoor>
 80036f0:	e00c      	b.n	800370c <MoveDistance_Task+0x260>
		  }
		  else if(part == 2){
 80036f2:	4b0f      	ldr	r3, [pc, #60]	; (8003730 <MoveDistance_Task+0x284>)
 80036f4:	681b      	ldr	r3, [r3, #0]
 80036f6:	2b02      	cmp	r3, #2
 80036f8:	d102      	bne.n	8003700 <MoveDistance_Task+0x254>
			  Task2_Part2_Servo_Turn_Right_Outdoor();
 80036fa:	f7ff fae1 	bl	8002cc0 <Task2_Part2_Servo_Turn_Right_Outdoor>
 80036fe:	e005      	b.n	800370c <MoveDistance_Task+0x260>
		  }
		  else if(part == 3){
 8003700:	4b0b      	ldr	r3, [pc, #44]	; (8003730 <MoveDistance_Task+0x284>)
 8003702:	681b      	ldr	r3, [r3, #0]
 8003704:	2b03      	cmp	r3, #3
 8003706:	d101      	bne.n	800370c <MoveDistance_Task+0x260>

			  Task2_Part3_Servo_Return_Left();
 8003708:	f7ff fb22 	bl	8002d50 <Task2_Part3_Servo_Return_Left>
		  }
		  osDelay(1000);
 800370c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003710:	f005 fa5c 	bl	8008bcc <osDelay>
		  Task_ACK();
 8003714:	f7ff fc6c 	bl	8002ff0 <Task_ACK>
		  Task_END();
 8003718:	f7ff fc82 	bl	8003020 <Task_END>
	  if(currTask == TASK_MOVE){
 800371c:	e6ca      	b.n	80034b4 <MoveDistance_Task+0x8>
 800371e:	bf00      	nop
 8003720:	20000020 	.word	0x20000020
 8003724:	2000001c 	.word	0x2000001c
 8003728:	42c80000 	.word	0x42c80000
 800372c:	20000598 	.word	0x20000598
 8003730:	200005b0 	.word	0x200005b0

08003734 <servoMotor_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_servoMotor_Task */
void servoMotor_Task(void *argument)
{
 8003734:	b480      	push	{r7}
 8003736:	b083      	sub	sp, #12
 8003738:	af00      	add	r7, sp, #0
 800373a:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN servoMotor_Task */
//  /* Infinite loop */
	//HAL_TIM_PWM_Start(&htim1, TIM_CHANNEL_4);
  for(;;)
 800373c:	e7fe      	b.n	800373c <servoMotor_Task+0x8>

0800373e <BatterReader_Task>:
* @param argument: Not used
* @retval None
*/
/* USER CODE END Header_BatterReader_Task */
void BatterReader_Task(void *argument)
{
 800373e:	b480      	push	{r7}
 8003740:	b083      	sub	sp, #12
 8003742:	af00      	add	r7, sp, #0
 8003744:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN BatterReader_Task */
  /* Infinite loop */
  for(;;)
 8003746:	e7fe      	b.n	8003746 <BatterReader_Task+0x8>

08003748 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003748:	b580      	push	{r7, lr}
 800374a:	b082      	sub	sp, #8
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	681b      	ldr	r3, [r3, #0]
 8003754:	4a04      	ldr	r2, [pc, #16]	; (8003768 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8003756:	4293      	cmp	r3, r2
 8003758:	d101      	bne.n	800375e <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800375a:	f000 fc41 	bl	8003fe0 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 800375e:	bf00      	nop
 8003760:	3708      	adds	r7, #8
 8003762:	46bd      	mov	sp, r7
 8003764:	bd80      	pop	{r7, pc}
 8003766:	bf00      	nop
 8003768:	40001000 	.word	0x40001000

0800376c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800376c:	b480      	push	{r7}
 800376e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003770:	b672      	cpsid	i
}
 8003772:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8003774:	e7fe      	b.n	8003774 <Error_Handler+0x8>
	...

08003778 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003778:	b580      	push	{r7, lr}
 800377a:	b082      	sub	sp, #8
 800377c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800377e:	2300      	movs	r3, #0
 8003780:	607b      	str	r3, [r7, #4]
 8003782:	4b12      	ldr	r3, [pc, #72]	; (80037cc <HAL_MspInit+0x54>)
 8003784:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003786:	4a11      	ldr	r2, [pc, #68]	; (80037cc <HAL_MspInit+0x54>)
 8003788:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800378c:	6453      	str	r3, [r2, #68]	; 0x44
 800378e:	4b0f      	ldr	r3, [pc, #60]	; (80037cc <HAL_MspInit+0x54>)
 8003790:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003792:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003796:	607b      	str	r3, [r7, #4]
 8003798:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	603b      	str	r3, [r7, #0]
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <HAL_MspInit+0x54>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a0a      	ldr	r2, [pc, #40]	; (80037cc <HAL_MspInit+0x54>)
 80037a4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <HAL_MspInit+0x54>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80037b2:	603b      	str	r3, [r7, #0]
 80037b4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	210f      	movs	r1, #15
 80037ba:	f06f 0001 	mvn.w	r0, #1
 80037be:	f000 ff6d 	bl	800469c <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80037c2:	bf00      	nop
 80037c4:	3708      	adds	r7, #8
 80037c6:	46bd      	mov	sp, r7
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	40023800 	.word	0x40023800

080037d0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80037d0:	b580      	push	{r7, lr}
 80037d2:	b08c      	sub	sp, #48	; 0x30
 80037d4:	af00      	add	r7, sp, #0
 80037d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037d8:	f107 031c 	add.w	r3, r7, #28
 80037dc:	2200      	movs	r2, #0
 80037de:	601a      	str	r2, [r3, #0]
 80037e0:	605a      	str	r2, [r3, #4]
 80037e2:	609a      	str	r2, [r3, #8]
 80037e4:	60da      	str	r2, [r3, #12]
 80037e6:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	4a2e      	ldr	r2, [pc, #184]	; (80038a8 <HAL_ADC_MspInit+0xd8>)
 80037ee:	4293      	cmp	r3, r2
 80037f0:	d128      	bne.n	8003844 <HAL_ADC_MspInit+0x74>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80037f2:	2300      	movs	r3, #0
 80037f4:	61bb      	str	r3, [r7, #24]
 80037f6:	4b2d      	ldr	r3, [pc, #180]	; (80038ac <HAL_ADC_MspInit+0xdc>)
 80037f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80037fa:	4a2c      	ldr	r2, [pc, #176]	; (80038ac <HAL_ADC_MspInit+0xdc>)
 80037fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003800:	6453      	str	r3, [r2, #68]	; 0x44
 8003802:	4b2a      	ldr	r3, [pc, #168]	; (80038ac <HAL_ADC_MspInit+0xdc>)
 8003804:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003806:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800380a:	61bb      	str	r3, [r7, #24]
 800380c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800380e:	2300      	movs	r3, #0
 8003810:	617b      	str	r3, [r7, #20]
 8003812:	4b26      	ldr	r3, [pc, #152]	; (80038ac <HAL_ADC_MspInit+0xdc>)
 8003814:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003816:	4a25      	ldr	r2, [pc, #148]	; (80038ac <HAL_ADC_MspInit+0xdc>)
 8003818:	f043 0304 	orr.w	r3, r3, #4
 800381c:	6313      	str	r3, [r2, #48]	; 0x30
 800381e:	4b23      	ldr	r3, [pc, #140]	; (80038ac <HAL_ADC_MspInit+0xdc>)
 8003820:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003822:	f003 0304 	and.w	r3, r3, #4
 8003826:	617b      	str	r3, [r7, #20]
 8003828:	697b      	ldr	r3, [r7, #20]
    /**ADC1 GPIO Configuration
    PC0     ------> ADC1_IN10
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800382a:	2301      	movs	r3, #1
 800382c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800382e:	2303      	movs	r3, #3
 8003830:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003832:	2300      	movs	r3, #0
 8003834:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003836:	f107 031c 	add.w	r3, r7, #28
 800383a:	4619      	mov	r1, r3
 800383c:	481c      	ldr	r0, [pc, #112]	; (80038b0 <HAL_ADC_MspInit+0xe0>)
 800383e:	f000 ffe9 	bl	8004814 <HAL_GPIO_Init>
  /* USER CODE BEGIN ADC2_MspInit 1 */

  /* USER CODE END ADC2_MspInit 1 */
  }

}
 8003842:	e02c      	b.n	800389e <HAL_ADC_MspInit+0xce>
  else if(hadc->Instance==ADC2)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	681b      	ldr	r3, [r3, #0]
 8003848:	4a1a      	ldr	r2, [pc, #104]	; (80038b4 <HAL_ADC_MspInit+0xe4>)
 800384a:	4293      	cmp	r3, r2
 800384c:	d127      	bne.n	800389e <HAL_ADC_MspInit+0xce>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800384e:	2300      	movs	r3, #0
 8003850:	613b      	str	r3, [r7, #16]
 8003852:	4b16      	ldr	r3, [pc, #88]	; (80038ac <HAL_ADC_MspInit+0xdc>)
 8003854:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003856:	4a15      	ldr	r2, [pc, #84]	; (80038ac <HAL_ADC_MspInit+0xdc>)
 8003858:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800385c:	6453      	str	r3, [r2, #68]	; 0x44
 800385e:	4b13      	ldr	r3, [pc, #76]	; (80038ac <HAL_ADC_MspInit+0xdc>)
 8003860:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003862:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003866:	613b      	str	r3, [r7, #16]
 8003868:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800386a:	2300      	movs	r3, #0
 800386c:	60fb      	str	r3, [r7, #12]
 800386e:	4b0f      	ldr	r3, [pc, #60]	; (80038ac <HAL_ADC_MspInit+0xdc>)
 8003870:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003872:	4a0e      	ldr	r2, [pc, #56]	; (80038ac <HAL_ADC_MspInit+0xdc>)
 8003874:	f043 0304 	orr.w	r3, r3, #4
 8003878:	6313      	str	r3, [r2, #48]	; 0x30
 800387a:	4b0c      	ldr	r3, [pc, #48]	; (80038ac <HAL_ADC_MspInit+0xdc>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	f003 0304 	and.w	r3, r3, #4
 8003882:	60fb      	str	r3, [r7, #12]
 8003884:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8003886:	2310      	movs	r3, #16
 8003888:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800388a:	2303      	movs	r3, #3
 800388c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800388e:	2300      	movs	r3, #0
 8003890:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003892:	f107 031c 	add.w	r3, r7, #28
 8003896:	4619      	mov	r1, r3
 8003898:	4805      	ldr	r0, [pc, #20]	; (80038b0 <HAL_ADC_MspInit+0xe0>)
 800389a:	f000 ffbb 	bl	8004814 <HAL_GPIO_Init>
}
 800389e:	bf00      	nop
 80038a0:	3730      	adds	r7, #48	; 0x30
 80038a2:	46bd      	mov	sp, r7
 80038a4:	bd80      	pop	{r7, pc}
 80038a6:	bf00      	nop
 80038a8:	40012000 	.word	0x40012000
 80038ac:	40023800 	.word	0x40023800
 80038b0:	40020800 	.word	0x40020800
 80038b4:	40012100 	.word	0x40012100

080038b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	b08a      	sub	sp, #40	; 0x28
 80038bc:	af00      	add	r7, sp, #0
 80038be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80038c0:	f107 0314 	add.w	r3, r7, #20
 80038c4:	2200      	movs	r2, #0
 80038c6:	601a      	str	r2, [r3, #0]
 80038c8:	605a      	str	r2, [r3, #4]
 80038ca:	609a      	str	r2, [r3, #8]
 80038cc:	60da      	str	r2, [r3, #12]
 80038ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	4a19      	ldr	r2, [pc, #100]	; (800393c <HAL_I2C_MspInit+0x84>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d12c      	bne.n	8003934 <HAL_I2C_MspInit+0x7c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80038da:	2300      	movs	r3, #0
 80038dc:	613b      	str	r3, [r7, #16]
 80038de:	4b18      	ldr	r3, [pc, #96]	; (8003940 <HAL_I2C_MspInit+0x88>)
 80038e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038e2:	4a17      	ldr	r2, [pc, #92]	; (8003940 <HAL_I2C_MspInit+0x88>)
 80038e4:	f043 0302 	orr.w	r3, r3, #2
 80038e8:	6313      	str	r3, [r2, #48]	; 0x30
 80038ea:	4b15      	ldr	r3, [pc, #84]	; (8003940 <HAL_I2C_MspInit+0x88>)
 80038ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	613b      	str	r3, [r7, #16]
 80038f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80038f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80038fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80038fc:	2312      	movs	r3, #18
 80038fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003900:	2300      	movs	r3, #0
 8003902:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003904:	2303      	movs	r3, #3
 8003906:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003908:	2304      	movs	r3, #4
 800390a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800390c:	f107 0314 	add.w	r3, r7, #20
 8003910:	4619      	mov	r1, r3
 8003912:	480c      	ldr	r0, [pc, #48]	; (8003944 <HAL_I2C_MspInit+0x8c>)
 8003914:	f000 ff7e 	bl	8004814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003918:	2300      	movs	r3, #0
 800391a:	60fb      	str	r3, [r7, #12]
 800391c:	4b08      	ldr	r3, [pc, #32]	; (8003940 <HAL_I2C_MspInit+0x88>)
 800391e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003920:	4a07      	ldr	r2, [pc, #28]	; (8003940 <HAL_I2C_MspInit+0x88>)
 8003922:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003926:	6413      	str	r3, [r2, #64]	; 0x40
 8003928:	4b05      	ldr	r3, [pc, #20]	; (8003940 <HAL_I2C_MspInit+0x88>)
 800392a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800392c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003930:	60fb      	str	r3, [r7, #12]
 8003932:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003934:	bf00      	nop
 8003936:	3728      	adds	r7, #40	; 0x28
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	40005400 	.word	0x40005400
 8003940:	40023800 	.word	0x40023800
 8003944:	40020400 	.word	0x40020400

08003948 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003948:	b580      	push	{r7, lr}
 800394a:	b08a      	sub	sp, #40	; 0x28
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003950:	f107 0314 	add.w	r3, r7, #20
 8003954:	2200      	movs	r2, #0
 8003956:	601a      	str	r2, [r3, #0]
 8003958:	605a      	str	r2, [r3, #4]
 800395a:	609a      	str	r2, [r3, #8]
 800395c:	60da      	str	r2, [r3, #12]
 800395e:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM1)
 8003960:	687b      	ldr	r3, [r7, #4]
 8003962:	681b      	ldr	r3, [r3, #0]
 8003964:	4a23      	ldr	r2, [pc, #140]	; (80039f4 <HAL_TIM_Base_MspInit+0xac>)
 8003966:	4293      	cmp	r3, r2
 8003968:	d10e      	bne.n	8003988 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800396a:	2300      	movs	r3, #0
 800396c:	613b      	str	r3, [r7, #16]
 800396e:	4b22      	ldr	r3, [pc, #136]	; (80039f8 <HAL_TIM_Base_MspInit+0xb0>)
 8003970:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003972:	4a21      	ldr	r2, [pc, #132]	; (80039f8 <HAL_TIM_Base_MspInit+0xb0>)
 8003974:	f043 0301 	orr.w	r3, r3, #1
 8003978:	6453      	str	r3, [r2, #68]	; 0x44
 800397a:	4b1f      	ldr	r3, [pc, #124]	; (80039f8 <HAL_TIM_Base_MspInit+0xb0>)
 800397c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	613b      	str	r3, [r7, #16]
 8003984:	693b      	ldr	r3, [r7, #16]
  /* USER CODE BEGIN TIM8_MspInit 1 */

  /* USER CODE END TIM8_MspInit 1 */
  }

}
 8003986:	e030      	b.n	80039ea <HAL_TIM_Base_MspInit+0xa2>
  else if(htim_base->Instance==TIM8)
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	4a1b      	ldr	r2, [pc, #108]	; (80039fc <HAL_TIM_Base_MspInit+0xb4>)
 800398e:	4293      	cmp	r3, r2
 8003990:	d12b      	bne.n	80039ea <HAL_TIM_Base_MspInit+0xa2>
    __HAL_RCC_TIM8_CLK_ENABLE();
 8003992:	2300      	movs	r3, #0
 8003994:	60fb      	str	r3, [r7, #12]
 8003996:	4b18      	ldr	r3, [pc, #96]	; (80039f8 <HAL_TIM_Base_MspInit+0xb0>)
 8003998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800399a:	4a17      	ldr	r2, [pc, #92]	; (80039f8 <HAL_TIM_Base_MspInit+0xb0>)
 800399c:	f043 0302 	orr.w	r3, r3, #2
 80039a0:	6453      	str	r3, [r2, #68]	; 0x44
 80039a2:	4b15      	ldr	r3, [pc, #84]	; (80039f8 <HAL_TIM_Base_MspInit+0xb0>)
 80039a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039a6:	f003 0302 	and.w	r3, r3, #2
 80039aa:	60fb      	str	r3, [r7, #12]
 80039ac:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039ae:	2300      	movs	r3, #0
 80039b0:	60bb      	str	r3, [r7, #8]
 80039b2:	4b11      	ldr	r3, [pc, #68]	; (80039f8 <HAL_TIM_Base_MspInit+0xb0>)
 80039b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039b6:	4a10      	ldr	r2, [pc, #64]	; (80039f8 <HAL_TIM_Base_MspInit+0xb0>)
 80039b8:	f043 0304 	orr.w	r3, r3, #4
 80039bc:	6313      	str	r3, [r2, #48]	; 0x30
 80039be:	4b0e      	ldr	r3, [pc, #56]	; (80039f8 <HAL_TIM_Base_MspInit+0xb0>)
 80039c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039c2:	f003 0304 	and.w	r3, r3, #4
 80039c6:	60bb      	str	r3, [r7, #8]
 80039c8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = PWMA_Pin|PWMB_Pin;
 80039ca:	23c0      	movs	r3, #192	; 0xc0
 80039cc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039ce:	2302      	movs	r3, #2
 80039d0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039d2:	2300      	movs	r3, #0
 80039d4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039d6:	2300      	movs	r3, #0
 80039d8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF3_TIM8;
 80039da:	2303      	movs	r3, #3
 80039dc:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039de:	f107 0314 	add.w	r3, r7, #20
 80039e2:	4619      	mov	r1, r3
 80039e4:	4806      	ldr	r0, [pc, #24]	; (8003a00 <HAL_TIM_Base_MspInit+0xb8>)
 80039e6:	f000 ff15 	bl	8004814 <HAL_GPIO_Init>
}
 80039ea:	bf00      	nop
 80039ec:	3728      	adds	r7, #40	; 0x28
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40010000 	.word	0x40010000
 80039f8:	40023800 	.word	0x40023800
 80039fc:	40010400 	.word	0x40010400
 8003a00:	40020800 	.word	0x40020800

08003a04 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003a04:	b580      	push	{r7, lr}
 8003a06:	b08c      	sub	sp, #48	; 0x30
 8003a08:	af00      	add	r7, sp, #0
 8003a0a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003a0c:	f107 031c 	add.w	r3, r7, #28
 8003a10:	2200      	movs	r2, #0
 8003a12:	601a      	str	r2, [r3, #0]
 8003a14:	605a      	str	r2, [r3, #4]
 8003a16:	609a      	str	r2, [r3, #8]
 8003a18:	60da      	str	r2, [r3, #12]
 8003a1a:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM2)
 8003a1c:	687b      	ldr	r3, [r7, #4]
 8003a1e:	681b      	ldr	r3, [r3, #0]
 8003a20:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003a24:	d14b      	bne.n	8003abe <HAL_TIM_Encoder_MspInit+0xba>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003a26:	2300      	movs	r3, #0
 8003a28:	61bb      	str	r3, [r7, #24]
 8003a2a:	4b3f      	ldr	r3, [pc, #252]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a2e:	4a3e      	ldr	r2, [pc, #248]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	6413      	str	r3, [r2, #64]	; 0x40
 8003a36:	4b3c      	ldr	r3, [pc, #240]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	61bb      	str	r3, [r7, #24]
 8003a40:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003a42:	2300      	movs	r3, #0
 8003a44:	617b      	str	r3, [r7, #20]
 8003a46:	4b38      	ldr	r3, [pc, #224]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a4a:	4a37      	ldr	r2, [pc, #220]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a4c:	f043 0301 	orr.w	r3, r3, #1
 8003a50:	6313      	str	r3, [r2, #48]	; 0x30
 8003a52:	4b35      	ldr	r3, [pc, #212]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a56:	f003 0301 	and.w	r3, r3, #1
 8003a5a:	617b      	str	r3, [r7, #20]
 8003a5c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8003a5e:	2300      	movs	r3, #0
 8003a60:	613b      	str	r3, [r7, #16]
 8003a62:	4b31      	ldr	r3, [pc, #196]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	4a30      	ldr	r2, [pc, #192]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a68:	f043 0302 	orr.w	r3, r3, #2
 8003a6c:	6313      	str	r3, [r2, #48]	; 0x30
 8003a6e:	4b2e      	ldr	r3, [pc, #184]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003a70:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a72:	f003 0302 	and.w	r3, r3, #2
 8003a76:	613b      	str	r3, [r7, #16]
 8003a78:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA15     ------> TIM2_CH1
    PB3     ------> TIM2_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_15;
 8003a7a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8003a7e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a80:	2302      	movs	r3, #2
 8003a82:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a84:	2300      	movs	r3, #0
 8003a86:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a88:	2300      	movs	r3, #0
 8003a8a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003a8c:	2301      	movs	r3, #1
 8003a8e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a90:	f107 031c 	add.w	r3, r7, #28
 8003a94:	4619      	mov	r1, r3
 8003a96:	4825      	ldr	r0, [pc, #148]	; (8003b2c <HAL_TIM_Encoder_MspInit+0x128>)
 8003a98:	f000 febc 	bl	8004814 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8003a9c:	2308      	movs	r3, #8
 8003a9e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003aa0:	2302      	movs	r3, #2
 8003aa2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa8:	2300      	movs	r3, #0
 8003aaa:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003aac:	2301      	movs	r3, #1
 8003aae:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003ab0:	f107 031c 	add.w	r3, r7, #28
 8003ab4:	4619      	mov	r1, r3
 8003ab6:	481e      	ldr	r0, [pc, #120]	; (8003b30 <HAL_TIM_Encoder_MspInit+0x12c>)
 8003ab8:	f000 feac 	bl	8004814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003abc:	e030      	b.n	8003b20 <HAL_TIM_Encoder_MspInit+0x11c>
  else if(htim_encoder->Instance==TIM3)
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	681b      	ldr	r3, [r3, #0]
 8003ac2:	4a1c      	ldr	r2, [pc, #112]	; (8003b34 <HAL_TIM_Encoder_MspInit+0x130>)
 8003ac4:	4293      	cmp	r3, r2
 8003ac6:	d12b      	bne.n	8003b20 <HAL_TIM_Encoder_MspInit+0x11c>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003ac8:	2300      	movs	r3, #0
 8003aca:	60fb      	str	r3, [r7, #12]
 8003acc:	4b16      	ldr	r3, [pc, #88]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ace:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ad0:	4a15      	ldr	r2, [pc, #84]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ad2:	f043 0302 	orr.w	r3, r3, #2
 8003ad6:	6413      	str	r3, [r2, #64]	; 0x40
 8003ad8:	4b13      	ldr	r3, [pc, #76]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003adc:	f003 0302 	and.w	r3, r3, #2
 8003ae0:	60fb      	str	r3, [r7, #12]
 8003ae2:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003ae4:	2300      	movs	r3, #0
 8003ae6:	60bb      	str	r3, [r7, #8]
 8003ae8:	4b0f      	ldr	r3, [pc, #60]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003aea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003aec:	4a0e      	ldr	r2, [pc, #56]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003aee:	f043 0301 	orr.w	r3, r3, #1
 8003af2:	6313      	str	r3, [r2, #48]	; 0x30
 8003af4:	4b0c      	ldr	r3, [pc, #48]	; (8003b28 <HAL_TIM_Encoder_MspInit+0x124>)
 8003af6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003af8:	f003 0301 	and.w	r3, r3, #1
 8003afc:	60bb      	str	r3, [r7, #8]
 8003afe:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003b00:	23c0      	movs	r3, #192	; 0xc0
 8003b02:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b04:	2302      	movs	r3, #2
 8003b06:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b08:	2300      	movs	r3, #0
 8003b0a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b0c:	2300      	movs	r3, #0
 8003b0e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003b10:	2302      	movs	r3, #2
 8003b12:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003b14:	f107 031c 	add.w	r3, r7, #28
 8003b18:	4619      	mov	r1, r3
 8003b1a:	4804      	ldr	r0, [pc, #16]	; (8003b2c <HAL_TIM_Encoder_MspInit+0x128>)
 8003b1c:	f000 fe7a 	bl	8004814 <HAL_GPIO_Init>
}
 8003b20:	bf00      	nop
 8003b22:	3730      	adds	r7, #48	; 0x30
 8003b24:	46bd      	mov	sp, r7
 8003b26:	bd80      	pop	{r7, pc}
 8003b28:	40023800 	.word	0x40023800
 8003b2c:	40020000 	.word	0x40020000
 8003b30:	40020400 	.word	0x40020400
 8003b34:	40000400 	.word	0x40000400

08003b38 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003b38:	b580      	push	{r7, lr}
 8003b3a:	b088      	sub	sp, #32
 8003b3c:	af00      	add	r7, sp, #0
 8003b3e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b40:	f107 030c 	add.w	r3, r7, #12
 8003b44:	2200      	movs	r2, #0
 8003b46:	601a      	str	r2, [r3, #0]
 8003b48:	605a      	str	r2, [r3, #4]
 8003b4a:	609a      	str	r2, [r3, #8]
 8003b4c:	60da      	str	r2, [r3, #12]
 8003b4e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM1)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	4a12      	ldr	r2, [pc, #72]	; (8003ba0 <HAL_TIM_MspPostInit+0x68>)
 8003b56:	4293      	cmp	r3, r2
 8003b58:	d11e      	bne.n	8003b98 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM1_MspPostInit 0 */

  /* USER CODE END TIM1_MspPostInit 0 */

    __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b5a:	2300      	movs	r3, #0
 8003b5c:	60bb      	str	r3, [r7, #8]
 8003b5e:	4b11      	ldr	r3, [pc, #68]	; (8003ba4 <HAL_TIM_MspPostInit+0x6c>)
 8003b60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b62:	4a10      	ldr	r2, [pc, #64]	; (8003ba4 <HAL_TIM_MspPostInit+0x6c>)
 8003b64:	f043 0310 	orr.w	r3, r3, #16
 8003b68:	6313      	str	r3, [r2, #48]	; 0x30
 8003b6a:	4b0e      	ldr	r3, [pc, #56]	; (8003ba4 <HAL_TIM_MspPostInit+0x6c>)
 8003b6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b6e:	f003 0310 	and.w	r3, r3, #16
 8003b72:	60bb      	str	r3, [r7, #8]
 8003b74:	68bb      	ldr	r3, [r7, #8]
    /**TIM1 GPIO Configuration
    PE14     ------> TIM1_CH4
    */
    GPIO_InitStruct.Pin = ServoPWM_Pin;
 8003b76:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8003b7a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003b7c:	2302      	movs	r3, #2
 8003b7e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003b80:	2300      	movs	r3, #0
 8003b82:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003b84:	2300      	movs	r3, #0
 8003b86:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003b88:	2301      	movs	r3, #1
 8003b8a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(ServoPWM_GPIO_Port, &GPIO_InitStruct);
 8003b8c:	f107 030c 	add.w	r3, r7, #12
 8003b90:	4619      	mov	r1, r3
 8003b92:	4805      	ldr	r0, [pc, #20]	; (8003ba8 <HAL_TIM_MspPostInit+0x70>)
 8003b94:	f000 fe3e 	bl	8004814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspPostInit 1 */

  /* USER CODE END TIM1_MspPostInit 1 */
  }

}
 8003b98:	bf00      	nop
 8003b9a:	3720      	adds	r7, #32
 8003b9c:	46bd      	mov	sp, r7
 8003b9e:	bd80      	pop	{r7, pc}
 8003ba0:	40010000 	.word	0x40010000
 8003ba4:	40023800 	.word	0x40023800
 8003ba8:	40021000 	.word	0x40021000

08003bac <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003bac:	b580      	push	{r7, lr}
 8003bae:	b08a      	sub	sp, #40	; 0x28
 8003bb0:	af00      	add	r7, sp, #0
 8003bb2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003bb4:	f107 0314 	add.w	r3, r7, #20
 8003bb8:	2200      	movs	r2, #0
 8003bba:	601a      	str	r2, [r3, #0]
 8003bbc:	605a      	str	r2, [r3, #4]
 8003bbe:	609a      	str	r2, [r3, #8]
 8003bc0:	60da      	str	r2, [r3, #12]
 8003bc2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART3)
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	4a1d      	ldr	r2, [pc, #116]	; (8003c40 <HAL_UART_MspInit+0x94>)
 8003bca:	4293      	cmp	r3, r2
 8003bcc:	d134      	bne.n	8003c38 <HAL_UART_MspInit+0x8c>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	4b1c      	ldr	r3, [pc, #112]	; (8003c44 <HAL_UART_MspInit+0x98>)
 8003bd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bd6:	4a1b      	ldr	r2, [pc, #108]	; (8003c44 <HAL_UART_MspInit+0x98>)
 8003bd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003bdc:	6413      	str	r3, [r2, #64]	; 0x40
 8003bde:	4b19      	ldr	r3, [pc, #100]	; (8003c44 <HAL_UART_MspInit+0x98>)
 8003be0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003be2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	4b15      	ldr	r3, [pc, #84]	; (8003c44 <HAL_UART_MspInit+0x98>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a14      	ldr	r2, [pc, #80]	; (8003c44 <HAL_UART_MspInit+0x98>)
 8003bf4:	f043 0304 	orr.w	r3, r3, #4
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	4b12      	ldr	r3, [pc, #72]	; (8003c44 <HAL_UART_MspInit+0x98>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f003 0304 	and.w	r3, r3, #4
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
    /**USART3 GPIO Configuration
    PC10     ------> USART3_TX
    PC11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8003c06:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003c0a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c0c:	2302      	movs	r3, #2
 8003c0e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c10:	2300      	movs	r3, #0
 8003c12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003c14:	2303      	movs	r3, #3
 8003c16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003c18:	2307      	movs	r3, #7
 8003c1a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003c1c:	f107 0314 	add.w	r3, r7, #20
 8003c20:	4619      	mov	r1, r3
 8003c22:	4809      	ldr	r0, [pc, #36]	; (8003c48 <HAL_UART_MspInit+0x9c>)
 8003c24:	f000 fdf6 	bl	8004814 <HAL_GPIO_Init>

    /* USART3 interrupt Init */
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003c28:	2200      	movs	r2, #0
 8003c2a:	2105      	movs	r1, #5
 8003c2c:	2027      	movs	r0, #39	; 0x27
 8003c2e:	f000 fd35 	bl	800469c <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003c32:	2027      	movs	r0, #39	; 0x27
 8003c34:	f000 fd4e 	bl	80046d4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8003c38:	bf00      	nop
 8003c3a:	3728      	adds	r7, #40	; 0x28
 8003c3c:	46bd      	mov	sp, r7
 8003c3e:	bd80      	pop	{r7, pc}
 8003c40:	40004800 	.word	0x40004800
 8003c44:	40023800 	.word	0x40023800
 8003c48:	40020800 	.word	0x40020800

08003c4c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c4c:	b580      	push	{r7, lr}
 8003c4e:	b08e      	sub	sp, #56	; 0x38
 8003c50:	af00      	add	r7, sp, #0
 8003c52:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8003c54:	2300      	movs	r3, #0
 8003c56:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8003c58:	2300      	movs	r3, #0
 8003c5a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8003c5c:	2300      	movs	r3, #0
 8003c5e:	60fb      	str	r3, [r7, #12]
 8003c60:	4b33      	ldr	r3, [pc, #204]	; (8003d30 <HAL_InitTick+0xe4>)
 8003c62:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c64:	4a32      	ldr	r2, [pc, #200]	; (8003d30 <HAL_InitTick+0xe4>)
 8003c66:	f043 0310 	orr.w	r3, r3, #16
 8003c6a:	6413      	str	r3, [r2, #64]	; 0x40
 8003c6c:	4b30      	ldr	r3, [pc, #192]	; (8003d30 <HAL_InitTick+0xe4>)
 8003c6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c70:	f003 0310 	and.w	r3, r3, #16
 8003c74:	60fb      	str	r3, [r7, #12]
 8003c76:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8003c78:	f107 0210 	add.w	r2, r7, #16
 8003c7c:	f107 0314 	add.w	r3, r7, #20
 8003c80:	4611      	mov	r1, r2
 8003c82:	4618      	mov	r0, r3
 8003c84:	f002 fbbc 	bl	8006400 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8003c88:	6a3b      	ldr	r3, [r7, #32]
 8003c8a:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8003c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d103      	bne.n	8003c9a <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8003c92:	f002 fb8d 	bl	80063b0 <HAL_RCC_GetPCLK1Freq>
 8003c96:	6378      	str	r0, [r7, #52]	; 0x34
 8003c98:	e004      	b.n	8003ca4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8003c9a:	f002 fb89 	bl	80063b0 <HAL_RCC_GetPCLK1Freq>
 8003c9e:	4603      	mov	r3, r0
 8003ca0:	005b      	lsls	r3, r3, #1
 8003ca2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8003ca4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003ca6:	4a23      	ldr	r2, [pc, #140]	; (8003d34 <HAL_InitTick+0xe8>)
 8003ca8:	fba2 2303 	umull	r2, r3, r2, r3
 8003cac:	0c9b      	lsrs	r3, r3, #18
 8003cae:	3b01      	subs	r3, #1
 8003cb0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8003cb2:	4b21      	ldr	r3, [pc, #132]	; (8003d38 <HAL_InitTick+0xec>)
 8003cb4:	4a21      	ldr	r2, [pc, #132]	; (8003d3c <HAL_InitTick+0xf0>)
 8003cb6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8003cb8:	4b1f      	ldr	r3, [pc, #124]	; (8003d38 <HAL_InitTick+0xec>)
 8003cba:	f240 32e7 	movw	r2, #999	; 0x3e7
 8003cbe:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8003cc0:	4a1d      	ldr	r2, [pc, #116]	; (8003d38 <HAL_InitTick+0xec>)
 8003cc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003cc4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8003cc6:	4b1c      	ldr	r3, [pc, #112]	; (8003d38 <HAL_InitTick+0xec>)
 8003cc8:	2200      	movs	r2, #0
 8003cca:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003ccc:	4b1a      	ldr	r3, [pc, #104]	; (8003d38 <HAL_InitTick+0xec>)
 8003cce:	2200      	movs	r2, #0
 8003cd0:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003cd2:	4b19      	ldr	r3, [pc, #100]	; (8003d38 <HAL_InitTick+0xec>)
 8003cd4:	2200      	movs	r2, #0
 8003cd6:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8003cd8:	4817      	ldr	r0, [pc, #92]	; (8003d38 <HAL_InitTick+0xec>)
 8003cda:	f002 fbc3 	bl	8006464 <HAL_TIM_Base_Init>
 8003cde:	4603      	mov	r3, r0
 8003ce0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8003ce4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ce8:	2b00      	cmp	r3, #0
 8003cea:	d11b      	bne.n	8003d24 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8003cec:	4812      	ldr	r0, [pc, #72]	; (8003d38 <HAL_InitTick+0xec>)
 8003cee:	f002 fc09 	bl	8006504 <HAL_TIM_Base_Start_IT>
 8003cf2:	4603      	mov	r3, r0
 8003cf4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8003cf8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003cfc:	2b00      	cmp	r3, #0
 8003cfe:	d111      	bne.n	8003d24 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8003d00:	2036      	movs	r0, #54	; 0x36
 8003d02:	f000 fce7 	bl	80046d4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	2b0f      	cmp	r3, #15
 8003d0a:	d808      	bhi.n	8003d1e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8003d0c:	2200      	movs	r2, #0
 8003d0e:	6879      	ldr	r1, [r7, #4]
 8003d10:	2036      	movs	r0, #54	; 0x36
 8003d12:	f000 fcc3 	bl	800469c <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8003d16:	4a0a      	ldr	r2, [pc, #40]	; (8003d40 <HAL_InitTick+0xf4>)
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	6013      	str	r3, [r2, #0]
 8003d1c:	e002      	b.n	8003d24 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8003d1e:	2301      	movs	r3, #1
 8003d20:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8003d24:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8003d28:	4618      	mov	r0, r3
 8003d2a:	3738      	adds	r7, #56	; 0x38
 8003d2c:	46bd      	mov	sp, r7
 8003d2e:	bd80      	pop	{r7, pc}
 8003d30:	40023800 	.word	0x40023800
 8003d34:	431bde83 	.word	0x431bde83
 8003d38:	200005b4 	.word	0x200005b4
 8003d3c:	40001000 	.word	0x40001000
 8003d40:	20000028 	.word	0x20000028

08003d44 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003d44:	b480      	push	{r7}
 8003d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003d48:	e7fe      	b.n	8003d48 <NMI_Handler+0x4>

08003d4a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003d4a:	b480      	push	{r7}
 8003d4c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003d4e:	e7fe      	b.n	8003d4e <HardFault_Handler+0x4>

08003d50 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003d50:	b480      	push	{r7}
 8003d52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003d54:	e7fe      	b.n	8003d54 <MemManage_Handler+0x4>

08003d56 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003d56:	b480      	push	{r7}
 8003d58:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003d5a:	e7fe      	b.n	8003d5a <BusFault_Handler+0x4>

08003d5c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003d5c:	b480      	push	{r7}
 8003d5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003d60:	e7fe      	b.n	8003d60 <UsageFault_Handler+0x4>

08003d62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003d62:	b480      	push	{r7}
 8003d64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003d66:	bf00      	nop
 8003d68:	46bd      	mov	sp, r7
 8003d6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d6e:	4770      	bx	lr

08003d70 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8003d70:	b580      	push	{r7, lr}
 8003d72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8003d74:	4802      	ldr	r0, [pc, #8]	; (8003d80 <USART3_IRQHandler+0x10>)
 8003d76:	f003 fea1 	bl	8007abc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8003d7a:	bf00      	nop
 8003d7c:	bd80      	pop	{r7, pc}
 8003d7e:	bf00      	nop
 8003d80:	20000424 	.word	0x20000424

08003d84 <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8003d84:	b580      	push	{r7, lr}
 8003d86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8003d88:	4802      	ldr	r0, [pc, #8]	; (8003d94 <TIM6_DAC_IRQHandler+0x10>)
 8003d8a:	f002 fea1 	bl	8006ad0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8003d8e:	bf00      	nop
 8003d90:	bd80      	pop	{r7, pc}
 8003d92:	bf00      	nop
 8003d94:	200005b4 	.word	0x200005b4

08003d98 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003d98:	b480      	push	{r7}
 8003d9a:	af00      	add	r7, sp, #0
  return 1;
 8003d9c:	2301      	movs	r3, #1
}
 8003d9e:	4618      	mov	r0, r3
 8003da0:	46bd      	mov	sp, r7
 8003da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da6:	4770      	bx	lr

08003da8 <_kill>:

int _kill(int pid, int sig)
{
 8003da8:	b580      	push	{r7, lr}
 8003daa:	b082      	sub	sp, #8
 8003dac:	af00      	add	r7, sp, #0
 8003dae:	6078      	str	r0, [r7, #4]
 8003db0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8003db2:	f007 fe95 	bl	800bae0 <__errno>
 8003db6:	4603      	mov	r3, r0
 8003db8:	2216      	movs	r2, #22
 8003dba:	601a      	str	r2, [r3, #0]
  return -1;
 8003dbc:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003dc0:	4618      	mov	r0, r3
 8003dc2:	3708      	adds	r7, #8
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	bd80      	pop	{r7, pc}

08003dc8 <_exit>:

void _exit (int status)
{
 8003dc8:	b580      	push	{r7, lr}
 8003dca:	b082      	sub	sp, #8
 8003dcc:	af00      	add	r7, sp, #0
 8003dce:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8003dd0:	f04f 31ff 	mov.w	r1, #4294967295
 8003dd4:	6878      	ldr	r0, [r7, #4]
 8003dd6:	f7ff ffe7 	bl	8003da8 <_kill>
  while (1) {}    /* Make sure we hang here */
 8003dda:	e7fe      	b.n	8003dda <_exit+0x12>

08003ddc <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ddc:	b580      	push	{r7, lr}
 8003dde:	b086      	sub	sp, #24
 8003de0:	af00      	add	r7, sp, #0
 8003de2:	60f8      	str	r0, [r7, #12]
 8003de4:	60b9      	str	r1, [r7, #8]
 8003de6:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003de8:	2300      	movs	r3, #0
 8003dea:	617b      	str	r3, [r7, #20]
 8003dec:	e00a      	b.n	8003e04 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8003dee:	f3af 8000 	nop.w
 8003df2:	4601      	mov	r1, r0
 8003df4:	68bb      	ldr	r3, [r7, #8]
 8003df6:	1c5a      	adds	r2, r3, #1
 8003df8:	60ba      	str	r2, [r7, #8]
 8003dfa:	b2ca      	uxtb	r2, r1
 8003dfc:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003dfe:	697b      	ldr	r3, [r7, #20]
 8003e00:	3301      	adds	r3, #1
 8003e02:	617b      	str	r3, [r7, #20]
 8003e04:	697a      	ldr	r2, [r7, #20]
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	429a      	cmp	r2, r3
 8003e0a:	dbf0      	blt.n	8003dee <_read+0x12>
  }

  return len;
 8003e0c:	687b      	ldr	r3, [r7, #4]
}
 8003e0e:	4618      	mov	r0, r3
 8003e10:	3718      	adds	r7, #24
 8003e12:	46bd      	mov	sp, r7
 8003e14:	bd80      	pop	{r7, pc}

08003e16 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003e16:	b580      	push	{r7, lr}
 8003e18:	b086      	sub	sp, #24
 8003e1a:	af00      	add	r7, sp, #0
 8003e1c:	60f8      	str	r0, [r7, #12]
 8003e1e:	60b9      	str	r1, [r7, #8]
 8003e20:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e22:	2300      	movs	r3, #0
 8003e24:	617b      	str	r3, [r7, #20]
 8003e26:	e009      	b.n	8003e3c <_write+0x26>
  {
    __io_putchar(*ptr++);
 8003e28:	68bb      	ldr	r3, [r7, #8]
 8003e2a:	1c5a      	adds	r2, r3, #1
 8003e2c:	60ba      	str	r2, [r7, #8]
 8003e2e:	781b      	ldrb	r3, [r3, #0]
 8003e30:	4618      	mov	r0, r3
 8003e32:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003e36:	697b      	ldr	r3, [r7, #20]
 8003e38:	3301      	adds	r3, #1
 8003e3a:	617b      	str	r3, [r7, #20]
 8003e3c:	697a      	ldr	r2, [r7, #20]
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	429a      	cmp	r2, r3
 8003e42:	dbf1      	blt.n	8003e28 <_write+0x12>
  }
  return len;
 8003e44:	687b      	ldr	r3, [r7, #4]
}
 8003e46:	4618      	mov	r0, r3
 8003e48:	3718      	adds	r7, #24
 8003e4a:	46bd      	mov	sp, r7
 8003e4c:	bd80      	pop	{r7, pc}

08003e4e <_close>:

int _close(int file)
{
 8003e4e:	b480      	push	{r7}
 8003e50:	b083      	sub	sp, #12
 8003e52:	af00      	add	r7, sp, #0
 8003e54:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8003e56:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e5a:	4618      	mov	r0, r3
 8003e5c:	370c      	adds	r7, #12
 8003e5e:	46bd      	mov	sp, r7
 8003e60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e64:	4770      	bx	lr

08003e66 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003e66:	b480      	push	{r7}
 8003e68:	b083      	sub	sp, #12
 8003e6a:	af00      	add	r7, sp, #0
 8003e6c:	6078      	str	r0, [r7, #4]
 8003e6e:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8003e70:	683b      	ldr	r3, [r7, #0]
 8003e72:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003e76:	605a      	str	r2, [r3, #4]
  return 0;
 8003e78:	2300      	movs	r3, #0
}
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	370c      	adds	r7, #12
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e84:	4770      	bx	lr

08003e86 <_isatty>:

int _isatty(int file)
{
 8003e86:	b480      	push	{r7}
 8003e88:	b083      	sub	sp, #12
 8003e8a:	af00      	add	r7, sp, #0
 8003e8c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8003e8e:	2301      	movs	r3, #1
}
 8003e90:	4618      	mov	r0, r3
 8003e92:	370c      	adds	r7, #12
 8003e94:	46bd      	mov	sp, r7
 8003e96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9a:	4770      	bx	lr

08003e9c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003e9c:	b480      	push	{r7}
 8003e9e:	b085      	sub	sp, #20
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	60b9      	str	r1, [r7, #8]
 8003ea6:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8003ea8:	2300      	movs	r3, #0
}
 8003eaa:	4618      	mov	r0, r3
 8003eac:	3714      	adds	r7, #20
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003eb4:	4770      	bx	lr
	...

08003eb8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b086      	sub	sp, #24
 8003ebc:	af00      	add	r7, sp, #0
 8003ebe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003ec0:	4a14      	ldr	r2, [pc, #80]	; (8003f14 <_sbrk+0x5c>)
 8003ec2:	4b15      	ldr	r3, [pc, #84]	; (8003f18 <_sbrk+0x60>)
 8003ec4:	1ad3      	subs	r3, r2, r3
 8003ec6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ec8:	697b      	ldr	r3, [r7, #20]
 8003eca:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ecc:	4b13      	ldr	r3, [pc, #76]	; (8003f1c <_sbrk+0x64>)
 8003ece:	681b      	ldr	r3, [r3, #0]
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d102      	bne.n	8003eda <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ed4:	4b11      	ldr	r3, [pc, #68]	; (8003f1c <_sbrk+0x64>)
 8003ed6:	4a12      	ldr	r2, [pc, #72]	; (8003f20 <_sbrk+0x68>)
 8003ed8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003eda:	4b10      	ldr	r3, [pc, #64]	; (8003f1c <_sbrk+0x64>)
 8003edc:	681a      	ldr	r2, [r3, #0]
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	4413      	add	r3, r2
 8003ee2:	693a      	ldr	r2, [r7, #16]
 8003ee4:	429a      	cmp	r2, r3
 8003ee6:	d207      	bcs.n	8003ef8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ee8:	f007 fdfa 	bl	800bae0 <__errno>
 8003eec:	4603      	mov	r3, r0
 8003eee:	220c      	movs	r2, #12
 8003ef0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ef2:	f04f 33ff 	mov.w	r3, #4294967295
 8003ef6:	e009      	b.n	8003f0c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ef8:	4b08      	ldr	r3, [pc, #32]	; (8003f1c <_sbrk+0x64>)
 8003efa:	681b      	ldr	r3, [r3, #0]
 8003efc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003efe:	4b07      	ldr	r3, [pc, #28]	; (8003f1c <_sbrk+0x64>)
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	687b      	ldr	r3, [r7, #4]
 8003f04:	4413      	add	r3, r2
 8003f06:	4a05      	ldr	r2, [pc, #20]	; (8003f1c <_sbrk+0x64>)
 8003f08:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}
 8003f14:	20020000 	.word	0x20020000
 8003f18:	00000400 	.word	0x00000400
 8003f1c:	200005fc 	.word	0x200005fc
 8003f20:	20005428 	.word	0x20005428

08003f24 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003f24:	b480      	push	{r7}
 8003f26:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003f28:	4b06      	ldr	r3, [pc, #24]	; (8003f44 <SystemInit+0x20>)
 8003f2a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003f2e:	4a05      	ldr	r2, [pc, #20]	; (8003f44 <SystemInit+0x20>)
 8003f30:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003f34:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003f38:	bf00      	nop
 8003f3a:	46bd      	mov	sp, r7
 8003f3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f40:	4770      	bx	lr
 8003f42:	bf00      	nop
 8003f44:	e000ed00 	.word	0xe000ed00

08003f48 <Reset_Handler>:
 8003f48:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003f80 <LoopFillZerobss+0x12>
 8003f4c:	480d      	ldr	r0, [pc, #52]	; (8003f84 <LoopFillZerobss+0x16>)
 8003f4e:	490e      	ldr	r1, [pc, #56]	; (8003f88 <LoopFillZerobss+0x1a>)
 8003f50:	4a0e      	ldr	r2, [pc, #56]	; (8003f8c <LoopFillZerobss+0x1e>)
 8003f52:	2300      	movs	r3, #0
 8003f54:	e002      	b.n	8003f5c <LoopCopyDataInit>

08003f56 <CopyDataInit>:
 8003f56:	58d4      	ldr	r4, [r2, r3]
 8003f58:	50c4      	str	r4, [r0, r3]
 8003f5a:	3304      	adds	r3, #4

08003f5c <LoopCopyDataInit>:
 8003f5c:	18c4      	adds	r4, r0, r3
 8003f5e:	428c      	cmp	r4, r1
 8003f60:	d3f9      	bcc.n	8003f56 <CopyDataInit>
 8003f62:	4a0b      	ldr	r2, [pc, #44]	; (8003f90 <LoopFillZerobss+0x22>)
 8003f64:	4c0b      	ldr	r4, [pc, #44]	; (8003f94 <LoopFillZerobss+0x26>)
 8003f66:	2300      	movs	r3, #0
 8003f68:	e001      	b.n	8003f6e <LoopFillZerobss>

08003f6a <FillZerobss>:
 8003f6a:	6013      	str	r3, [r2, #0]
 8003f6c:	3204      	adds	r2, #4

08003f6e <LoopFillZerobss>:
 8003f6e:	42a2      	cmp	r2, r4
 8003f70:	d3fb      	bcc.n	8003f6a <FillZerobss>
 8003f72:	f7ff ffd7 	bl	8003f24 <SystemInit>
 8003f76:	f007 feaf 	bl	800bcd8 <__libc_init_array>
 8003f7a:	f7fc ffe7 	bl	8000f4c <main>
 8003f7e:	4770      	bx	lr
 8003f80:	20020000 	.word	0x20020000
 8003f84:	20000000 	.word	0x20000000
 8003f88:	20000204 	.word	0x20000204
 8003f8c:	0800fa4c 	.word	0x0800fa4c
 8003f90:	20000204 	.word	0x20000204
 8003f94:	20005424 	.word	0x20005424

08003f98 <ADC_IRQHandler>:
 8003f98:	e7fe      	b.n	8003f98 <ADC_IRQHandler>
	...

08003f9c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003f9c:	b580      	push	{r7, lr}
 8003f9e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003fa0:	4b0e      	ldr	r3, [pc, #56]	; (8003fdc <HAL_Init+0x40>)
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	4a0d      	ldr	r2, [pc, #52]	; (8003fdc <HAL_Init+0x40>)
 8003fa6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003faa:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003fac:	4b0b      	ldr	r3, [pc, #44]	; (8003fdc <HAL_Init+0x40>)
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	4a0a      	ldr	r2, [pc, #40]	; (8003fdc <HAL_Init+0x40>)
 8003fb2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003fb6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003fb8:	4b08      	ldr	r3, [pc, #32]	; (8003fdc <HAL_Init+0x40>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4a07      	ldr	r2, [pc, #28]	; (8003fdc <HAL_Init+0x40>)
 8003fbe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003fc2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003fc4:	2003      	movs	r0, #3
 8003fc6:	f000 fb5e 	bl	8004686 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003fca:	200f      	movs	r0, #15
 8003fcc:	f7ff fe3e 	bl	8003c4c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003fd0:	f7ff fbd2 	bl	8003778 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003fd4:	2300      	movs	r3, #0
}
 8003fd6:	4618      	mov	r0, r3
 8003fd8:	bd80      	pop	{r7, pc}
 8003fda:	bf00      	nop
 8003fdc:	40023c00 	.word	0x40023c00

08003fe0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003fe0:	b480      	push	{r7}
 8003fe2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003fe4:	4b06      	ldr	r3, [pc, #24]	; (8004000 <HAL_IncTick+0x20>)
 8003fe6:	781b      	ldrb	r3, [r3, #0]
 8003fe8:	461a      	mov	r2, r3
 8003fea:	4b06      	ldr	r3, [pc, #24]	; (8004004 <HAL_IncTick+0x24>)
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	4413      	add	r3, r2
 8003ff0:	4a04      	ldr	r2, [pc, #16]	; (8004004 <HAL_IncTick+0x24>)
 8003ff2:	6013      	str	r3, [r2, #0]
}
 8003ff4:	bf00      	nop
 8003ff6:	46bd      	mov	sp, r7
 8003ff8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ffc:	4770      	bx	lr
 8003ffe:	bf00      	nop
 8004000:	2000002c 	.word	0x2000002c
 8004004:	20000600 	.word	0x20000600

08004008 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004008:	b480      	push	{r7}
 800400a:	af00      	add	r7, sp, #0
  return uwTick;
 800400c:	4b03      	ldr	r3, [pc, #12]	; (800401c <HAL_GetTick+0x14>)
 800400e:	681b      	ldr	r3, [r3, #0]
}
 8004010:	4618      	mov	r0, r3
 8004012:	46bd      	mov	sp, r7
 8004014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004018:	4770      	bx	lr
 800401a:	bf00      	nop
 800401c:	20000600 	.word	0x20000600

08004020 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8004020:	b580      	push	{r7, lr}
 8004022:	b084      	sub	sp, #16
 8004024:	af00      	add	r7, sp, #0
 8004026:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004028:	f7ff ffee 	bl	8004008 <HAL_GetTick>
 800402c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004038:	d005      	beq.n	8004046 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800403a:	4b0a      	ldr	r3, [pc, #40]	; (8004064 <HAL_Delay+0x44>)
 800403c:	781b      	ldrb	r3, [r3, #0]
 800403e:	461a      	mov	r2, r3
 8004040:	68fb      	ldr	r3, [r7, #12]
 8004042:	4413      	add	r3, r2
 8004044:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004046:	bf00      	nop
 8004048:	f7ff ffde 	bl	8004008 <HAL_GetTick>
 800404c:	4602      	mov	r2, r0
 800404e:	68bb      	ldr	r3, [r7, #8]
 8004050:	1ad3      	subs	r3, r2, r3
 8004052:	68fa      	ldr	r2, [r7, #12]
 8004054:	429a      	cmp	r2, r3
 8004056:	d8f7      	bhi.n	8004048 <HAL_Delay+0x28>
  {
  }
}
 8004058:	bf00      	nop
 800405a:	bf00      	nop
 800405c:	3710      	adds	r7, #16
 800405e:	46bd      	mov	sp, r7
 8004060:	bd80      	pop	{r7, pc}
 8004062:	bf00      	nop
 8004064:	2000002c 	.word	0x2000002c

08004068 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	b084      	sub	sp, #16
 800406c:	af00      	add	r7, sp, #0
 800406e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8004070:	2300      	movs	r3, #0
 8004072:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d101      	bne.n	800407e <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800407a:	2301      	movs	r3, #1
 800407c:	e033      	b.n	80040e6 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004082:	2b00      	cmp	r3, #0
 8004084:	d109      	bne.n	800409a <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8004086:	6878      	ldr	r0, [r7, #4]
 8004088:	f7ff fba2 	bl	80037d0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	2200      	movs	r2, #0
 8004090:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	2200      	movs	r2, #0
 8004096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800409e:	f003 0310 	and.w	r3, r3, #16
 80040a2:	2b00      	cmp	r3, #0
 80040a4:	d118      	bne.n	80040d8 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040aa:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 80040ae:	f023 0302 	bic.w	r3, r3, #2
 80040b2:	f043 0202 	orr.w	r2, r3, #2
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f000 f93a 	bl	8004334 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	2200      	movs	r2, #0
 80040c4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80040c6:	687b      	ldr	r3, [r7, #4]
 80040c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80040ca:	f023 0303 	bic.w	r3, r3, #3
 80040ce:	f043 0201 	orr.w	r2, r3, #1
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	641a      	str	r2, [r3, #64]	; 0x40
 80040d6:	e001      	b.n	80040dc <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80040d8:	2301      	movs	r3, #1
 80040da:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	2200      	movs	r2, #0
 80040e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80040e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80040e6:	4618      	mov	r0, r3
 80040e8:	3710      	adds	r7, #16
 80040ea:	46bd      	mov	sp, r7
 80040ec:	bd80      	pop	{r7, pc}
	...

080040f0 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 80040f0:	b480      	push	{r7}
 80040f2:	b085      	sub	sp, #20
 80040f4:	af00      	add	r7, sp, #0
 80040f6:	6078      	str	r0, [r7, #4]
 80040f8:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 80040fa:	2300      	movs	r3, #0
 80040fc:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004104:	2b01      	cmp	r3, #1
 8004106:	d101      	bne.n	800410c <HAL_ADC_ConfigChannel+0x1c>
 8004108:	2302      	movs	r3, #2
 800410a:	e105      	b.n	8004318 <HAL_ADC_ConfigChannel+0x228>
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2201      	movs	r2, #1
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8004114:	683b      	ldr	r3, [r7, #0]
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b09      	cmp	r3, #9
 800411a:	d925      	bls.n	8004168 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	68d9      	ldr	r1, [r3, #12]
 8004122:	683b      	ldr	r3, [r7, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	b29b      	uxth	r3, r3
 8004128:	461a      	mov	r2, r3
 800412a:	4613      	mov	r3, r2
 800412c:	005b      	lsls	r3, r3, #1
 800412e:	4413      	add	r3, r2
 8004130:	3b1e      	subs	r3, #30
 8004132:	2207      	movs	r2, #7
 8004134:	fa02 f303 	lsl.w	r3, r2, r3
 8004138:	43da      	mvns	r2, r3
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	400a      	ands	r2, r1
 8004140:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8004142:	687b      	ldr	r3, [r7, #4]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	68d9      	ldr	r1, [r3, #12]
 8004148:	683b      	ldr	r3, [r7, #0]
 800414a:	689a      	ldr	r2, [r3, #8]
 800414c:	683b      	ldr	r3, [r7, #0]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	b29b      	uxth	r3, r3
 8004152:	4618      	mov	r0, r3
 8004154:	4603      	mov	r3, r0
 8004156:	005b      	lsls	r3, r3, #1
 8004158:	4403      	add	r3, r0
 800415a:	3b1e      	subs	r3, #30
 800415c:	409a      	lsls	r2, r3
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	430a      	orrs	r2, r1
 8004164:	60da      	str	r2, [r3, #12]
 8004166:	e022      	b.n	80041ae <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	6919      	ldr	r1, [r3, #16]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	b29b      	uxth	r3, r3
 8004174:	461a      	mov	r2, r3
 8004176:	4613      	mov	r3, r2
 8004178:	005b      	lsls	r3, r3, #1
 800417a:	4413      	add	r3, r2
 800417c:	2207      	movs	r2, #7
 800417e:	fa02 f303 	lsl.w	r3, r2, r3
 8004182:	43da      	mvns	r2, r3
 8004184:	687b      	ldr	r3, [r7, #4]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	400a      	ands	r2, r1
 800418a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	6919      	ldr	r1, [r3, #16]
 8004192:	683b      	ldr	r3, [r7, #0]
 8004194:	689a      	ldr	r2, [r3, #8]
 8004196:	683b      	ldr	r3, [r7, #0]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	b29b      	uxth	r3, r3
 800419c:	4618      	mov	r0, r3
 800419e:	4603      	mov	r3, r0
 80041a0:	005b      	lsls	r3, r3, #1
 80041a2:	4403      	add	r3, r0
 80041a4:	409a      	lsls	r2, r3
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	430a      	orrs	r2, r1
 80041ac:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 80041ae:	683b      	ldr	r3, [r7, #0]
 80041b0:	685b      	ldr	r3, [r3, #4]
 80041b2:	2b06      	cmp	r3, #6
 80041b4:	d824      	bhi.n	8004200 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041bc:	683b      	ldr	r3, [r7, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	4613      	mov	r3, r2
 80041c2:	009b      	lsls	r3, r3, #2
 80041c4:	4413      	add	r3, r2
 80041c6:	3b05      	subs	r3, #5
 80041c8:	221f      	movs	r2, #31
 80041ca:	fa02 f303 	lsl.w	r3, r2, r3
 80041ce:	43da      	mvns	r2, r3
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	400a      	ands	r2, r1
 80041d6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80041d8:	687b      	ldr	r3, [r7, #4]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80041de:	683b      	ldr	r3, [r7, #0]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	b29b      	uxth	r3, r3
 80041e4:	4618      	mov	r0, r3
 80041e6:	683b      	ldr	r3, [r7, #0]
 80041e8:	685a      	ldr	r2, [r3, #4]
 80041ea:	4613      	mov	r3, r2
 80041ec:	009b      	lsls	r3, r3, #2
 80041ee:	4413      	add	r3, r2
 80041f0:	3b05      	subs	r3, #5
 80041f2:	fa00 f203 	lsl.w	r2, r0, r3
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	430a      	orrs	r2, r1
 80041fc:	635a      	str	r2, [r3, #52]	; 0x34
 80041fe:	e04c      	b.n	800429a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	685b      	ldr	r3, [r3, #4]
 8004204:	2b0c      	cmp	r3, #12
 8004206:	d824      	bhi.n	8004252 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	681b      	ldr	r3, [r3, #0]
 800420c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800420e:	683b      	ldr	r3, [r7, #0]
 8004210:	685a      	ldr	r2, [r3, #4]
 8004212:	4613      	mov	r3, r2
 8004214:	009b      	lsls	r3, r3, #2
 8004216:	4413      	add	r3, r2
 8004218:	3b23      	subs	r3, #35	; 0x23
 800421a:	221f      	movs	r2, #31
 800421c:	fa02 f303 	lsl.w	r3, r2, r3
 8004220:	43da      	mvns	r2, r3
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	400a      	ands	r2, r1
 8004228:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8004230:	683b      	ldr	r3, [r7, #0]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	b29b      	uxth	r3, r3
 8004236:	4618      	mov	r0, r3
 8004238:	683b      	ldr	r3, [r7, #0]
 800423a:	685a      	ldr	r2, [r3, #4]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	3b23      	subs	r3, #35	; 0x23
 8004244:	fa00 f203 	lsl.w	r2, r0, r3
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	430a      	orrs	r2, r1
 800424e:	631a      	str	r2, [r3, #48]	; 0x30
 8004250:	e023      	b.n	800429a <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8004258:	683b      	ldr	r3, [r7, #0]
 800425a:	685a      	ldr	r2, [r3, #4]
 800425c:	4613      	mov	r3, r2
 800425e:	009b      	lsls	r3, r3, #2
 8004260:	4413      	add	r3, r2
 8004262:	3b41      	subs	r3, #65	; 0x41
 8004264:	221f      	movs	r2, #31
 8004266:	fa02 f303 	lsl.w	r3, r2, r3
 800426a:	43da      	mvns	r2, r3
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	400a      	ands	r2, r1
 8004272:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800427a:	683b      	ldr	r3, [r7, #0]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	b29b      	uxth	r3, r3
 8004280:	4618      	mov	r0, r3
 8004282:	683b      	ldr	r3, [r7, #0]
 8004284:	685a      	ldr	r2, [r3, #4]
 8004286:	4613      	mov	r3, r2
 8004288:	009b      	lsls	r3, r3, #2
 800428a:	4413      	add	r3, r2
 800428c:	3b41      	subs	r3, #65	; 0x41
 800428e:	fa00 f203 	lsl.w	r2, r0, r3
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	430a      	orrs	r2, r1
 8004298:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800429a:	4b22      	ldr	r3, [pc, #136]	; (8004324 <HAL_ADC_ConfigChannel+0x234>)
 800429c:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 800429e:	687b      	ldr	r3, [r7, #4]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	4a21      	ldr	r2, [pc, #132]	; (8004328 <HAL_ADC_ConfigChannel+0x238>)
 80042a4:	4293      	cmp	r3, r2
 80042a6:	d109      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x1cc>
 80042a8:	683b      	ldr	r3, [r7, #0]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	2b12      	cmp	r3, #18
 80042ae:	d105      	bne.n	80042bc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	685b      	ldr	r3, [r3, #4]
 80042b4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	4a19      	ldr	r2, [pc, #100]	; (8004328 <HAL_ADC_ConfigChannel+0x238>)
 80042c2:	4293      	cmp	r3, r2
 80042c4:	d123      	bne.n	800430e <HAL_ADC_ConfigChannel+0x21e>
 80042c6:	683b      	ldr	r3, [r7, #0]
 80042c8:	681b      	ldr	r3, [r3, #0]
 80042ca:	2b10      	cmp	r3, #16
 80042cc:	d003      	beq.n	80042d6 <HAL_ADC_ConfigChannel+0x1e6>
 80042ce:	683b      	ldr	r3, [r7, #0]
 80042d0:	681b      	ldr	r3, [r3, #0]
 80042d2:	2b11      	cmp	r3, #17
 80042d4:	d11b      	bne.n	800430e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	685b      	ldr	r3, [r3, #4]
 80042da:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80042de:	68fb      	ldr	r3, [r7, #12]
 80042e0:	605a      	str	r2, [r3, #4]
    
    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80042e2:	683b      	ldr	r3, [r7, #0]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	2b10      	cmp	r3, #16
 80042e8:	d111      	bne.n	800430e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80042ea:	4b10      	ldr	r3, [pc, #64]	; (800432c <HAL_ADC_ConfigChannel+0x23c>)
 80042ec:	681b      	ldr	r3, [r3, #0]
 80042ee:	4a10      	ldr	r2, [pc, #64]	; (8004330 <HAL_ADC_ConfigChannel+0x240>)
 80042f0:	fba2 2303 	umull	r2, r3, r2, r3
 80042f4:	0c9a      	lsrs	r2, r3, #18
 80042f6:	4613      	mov	r3, r2
 80042f8:	009b      	lsls	r3, r3, #2
 80042fa:	4413      	add	r3, r2
 80042fc:	005b      	lsls	r3, r3, #1
 80042fe:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004300:	e002      	b.n	8004308 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8004302:	68bb      	ldr	r3, [r7, #8]
 8004304:	3b01      	subs	r3, #1
 8004306:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8004308:	68bb      	ldr	r3, [r7, #8]
 800430a:	2b00      	cmp	r3, #0
 800430c:	d1f9      	bne.n	8004302 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	2200      	movs	r2, #0
 8004312:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	3714      	adds	r7, #20
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr
 8004324:	40012300 	.word	0x40012300
 8004328:	40012000 	.word	0x40012000
 800432c:	20000024 	.word	0x20000024
 8004330:	431bde83 	.word	0x431bde83

08004334 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8004334:	b480      	push	{r7}
 8004336:	b085      	sub	sp, #20
 8004338:	af00      	add	r7, sp, #0
 800433a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800433c:	4b79      	ldr	r3, [pc, #484]	; (8004524 <ADC_Init+0x1f0>)
 800433e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8004340:	68fb      	ldr	r3, [r7, #12]
 8004342:	685b      	ldr	r3, [r3, #4]
 8004344:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	685a      	ldr	r2, [r3, #4]
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	685b      	ldr	r3, [r3, #4]
 8004354:	431a      	orrs	r2, r3
 8004356:	68fb      	ldr	r3, [r7, #12]
 8004358:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	685a      	ldr	r2, [r3, #4]
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	681b      	ldr	r3, [r3, #0]
 8004364:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8004368:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	6859      	ldr	r1, [r3, #4]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	691b      	ldr	r3, [r3, #16]
 8004374:	021a      	lsls	r2, r3, #8
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	681b      	ldr	r3, [r3, #0]
 800437a:	430a      	orrs	r2, r1
 800437c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800437e:	687b      	ldr	r3, [r7, #4]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	685a      	ldr	r2, [r3, #4]
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800438c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	6859      	ldr	r1, [r3, #4]
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	689a      	ldr	r2, [r3, #8]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	430a      	orrs	r2, r1
 800439e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	689a      	ldr	r2, [r3, #8]
 80043a6:	687b      	ldr	r3, [r7, #4]
 80043a8:	681b      	ldr	r3, [r3, #0]
 80043aa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80043ae:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	6899      	ldr	r1, [r3, #8]
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	68da      	ldr	r2, [r3, #12]
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681b      	ldr	r3, [r3, #0]
 80043be:	430a      	orrs	r2, r1
 80043c0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043c6:	4a58      	ldr	r2, [pc, #352]	; (8004528 <ADC_Init+0x1f4>)
 80043c8:	4293      	cmp	r3, r2
 80043ca:	d022      	beq.n	8004412 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	689a      	ldr	r2, [r3, #8]
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80043da:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	6899      	ldr	r1, [r3, #8]
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	681b      	ldr	r3, [r3, #0]
 80043ea:	430a      	orrs	r2, r1
 80043ec:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	689a      	ldr	r2, [r3, #8]
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 80043fc:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	6899      	ldr	r1, [r3, #8]
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	430a      	orrs	r2, r1
 800440e:	609a      	str	r2, [r3, #8]
 8004410:	e00f      	b.n	8004432 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8004412:	687b      	ldr	r3, [r7, #4]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	689a      	ldr	r2, [r3, #8]
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	681b      	ldr	r3, [r3, #0]
 800441c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8004420:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8004430:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	689a      	ldr	r2, [r3, #8]
 8004438:	687b      	ldr	r3, [r7, #4]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f022 0202 	bic.w	r2, r2, #2
 8004440:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	681b      	ldr	r3, [r3, #0]
 8004446:	6899      	ldr	r1, [r3, #8]
 8004448:	687b      	ldr	r3, [r7, #4]
 800444a:	7e1b      	ldrb	r3, [r3, #24]
 800444c:	005a      	lsls	r2, r3, #1
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	430a      	orrs	r2, r1
 8004454:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	f893 3020 	ldrb.w	r3, [r3, #32]
 800445c:	2b00      	cmp	r3, #0
 800445e:	d01b      	beq.n	8004498 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	685a      	ldr	r2, [r3, #4]
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800446e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	681b      	ldr	r3, [r3, #0]
 8004474:	685a      	ldr	r2, [r3, #4]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800447e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	6859      	ldr	r1, [r3, #4]
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800448a:	3b01      	subs	r3, #1
 800448c:	035a      	lsls	r2, r3, #13
 800448e:	687b      	ldr	r3, [r7, #4]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	430a      	orrs	r2, r1
 8004494:	605a      	str	r2, [r3, #4]
 8004496:	e007      	b.n	80044a8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	685a      	ldr	r2, [r3, #4]
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	681b      	ldr	r3, [r3, #0]
 80044a2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80044a6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80044b6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80044be:	687b      	ldr	r3, [r7, #4]
 80044c0:	69db      	ldr	r3, [r3, #28]
 80044c2:	3b01      	subs	r3, #1
 80044c4:	051a      	lsls	r2, r3, #20
 80044c6:	687b      	ldr	r3, [r7, #4]
 80044c8:	681b      	ldr	r3, [r3, #0]
 80044ca:	430a      	orrs	r2, r1
 80044cc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80044dc:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	6899      	ldr	r1, [r3, #8]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80044ea:	025a      	lsls	r2, r3, #9
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	681b      	ldr	r3, [r3, #0]
 80044f0:	430a      	orrs	r2, r1
 80044f2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	689a      	ldr	r2, [r3, #8]
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	681b      	ldr	r3, [r3, #0]
 80044fe:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004502:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	6899      	ldr	r1, [r3, #8]
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	029a      	lsls	r2, r3, #10
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	430a      	orrs	r2, r1
 8004516:	609a      	str	r2, [r3, #8]
}
 8004518:	bf00      	nop
 800451a:	3714      	adds	r7, #20
 800451c:	46bd      	mov	sp, r7
 800451e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004522:	4770      	bx	lr
 8004524:	40012300 	.word	0x40012300
 8004528:	0f000001 	.word	0x0f000001

0800452c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800452c:	b480      	push	{r7}
 800452e:	b085      	sub	sp, #20
 8004530:	af00      	add	r7, sp, #0
 8004532:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	f003 0307 	and.w	r3, r3, #7
 800453a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800453c:	4b0c      	ldr	r3, [pc, #48]	; (8004570 <__NVIC_SetPriorityGrouping+0x44>)
 800453e:	68db      	ldr	r3, [r3, #12]
 8004540:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004542:	68ba      	ldr	r2, [r7, #8]
 8004544:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004548:	4013      	ands	r3, r2
 800454a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004550:	68bb      	ldr	r3, [r7, #8]
 8004552:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004554:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004558:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800455c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800455e:	4a04      	ldr	r2, [pc, #16]	; (8004570 <__NVIC_SetPriorityGrouping+0x44>)
 8004560:	68bb      	ldr	r3, [r7, #8]
 8004562:	60d3      	str	r3, [r2, #12]
}
 8004564:	bf00      	nop
 8004566:	3714      	adds	r7, #20
 8004568:	46bd      	mov	sp, r7
 800456a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800456e:	4770      	bx	lr
 8004570:	e000ed00 	.word	0xe000ed00

08004574 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004574:	b480      	push	{r7}
 8004576:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004578:	4b04      	ldr	r3, [pc, #16]	; (800458c <__NVIC_GetPriorityGrouping+0x18>)
 800457a:	68db      	ldr	r3, [r3, #12]
 800457c:	0a1b      	lsrs	r3, r3, #8
 800457e:	f003 0307 	and.w	r3, r3, #7
}
 8004582:	4618      	mov	r0, r3
 8004584:	46bd      	mov	sp, r7
 8004586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800458a:	4770      	bx	lr
 800458c:	e000ed00 	.word	0xe000ed00

08004590 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004590:	b480      	push	{r7}
 8004592:	b083      	sub	sp, #12
 8004594:	af00      	add	r7, sp, #0
 8004596:	4603      	mov	r3, r0
 8004598:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800459a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459e:	2b00      	cmp	r3, #0
 80045a0:	db0b      	blt.n	80045ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80045a2:	79fb      	ldrb	r3, [r7, #7]
 80045a4:	f003 021f 	and.w	r2, r3, #31
 80045a8:	4907      	ldr	r1, [pc, #28]	; (80045c8 <__NVIC_EnableIRQ+0x38>)
 80045aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ae:	095b      	lsrs	r3, r3, #5
 80045b0:	2001      	movs	r0, #1
 80045b2:	fa00 f202 	lsl.w	r2, r0, r2
 80045b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80045ba:	bf00      	nop
 80045bc:	370c      	adds	r7, #12
 80045be:	46bd      	mov	sp, r7
 80045c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c4:	4770      	bx	lr
 80045c6:	bf00      	nop
 80045c8:	e000e100 	.word	0xe000e100

080045cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80045cc:	b480      	push	{r7}
 80045ce:	b083      	sub	sp, #12
 80045d0:	af00      	add	r7, sp, #0
 80045d2:	4603      	mov	r3, r0
 80045d4:	6039      	str	r1, [r7, #0]
 80045d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80045d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	db0a      	blt.n	80045f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	b2da      	uxtb	r2, r3
 80045e4:	490c      	ldr	r1, [pc, #48]	; (8004618 <__NVIC_SetPriority+0x4c>)
 80045e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045ea:	0112      	lsls	r2, r2, #4
 80045ec:	b2d2      	uxtb	r2, r2
 80045ee:	440b      	add	r3, r1
 80045f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045f4:	e00a      	b.n	800460c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045f6:	683b      	ldr	r3, [r7, #0]
 80045f8:	b2da      	uxtb	r2, r3
 80045fa:	4908      	ldr	r1, [pc, #32]	; (800461c <__NVIC_SetPriority+0x50>)
 80045fc:	79fb      	ldrb	r3, [r7, #7]
 80045fe:	f003 030f 	and.w	r3, r3, #15
 8004602:	3b04      	subs	r3, #4
 8004604:	0112      	lsls	r2, r2, #4
 8004606:	b2d2      	uxtb	r2, r2
 8004608:	440b      	add	r3, r1
 800460a:	761a      	strb	r2, [r3, #24]
}
 800460c:	bf00      	nop
 800460e:	370c      	adds	r7, #12
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	e000e100 	.word	0xe000e100
 800461c:	e000ed00 	.word	0xe000ed00

08004620 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004620:	b480      	push	{r7}
 8004622:	b089      	sub	sp, #36	; 0x24
 8004624:	af00      	add	r7, sp, #0
 8004626:	60f8      	str	r0, [r7, #12]
 8004628:	60b9      	str	r1, [r7, #8]
 800462a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	f003 0307 	and.w	r3, r3, #7
 8004632:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8004634:	69fb      	ldr	r3, [r7, #28]
 8004636:	f1c3 0307 	rsb	r3, r3, #7
 800463a:	2b04      	cmp	r3, #4
 800463c:	bf28      	it	cs
 800463e:	2304      	movcs	r3, #4
 8004640:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004642:	69fb      	ldr	r3, [r7, #28]
 8004644:	3304      	adds	r3, #4
 8004646:	2b06      	cmp	r3, #6
 8004648:	d902      	bls.n	8004650 <NVIC_EncodePriority+0x30>
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	3b03      	subs	r3, #3
 800464e:	e000      	b.n	8004652 <NVIC_EncodePriority+0x32>
 8004650:	2300      	movs	r3, #0
 8004652:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004654:	f04f 32ff 	mov.w	r2, #4294967295
 8004658:	69bb      	ldr	r3, [r7, #24]
 800465a:	fa02 f303 	lsl.w	r3, r2, r3
 800465e:	43da      	mvns	r2, r3
 8004660:	68bb      	ldr	r3, [r7, #8]
 8004662:	401a      	ands	r2, r3
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004668:	f04f 31ff 	mov.w	r1, #4294967295
 800466c:	697b      	ldr	r3, [r7, #20]
 800466e:	fa01 f303 	lsl.w	r3, r1, r3
 8004672:	43d9      	mvns	r1, r3
 8004674:	687b      	ldr	r3, [r7, #4]
 8004676:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004678:	4313      	orrs	r3, r2
         );
}
 800467a:	4618      	mov	r0, r3
 800467c:	3724      	adds	r7, #36	; 0x24
 800467e:	46bd      	mov	sp, r7
 8004680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004684:	4770      	bx	lr

08004686 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004686:	b580      	push	{r7, lr}
 8004688:	b082      	sub	sp, #8
 800468a:	af00      	add	r7, sp, #0
 800468c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800468e:	6878      	ldr	r0, [r7, #4]
 8004690:	f7ff ff4c 	bl	800452c <__NVIC_SetPriorityGrouping>
}
 8004694:	bf00      	nop
 8004696:	3708      	adds	r7, #8
 8004698:	46bd      	mov	sp, r7
 800469a:	bd80      	pop	{r7, pc}

0800469c <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800469c:	b580      	push	{r7, lr}
 800469e:	b086      	sub	sp, #24
 80046a0:	af00      	add	r7, sp, #0
 80046a2:	4603      	mov	r3, r0
 80046a4:	60b9      	str	r1, [r7, #8]
 80046a6:	607a      	str	r2, [r7, #4]
 80046a8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046aa:	2300      	movs	r3, #0
 80046ac:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046ae:	f7ff ff61 	bl	8004574 <__NVIC_GetPriorityGrouping>
 80046b2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046b4:	687a      	ldr	r2, [r7, #4]
 80046b6:	68b9      	ldr	r1, [r7, #8]
 80046b8:	6978      	ldr	r0, [r7, #20]
 80046ba:	f7ff ffb1 	bl	8004620 <NVIC_EncodePriority>
 80046be:	4602      	mov	r2, r0
 80046c0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046c4:	4611      	mov	r1, r2
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7ff ff80 	bl	80045cc <__NVIC_SetPriority>
}
 80046cc:	bf00      	nop
 80046ce:	3718      	adds	r7, #24
 80046d0:	46bd      	mov	sp, r7
 80046d2:	bd80      	pop	{r7, pc}

080046d4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80046d4:	b580      	push	{r7, lr}
 80046d6:	b082      	sub	sp, #8
 80046d8:	af00      	add	r7, sp, #0
 80046da:	4603      	mov	r3, r0
 80046dc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80046de:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80046e2:	4618      	mov	r0, r3
 80046e4:	f7ff ff54 	bl	8004590 <__NVIC_EnableIRQ>
}
 80046e8:	bf00      	nop
 80046ea:	3708      	adds	r7, #8
 80046ec:	46bd      	mov	sp, r7
 80046ee:	bd80      	pop	{r7, pc}

080046f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80046f0:	b580      	push	{r7, lr}
 80046f2:	b084      	sub	sp, #16
 80046f4:	af00      	add	r7, sp, #0
 80046f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80046fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80046fe:	f7ff fc83 	bl	8004008 <HAL_GetTick>
 8004702:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800470a:	b2db      	uxtb	r3, r3
 800470c:	2b02      	cmp	r3, #2
 800470e:	d008      	beq.n	8004722 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2280      	movs	r2, #128	; 0x80
 8004714:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800471e:	2301      	movs	r3, #1
 8004720:	e052      	b.n	80047c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	681a      	ldr	r2, [r3, #0]
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	f022 0216 	bic.w	r2, r2, #22
 8004730:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004732:	687b      	ldr	r3, [r7, #4]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695a      	ldr	r2, [r3, #20]
 8004738:	687b      	ldr	r3, [r7, #4]
 800473a:	681b      	ldr	r3, [r3, #0]
 800473c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004740:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004746:	2b00      	cmp	r3, #0
 8004748:	d103      	bne.n	8004752 <HAL_DMA_Abort+0x62>
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800474e:	2b00      	cmp	r3, #0
 8004750:	d007      	beq.n	8004762 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	681b      	ldr	r3, [r3, #0]
 8004756:	681a      	ldr	r2, [r3, #0]
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	681b      	ldr	r3, [r3, #0]
 800475c:	f022 0208 	bic.w	r2, r2, #8
 8004760:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	681b      	ldr	r3, [r3, #0]
 8004766:	681a      	ldr	r2, [r3, #0]
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	681b      	ldr	r3, [r3, #0]
 800476c:	f022 0201 	bic.w	r2, r2, #1
 8004770:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004772:	e013      	b.n	800479c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004774:	f7ff fc48 	bl	8004008 <HAL_GetTick>
 8004778:	4602      	mov	r2, r0
 800477a:	68bb      	ldr	r3, [r7, #8]
 800477c:	1ad3      	subs	r3, r2, r3
 800477e:	2b05      	cmp	r3, #5
 8004780:	d90c      	bls.n	800479c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	2220      	movs	r2, #32
 8004786:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004788:	687b      	ldr	r3, [r7, #4]
 800478a:	2203      	movs	r2, #3
 800478c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	2200      	movs	r2, #0
 8004794:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004798:	2303      	movs	r3, #3
 800479a:	e015      	b.n	80047c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	681b      	ldr	r3, [r3, #0]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f003 0301 	and.w	r3, r3, #1
 80047a6:	2b00      	cmp	r3, #0
 80047a8:	d1e4      	bne.n	8004774 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047ae:	223f      	movs	r2, #63	; 0x3f
 80047b0:	409a      	lsls	r2, r3
 80047b2:	68fb      	ldr	r3, [r7, #12]
 80047b4:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	2201      	movs	r2, #1
 80047ba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	2200      	movs	r2, #0
 80047c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80047c6:	2300      	movs	r3, #0
}
 80047c8:	4618      	mov	r0, r3
 80047ca:	3710      	adds	r7, #16
 80047cc:	46bd      	mov	sp, r7
 80047ce:	bd80      	pop	{r7, pc}

080047d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80047d0:	b480      	push	{r7}
 80047d2:	b083      	sub	sp, #12
 80047d4:	af00      	add	r7, sp, #0
 80047d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80047de:	b2db      	uxtb	r3, r3
 80047e0:	2b02      	cmp	r3, #2
 80047e2:	d004      	beq.n	80047ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	2280      	movs	r2, #128	; 0x80
 80047e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80047ea:	2301      	movs	r3, #1
 80047ec:	e00c      	b.n	8004808 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	2205      	movs	r2, #5
 80047f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047f6:	687b      	ldr	r3, [r7, #4]
 80047f8:	681b      	ldr	r3, [r3, #0]
 80047fa:	681a      	ldr	r2, [r3, #0]
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	681b      	ldr	r3, [r3, #0]
 8004800:	f022 0201 	bic.w	r2, r2, #1
 8004804:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004806:	2300      	movs	r3, #0
}
 8004808:	4618      	mov	r0, r3
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004814:	b480      	push	{r7}
 8004816:	b089      	sub	sp, #36	; 0x24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	e16b      	b.n	8004b08 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004830:	2201      	movs	r2, #1
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4013      	ands	r3, r2
 8004842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	429a      	cmp	r2, r3
 800484a:	f040 815a 	bne.w	8004b02 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b01      	cmp	r3, #1
 8004858:	d005      	beq.n	8004866 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004862:	2b02      	cmp	r3, #2
 8004864:	d130      	bne.n	80048c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	2203      	movs	r2, #3
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800489c:	2201      	movs	r2, #1
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4013      	ands	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 0201 	and.w	r2, r3, #1
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d017      	beq.n	8004904 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	2203      	movs	r2, #3
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d123      	bne.n	8004958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	08da      	lsrs	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3208      	adds	r2, #8
 8004918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800491c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	220f      	movs	r2, #15
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	08da      	lsrs	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3208      	adds	r2, #8
 8004952:	69b9      	ldr	r1, [r7, #24]
 8004954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	2203      	movs	r2, #3
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4013      	ands	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 0203 	and.w	r2, r3, #3
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80b4 	beq.w	8004b02 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	4b60      	ldr	r3, [pc, #384]	; (8004b20 <HAL_GPIO_Init+0x30c>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	4a5f      	ldr	r2, [pc, #380]	; (8004b20 <HAL_GPIO_Init+0x30c>)
 80049a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049a8:	6453      	str	r3, [r2, #68]	; 0x44
 80049aa:	4b5d      	ldr	r3, [pc, #372]	; (8004b20 <HAL_GPIO_Init+0x30c>)
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049b6:	4a5b      	ldr	r2, [pc, #364]	; (8004b24 <HAL_GPIO_Init+0x310>)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	3302      	adds	r3, #2
 80049be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	220f      	movs	r2, #15
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a52      	ldr	r2, [pc, #328]	; (8004b28 <HAL_GPIO_Init+0x314>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d02b      	beq.n	8004a3a <HAL_GPIO_Init+0x226>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a51      	ldr	r2, [pc, #324]	; (8004b2c <HAL_GPIO_Init+0x318>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d025      	beq.n	8004a36 <HAL_GPIO_Init+0x222>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a50      	ldr	r2, [pc, #320]	; (8004b30 <HAL_GPIO_Init+0x31c>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d01f      	beq.n	8004a32 <HAL_GPIO_Init+0x21e>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a4f      	ldr	r2, [pc, #316]	; (8004b34 <HAL_GPIO_Init+0x320>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d019      	beq.n	8004a2e <HAL_GPIO_Init+0x21a>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a4e      	ldr	r2, [pc, #312]	; (8004b38 <HAL_GPIO_Init+0x324>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d013      	beq.n	8004a2a <HAL_GPIO_Init+0x216>
 8004a02:	687b      	ldr	r3, [r7, #4]
 8004a04:	4a4d      	ldr	r2, [pc, #308]	; (8004b3c <HAL_GPIO_Init+0x328>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d00d      	beq.n	8004a26 <HAL_GPIO_Init+0x212>
 8004a0a:	687b      	ldr	r3, [r7, #4]
 8004a0c:	4a4c      	ldr	r2, [pc, #304]	; (8004b40 <HAL_GPIO_Init+0x32c>)
 8004a0e:	4293      	cmp	r3, r2
 8004a10:	d007      	beq.n	8004a22 <HAL_GPIO_Init+0x20e>
 8004a12:	687b      	ldr	r3, [r7, #4]
 8004a14:	4a4b      	ldr	r2, [pc, #300]	; (8004b44 <HAL_GPIO_Init+0x330>)
 8004a16:	4293      	cmp	r3, r2
 8004a18:	d101      	bne.n	8004a1e <HAL_GPIO_Init+0x20a>
 8004a1a:	2307      	movs	r3, #7
 8004a1c:	e00e      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a1e:	2308      	movs	r3, #8
 8004a20:	e00c      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a22:	2306      	movs	r3, #6
 8004a24:	e00a      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a26:	2305      	movs	r3, #5
 8004a28:	e008      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a2a:	2304      	movs	r3, #4
 8004a2c:	e006      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a2e:	2303      	movs	r3, #3
 8004a30:	e004      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a32:	2302      	movs	r3, #2
 8004a34:	e002      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a36:	2301      	movs	r3, #1
 8004a38:	e000      	b.n	8004a3c <HAL_GPIO_Init+0x228>
 8004a3a:	2300      	movs	r3, #0
 8004a3c:	69fa      	ldr	r2, [r7, #28]
 8004a3e:	f002 0203 	and.w	r2, r2, #3
 8004a42:	0092      	lsls	r2, r2, #2
 8004a44:	4093      	lsls	r3, r2
 8004a46:	69ba      	ldr	r2, [r7, #24]
 8004a48:	4313      	orrs	r3, r2
 8004a4a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a4c:	4935      	ldr	r1, [pc, #212]	; (8004b24 <HAL_GPIO_Init+0x310>)
 8004a4e:	69fb      	ldr	r3, [r7, #28]
 8004a50:	089b      	lsrs	r3, r3, #2
 8004a52:	3302      	adds	r3, #2
 8004a54:	69ba      	ldr	r2, [r7, #24]
 8004a56:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a5a:	4b3b      	ldr	r3, [pc, #236]	; (8004b48 <HAL_GPIO_Init+0x334>)
 8004a5c:	689b      	ldr	r3, [r3, #8]
 8004a5e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a60:	693b      	ldr	r3, [r7, #16]
 8004a62:	43db      	mvns	r3, r3
 8004a64:	69ba      	ldr	r2, [r7, #24]
 8004a66:	4013      	ands	r3, r2
 8004a68:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004a6a:	683b      	ldr	r3, [r7, #0]
 8004a6c:	685b      	ldr	r3, [r3, #4]
 8004a6e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004a72:	2b00      	cmp	r3, #0
 8004a74:	d003      	beq.n	8004a7e <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004a76:	69ba      	ldr	r2, [r7, #24]
 8004a78:	693b      	ldr	r3, [r7, #16]
 8004a7a:	4313      	orrs	r3, r2
 8004a7c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004a7e:	4a32      	ldr	r2, [pc, #200]	; (8004b48 <HAL_GPIO_Init+0x334>)
 8004a80:	69bb      	ldr	r3, [r7, #24]
 8004a82:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004a84:	4b30      	ldr	r3, [pc, #192]	; (8004b48 <HAL_GPIO_Init+0x334>)
 8004a86:	68db      	ldr	r3, [r3, #12]
 8004a88:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a8a:	693b      	ldr	r3, [r7, #16]
 8004a8c:	43db      	mvns	r3, r3
 8004a8e:	69ba      	ldr	r2, [r7, #24]
 8004a90:	4013      	ands	r3, r2
 8004a92:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004a94:	683b      	ldr	r3, [r7, #0]
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a9c:	2b00      	cmp	r3, #0
 8004a9e:	d003      	beq.n	8004aa8 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004aa0:	69ba      	ldr	r2, [r7, #24]
 8004aa2:	693b      	ldr	r3, [r7, #16]
 8004aa4:	4313      	orrs	r3, r2
 8004aa6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004aa8:	4a27      	ldr	r2, [pc, #156]	; (8004b48 <HAL_GPIO_Init+0x334>)
 8004aaa:	69bb      	ldr	r3, [r7, #24]
 8004aac:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004aae:	4b26      	ldr	r3, [pc, #152]	; (8004b48 <HAL_GPIO_Init+0x334>)
 8004ab0:	685b      	ldr	r3, [r3, #4]
 8004ab2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ab4:	693b      	ldr	r3, [r7, #16]
 8004ab6:	43db      	mvns	r3, r3
 8004ab8:	69ba      	ldr	r2, [r7, #24]
 8004aba:	4013      	ands	r3, r2
 8004abc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004abe:	683b      	ldr	r3, [r7, #0]
 8004ac0:	685b      	ldr	r3, [r3, #4]
 8004ac2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ac6:	2b00      	cmp	r3, #0
 8004ac8:	d003      	beq.n	8004ad2 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004aca:	69ba      	ldr	r2, [r7, #24]
 8004acc:	693b      	ldr	r3, [r7, #16]
 8004ace:	4313      	orrs	r3, r2
 8004ad0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004ad2:	4a1d      	ldr	r2, [pc, #116]	; (8004b48 <HAL_GPIO_Init+0x334>)
 8004ad4:	69bb      	ldr	r3, [r7, #24]
 8004ad6:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004ad8:	4b1b      	ldr	r3, [pc, #108]	; (8004b48 <HAL_GPIO_Init+0x334>)
 8004ada:	681b      	ldr	r3, [r3, #0]
 8004adc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004ade:	693b      	ldr	r3, [r7, #16]
 8004ae0:	43db      	mvns	r3, r3
 8004ae2:	69ba      	ldr	r2, [r7, #24]
 8004ae4:	4013      	ands	r3, r2
 8004ae6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004ae8:	683b      	ldr	r3, [r7, #0]
 8004aea:	685b      	ldr	r3, [r3, #4]
 8004aec:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004af0:	2b00      	cmp	r3, #0
 8004af2:	d003      	beq.n	8004afc <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004af4:	69ba      	ldr	r2, [r7, #24]
 8004af6:	693b      	ldr	r3, [r7, #16]
 8004af8:	4313      	orrs	r3, r2
 8004afa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004afc:	4a12      	ldr	r2, [pc, #72]	; (8004b48 <HAL_GPIO_Init+0x334>)
 8004afe:	69bb      	ldr	r3, [r7, #24]
 8004b00:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004b02:	69fb      	ldr	r3, [r7, #28]
 8004b04:	3301      	adds	r3, #1
 8004b06:	61fb      	str	r3, [r7, #28]
 8004b08:	69fb      	ldr	r3, [r7, #28]
 8004b0a:	2b0f      	cmp	r3, #15
 8004b0c:	f67f ae90 	bls.w	8004830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004b10:	bf00      	nop
 8004b12:	bf00      	nop
 8004b14:	3724      	adds	r7, #36	; 0x24
 8004b16:	46bd      	mov	sp, r7
 8004b18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b1c:	4770      	bx	lr
 8004b1e:	bf00      	nop
 8004b20:	40023800 	.word	0x40023800
 8004b24:	40013800 	.word	0x40013800
 8004b28:	40020000 	.word	0x40020000
 8004b2c:	40020400 	.word	0x40020400
 8004b30:	40020800 	.word	0x40020800
 8004b34:	40020c00 	.word	0x40020c00
 8004b38:	40021000 	.word	0x40021000
 8004b3c:	40021400 	.word	0x40021400
 8004b40:	40021800 	.word	0x40021800
 8004b44:	40021c00 	.word	0x40021c00
 8004b48:	40013c00 	.word	0x40013c00

08004b4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b4c:	b480      	push	{r7}
 8004b4e:	b083      	sub	sp, #12
 8004b50:	af00      	add	r7, sp, #0
 8004b52:	6078      	str	r0, [r7, #4]
 8004b54:	460b      	mov	r3, r1
 8004b56:	807b      	strh	r3, [r7, #2]
 8004b58:	4613      	mov	r3, r2
 8004b5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b5c:	787b      	ldrb	r3, [r7, #1]
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d003      	beq.n	8004b6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b62:	887a      	ldrh	r2, [r7, #2]
 8004b64:	687b      	ldr	r3, [r7, #4]
 8004b66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b68:	e003      	b.n	8004b72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b6a:	887b      	ldrh	r3, [r7, #2]
 8004b6c:	041a      	lsls	r2, r3, #16
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	619a      	str	r2, [r3, #24]
}
 8004b72:	bf00      	nop
 8004b74:	370c      	adds	r7, #12
 8004b76:	46bd      	mov	sp, r7
 8004b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b7c:	4770      	bx	lr
	...

08004b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e12b      	b.n	8004dea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fe fe86 	bl	80038b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	; 0x24
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004be2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004be4:	f001 fbe4 	bl	80063b0 <HAL_RCC_GetPCLK1Freq>
 8004be8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4a81      	ldr	r2, [pc, #516]	; (8004df4 <HAL_I2C_Init+0x274>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d807      	bhi.n	8004c04 <HAL_I2C_Init+0x84>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a80      	ldr	r2, [pc, #512]	; (8004df8 <HAL_I2C_Init+0x278>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	bf94      	ite	ls
 8004bfc:	2301      	movls	r3, #1
 8004bfe:	2300      	movhi	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	e006      	b.n	8004c12 <HAL_I2C_Init+0x92>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a7d      	ldr	r2, [pc, #500]	; (8004dfc <HAL_I2C_Init+0x27c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bf94      	ite	ls
 8004c0c:	2301      	movls	r3, #1
 8004c0e:	2300      	movhi	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0e7      	b.n	8004dea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a78      	ldr	r2, [pc, #480]	; (8004e00 <HAL_I2C_Init+0x280>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	0c9b      	lsrs	r3, r3, #18
 8004c24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a6a      	ldr	r2, [pc, #424]	; (8004df4 <HAL_I2C_Init+0x274>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d802      	bhi.n	8004c54 <HAL_I2C_Init+0xd4>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	3301      	adds	r3, #1
 8004c52:	e009      	b.n	8004c68 <HAL_I2C_Init+0xe8>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	4a69      	ldr	r2, [pc, #420]	; (8004e04 <HAL_I2C_Init+0x284>)
 8004c60:	fba2 2303 	umull	r2, r3, r2, r3
 8004c64:	099b      	lsrs	r3, r3, #6
 8004c66:	3301      	adds	r3, #1
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	495c      	ldr	r1, [pc, #368]	; (8004df4 <HAL_I2C_Init+0x274>)
 8004c84:	428b      	cmp	r3, r1
 8004c86:	d819      	bhi.n	8004cbc <HAL_I2C_Init+0x13c>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1e59      	subs	r1, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c96:	1c59      	adds	r1, r3, #1
 8004c98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c9c:	400b      	ands	r3, r1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_I2C_Init+0x138>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1e59      	subs	r1, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb6:	e051      	b.n	8004d5c <HAL_I2C_Init+0x1dc>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	e04f      	b.n	8004d5c <HAL_I2C_Init+0x1dc>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d111      	bne.n	8004ce8 <HAL_I2C_Init+0x168>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1e58      	subs	r0, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	440b      	add	r3, r1
 8004cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	e012      	b.n	8004d0e <HAL_I2C_Init+0x18e>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	1e58      	subs	r0, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	0099      	lsls	r1, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfe:	3301      	adds	r3, #1
 8004d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_I2C_Init+0x196>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e022      	b.n	8004d5c <HAL_I2C_Init+0x1dc>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10e      	bne.n	8004d3c <HAL_I2C_Init+0x1bc>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1e58      	subs	r0, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6859      	ldr	r1, [r3, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	440b      	add	r3, r1
 8004d2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d30:	3301      	adds	r3, #1
 8004d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3a:	e00f      	b.n	8004d5c <HAL_I2C_Init+0x1dc>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1e58      	subs	r0, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	0099      	lsls	r1, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d52:	3301      	adds	r3, #1
 8004d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	6809      	ldr	r1, [r1, #0]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6911      	ldr	r1, [r2, #16]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	68d2      	ldr	r2, [r2, #12]
 8004d96:	4311      	orrs	r1, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	000186a0 	.word	0x000186a0
 8004df8:	001e847f 	.word	0x001e847f
 8004dfc:	003d08ff 	.word	0x003d08ff
 8004e00:	431bde83 	.word	0x431bde83
 8004e04:	10624dd3 	.word	0x10624dd3

08004e08 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004e08:	b580      	push	{r7, lr}
 8004e0a:	b088      	sub	sp, #32
 8004e0c:	af02      	add	r7, sp, #8
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	4608      	mov	r0, r1
 8004e12:	4611      	mov	r1, r2
 8004e14:	461a      	mov	r2, r3
 8004e16:	4603      	mov	r3, r0
 8004e18:	817b      	strh	r3, [r7, #10]
 8004e1a:	460b      	mov	r3, r1
 8004e1c:	813b      	strh	r3, [r7, #8]
 8004e1e:	4613      	mov	r3, r2
 8004e20:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004e22:	f7ff f8f1 	bl	8004008 <HAL_GetTick>
 8004e26:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e28:	68fb      	ldr	r3, [r7, #12]
 8004e2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e2e:	b2db      	uxtb	r3, r3
 8004e30:	2b20      	cmp	r3, #32
 8004e32:	f040 80d9 	bne.w	8004fe8 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004e36:	697b      	ldr	r3, [r7, #20]
 8004e38:	9300      	str	r3, [sp, #0]
 8004e3a:	2319      	movs	r3, #25
 8004e3c:	2201      	movs	r2, #1
 8004e3e:	496d      	ldr	r1, [pc, #436]	; (8004ff4 <HAL_I2C_Mem_Write+0x1ec>)
 8004e40:	68f8      	ldr	r0, [r7, #12]
 8004e42:	f000 fc7f 	bl	8005744 <I2C_WaitOnFlagUntilTimeout>
 8004e46:	4603      	mov	r3, r0
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d001      	beq.n	8004e50 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004e4c:	2302      	movs	r3, #2
 8004e4e:	e0cc      	b.n	8004fea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e50:	68fb      	ldr	r3, [r7, #12]
 8004e52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e56:	2b01      	cmp	r3, #1
 8004e58:	d101      	bne.n	8004e5e <HAL_I2C_Mem_Write+0x56>
 8004e5a:	2302      	movs	r3, #2
 8004e5c:	e0c5      	b.n	8004fea <HAL_I2C_Mem_Write+0x1e2>
 8004e5e:	68fb      	ldr	r3, [r7, #12]
 8004e60:	2201      	movs	r2, #1
 8004e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	681b      	ldr	r3, [r3, #0]
 8004e6c:	f003 0301 	and.w	r3, r3, #1
 8004e70:	2b01      	cmp	r3, #1
 8004e72:	d007      	beq.n	8004e84 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004e74:	68fb      	ldr	r3, [r7, #12]
 8004e76:	681b      	ldr	r3, [r3, #0]
 8004e78:	681a      	ldr	r2, [r3, #0]
 8004e7a:	68fb      	ldr	r3, [r7, #12]
 8004e7c:	681b      	ldr	r3, [r3, #0]
 8004e7e:	f042 0201 	orr.w	r2, r2, #1
 8004e82:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004e84:	68fb      	ldr	r3, [r7, #12]
 8004e86:	681b      	ldr	r3, [r3, #0]
 8004e88:	681a      	ldr	r2, [r3, #0]
 8004e8a:	68fb      	ldr	r3, [r7, #12]
 8004e8c:	681b      	ldr	r3, [r3, #0]
 8004e8e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004e92:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004e94:	68fb      	ldr	r3, [r7, #12]
 8004e96:	2221      	movs	r2, #33	; 0x21
 8004e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004e9c:	68fb      	ldr	r3, [r7, #12]
 8004e9e:	2240      	movs	r2, #64	; 0x40
 8004ea0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ea4:	68fb      	ldr	r3, [r7, #12]
 8004ea6:	2200      	movs	r2, #0
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eaa:	68fb      	ldr	r3, [r7, #12]
 8004eac:	6a3a      	ldr	r2, [r7, #32]
 8004eae:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8004eb4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004eb6:	68fb      	ldr	r3, [r7, #12]
 8004eb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004eba:	b29a      	uxth	r2, r3
 8004ebc:	68fb      	ldr	r3, [r7, #12]
 8004ebe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	4a4d      	ldr	r2, [pc, #308]	; (8004ff8 <HAL_I2C_Mem_Write+0x1f0>)
 8004ec4:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8004ec6:	88f8      	ldrh	r0, [r7, #6]
 8004ec8:	893a      	ldrh	r2, [r7, #8]
 8004eca:	8979      	ldrh	r1, [r7, #10]
 8004ecc:	697b      	ldr	r3, [r7, #20]
 8004ece:	9301      	str	r3, [sp, #4]
 8004ed0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004ed2:	9300      	str	r3, [sp, #0]
 8004ed4:	4603      	mov	r3, r0
 8004ed6:	68f8      	ldr	r0, [r7, #12]
 8004ed8:	f000 fab6 	bl	8005448 <I2C_RequestMemoryWrite>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d052      	beq.n	8004f88 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8004ee2:	2301      	movs	r3, #1
 8004ee4:	e081      	b.n	8004fea <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004ee6:	697a      	ldr	r2, [r7, #20]
 8004ee8:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004eea:	68f8      	ldr	r0, [r7, #12]
 8004eec:	f000 fd00 	bl	80058f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	d00d      	beq.n	8004f12 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004efa:	2b04      	cmp	r3, #4
 8004efc:	d107      	bne.n	8004f0e <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004efe:	68fb      	ldr	r3, [r7, #12]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	681a      	ldr	r2, [r3, #0]
 8004f04:	68fb      	ldr	r3, [r7, #12]
 8004f06:	681b      	ldr	r3, [r3, #0]
 8004f08:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004f0c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8004f0e:	2301      	movs	r3, #1
 8004f10:	e06b      	b.n	8004fea <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f16:	781a      	ldrb	r2, [r3, #0]
 8004f18:	68fb      	ldr	r3, [r7, #12]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004f1e:	68fb      	ldr	r3, [r7, #12]
 8004f20:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f22:	1c5a      	adds	r2, r3, #1
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004f28:	68fb      	ldr	r3, [r7, #12]
 8004f2a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f2c:	3b01      	subs	r3, #1
 8004f2e:	b29a      	uxth	r2, r3
 8004f30:	68fb      	ldr	r3, [r7, #12]
 8004f32:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8004f34:	68fb      	ldr	r3, [r7, #12]
 8004f36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f38:	b29b      	uxth	r3, r3
 8004f3a:	3b01      	subs	r3, #1
 8004f3c:	b29a      	uxth	r2, r3
 8004f3e:	68fb      	ldr	r3, [r7, #12]
 8004f40:	855a      	strh	r2, [r3, #42]	; 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8004f42:	68fb      	ldr	r3, [r7, #12]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	695b      	ldr	r3, [r3, #20]
 8004f48:	f003 0304 	and.w	r3, r3, #4
 8004f4c:	2b04      	cmp	r3, #4
 8004f4e:	d11b      	bne.n	8004f88 <HAL_I2C_Mem_Write+0x180>
 8004f50:	68fb      	ldr	r3, [r7, #12]
 8004f52:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d017      	beq.n	8004f88 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f5c:	781a      	ldrb	r2, [r3, #0]
 8004f5e:	68fb      	ldr	r3, [r7, #12]
 8004f60:	681b      	ldr	r3, [r3, #0]
 8004f62:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004f64:	68fb      	ldr	r3, [r7, #12]
 8004f66:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004f68:	1c5a      	adds	r2, r3, #1
 8004f6a:	68fb      	ldr	r3, [r7, #12]
 8004f6c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 8004f6e:	68fb      	ldr	r3, [r7, #12]
 8004f70:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f72:	3b01      	subs	r3, #1
 8004f74:	b29a      	uxth	r2, r3
 8004f76:	68fb      	ldr	r3, [r7, #12]
 8004f78:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 8004f7a:	68fb      	ldr	r3, [r7, #12]
 8004f7c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004f7e:	b29b      	uxth	r3, r3
 8004f80:	3b01      	subs	r3, #1
 8004f82:	b29a      	uxth	r2, r3
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8004f8c:	2b00      	cmp	r3, #0
 8004f8e:	d1aa      	bne.n	8004ee6 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004f90:	697a      	ldr	r2, [r7, #20]
 8004f92:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004f94:	68f8      	ldr	r0, [r7, #12]
 8004f96:	f000 fcec 	bl	8005972 <I2C_WaitOnBTFFlagUntilTimeout>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	2b00      	cmp	r3, #0
 8004f9e:	d00d      	beq.n	8004fbc <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004fa0:	68fb      	ldr	r3, [r7, #12]
 8004fa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fa4:	2b04      	cmp	r3, #4
 8004fa6:	d107      	bne.n	8004fb8 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fa8:	68fb      	ldr	r3, [r7, #12]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681a      	ldr	r2, [r3, #0]
 8004fae:	68fb      	ldr	r3, [r7, #12]
 8004fb0:	681b      	ldr	r3, [r3, #0]
 8004fb2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fb6:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004fb8:	2301      	movs	r3, #1
 8004fba:	e016      	b.n	8004fea <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004fbc:	68fb      	ldr	r3, [r7, #12]
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	681a      	ldr	r2, [r3, #0]
 8004fc2:	68fb      	ldr	r3, [r7, #12]
 8004fc4:	681b      	ldr	r3, [r3, #0]
 8004fc6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004fca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8004fcc:	68fb      	ldr	r3, [r7, #12]
 8004fce:	2220      	movs	r2, #32
 8004fd0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8004fd4:	68fb      	ldr	r3, [r7, #12]
 8004fd6:	2200      	movs	r2, #0
 8004fd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2200      	movs	r2, #0
 8004fe0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	e000      	b.n	8004fea <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8004fe8:	2302      	movs	r3, #2
  }
}
 8004fea:	4618      	mov	r0, r3
 8004fec:	3718      	adds	r7, #24
 8004fee:	46bd      	mov	sp, r7
 8004ff0:	bd80      	pop	{r7, pc}
 8004ff2:	bf00      	nop
 8004ff4:	00100002 	.word	0x00100002
 8004ff8:	ffff0000 	.word	0xffff0000

08004ffc <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004ffc:	b580      	push	{r7, lr}
 8004ffe:	b08c      	sub	sp, #48	; 0x30
 8005000:	af02      	add	r7, sp, #8
 8005002:	60f8      	str	r0, [r7, #12]
 8005004:	4608      	mov	r0, r1
 8005006:	4611      	mov	r1, r2
 8005008:	461a      	mov	r2, r3
 800500a:	4603      	mov	r3, r0
 800500c:	817b      	strh	r3, [r7, #10]
 800500e:	460b      	mov	r3, r1
 8005010:	813b      	strh	r3, [r7, #8]
 8005012:	4613      	mov	r3, r2
 8005014:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8005016:	f7fe fff7 	bl	8004008 <HAL_GetTick>
 800501a:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800501c:	68fb      	ldr	r3, [r7, #12]
 800501e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005022:	b2db      	uxtb	r3, r3
 8005024:	2b20      	cmp	r3, #32
 8005026:	f040 8208 	bne.w	800543a <HAL_I2C_Mem_Read+0x43e>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800502a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800502c:	9300      	str	r3, [sp, #0]
 800502e:	2319      	movs	r3, #25
 8005030:	2201      	movs	r2, #1
 8005032:	497b      	ldr	r1, [pc, #492]	; (8005220 <HAL_I2C_Mem_Read+0x224>)
 8005034:	68f8      	ldr	r0, [r7, #12]
 8005036:	f000 fb85 	bl	8005744 <I2C_WaitOnFlagUntilTimeout>
 800503a:	4603      	mov	r3, r0
 800503c:	2b00      	cmp	r3, #0
 800503e:	d001      	beq.n	8005044 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8005040:	2302      	movs	r3, #2
 8005042:	e1fb      	b.n	800543c <HAL_I2C_Mem_Read+0x440>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8005044:	68fb      	ldr	r3, [r7, #12]
 8005046:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800504a:	2b01      	cmp	r3, #1
 800504c:	d101      	bne.n	8005052 <HAL_I2C_Mem_Read+0x56>
 800504e:	2302      	movs	r3, #2
 8005050:	e1f4      	b.n	800543c <HAL_I2C_Mem_Read+0x440>
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	2201      	movs	r2, #1
 8005056:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 800505a:	68fb      	ldr	r3, [r7, #12]
 800505c:	681b      	ldr	r3, [r3, #0]
 800505e:	681b      	ldr	r3, [r3, #0]
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b01      	cmp	r3, #1
 8005066:	d007      	beq.n	8005078 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	681b      	ldr	r3, [r3, #0]
 800506c:	681a      	ldr	r2, [r3, #0]
 800506e:	68fb      	ldr	r3, [r7, #12]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f042 0201 	orr.w	r2, r2, #1
 8005076:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	681b      	ldr	r3, [r3, #0]
 800507c:	681a      	ldr	r2, [r3, #0]
 800507e:	68fb      	ldr	r3, [r7, #12]
 8005080:	681b      	ldr	r3, [r3, #0]
 8005082:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005086:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	2222      	movs	r2, #34	; 0x22
 800508c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8005090:	68fb      	ldr	r3, [r7, #12]
 8005092:	2240      	movs	r2, #64	; 0x40
 8005094:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8005098:	68fb      	ldr	r3, [r7, #12]
 800509a:	2200      	movs	r2, #0
 800509c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800509e:	68fb      	ldr	r3, [r7, #12]
 80050a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80050a2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80050a4:	68fb      	ldr	r3, [r7, #12]
 80050a6:	8eba      	ldrh	r2, [r7, #52]	; 0x34
 80050a8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80050aa:	68fb      	ldr	r3, [r7, #12]
 80050ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050ae:	b29a      	uxth	r2, r3
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80050b4:	68fb      	ldr	r3, [r7, #12]
 80050b6:	4a5b      	ldr	r2, [pc, #364]	; (8005224 <HAL_I2C_Mem_Read+0x228>)
 80050b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80050ba:	88f8      	ldrh	r0, [r7, #6]
 80050bc:	893a      	ldrh	r2, [r7, #8]
 80050be:	8979      	ldrh	r1, [r7, #10]
 80050c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80050c2:	9301      	str	r3, [sp, #4]
 80050c4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050c6:	9300      	str	r3, [sp, #0]
 80050c8:	4603      	mov	r3, r0
 80050ca:	68f8      	ldr	r0, [r7, #12]
 80050cc:	f000 fa52 	bl	8005574 <I2C_RequestMemoryRead>
 80050d0:	4603      	mov	r3, r0
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d001      	beq.n	80050da <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80050d6:	2301      	movs	r3, #1
 80050d8:	e1b0      	b.n	800543c <HAL_I2C_Mem_Read+0x440>
    }

    if (hi2c->XferSize == 0U)
 80050da:	68fb      	ldr	r3, [r7, #12]
 80050dc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d113      	bne.n	800510a <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80050e2:	2300      	movs	r3, #0
 80050e4:	623b      	str	r3, [r7, #32]
 80050e6:	68fb      	ldr	r3, [r7, #12]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	695b      	ldr	r3, [r3, #20]
 80050ec:	623b      	str	r3, [r7, #32]
 80050ee:	68fb      	ldr	r3, [r7, #12]
 80050f0:	681b      	ldr	r3, [r3, #0]
 80050f2:	699b      	ldr	r3, [r3, #24]
 80050f4:	623b      	str	r3, [r7, #32]
 80050f6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050f8:	68fb      	ldr	r3, [r7, #12]
 80050fa:	681b      	ldr	r3, [r3, #0]
 80050fc:	681a      	ldr	r2, [r3, #0]
 80050fe:	68fb      	ldr	r3, [r7, #12]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005106:	601a      	str	r2, [r3, #0]
 8005108:	e184      	b.n	8005414 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 1U)
 800510a:	68fb      	ldr	r3, [r7, #12]
 800510c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800510e:	2b01      	cmp	r3, #1
 8005110:	d11b      	bne.n	800514a <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005112:	68fb      	ldr	r3, [r7, #12]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	681a      	ldr	r2, [r3, #0]
 8005118:	68fb      	ldr	r3, [r7, #12]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005120:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005122:	2300      	movs	r3, #0
 8005124:	61fb      	str	r3, [r7, #28]
 8005126:	68fb      	ldr	r3, [r7, #12]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	695b      	ldr	r3, [r3, #20]
 800512c:	61fb      	str	r3, [r7, #28]
 800512e:	68fb      	ldr	r3, [r7, #12]
 8005130:	681b      	ldr	r3, [r3, #0]
 8005132:	699b      	ldr	r3, [r3, #24]
 8005134:	61fb      	str	r3, [r7, #28]
 8005136:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005138:	68fb      	ldr	r3, [r7, #12]
 800513a:	681b      	ldr	r3, [r3, #0]
 800513c:	681a      	ldr	r2, [r3, #0]
 800513e:	68fb      	ldr	r3, [r7, #12]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005146:	601a      	str	r2, [r3, #0]
 8005148:	e164      	b.n	8005414 <HAL_I2C_Mem_Read+0x418>
    }
    else if (hi2c->XferSize == 2U)
 800514a:	68fb      	ldr	r3, [r7, #12]
 800514c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800514e:	2b02      	cmp	r3, #2
 8005150:	d11b      	bne.n	800518a <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005152:	68fb      	ldr	r3, [r7, #12]
 8005154:	681b      	ldr	r3, [r3, #0]
 8005156:	681a      	ldr	r2, [r3, #0]
 8005158:	68fb      	ldr	r3, [r7, #12]
 800515a:	681b      	ldr	r3, [r3, #0]
 800515c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005160:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005162:	68fb      	ldr	r3, [r7, #12]
 8005164:	681b      	ldr	r3, [r3, #0]
 8005166:	681a      	ldr	r2, [r3, #0]
 8005168:	68fb      	ldr	r3, [r7, #12]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005170:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005172:	2300      	movs	r3, #0
 8005174:	61bb      	str	r3, [r7, #24]
 8005176:	68fb      	ldr	r3, [r7, #12]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	695b      	ldr	r3, [r3, #20]
 800517c:	61bb      	str	r3, [r7, #24]
 800517e:	68fb      	ldr	r3, [r7, #12]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	699b      	ldr	r3, [r3, #24]
 8005184:	61bb      	str	r3, [r7, #24]
 8005186:	69bb      	ldr	r3, [r7, #24]
 8005188:	e144      	b.n	8005414 <HAL_I2C_Mem_Read+0x418>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800518a:	2300      	movs	r3, #0
 800518c:	617b      	str	r3, [r7, #20]
 800518e:	68fb      	ldr	r3, [r7, #12]
 8005190:	681b      	ldr	r3, [r3, #0]
 8005192:	695b      	ldr	r3, [r3, #20]
 8005194:	617b      	str	r3, [r7, #20]
 8005196:	68fb      	ldr	r3, [r7, #12]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	699b      	ldr	r3, [r3, #24]
 800519c:	617b      	str	r3, [r7, #20]
 800519e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80051a0:	e138      	b.n	8005414 <HAL_I2C_Mem_Read+0x418>
    {
      if (hi2c->XferSize <= 3U)
 80051a2:	68fb      	ldr	r3, [r7, #12]
 80051a4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051a6:	2b03      	cmp	r3, #3
 80051a8:	f200 80f1 	bhi.w	800538e <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80051ac:	68fb      	ldr	r3, [r7, #12]
 80051ae:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051b0:	2b01      	cmp	r3, #1
 80051b2:	d123      	bne.n	80051fc <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80051b4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80051b6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80051b8:	68f8      	ldr	r0, [r7, #12]
 80051ba:	f000 fc1b 	bl	80059f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 80051be:	4603      	mov	r3, r0
 80051c0:	2b00      	cmp	r3, #0
 80051c2:	d001      	beq.n	80051c8 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80051c4:	2301      	movs	r3, #1
 80051c6:	e139      	b.n	800543c <HAL_I2C_Mem_Read+0x440>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	681b      	ldr	r3, [r3, #0]
 80051cc:	691a      	ldr	r2, [r3, #16]
 80051ce:	68fb      	ldr	r3, [r7, #12]
 80051d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051d2:	b2d2      	uxtb	r2, r2
 80051d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80051d6:	68fb      	ldr	r3, [r7, #12]
 80051d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051da:	1c5a      	adds	r2, r3, #1
 80051dc:	68fb      	ldr	r3, [r7, #12]
 80051de:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80051e0:	68fb      	ldr	r3, [r7, #12]
 80051e2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80051e4:	3b01      	subs	r3, #1
 80051e6:	b29a      	uxth	r2, r3
 80051e8:	68fb      	ldr	r3, [r7, #12]
 80051ea:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80051ec:	68fb      	ldr	r3, [r7, #12]
 80051ee:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051f0:	b29b      	uxth	r3, r3
 80051f2:	3b01      	subs	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	68fb      	ldr	r3, [r7, #12]
 80051f8:	855a      	strh	r2, [r3, #42]	; 0x2a
 80051fa:	e10b      	b.n	8005414 <HAL_I2C_Mem_Read+0x418>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80051fc:	68fb      	ldr	r3, [r7, #12]
 80051fe:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005200:	2b02      	cmp	r3, #2
 8005202:	d14e      	bne.n	80052a2 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8005204:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005206:	9300      	str	r3, [sp, #0]
 8005208:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800520a:	2200      	movs	r2, #0
 800520c:	4906      	ldr	r1, [pc, #24]	; (8005228 <HAL_I2C_Mem_Read+0x22c>)
 800520e:	68f8      	ldr	r0, [r7, #12]
 8005210:	f000 fa98 	bl	8005744 <I2C_WaitOnFlagUntilTimeout>
 8005214:	4603      	mov	r3, r0
 8005216:	2b00      	cmp	r3, #0
 8005218:	d008      	beq.n	800522c <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 800521a:	2301      	movs	r3, #1
 800521c:	e10e      	b.n	800543c <HAL_I2C_Mem_Read+0x440>
 800521e:	bf00      	nop
 8005220:	00100002 	.word	0x00100002
 8005224:	ffff0000 	.word	0xffff0000
 8005228:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800522c:	68fb      	ldr	r3, [r7, #12]
 800522e:	681b      	ldr	r3, [r3, #0]
 8005230:	681a      	ldr	r2, [r3, #0]
 8005232:	68fb      	ldr	r3, [r7, #12]
 8005234:	681b      	ldr	r3, [r3, #0]
 8005236:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800523a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800523c:	68fb      	ldr	r3, [r7, #12]
 800523e:	681b      	ldr	r3, [r3, #0]
 8005240:	691a      	ldr	r2, [r3, #16]
 8005242:	68fb      	ldr	r3, [r7, #12]
 8005244:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005246:	b2d2      	uxtb	r2, r2
 8005248:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800524a:	68fb      	ldr	r3, [r7, #12]
 800524c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800524e:	1c5a      	adds	r2, r3, #1
 8005250:	68fb      	ldr	r3, [r7, #12]
 8005252:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005254:	68fb      	ldr	r3, [r7, #12]
 8005256:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005258:	3b01      	subs	r3, #1
 800525a:	b29a      	uxth	r2, r3
 800525c:	68fb      	ldr	r3, [r7, #12]
 800525e:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005260:	68fb      	ldr	r3, [r7, #12]
 8005262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005264:	b29b      	uxth	r3, r3
 8005266:	3b01      	subs	r3, #1
 8005268:	b29a      	uxth	r2, r3
 800526a:	68fb      	ldr	r3, [r7, #12]
 800526c:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800526e:	68fb      	ldr	r3, [r7, #12]
 8005270:	681b      	ldr	r3, [r3, #0]
 8005272:	691a      	ldr	r2, [r3, #16]
 8005274:	68fb      	ldr	r3, [r7, #12]
 8005276:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005278:	b2d2      	uxtb	r2, r2
 800527a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800527c:	68fb      	ldr	r3, [r7, #12]
 800527e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005280:	1c5a      	adds	r2, r3, #1
 8005282:	68fb      	ldr	r3, [r7, #12]
 8005284:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005286:	68fb      	ldr	r3, [r7, #12]
 8005288:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800528a:	3b01      	subs	r3, #1
 800528c:	b29a      	uxth	r2, r3
 800528e:	68fb      	ldr	r3, [r7, #12]
 8005290:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005292:	68fb      	ldr	r3, [r7, #12]
 8005294:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005296:	b29b      	uxth	r3, r3
 8005298:	3b01      	subs	r3, #1
 800529a:	b29a      	uxth	r2, r3
 800529c:	68fb      	ldr	r3, [r7, #12]
 800529e:	855a      	strh	r2, [r3, #42]	; 0x2a
 80052a0:	e0b8      	b.n	8005414 <HAL_I2C_Mem_Read+0x418>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80052a4:	9300      	str	r3, [sp, #0]
 80052a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052a8:	2200      	movs	r2, #0
 80052aa:	4966      	ldr	r1, [pc, #408]	; (8005444 <HAL_I2C_Mem_Read+0x448>)
 80052ac:	68f8      	ldr	r0, [r7, #12]
 80052ae:	f000 fa49 	bl	8005744 <I2C_WaitOnFlagUntilTimeout>
 80052b2:	4603      	mov	r3, r0
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d001      	beq.n	80052bc <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0bf      	b.n	800543c <HAL_I2C_Mem_Read+0x440>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80052bc:	68fb      	ldr	r3, [r7, #12]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	681a      	ldr	r2, [r3, #0]
 80052c2:	68fb      	ldr	r3, [r7, #12]
 80052c4:	681b      	ldr	r3, [r3, #0]
 80052c6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80052ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80052cc:	68fb      	ldr	r3, [r7, #12]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	691a      	ldr	r2, [r3, #16]
 80052d2:	68fb      	ldr	r3, [r7, #12]
 80052d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052d6:	b2d2      	uxtb	r2, r2
 80052d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80052da:	68fb      	ldr	r3, [r7, #12]
 80052dc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80052de:	1c5a      	adds	r2, r3, #1
 80052e0:	68fb      	ldr	r3, [r7, #12]
 80052e2:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80052e4:	68fb      	ldr	r3, [r7, #12]
 80052e6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80052e8:	3b01      	subs	r3, #1
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	68fb      	ldr	r3, [r7, #12]
 80052ee:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 80052f0:	68fb      	ldr	r3, [r7, #12]
 80052f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	3b01      	subs	r3, #1
 80052f8:	b29a      	uxth	r2, r3
 80052fa:	68fb      	ldr	r3, [r7, #12]
 80052fc:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80052fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005300:	9300      	str	r3, [sp, #0]
 8005302:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005304:	2200      	movs	r2, #0
 8005306:	494f      	ldr	r1, [pc, #316]	; (8005444 <HAL_I2C_Mem_Read+0x448>)
 8005308:	68f8      	ldr	r0, [r7, #12]
 800530a:	f000 fa1b 	bl	8005744 <I2C_WaitOnFlagUntilTimeout>
 800530e:	4603      	mov	r3, r0
 8005310:	2b00      	cmp	r3, #0
 8005312:	d001      	beq.n	8005318 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e091      	b.n	800543c <HAL_I2C_Mem_Read+0x440>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005318:	68fb      	ldr	r3, [r7, #12]
 800531a:	681b      	ldr	r3, [r3, #0]
 800531c:	681a      	ldr	r2, [r3, #0]
 800531e:	68fb      	ldr	r3, [r7, #12]
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005326:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005328:	68fb      	ldr	r3, [r7, #12]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	691a      	ldr	r2, [r3, #16]
 800532e:	68fb      	ldr	r3, [r7, #12]
 8005330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005332:	b2d2      	uxtb	r2, r2
 8005334:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005336:	68fb      	ldr	r3, [r7, #12]
 8005338:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800533a:	1c5a      	adds	r2, r3, #1
 800533c:	68fb      	ldr	r3, [r7, #12]
 800533e:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005344:	3b01      	subs	r3, #1
 8005346:	b29a      	uxth	r2, r3
 8005348:	68fb      	ldr	r3, [r7, #12]
 800534a:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800534c:	68fb      	ldr	r3, [r7, #12]
 800534e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005350:	b29b      	uxth	r3, r3
 8005352:	3b01      	subs	r3, #1
 8005354:	b29a      	uxth	r2, r3
 8005356:	68fb      	ldr	r3, [r7, #12]
 8005358:	855a      	strh	r2, [r3, #42]	; 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800535a:	68fb      	ldr	r3, [r7, #12]
 800535c:	681b      	ldr	r3, [r3, #0]
 800535e:	691a      	ldr	r2, [r3, #16]
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005364:	b2d2      	uxtb	r2, r2
 8005366:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005368:	68fb      	ldr	r3, [r7, #12]
 800536a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800536c:	1c5a      	adds	r2, r3, #1
 800536e:	68fb      	ldr	r3, [r7, #12]
 8005370:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 8005372:	68fb      	ldr	r3, [r7, #12]
 8005374:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005376:	3b01      	subs	r3, #1
 8005378:	b29a      	uxth	r2, r3
 800537a:	68fb      	ldr	r3, [r7, #12]
 800537c:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 800537e:	68fb      	ldr	r3, [r7, #12]
 8005380:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005382:	b29b      	uxth	r3, r3
 8005384:	3b01      	subs	r3, #1
 8005386:	b29a      	uxth	r2, r3
 8005388:	68fb      	ldr	r3, [r7, #12]
 800538a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800538c:	e042      	b.n	8005414 <HAL_I2C_Mem_Read+0x418>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800538e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005390:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8005392:	68f8      	ldr	r0, [r7, #12]
 8005394:	f000 fb2e 	bl	80059f4 <I2C_WaitOnRXNEFlagUntilTimeout>
 8005398:	4603      	mov	r3, r0
 800539a:	2b00      	cmp	r3, #0
 800539c:	d001      	beq.n	80053a2 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800539e:	2301      	movs	r3, #1
 80053a0:	e04c      	b.n	800543c <HAL_I2C_Mem_Read+0x440>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053a2:	68fb      	ldr	r3, [r7, #12]
 80053a4:	681b      	ldr	r3, [r3, #0]
 80053a6:	691a      	ldr	r2, [r3, #16]
 80053a8:	68fb      	ldr	r3, [r7, #12]
 80053aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ac:	b2d2      	uxtb	r2, r2
 80053ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80053b0:	68fb      	ldr	r3, [r7, #12]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferSize--;
 80053ba:	68fb      	ldr	r3, [r7, #12]
 80053bc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053be:	3b01      	subs	r3, #1
 80053c0:	b29a      	uxth	r2, r3
 80053c2:	68fb      	ldr	r3, [r7, #12]
 80053c4:	851a      	strh	r2, [r3, #40]	; 0x28
        hi2c->XferCount--;
 80053c6:	68fb      	ldr	r3, [r7, #12]
 80053c8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ca:	b29b      	uxth	r3, r3
 80053cc:	3b01      	subs	r3, #1
 80053ce:	b29a      	uxth	r2, r3
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	855a      	strh	r2, [r3, #42]	; 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80053d4:	68fb      	ldr	r3, [r7, #12]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	695b      	ldr	r3, [r3, #20]
 80053da:	f003 0304 	and.w	r3, r3, #4
 80053de:	2b04      	cmp	r3, #4
 80053e0:	d118      	bne.n	8005414 <HAL_I2C_Mem_Read+0x418>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053e2:	68fb      	ldr	r3, [r7, #12]
 80053e4:	681b      	ldr	r3, [r3, #0]
 80053e6:	691a      	ldr	r2, [r3, #16]
 80053e8:	68fb      	ldr	r3, [r7, #12]
 80053ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053ec:	b2d2      	uxtb	r2, r2
 80053ee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80053f0:	68fb      	ldr	r3, [r7, #12]
 80053f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053f4:	1c5a      	adds	r2, r3, #1
 80053f6:	68fb      	ldr	r3, [r7, #12]
 80053f8:	625a      	str	r2, [r3, #36]	; 0x24

          /* Update counter */
          hi2c->XferSize--;
 80053fa:	68fb      	ldr	r3, [r7, #12]
 80053fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80053fe:	3b01      	subs	r3, #1
 8005400:	b29a      	uxth	r2, r3
 8005402:	68fb      	ldr	r3, [r7, #12]
 8005404:	851a      	strh	r2, [r3, #40]	; 0x28
          hi2c->XferCount--;
 8005406:	68fb      	ldr	r3, [r7, #12]
 8005408:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540a:	b29b      	uxth	r3, r3
 800540c:	3b01      	subs	r3, #1
 800540e:	b29a      	uxth	r2, r3
 8005410:	68fb      	ldr	r3, [r7, #12]
 8005412:	855a      	strh	r2, [r3, #42]	; 0x2a
    while (hi2c->XferSize > 0U)
 8005414:	68fb      	ldr	r3, [r7, #12]
 8005416:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8005418:	2b00      	cmp	r3, #0
 800541a:	f47f aec2 	bne.w	80051a2 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 800541e:	68fb      	ldr	r3, [r7, #12]
 8005420:	2220      	movs	r2, #32
 8005422:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8005426:	68fb      	ldr	r3, [r7, #12]
 8005428:	2200      	movs	r2, #0
 800542a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2200      	movs	r2, #0
 8005432:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8005436:	2300      	movs	r3, #0
 8005438:	e000      	b.n	800543c <HAL_I2C_Mem_Read+0x440>
  }
  else
  {
    return HAL_BUSY;
 800543a:	2302      	movs	r3, #2
  }
}
 800543c:	4618      	mov	r0, r3
 800543e:	3728      	adds	r7, #40	; 0x28
 8005440:	46bd      	mov	sp, r7
 8005442:	bd80      	pop	{r7, pc}
 8005444:	00010004 	.word	0x00010004

08005448 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005448:	b580      	push	{r7, lr}
 800544a:	b088      	sub	sp, #32
 800544c:	af02      	add	r7, sp, #8
 800544e:	60f8      	str	r0, [r7, #12]
 8005450:	4608      	mov	r0, r1
 8005452:	4611      	mov	r1, r2
 8005454:	461a      	mov	r2, r3
 8005456:	4603      	mov	r3, r0
 8005458:	817b      	strh	r3, [r7, #10]
 800545a:	460b      	mov	r3, r1
 800545c:	813b      	strh	r3, [r7, #8]
 800545e:	4613      	mov	r3, r2
 8005460:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005462:	68fb      	ldr	r3, [r7, #12]
 8005464:	681b      	ldr	r3, [r3, #0]
 8005466:	681a      	ldr	r2, [r3, #0]
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005470:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8005472:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005474:	9300      	str	r3, [sp, #0]
 8005476:	6a3b      	ldr	r3, [r7, #32]
 8005478:	2200      	movs	r2, #0
 800547a:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 800547e:	68f8      	ldr	r0, [r7, #12]
 8005480:	f000 f960 	bl	8005744 <I2C_WaitOnFlagUntilTimeout>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d00d      	beq.n	80054a6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800548a:	68fb      	ldr	r3, [r7, #12]
 800548c:	681b      	ldr	r3, [r3, #0]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005494:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005498:	d103      	bne.n	80054a2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	f44f 7200 	mov.w	r2, #512	; 0x200
 80054a0:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e05f      	b.n	8005566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80054a6:	897b      	ldrh	r3, [r7, #10]
 80054a8:	b2db      	uxtb	r3, r3
 80054aa:	461a      	mov	r2, r3
 80054ac:	68fb      	ldr	r3, [r7, #12]
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80054b4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80054b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80054b8:	6a3a      	ldr	r2, [r7, #32]
 80054ba:	492d      	ldr	r1, [pc, #180]	; (8005570 <I2C_RequestMemoryWrite+0x128>)
 80054bc:	68f8      	ldr	r0, [r7, #12]
 80054be:	f000 f998 	bl	80057f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d001      	beq.n	80054cc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80054c8:	2301      	movs	r3, #1
 80054ca:	e04c      	b.n	8005566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80054cc:	2300      	movs	r3, #0
 80054ce:	617b      	str	r3, [r7, #20]
 80054d0:	68fb      	ldr	r3, [r7, #12]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	695b      	ldr	r3, [r3, #20]
 80054d6:	617b      	str	r3, [r7, #20]
 80054d8:	68fb      	ldr	r3, [r7, #12]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	699b      	ldr	r3, [r3, #24]
 80054de:	617b      	str	r3, [r7, #20]
 80054e0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80054e2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80054e4:	6a39      	ldr	r1, [r7, #32]
 80054e6:	68f8      	ldr	r0, [r7, #12]
 80054e8:	f000 fa02 	bl	80058f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80054ec:	4603      	mov	r3, r0
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d00d      	beq.n	800550e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80054f2:	68fb      	ldr	r3, [r7, #12]
 80054f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80054f6:	2b04      	cmp	r3, #4
 80054f8:	d107      	bne.n	800550a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054fa:	68fb      	ldr	r3, [r7, #12]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	681a      	ldr	r2, [r3, #0]
 8005500:	68fb      	ldr	r3, [r7, #12]
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005508:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800550a:	2301      	movs	r3, #1
 800550c:	e02b      	b.n	8005566 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800550e:	88fb      	ldrh	r3, [r7, #6]
 8005510:	2b01      	cmp	r3, #1
 8005512:	d105      	bne.n	8005520 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005514:	893b      	ldrh	r3, [r7, #8]
 8005516:	b2da      	uxtb	r2, r3
 8005518:	68fb      	ldr	r3, [r7, #12]
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	611a      	str	r2, [r3, #16]
 800551e:	e021      	b.n	8005564 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8005520:	893b      	ldrh	r3, [r7, #8]
 8005522:	0a1b      	lsrs	r3, r3, #8
 8005524:	b29b      	uxth	r3, r3
 8005526:	b2da      	uxtb	r2, r3
 8005528:	68fb      	ldr	r3, [r7, #12]
 800552a:	681b      	ldr	r3, [r3, #0]
 800552c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800552e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005530:	6a39      	ldr	r1, [r7, #32]
 8005532:	68f8      	ldr	r0, [r7, #12]
 8005534:	f000 f9dc 	bl	80058f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005538:	4603      	mov	r3, r0
 800553a:	2b00      	cmp	r3, #0
 800553c:	d00d      	beq.n	800555a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800553e:	68fb      	ldr	r3, [r7, #12]
 8005540:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005542:	2b04      	cmp	r3, #4
 8005544:	d107      	bne.n	8005556 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005546:	68fb      	ldr	r3, [r7, #12]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	681a      	ldr	r2, [r3, #0]
 800554c:	68fb      	ldr	r3, [r7, #12]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005554:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005556:	2301      	movs	r3, #1
 8005558:	e005      	b.n	8005566 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800555a:	893b      	ldrh	r3, [r7, #8]
 800555c:	b2da      	uxtb	r2, r3
 800555e:	68fb      	ldr	r3, [r7, #12]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8005564:	2300      	movs	r3, #0
}
 8005566:	4618      	mov	r0, r3
 8005568:	3718      	adds	r7, #24
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}
 800556e:	bf00      	nop
 8005570:	00010002 	.word	0x00010002

08005574 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8005574:	b580      	push	{r7, lr}
 8005576:	b088      	sub	sp, #32
 8005578:	af02      	add	r7, sp, #8
 800557a:	60f8      	str	r0, [r7, #12]
 800557c:	4608      	mov	r0, r1
 800557e:	4611      	mov	r1, r2
 8005580:	461a      	mov	r2, r3
 8005582:	4603      	mov	r3, r0
 8005584:	817b      	strh	r3, [r7, #10]
 8005586:	460b      	mov	r3, r1
 8005588:	813b      	strh	r3, [r7, #8]
 800558a:	4613      	mov	r3, r2
 800558c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800558e:	68fb      	ldr	r3, [r7, #12]
 8005590:	681b      	ldr	r3, [r3, #0]
 8005592:	681a      	ldr	r2, [r3, #0]
 8005594:	68fb      	ldr	r3, [r7, #12]
 8005596:	681b      	ldr	r3, [r3, #0]
 8005598:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800559c:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800559e:	68fb      	ldr	r3, [r7, #12]
 80055a0:	681b      	ldr	r3, [r3, #0]
 80055a2:	681a      	ldr	r2, [r3, #0]
 80055a4:	68fb      	ldr	r3, [r7, #12]
 80055a6:	681b      	ldr	r3, [r3, #0]
 80055a8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055ac:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80055ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055b0:	9300      	str	r3, [sp, #0]
 80055b2:	6a3b      	ldr	r3, [r7, #32]
 80055b4:	2200      	movs	r2, #0
 80055b6:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80055ba:	68f8      	ldr	r0, [r7, #12]
 80055bc:	f000 f8c2 	bl	8005744 <I2C_WaitOnFlagUntilTimeout>
 80055c0:	4603      	mov	r3, r0
 80055c2:	2b00      	cmp	r3, #0
 80055c4:	d00d      	beq.n	80055e2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80055c6:	68fb      	ldr	r3, [r7, #12]
 80055c8:	681b      	ldr	r3, [r3, #0]
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80055d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80055d4:	d103      	bne.n	80055de <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80055d6:	68fb      	ldr	r3, [r7, #12]
 80055d8:	f44f 7200 	mov.w	r2, #512	; 0x200
 80055dc:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 80055de:	2303      	movs	r3, #3
 80055e0:	e0aa      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80055e2:	897b      	ldrh	r3, [r7, #10]
 80055e4:	b2db      	uxtb	r3, r3
 80055e6:	461a      	mov	r2, r3
 80055e8:	68fb      	ldr	r3, [r7, #12]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80055f0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80055f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80055f4:	6a3a      	ldr	r2, [r7, #32]
 80055f6:	4952      	ldr	r1, [pc, #328]	; (8005740 <I2C_RequestMemoryRead+0x1cc>)
 80055f8:	68f8      	ldr	r0, [r7, #12]
 80055fa:	f000 f8fa 	bl	80057f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80055fe:	4603      	mov	r3, r0
 8005600:	2b00      	cmp	r3, #0
 8005602:	d001      	beq.n	8005608 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8005604:	2301      	movs	r3, #1
 8005606:	e097      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005608:	2300      	movs	r3, #0
 800560a:	617b      	str	r3, [r7, #20]
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	695b      	ldr	r3, [r3, #20]
 8005612:	617b      	str	r3, [r7, #20]
 8005614:	68fb      	ldr	r3, [r7, #12]
 8005616:	681b      	ldr	r3, [r3, #0]
 8005618:	699b      	ldr	r3, [r3, #24]
 800561a:	617b      	str	r3, [r7, #20]
 800561c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800561e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8005620:	6a39      	ldr	r1, [r7, #32]
 8005622:	68f8      	ldr	r0, [r7, #12]
 8005624:	f000 f964 	bl	80058f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005628:	4603      	mov	r3, r0
 800562a:	2b00      	cmp	r3, #0
 800562c:	d00d      	beq.n	800564a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800562e:	68fb      	ldr	r3, [r7, #12]
 8005630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005632:	2b04      	cmp	r3, #4
 8005634:	d107      	bne.n	8005646 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005636:	68fb      	ldr	r3, [r7, #12]
 8005638:	681b      	ldr	r3, [r3, #0]
 800563a:	681a      	ldr	r2, [r3, #0]
 800563c:	68fb      	ldr	r3, [r7, #12]
 800563e:	681b      	ldr	r3, [r3, #0]
 8005640:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005644:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8005646:	2301      	movs	r3, #1
 8005648:	e076      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800564a:	88fb      	ldrh	r3, [r7, #6]
 800564c:	2b01      	cmp	r3, #1
 800564e:	d105      	bne.n	800565c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005650:	893b      	ldrh	r3, [r7, #8]
 8005652:	b2da      	uxtb	r2, r3
 8005654:	68fb      	ldr	r3, [r7, #12]
 8005656:	681b      	ldr	r3, [r3, #0]
 8005658:	611a      	str	r2, [r3, #16]
 800565a:	e021      	b.n	80056a0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800565c:	893b      	ldrh	r3, [r7, #8]
 800565e:	0a1b      	lsrs	r3, r3, #8
 8005660:	b29b      	uxth	r3, r3
 8005662:	b2da      	uxtb	r2, r3
 8005664:	68fb      	ldr	r3, [r7, #12]
 8005666:	681b      	ldr	r3, [r3, #0]
 8005668:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800566a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800566c:	6a39      	ldr	r1, [r7, #32]
 800566e:	68f8      	ldr	r0, [r7, #12]
 8005670:	f000 f93e 	bl	80058f0 <I2C_WaitOnTXEFlagUntilTimeout>
 8005674:	4603      	mov	r3, r0
 8005676:	2b00      	cmp	r3, #0
 8005678:	d00d      	beq.n	8005696 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800567e:	2b04      	cmp	r3, #4
 8005680:	d107      	bne.n	8005692 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005682:	68fb      	ldr	r3, [r7, #12]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	681a      	ldr	r2, [r3, #0]
 8005688:	68fb      	ldr	r3, [r7, #12]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005690:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8005692:	2301      	movs	r3, #1
 8005694:	e050      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8005696:	893b      	ldrh	r3, [r7, #8]
 8005698:	b2da      	uxtb	r2, r3
 800569a:	68fb      	ldr	r3, [r7, #12]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80056a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80056a2:	6a39      	ldr	r1, [r7, #32]
 80056a4:	68f8      	ldr	r0, [r7, #12]
 80056a6:	f000 f923 	bl	80058f0 <I2C_WaitOnTXEFlagUntilTimeout>
 80056aa:	4603      	mov	r3, r0
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d00d      	beq.n	80056cc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80056b0:	68fb      	ldr	r3, [r7, #12]
 80056b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056b4:	2b04      	cmp	r3, #4
 80056b6:	d107      	bne.n	80056c8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	681b      	ldr	r3, [r3, #0]
 80056bc:	681a      	ldr	r2, [r3, #0]
 80056be:	68fb      	ldr	r3, [r7, #12]
 80056c0:	681b      	ldr	r3, [r3, #0]
 80056c2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80056c6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80056c8:	2301      	movs	r3, #1
 80056ca:	e035      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	681a      	ldr	r2, [r3, #0]
 80056d2:	68fb      	ldr	r3, [r7, #12]
 80056d4:	681b      	ldr	r3, [r3, #0]
 80056d6:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056da:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80056dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80056de:	9300      	str	r3, [sp, #0]
 80056e0:	6a3b      	ldr	r3, [r7, #32]
 80056e2:	2200      	movs	r2, #0
 80056e4:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 80056e8:	68f8      	ldr	r0, [r7, #12]
 80056ea:	f000 f82b 	bl	8005744 <I2C_WaitOnFlagUntilTimeout>
 80056ee:	4603      	mov	r3, r0
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d00d      	beq.n	8005710 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80056f4:	68fb      	ldr	r3, [r7, #12]
 80056f6:	681b      	ldr	r3, [r3, #0]
 80056f8:	681b      	ldr	r3, [r3, #0]
 80056fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056fe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005702:	d103      	bne.n	800570c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8005704:	68fb      	ldr	r3, [r7, #12]
 8005706:	f44f 7200 	mov.w	r2, #512	; 0x200
 800570a:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 800570c:	2303      	movs	r3, #3
 800570e:	e013      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8005710:	897b      	ldrh	r3, [r7, #10]
 8005712:	b2db      	uxtb	r3, r3
 8005714:	f043 0301 	orr.w	r3, r3, #1
 8005718:	b2da      	uxtb	r2, r3
 800571a:	68fb      	ldr	r3, [r7, #12]
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8005720:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005722:	6a3a      	ldr	r2, [r7, #32]
 8005724:	4906      	ldr	r1, [pc, #24]	; (8005740 <I2C_RequestMemoryRead+0x1cc>)
 8005726:	68f8      	ldr	r0, [r7, #12]
 8005728:	f000 f863 	bl	80057f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800572c:	4603      	mov	r3, r0
 800572e:	2b00      	cmp	r3, #0
 8005730:	d001      	beq.n	8005736 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8005732:	2301      	movs	r3, #1
 8005734:	e000      	b.n	8005738 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8005736:	2300      	movs	r3, #0
}
 8005738:	4618      	mov	r0, r3
 800573a:	3718      	adds	r7, #24
 800573c:	46bd      	mov	sp, r7
 800573e:	bd80      	pop	{r7, pc}
 8005740:	00010002 	.word	0x00010002

08005744 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8005744:	b580      	push	{r7, lr}
 8005746:	b084      	sub	sp, #16
 8005748:	af00      	add	r7, sp, #0
 800574a:	60f8      	str	r0, [r7, #12]
 800574c:	60b9      	str	r1, [r7, #8]
 800574e:	603b      	str	r3, [r7, #0]
 8005750:	4613      	mov	r3, r2
 8005752:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8005754:	e025      	b.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005756:	683b      	ldr	r3, [r7, #0]
 8005758:	f1b3 3fff 	cmp.w	r3, #4294967295
 800575c:	d021      	beq.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800575e:	f7fe fc53 	bl	8004008 <HAL_GetTick>
 8005762:	4602      	mov	r2, r0
 8005764:	69bb      	ldr	r3, [r7, #24]
 8005766:	1ad3      	subs	r3, r2, r3
 8005768:	683a      	ldr	r2, [r7, #0]
 800576a:	429a      	cmp	r2, r3
 800576c:	d302      	bcc.n	8005774 <I2C_WaitOnFlagUntilTimeout+0x30>
 800576e:	683b      	ldr	r3, [r7, #0]
 8005770:	2b00      	cmp	r3, #0
 8005772:	d116      	bne.n	80057a2 <I2C_WaitOnFlagUntilTimeout+0x5e>
      {
        hi2c->PreviousState     = I2C_STATE_NONE;
 8005774:	68fb      	ldr	r3, [r7, #12]
 8005776:	2200      	movs	r2, #0
 8005778:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State             = HAL_I2C_STATE_READY;
 800577a:	68fb      	ldr	r3, [r7, #12]
 800577c:	2220      	movs	r2, #32
 800577e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode              = HAL_I2C_MODE_NONE;
 8005782:	68fb      	ldr	r3, [r7, #12]
 8005784:	2200      	movs	r2, #0
 8005786:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 800578a:	68fb      	ldr	r3, [r7, #12]
 800578c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800578e:	f043 0220 	orr.w	r2, r3, #32
 8005792:	68fb      	ldr	r3, [r7, #12]
 8005794:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8005796:	68fb      	ldr	r3, [r7, #12]
 8005798:	2200      	movs	r2, #0
 800579a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800579e:	2301      	movs	r3, #1
 80057a0:	e023      	b.n	80057ea <I2C_WaitOnFlagUntilTimeout+0xa6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	0c1b      	lsrs	r3, r3, #16
 80057a6:	b2db      	uxtb	r3, r3
 80057a8:	2b01      	cmp	r3, #1
 80057aa:	d10d      	bne.n	80057c8 <I2C_WaitOnFlagUntilTimeout+0x84>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	681b      	ldr	r3, [r3, #0]
 80057b0:	695b      	ldr	r3, [r3, #20]
 80057b2:	43da      	mvns	r2, r3
 80057b4:	68bb      	ldr	r3, [r7, #8]
 80057b6:	4013      	ands	r3, r2
 80057b8:	b29b      	uxth	r3, r3
 80057ba:	2b00      	cmp	r3, #0
 80057bc:	bf0c      	ite	eq
 80057be:	2301      	moveq	r3, #1
 80057c0:	2300      	movne	r3, #0
 80057c2:	b2db      	uxtb	r3, r3
 80057c4:	461a      	mov	r2, r3
 80057c6:	e00c      	b.n	80057e2 <I2C_WaitOnFlagUntilTimeout+0x9e>
 80057c8:	68fb      	ldr	r3, [r7, #12]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	699b      	ldr	r3, [r3, #24]
 80057ce:	43da      	mvns	r2, r3
 80057d0:	68bb      	ldr	r3, [r7, #8]
 80057d2:	4013      	ands	r3, r2
 80057d4:	b29b      	uxth	r3, r3
 80057d6:	2b00      	cmp	r3, #0
 80057d8:	bf0c      	ite	eq
 80057da:	2301      	moveq	r3, #1
 80057dc:	2300      	movne	r3, #0
 80057de:	b2db      	uxtb	r3, r3
 80057e0:	461a      	mov	r2, r3
 80057e2:	79fb      	ldrb	r3, [r7, #7]
 80057e4:	429a      	cmp	r2, r3
 80057e6:	d0b6      	beq.n	8005756 <I2C_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80057e8:	2300      	movs	r3, #0
}
 80057ea:	4618      	mov	r0, r3
 80057ec:	3710      	adds	r7, #16
 80057ee:	46bd      	mov	sp, r7
 80057f0:	bd80      	pop	{r7, pc}

080057f2 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 80057f2:	b580      	push	{r7, lr}
 80057f4:	b084      	sub	sp, #16
 80057f6:	af00      	add	r7, sp, #0
 80057f8:	60f8      	str	r0, [r7, #12]
 80057fa:	60b9      	str	r1, [r7, #8]
 80057fc:	607a      	str	r2, [r7, #4]
 80057fe:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8005800:	e051      	b.n	80058a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005802:	68fb      	ldr	r3, [r7, #12]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	695b      	ldr	r3, [r3, #20]
 8005808:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800580c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005810:	d123      	bne.n	800585a <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005812:	68fb      	ldr	r3, [r7, #12]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	681a      	ldr	r2, [r3, #0]
 8005818:	68fb      	ldr	r3, [r7, #12]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005820:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005822:	68fb      	ldr	r3, [r7, #12]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800582a:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800582c:	68fb      	ldr	r3, [r7, #12]
 800582e:	2200      	movs	r2, #0
 8005830:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005832:	68fb      	ldr	r3, [r7, #12]
 8005834:	2220      	movs	r2, #32
 8005836:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800583a:	68fb      	ldr	r3, [r7, #12]
 800583c:	2200      	movs	r2, #0
 800583e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005842:	68fb      	ldr	r3, [r7, #12]
 8005844:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005846:	f043 0204 	orr.w	r2, r3, #4
 800584a:	68fb      	ldr	r3, [r7, #12]
 800584c:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800584e:	68fb      	ldr	r3, [r7, #12]
 8005850:	2200      	movs	r2, #0
 8005852:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005856:	2301      	movs	r3, #1
 8005858:	e046      	b.n	80058e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005860:	d021      	beq.n	80058a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005862:	f7fe fbd1 	bl	8004008 <HAL_GetTick>
 8005866:	4602      	mov	r2, r0
 8005868:	683b      	ldr	r3, [r7, #0]
 800586a:	1ad3      	subs	r3, r2, r3
 800586c:	687a      	ldr	r2, [r7, #4]
 800586e:	429a      	cmp	r2, r3
 8005870:	d302      	bcc.n	8005878 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2b00      	cmp	r3, #0
 8005876:	d116      	bne.n	80058a6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xb4>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8005878:	68fb      	ldr	r3, [r7, #12]
 800587a:	2200      	movs	r2, #0
 800587c:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800587e:	68fb      	ldr	r3, [r7, #12]
 8005880:	2220      	movs	r2, #32
 8005882:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005886:	68fb      	ldr	r3, [r7, #12]
 8005888:	2200      	movs	r2, #0
 800588a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800588e:	68fb      	ldr	r3, [r7, #12]
 8005890:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005892:	f043 0220 	orr.w	r2, r3, #32
 8005896:	68fb      	ldr	r3, [r7, #12]
 8005898:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800589a:	68fb      	ldr	r3, [r7, #12]
 800589c:	2200      	movs	r2, #0
 800589e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80058a2:	2301      	movs	r3, #1
 80058a4:	e020      	b.n	80058e8 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf6>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 80058a6:	68bb      	ldr	r3, [r7, #8]
 80058a8:	0c1b      	lsrs	r3, r3, #16
 80058aa:	b2db      	uxtb	r3, r3
 80058ac:	2b01      	cmp	r3, #1
 80058ae:	d10c      	bne.n	80058ca <I2C_WaitOnMasterAddressFlagUntilTimeout+0xd8>
 80058b0:	68fb      	ldr	r3, [r7, #12]
 80058b2:	681b      	ldr	r3, [r3, #0]
 80058b4:	695b      	ldr	r3, [r3, #20]
 80058b6:	43da      	mvns	r2, r3
 80058b8:	68bb      	ldr	r3, [r7, #8]
 80058ba:	4013      	ands	r3, r2
 80058bc:	b29b      	uxth	r3, r3
 80058be:	2b00      	cmp	r3, #0
 80058c0:	bf14      	ite	ne
 80058c2:	2301      	movne	r3, #1
 80058c4:	2300      	moveq	r3, #0
 80058c6:	b2db      	uxtb	r3, r3
 80058c8:	e00b      	b.n	80058e2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf0>
 80058ca:	68fb      	ldr	r3, [r7, #12]
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	699b      	ldr	r3, [r3, #24]
 80058d0:	43da      	mvns	r2, r3
 80058d2:	68bb      	ldr	r3, [r7, #8]
 80058d4:	4013      	ands	r3, r2
 80058d6:	b29b      	uxth	r3, r3
 80058d8:	2b00      	cmp	r3, #0
 80058da:	bf14      	ite	ne
 80058dc:	2301      	movne	r3, #1
 80058de:	2300      	moveq	r3, #0
 80058e0:	b2db      	uxtb	r3, r3
 80058e2:	2b00      	cmp	r3, #0
 80058e4:	d18d      	bne.n	8005802 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
      }
    }
  }
  return HAL_OK;
 80058e6:	2300      	movs	r3, #0
}
 80058e8:	4618      	mov	r0, r3
 80058ea:	3710      	adds	r7, #16
 80058ec:	46bd      	mov	sp, r7
 80058ee:	bd80      	pop	{r7, pc}

080058f0 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80058f0:	b580      	push	{r7, lr}
 80058f2:	b084      	sub	sp, #16
 80058f4:	af00      	add	r7, sp, #0
 80058f6:	60f8      	str	r0, [r7, #12]
 80058f8:	60b9      	str	r1, [r7, #8]
 80058fa:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80058fc:	e02d      	b.n	800595a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80058fe:	68f8      	ldr	r0, [r7, #12]
 8005900:	f000 f8ce 	bl	8005aa0 <I2C_IsAcknowledgeFailed>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800590a:	2301      	movs	r3, #1
 800590c:	e02d      	b.n	800596a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800590e:	68bb      	ldr	r3, [r7, #8]
 8005910:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005914:	d021      	beq.n	800595a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005916:	f7fe fb77 	bl	8004008 <HAL_GetTick>
 800591a:	4602      	mov	r2, r0
 800591c:	687b      	ldr	r3, [r7, #4]
 800591e:	1ad3      	subs	r3, r2, r3
 8005920:	68ba      	ldr	r2, [r7, #8]
 8005922:	429a      	cmp	r2, r3
 8005924:	d302      	bcc.n	800592c <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8005926:	68bb      	ldr	r3, [r7, #8]
 8005928:	2b00      	cmp	r3, #0
 800592a:	d116      	bne.n	800595a <I2C_WaitOnTXEFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	2200      	movs	r2, #0
 8005930:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8005932:	68fb      	ldr	r3, [r7, #12]
 8005934:	2220      	movs	r2, #32
 8005936:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800593a:	68fb      	ldr	r3, [r7, #12]
 800593c:	2200      	movs	r2, #0
 800593e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005942:	68fb      	ldr	r3, [r7, #12]
 8005944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005946:	f043 0220 	orr.w	r2, r3, #32
 800594a:	68fb      	ldr	r3, [r7, #12]
 800594c:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800594e:	68fb      	ldr	r3, [r7, #12]
 8005950:	2200      	movs	r2, #0
 8005952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8005956:	2301      	movs	r3, #1
 8005958:	e007      	b.n	800596a <I2C_WaitOnTXEFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	695b      	ldr	r3, [r3, #20]
 8005960:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005964:	2b80      	cmp	r3, #128	; 0x80
 8005966:	d1ca      	bne.n	80058fe <I2C_WaitOnTXEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8005968:	2300      	movs	r3, #0
}
 800596a:	4618      	mov	r0, r3
 800596c:	3710      	adds	r7, #16
 800596e:	46bd      	mov	sp, r7
 8005970:	bd80      	pop	{r7, pc}

08005972 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8005972:	b580      	push	{r7, lr}
 8005974:	b084      	sub	sp, #16
 8005976:	af00      	add	r7, sp, #0
 8005978:	60f8      	str	r0, [r7, #12]
 800597a:	60b9      	str	r1, [r7, #8]
 800597c:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800597e:	e02d      	b.n	80059dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8005980:	68f8      	ldr	r0, [r7, #12]
 8005982:	f000 f88d 	bl	8005aa0 <I2C_IsAcknowledgeFailed>
 8005986:	4603      	mov	r3, r0
 8005988:	2b00      	cmp	r3, #0
 800598a:	d001      	beq.n	8005990 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800598c:	2301      	movs	r3, #1
 800598e:	e02d      	b.n	80059ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005990:	68bb      	ldr	r3, [r7, #8]
 8005992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005996:	d021      	beq.n	80059dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005998:	f7fe fb36 	bl	8004008 <HAL_GetTick>
 800599c:	4602      	mov	r2, r0
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	68ba      	ldr	r2, [r7, #8]
 80059a4:	429a      	cmp	r2, r3
 80059a6:	d302      	bcc.n	80059ae <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 80059a8:	68bb      	ldr	r3, [r7, #8]
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	d116      	bne.n	80059dc <I2C_WaitOnBTFFlagUntilTimeout+0x6a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80059ae:	68fb      	ldr	r3, [r7, #12]
 80059b0:	2200      	movs	r2, #0
 80059b2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80059b4:	68fb      	ldr	r3, [r7, #12]
 80059b6:	2220      	movs	r2, #32
 80059b8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80059bc:	68fb      	ldr	r3, [r7, #12]
 80059be:	2200      	movs	r2, #0
 80059c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80059c4:	68fb      	ldr	r3, [r7, #12]
 80059c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80059c8:	f043 0220 	orr.w	r2, r3, #32
 80059cc:	68fb      	ldr	r3, [r7, #12]
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80059d0:	68fb      	ldr	r3, [r7, #12]
 80059d2:	2200      	movs	r2, #0
 80059d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80059d8:	2301      	movs	r3, #1
 80059da:	e007      	b.n	80059ec <I2C_WaitOnBTFFlagUntilTimeout+0x7a>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 80059dc:	68fb      	ldr	r3, [r7, #12]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	695b      	ldr	r3, [r3, #20]
 80059e2:	f003 0304 	and.w	r3, r3, #4
 80059e6:	2b04      	cmp	r3, #4
 80059e8:	d1ca      	bne.n	8005980 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80059ea:	2300      	movs	r3, #0
}
 80059ec:	4618      	mov	r0, r3
 80059ee:	3710      	adds	r7, #16
 80059f0:	46bd      	mov	sp, r7
 80059f2:	bd80      	pop	{r7, pc}

080059f4 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80059f4:	b580      	push	{r7, lr}
 80059f6:	b084      	sub	sp, #16
 80059f8:	af00      	add	r7, sp, #0
 80059fa:	60f8      	str	r0, [r7, #12]
 80059fc:	60b9      	str	r1, [r7, #8]
 80059fe:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a00:	e042      	b.n	8005a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8005a02:	68fb      	ldr	r3, [r7, #12]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	695b      	ldr	r3, [r3, #20]
 8005a08:	f003 0310 	and.w	r3, r3, #16
 8005a0c:	2b10      	cmp	r3, #16
 8005a0e:	d119      	bne.n	8005a44 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005a10:	68fb      	ldr	r3, [r7, #12]
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	f06f 0210 	mvn.w	r2, #16
 8005a18:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a1a:	68fb      	ldr	r3, [r7, #12]
 8005a1c:	2200      	movs	r2, #0
 8005a1e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a20:	68fb      	ldr	r3, [r7, #12]
 8005a22:	2220      	movs	r2, #32
 8005a24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a28:	68fb      	ldr	r3, [r7, #12]
 8005a2a:	2200      	movs	r2, #0
 8005a2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005a30:	68fb      	ldr	r3, [r7, #12]
 8005a32:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005a34:	68fb      	ldr	r3, [r7, #12]
 8005a36:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	2200      	movs	r2, #0
 8005a3c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a40:	2301      	movs	r3, #1
 8005a42:	e029      	b.n	8005a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a44:	f7fe fae0 	bl	8004008 <HAL_GetTick>
 8005a48:	4602      	mov	r2, r0
 8005a4a:	687b      	ldr	r3, [r7, #4]
 8005a4c:	1ad3      	subs	r3, r2, r3
 8005a4e:	68ba      	ldr	r2, [r7, #8]
 8005a50:	429a      	cmp	r2, r3
 8005a52:	d302      	bcc.n	8005a5a <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	d116      	bne.n	8005a88 <I2C_WaitOnRXNEFlagUntilTimeout+0x94>
    {
      hi2c->PreviousState       = I2C_STATE_NONE;
 8005a5a:	68fb      	ldr	r3, [r7, #12]
 8005a5c:	2200      	movs	r2, #0
 8005a5e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005a60:	68fb      	ldr	r3, [r7, #12]
 8005a62:	2220      	movs	r2, #32
 8005a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005a68:	68fb      	ldr	r3, [r7, #12]
 8005a6a:	2200      	movs	r2, #0
 8005a6c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005a70:	68fb      	ldr	r3, [r7, #12]
 8005a72:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a74:	f043 0220 	orr.w	r2, r3, #32
 8005a78:	68fb      	ldr	r3, [r7, #12]
 8005a7a:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005a7c:	68fb      	ldr	r3, [r7, #12]
 8005a7e:	2200      	movs	r2, #0
 8005a80:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8005a84:	2301      	movs	r3, #1
 8005a86:	e007      	b.n	8005a98 <I2C_WaitOnRXNEFlagUntilTimeout+0xa4>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005a88:	68fb      	ldr	r3, [r7, #12]
 8005a8a:	681b      	ldr	r3, [r3, #0]
 8005a8c:	695b      	ldr	r3, [r3, #20]
 8005a8e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a92:	2b40      	cmp	r3, #64	; 0x40
 8005a94:	d1b5      	bne.n	8005a02 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
    }
  }
  return HAL_OK;
 8005a96:	2300      	movs	r3, #0
}
 8005a98:	4618      	mov	r0, r3
 8005a9a:	3710      	adds	r7, #16
 8005a9c:	46bd      	mov	sp, r7
 8005a9e:	bd80      	pop	{r7, pc}

08005aa0 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8005aa0:	b480      	push	{r7}
 8005aa2:	b083      	sub	sp, #12
 8005aa4:	af00      	add	r7, sp, #0
 8005aa6:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	681b      	ldr	r3, [r3, #0]
 8005aac:	695b      	ldr	r3, [r3, #20]
 8005aae:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005ab2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8005ab6:	d11b      	bne.n	8005af0 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005ac0:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	2200      	movs	r2, #0
 8005ac6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	2220      	movs	r2, #32
 8005acc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	2200      	movs	r2, #0
 8005ad4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005adc:	f043 0204 	orr.w	r2, r3, #4
 8005ae0:	687b      	ldr	r3, [r7, #4]
 8005ae2:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	2200      	movs	r2, #0
 8005ae8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8005aec:	2301      	movs	r3, #1
 8005aee:	e000      	b.n	8005af2 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005af0:	2300      	movs	r3, #0
}
 8005af2:	4618      	mov	r0, r3
 8005af4:	370c      	adds	r7, #12
 8005af6:	46bd      	mov	sp, r7
 8005af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005afc:	4770      	bx	lr
	...

08005b00 <HAL_PWR_EnableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8005b00:	b480      	push	{r7}
 8005b02:	b083      	sub	sp, #12
 8005b04:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8005b06:	4b06      	ldr	r3, [pc, #24]	; (8005b20 <HAL_PWR_EnableBkUpAccess+0x20>)
 8005b08:	2201      	movs	r2, #1
 8005b0a:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005b0c:	4b05      	ldr	r3, [pc, #20]	; (8005b24 <HAL_PWR_EnableBkUpAccess+0x24>)
 8005b0e:	681b      	ldr	r3, [r3, #0]
 8005b10:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005b12:	687b      	ldr	r3, [r7, #4]
}
 8005b14:	bf00      	nop
 8005b16:	370c      	adds	r7, #12
 8005b18:	46bd      	mov	sp, r7
 8005b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b1e:	4770      	bx	lr
 8005b20:	420e0020 	.word	0x420e0020
 8005b24:	40007000 	.word	0x40007000

08005b28 <HAL_PWR_DisableBkUpAccess>:
  *         in backup domain protection disabling/enabling after programming the
  *         DBP bit" section.
  * @retval None
  */
void HAL_PWR_DisableBkUpAccess(void)
{
 8005b28:	b480      	push	{r7}
 8005b2a:	b083      	sub	sp, #12
 8005b2c:	af00      	add	r7, sp, #0
  __IO uint32_t dummyread;
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)DISABLE;
 8005b2e:	4b06      	ldr	r3, [pc, #24]	; (8005b48 <HAL_PWR_DisableBkUpAccess+0x20>)
 8005b30:	2200      	movs	r2, #0
 8005b32:	601a      	str	r2, [r3, #0]
  dummyread = PWR->CR;
 8005b34:	4b05      	ldr	r3, [pc, #20]	; (8005b4c <HAL_PWR_DisableBkUpAccess+0x24>)
 8005b36:	681b      	ldr	r3, [r3, #0]
 8005b38:	607b      	str	r3, [r7, #4]
  UNUSED(dummyread);
 8005b3a:	687b      	ldr	r3, [r7, #4]
}
 8005b3c:	bf00      	nop
 8005b3e:	370c      	adds	r7, #12
 8005b40:	46bd      	mov	sp, r7
 8005b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b46:	4770      	bx	lr
 8005b48:	420e0020 	.word	0x420e0020
 8005b4c:	40007000 	.word	0x40007000

08005b50 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b086      	sub	sp, #24
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e267      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	681b      	ldr	r3, [r3, #0]
 8005b66:	f003 0301 	and.w	r3, r3, #1
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d075      	beq.n	8005c5a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b6e:	4b88      	ldr	r3, [pc, #544]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005b70:	689b      	ldr	r3, [r3, #8]
 8005b72:	f003 030c 	and.w	r3, r3, #12
 8005b76:	2b04      	cmp	r3, #4
 8005b78:	d00c      	beq.n	8005b94 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b7a:	4b85      	ldr	r3, [pc, #532]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005b7c:	689b      	ldr	r3, [r3, #8]
 8005b7e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005b82:	2b08      	cmp	r3, #8
 8005b84:	d112      	bne.n	8005bac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005b86:	4b82      	ldr	r3, [pc, #520]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005b88:	685b      	ldr	r3, [r3, #4]
 8005b8a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005b8e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005b92:	d10b      	bne.n	8005bac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005b94:	4b7e      	ldr	r3, [pc, #504]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b9c:	2b00      	cmp	r3, #0
 8005b9e:	d05b      	beq.n	8005c58 <HAL_RCC_OscConfig+0x108>
 8005ba0:	687b      	ldr	r3, [r7, #4]
 8005ba2:	685b      	ldr	r3, [r3, #4]
 8005ba4:	2b00      	cmp	r3, #0
 8005ba6:	d157      	bne.n	8005c58 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005ba8:	2301      	movs	r3, #1
 8005baa:	e242      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	685b      	ldr	r3, [r3, #4]
 8005bb0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005bb4:	d106      	bne.n	8005bc4 <HAL_RCC_OscConfig+0x74>
 8005bb6:	4b76      	ldr	r3, [pc, #472]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	4a75      	ldr	r2, [pc, #468]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005bbc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005bc0:	6013      	str	r3, [r2, #0]
 8005bc2:	e01d      	b.n	8005c00 <HAL_RCC_OscConfig+0xb0>
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005bcc:	d10c      	bne.n	8005be8 <HAL_RCC_OscConfig+0x98>
 8005bce:	4b70      	ldr	r3, [pc, #448]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005bd0:	681b      	ldr	r3, [r3, #0]
 8005bd2:	4a6f      	ldr	r2, [pc, #444]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005bd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005bd8:	6013      	str	r3, [r2, #0]
 8005bda:	4b6d      	ldr	r3, [pc, #436]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	4a6c      	ldr	r2, [pc, #432]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005be0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005be4:	6013      	str	r3, [r2, #0]
 8005be6:	e00b      	b.n	8005c00 <HAL_RCC_OscConfig+0xb0>
 8005be8:	4b69      	ldr	r3, [pc, #420]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	4a68      	ldr	r2, [pc, #416]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005bee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005bf2:	6013      	str	r3, [r2, #0]
 8005bf4:	4b66      	ldr	r3, [pc, #408]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	4a65      	ldr	r2, [pc, #404]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005bfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005bfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	685b      	ldr	r3, [r3, #4]
 8005c04:	2b00      	cmp	r3, #0
 8005c06:	d013      	beq.n	8005c30 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c08:	f7fe f9fe 	bl	8004008 <HAL_GetTick>
 8005c0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c0e:	e008      	b.n	8005c22 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c10:	f7fe f9fa 	bl	8004008 <HAL_GetTick>
 8005c14:	4602      	mov	r2, r0
 8005c16:	693b      	ldr	r3, [r7, #16]
 8005c18:	1ad3      	subs	r3, r2, r3
 8005c1a:	2b64      	cmp	r3, #100	; 0x64
 8005c1c:	d901      	bls.n	8005c22 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005c1e:	2303      	movs	r3, #3
 8005c20:	e207      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005c22:	4b5b      	ldr	r3, [pc, #364]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	d0f0      	beq.n	8005c10 <HAL_RCC_OscConfig+0xc0>
 8005c2e:	e014      	b.n	8005c5a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005c30:	f7fe f9ea 	bl	8004008 <HAL_GetTick>
 8005c34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c36:	e008      	b.n	8005c4a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005c38:	f7fe f9e6 	bl	8004008 <HAL_GetTick>
 8005c3c:	4602      	mov	r2, r0
 8005c3e:	693b      	ldr	r3, [r7, #16]
 8005c40:	1ad3      	subs	r3, r2, r3
 8005c42:	2b64      	cmp	r3, #100	; 0x64
 8005c44:	d901      	bls.n	8005c4a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005c46:	2303      	movs	r3, #3
 8005c48:	e1f3      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005c4a:	4b51      	ldr	r3, [pc, #324]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005c4c:	681b      	ldr	r3, [r3, #0]
 8005c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c52:	2b00      	cmp	r3, #0
 8005c54:	d1f0      	bne.n	8005c38 <HAL_RCC_OscConfig+0xe8>
 8005c56:	e000      	b.n	8005c5a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005c58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005c5a:	687b      	ldr	r3, [r7, #4]
 8005c5c:	681b      	ldr	r3, [r3, #0]
 8005c5e:	f003 0302 	and.w	r3, r3, #2
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d063      	beq.n	8005d2e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c66:	4b4a      	ldr	r3, [pc, #296]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005c68:	689b      	ldr	r3, [r3, #8]
 8005c6a:	f003 030c 	and.w	r3, r3, #12
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d00b      	beq.n	8005c8a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c72:	4b47      	ldr	r3, [pc, #284]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005c74:	689b      	ldr	r3, [r3, #8]
 8005c76:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005c7a:	2b08      	cmp	r3, #8
 8005c7c:	d11c      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005c7e:	4b44      	ldr	r3, [pc, #272]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005c80:	685b      	ldr	r3, [r3, #4]
 8005c82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005c86:	2b00      	cmp	r3, #0
 8005c88:	d116      	bne.n	8005cb8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005c8a:	4b41      	ldr	r3, [pc, #260]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f003 0302 	and.w	r3, r3, #2
 8005c92:	2b00      	cmp	r3, #0
 8005c94:	d005      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x152>
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	68db      	ldr	r3, [r3, #12]
 8005c9a:	2b01      	cmp	r3, #1
 8005c9c:	d001      	beq.n	8005ca2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005c9e:	2301      	movs	r3, #1
 8005ca0:	e1c7      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005ca2:	4b3b      	ldr	r3, [pc, #236]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005caa:	687b      	ldr	r3, [r7, #4]
 8005cac:	691b      	ldr	r3, [r3, #16]
 8005cae:	00db      	lsls	r3, r3, #3
 8005cb0:	4937      	ldr	r1, [pc, #220]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005cb2:	4313      	orrs	r3, r2
 8005cb4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005cb6:	e03a      	b.n	8005d2e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	68db      	ldr	r3, [r3, #12]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d020      	beq.n	8005d02 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005cc0:	4b34      	ldr	r3, [pc, #208]	; (8005d94 <HAL_RCC_OscConfig+0x244>)
 8005cc2:	2201      	movs	r2, #1
 8005cc4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005cc6:	f7fe f99f 	bl	8004008 <HAL_GetTick>
 8005cca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ccc:	e008      	b.n	8005ce0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005cce:	f7fe f99b 	bl	8004008 <HAL_GetTick>
 8005cd2:	4602      	mov	r2, r0
 8005cd4:	693b      	ldr	r3, [r7, #16]
 8005cd6:	1ad3      	subs	r3, r2, r3
 8005cd8:	2b02      	cmp	r3, #2
 8005cda:	d901      	bls.n	8005ce0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005cdc:	2303      	movs	r3, #3
 8005cde:	e1a8      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005ce0:	4b2b      	ldr	r3, [pc, #172]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f003 0302 	and.w	r3, r3, #2
 8005ce8:	2b00      	cmp	r3, #0
 8005cea:	d0f0      	beq.n	8005cce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005cec:	4b28      	ldr	r3, [pc, #160]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	691b      	ldr	r3, [r3, #16]
 8005cf8:	00db      	lsls	r3, r3, #3
 8005cfa:	4925      	ldr	r1, [pc, #148]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005cfc:	4313      	orrs	r3, r2
 8005cfe:	600b      	str	r3, [r1, #0]
 8005d00:	e015      	b.n	8005d2e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005d02:	4b24      	ldr	r3, [pc, #144]	; (8005d94 <HAL_RCC_OscConfig+0x244>)
 8005d04:	2200      	movs	r2, #0
 8005d06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005d08:	f7fe f97e 	bl	8004008 <HAL_GetTick>
 8005d0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d0e:	e008      	b.n	8005d22 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005d10:	f7fe f97a 	bl	8004008 <HAL_GetTick>
 8005d14:	4602      	mov	r2, r0
 8005d16:	693b      	ldr	r3, [r7, #16]
 8005d18:	1ad3      	subs	r3, r2, r3
 8005d1a:	2b02      	cmp	r3, #2
 8005d1c:	d901      	bls.n	8005d22 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005d1e:	2303      	movs	r3, #3
 8005d20:	e187      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005d22:	4b1b      	ldr	r3, [pc, #108]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	f003 0302 	and.w	r3, r3, #2
 8005d2a:	2b00      	cmp	r3, #0
 8005d2c:	d1f0      	bne.n	8005d10 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	f003 0308 	and.w	r3, r3, #8
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d036      	beq.n	8005da8 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	695b      	ldr	r3, [r3, #20]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d016      	beq.n	8005d70 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005d42:	4b15      	ldr	r3, [pc, #84]	; (8005d98 <HAL_RCC_OscConfig+0x248>)
 8005d44:	2201      	movs	r2, #1
 8005d46:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005d48:	f7fe f95e 	bl	8004008 <HAL_GetTick>
 8005d4c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d4e:	e008      	b.n	8005d62 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d50:	f7fe f95a 	bl	8004008 <HAL_GetTick>
 8005d54:	4602      	mov	r2, r0
 8005d56:	693b      	ldr	r3, [r7, #16]
 8005d58:	1ad3      	subs	r3, r2, r3
 8005d5a:	2b02      	cmp	r3, #2
 8005d5c:	d901      	bls.n	8005d62 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005d5e:	2303      	movs	r3, #3
 8005d60:	e167      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005d62:	4b0b      	ldr	r3, [pc, #44]	; (8005d90 <HAL_RCC_OscConfig+0x240>)
 8005d64:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005d66:	f003 0302 	and.w	r3, r3, #2
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d0f0      	beq.n	8005d50 <HAL_RCC_OscConfig+0x200>
 8005d6e:	e01b      	b.n	8005da8 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005d70:	4b09      	ldr	r3, [pc, #36]	; (8005d98 <HAL_RCC_OscConfig+0x248>)
 8005d72:	2200      	movs	r2, #0
 8005d74:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005d76:	f7fe f947 	bl	8004008 <HAL_GetTick>
 8005d7a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d7c:	e00e      	b.n	8005d9c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005d7e:	f7fe f943 	bl	8004008 <HAL_GetTick>
 8005d82:	4602      	mov	r2, r0
 8005d84:	693b      	ldr	r3, [r7, #16]
 8005d86:	1ad3      	subs	r3, r2, r3
 8005d88:	2b02      	cmp	r3, #2
 8005d8a:	d907      	bls.n	8005d9c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005d8c:	2303      	movs	r3, #3
 8005d8e:	e150      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
 8005d90:	40023800 	.word	0x40023800
 8005d94:	42470000 	.word	0x42470000
 8005d98:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005d9c:	4b88      	ldr	r3, [pc, #544]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005d9e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005da0:	f003 0302 	and.w	r3, r3, #2
 8005da4:	2b00      	cmp	r3, #0
 8005da6:	d1ea      	bne.n	8005d7e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	681b      	ldr	r3, [r3, #0]
 8005dac:	f003 0304 	and.w	r3, r3, #4
 8005db0:	2b00      	cmp	r3, #0
 8005db2:	f000 8097 	beq.w	8005ee4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005db6:	2300      	movs	r3, #0
 8005db8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005dba:	4b81      	ldr	r3, [pc, #516]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005dbc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dbe:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d10f      	bne.n	8005de6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005dc6:	2300      	movs	r3, #0
 8005dc8:	60bb      	str	r3, [r7, #8]
 8005dca:	4b7d      	ldr	r3, [pc, #500]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dce:	4a7c      	ldr	r2, [pc, #496]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005dd0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005dd4:	6413      	str	r3, [r2, #64]	; 0x40
 8005dd6:	4b7a      	ldr	r3, [pc, #488]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005dd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dda:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005dde:	60bb      	str	r3, [r7, #8]
 8005de0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005de2:	2301      	movs	r3, #1
 8005de4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005de6:	4b77      	ldr	r3, [pc, #476]	; (8005fc4 <HAL_RCC_OscConfig+0x474>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d118      	bne.n	8005e24 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005df2:	4b74      	ldr	r3, [pc, #464]	; (8005fc4 <HAL_RCC_OscConfig+0x474>)
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	4a73      	ldr	r2, [pc, #460]	; (8005fc4 <HAL_RCC_OscConfig+0x474>)
 8005df8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005dfc:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005dfe:	f7fe f903 	bl	8004008 <HAL_GetTick>
 8005e02:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e04:	e008      	b.n	8005e18 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005e06:	f7fe f8ff 	bl	8004008 <HAL_GetTick>
 8005e0a:	4602      	mov	r2, r0
 8005e0c:	693b      	ldr	r3, [r7, #16]
 8005e0e:	1ad3      	subs	r3, r2, r3
 8005e10:	2b02      	cmp	r3, #2
 8005e12:	d901      	bls.n	8005e18 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005e14:	2303      	movs	r3, #3
 8005e16:	e10c      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005e18:	4b6a      	ldr	r3, [pc, #424]	; (8005fc4 <HAL_RCC_OscConfig+0x474>)
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d0f0      	beq.n	8005e06 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	689b      	ldr	r3, [r3, #8]
 8005e28:	2b01      	cmp	r3, #1
 8005e2a:	d106      	bne.n	8005e3a <HAL_RCC_OscConfig+0x2ea>
 8005e2c:	4b64      	ldr	r3, [pc, #400]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005e2e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e30:	4a63      	ldr	r2, [pc, #396]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005e32:	f043 0301 	orr.w	r3, r3, #1
 8005e36:	6713      	str	r3, [r2, #112]	; 0x70
 8005e38:	e01c      	b.n	8005e74 <HAL_RCC_OscConfig+0x324>
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	689b      	ldr	r3, [r3, #8]
 8005e3e:	2b05      	cmp	r3, #5
 8005e40:	d10c      	bne.n	8005e5c <HAL_RCC_OscConfig+0x30c>
 8005e42:	4b5f      	ldr	r3, [pc, #380]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005e44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e46:	4a5e      	ldr	r2, [pc, #376]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005e48:	f043 0304 	orr.w	r3, r3, #4
 8005e4c:	6713      	str	r3, [r2, #112]	; 0x70
 8005e4e:	4b5c      	ldr	r3, [pc, #368]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005e50:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e52:	4a5b      	ldr	r2, [pc, #364]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005e54:	f043 0301 	orr.w	r3, r3, #1
 8005e58:	6713      	str	r3, [r2, #112]	; 0x70
 8005e5a:	e00b      	b.n	8005e74 <HAL_RCC_OscConfig+0x324>
 8005e5c:	4b58      	ldr	r3, [pc, #352]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005e5e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e60:	4a57      	ldr	r2, [pc, #348]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005e62:	f023 0301 	bic.w	r3, r3, #1
 8005e66:	6713      	str	r3, [r2, #112]	; 0x70
 8005e68:	4b55      	ldr	r3, [pc, #340]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005e6a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e6c:	4a54      	ldr	r2, [pc, #336]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005e6e:	f023 0304 	bic.w	r3, r3, #4
 8005e72:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005e74:	687b      	ldr	r3, [r7, #4]
 8005e76:	689b      	ldr	r3, [r3, #8]
 8005e78:	2b00      	cmp	r3, #0
 8005e7a:	d015      	beq.n	8005ea8 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005e7c:	f7fe f8c4 	bl	8004008 <HAL_GetTick>
 8005e80:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e82:	e00a      	b.n	8005e9a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005e84:	f7fe f8c0 	bl	8004008 <HAL_GetTick>
 8005e88:	4602      	mov	r2, r0
 8005e8a:	693b      	ldr	r3, [r7, #16]
 8005e8c:	1ad3      	subs	r3, r2, r3
 8005e8e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005e92:	4293      	cmp	r3, r2
 8005e94:	d901      	bls.n	8005e9a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005e96:	2303      	movs	r3, #3
 8005e98:	e0cb      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005e9a:	4b49      	ldr	r3, [pc, #292]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005e9c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005e9e:	f003 0302 	and.w	r3, r3, #2
 8005ea2:	2b00      	cmp	r3, #0
 8005ea4:	d0ee      	beq.n	8005e84 <HAL_RCC_OscConfig+0x334>
 8005ea6:	e014      	b.n	8005ed2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ea8:	f7fe f8ae 	bl	8004008 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005eae:	e00a      	b.n	8005ec6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005eb0:	f7fe f8aa 	bl	8004008 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ebe:	4293      	cmp	r3, r2
 8005ec0:	d901      	bls.n	8005ec6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005ec2:	2303      	movs	r3, #3
 8005ec4:	e0b5      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005ec6:	4b3e      	ldr	r3, [pc, #248]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005ec8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005eca:	f003 0302 	and.w	r3, r3, #2
 8005ece:	2b00      	cmp	r3, #0
 8005ed0:	d1ee      	bne.n	8005eb0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005ed2:	7dfb      	ldrb	r3, [r7, #23]
 8005ed4:	2b01      	cmp	r3, #1
 8005ed6:	d105      	bne.n	8005ee4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005ed8:	4b39      	ldr	r3, [pc, #228]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005eda:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005edc:	4a38      	ldr	r2, [pc, #224]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005ede:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005ee2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	699b      	ldr	r3, [r3, #24]
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	f000 80a1 	beq.w	8006030 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005eee:	4b34      	ldr	r3, [pc, #208]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005ef0:	689b      	ldr	r3, [r3, #8]
 8005ef2:	f003 030c 	and.w	r3, r3, #12
 8005ef6:	2b08      	cmp	r3, #8
 8005ef8:	d05c      	beq.n	8005fb4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	699b      	ldr	r3, [r3, #24]
 8005efe:	2b02      	cmp	r3, #2
 8005f00:	d141      	bne.n	8005f86 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f02:	4b31      	ldr	r3, [pc, #196]	; (8005fc8 <HAL_RCC_OscConfig+0x478>)
 8005f04:	2200      	movs	r2, #0
 8005f06:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f08:	f7fe f87e 	bl	8004008 <HAL_GetTick>
 8005f0c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f0e:	e008      	b.n	8005f22 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f10:	f7fe f87a 	bl	8004008 <HAL_GetTick>
 8005f14:	4602      	mov	r2, r0
 8005f16:	693b      	ldr	r3, [r7, #16]
 8005f18:	1ad3      	subs	r3, r2, r3
 8005f1a:	2b02      	cmp	r3, #2
 8005f1c:	d901      	bls.n	8005f22 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005f1e:	2303      	movs	r3, #3
 8005f20:	e087      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f22:	4b27      	ldr	r3, [pc, #156]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005f24:	681b      	ldr	r3, [r3, #0]
 8005f26:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f2a:	2b00      	cmp	r3, #0
 8005f2c:	d1f0      	bne.n	8005f10 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005f2e:	687b      	ldr	r3, [r7, #4]
 8005f30:	69da      	ldr	r2, [r3, #28]
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	6a1b      	ldr	r3, [r3, #32]
 8005f36:	431a      	orrs	r2, r3
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f3c:	019b      	lsls	r3, r3, #6
 8005f3e:	431a      	orrs	r2, r3
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005f44:	085b      	lsrs	r3, r3, #1
 8005f46:	3b01      	subs	r3, #1
 8005f48:	041b      	lsls	r3, r3, #16
 8005f4a:	431a      	orrs	r2, r3
 8005f4c:	687b      	ldr	r3, [r7, #4]
 8005f4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005f50:	061b      	lsls	r3, r3, #24
 8005f52:	491b      	ldr	r1, [pc, #108]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005f54:	4313      	orrs	r3, r2
 8005f56:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005f58:	4b1b      	ldr	r3, [pc, #108]	; (8005fc8 <HAL_RCC_OscConfig+0x478>)
 8005f5a:	2201      	movs	r2, #1
 8005f5c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f5e:	f7fe f853 	bl	8004008 <HAL_GetTick>
 8005f62:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f64:	e008      	b.n	8005f78 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f66:	f7fe f84f 	bl	8004008 <HAL_GetTick>
 8005f6a:	4602      	mov	r2, r0
 8005f6c:	693b      	ldr	r3, [r7, #16]
 8005f6e:	1ad3      	subs	r3, r2, r3
 8005f70:	2b02      	cmp	r3, #2
 8005f72:	d901      	bls.n	8005f78 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005f74:	2303      	movs	r3, #3
 8005f76:	e05c      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005f78:	4b11      	ldr	r3, [pc, #68]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005f80:	2b00      	cmp	r3, #0
 8005f82:	d0f0      	beq.n	8005f66 <HAL_RCC_OscConfig+0x416>
 8005f84:	e054      	b.n	8006030 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005f86:	4b10      	ldr	r3, [pc, #64]	; (8005fc8 <HAL_RCC_OscConfig+0x478>)
 8005f88:	2200      	movs	r2, #0
 8005f8a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005f8c:	f7fe f83c 	bl	8004008 <HAL_GetTick>
 8005f90:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005f92:	e008      	b.n	8005fa6 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005f94:	f7fe f838 	bl	8004008 <HAL_GetTick>
 8005f98:	4602      	mov	r2, r0
 8005f9a:	693b      	ldr	r3, [r7, #16]
 8005f9c:	1ad3      	subs	r3, r2, r3
 8005f9e:	2b02      	cmp	r3, #2
 8005fa0:	d901      	bls.n	8005fa6 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005fa2:	2303      	movs	r3, #3
 8005fa4:	e045      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005fa6:	4b06      	ldr	r3, [pc, #24]	; (8005fc0 <HAL_RCC_OscConfig+0x470>)
 8005fa8:	681b      	ldr	r3, [r3, #0]
 8005faa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005fae:	2b00      	cmp	r3, #0
 8005fb0:	d1f0      	bne.n	8005f94 <HAL_RCC_OscConfig+0x444>
 8005fb2:	e03d      	b.n	8006030 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	699b      	ldr	r3, [r3, #24]
 8005fb8:	2b01      	cmp	r3, #1
 8005fba:	d107      	bne.n	8005fcc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005fbc:	2301      	movs	r3, #1
 8005fbe:	e038      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
 8005fc0:	40023800 	.word	0x40023800
 8005fc4:	40007000 	.word	0x40007000
 8005fc8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005fcc:	4b1b      	ldr	r3, [pc, #108]	; (800603c <HAL_RCC_OscConfig+0x4ec>)
 8005fce:	685b      	ldr	r3, [r3, #4]
 8005fd0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fd2:	687b      	ldr	r3, [r7, #4]
 8005fd4:	699b      	ldr	r3, [r3, #24]
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d028      	beq.n	800602c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005fda:	68fb      	ldr	r3, [r7, #12]
 8005fdc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005fe4:	429a      	cmp	r2, r3
 8005fe6:	d121      	bne.n	800602c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005fe8:	68fb      	ldr	r3, [r7, #12]
 8005fea:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005ff2:	429a      	cmp	r2, r3
 8005ff4:	d11a      	bne.n	800602c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005ff6:	68fa      	ldr	r2, [r7, #12]
 8005ff8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005ffc:	4013      	ands	r3, r2
 8005ffe:	687a      	ldr	r2, [r7, #4]
 8006000:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006002:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006004:	4293      	cmp	r3, r2
 8006006:	d111      	bne.n	800602c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006008:	68fb      	ldr	r3, [r7, #12]
 800600a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006012:	085b      	lsrs	r3, r3, #1
 8006014:	3b01      	subs	r3, #1
 8006016:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006018:	429a      	cmp	r2, r3
 800601a:	d107      	bne.n	800602c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800601c:	68fb      	ldr	r3, [r7, #12]
 800601e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006026:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006028:	429a      	cmp	r2, r3
 800602a:	d001      	beq.n	8006030 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 800602c:	2301      	movs	r3, #1
 800602e:	e000      	b.n	8006032 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8006030:	2300      	movs	r3, #0
}
 8006032:	4618      	mov	r0, r3
 8006034:	3718      	adds	r7, #24
 8006036:	46bd      	mov	sp, r7
 8006038:	bd80      	pop	{r7, pc}
 800603a:	bf00      	nop
 800603c:	40023800 	.word	0x40023800

08006040 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006040:	b580      	push	{r7, lr}
 8006042:	b084      	sub	sp, #16
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	2b00      	cmp	r3, #0
 800604e:	d101      	bne.n	8006054 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006050:	2301      	movs	r3, #1
 8006052:	e0cc      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006054:	4b68      	ldr	r3, [pc, #416]	; (80061f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	f003 0307 	and.w	r3, r3, #7
 800605c:	683a      	ldr	r2, [r7, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d90c      	bls.n	800607c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006062:	4b65      	ldr	r3, [pc, #404]	; (80061f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006064:	683a      	ldr	r2, [r7, #0]
 8006066:	b2d2      	uxtb	r2, r2
 8006068:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800606a:	4b63      	ldr	r3, [pc, #396]	; (80061f8 <HAL_RCC_ClockConfig+0x1b8>)
 800606c:	681b      	ldr	r3, [r3, #0]
 800606e:	f003 0307 	and.w	r3, r3, #7
 8006072:	683a      	ldr	r2, [r7, #0]
 8006074:	429a      	cmp	r2, r3
 8006076:	d001      	beq.n	800607c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006078:	2301      	movs	r3, #1
 800607a:	e0b8      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	f003 0302 	and.w	r3, r3, #2
 8006084:	2b00      	cmp	r3, #0
 8006086:	d020      	beq.n	80060ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 0304 	and.w	r3, r3, #4
 8006090:	2b00      	cmp	r3, #0
 8006092:	d005      	beq.n	80060a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006094:	4b59      	ldr	r3, [pc, #356]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 8006096:	689b      	ldr	r3, [r3, #8]
 8006098:	4a58      	ldr	r2, [pc, #352]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 800609a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800609e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	681b      	ldr	r3, [r3, #0]
 80060a4:	f003 0308 	and.w	r3, r3, #8
 80060a8:	2b00      	cmp	r3, #0
 80060aa:	d005      	beq.n	80060b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80060ac:	4b53      	ldr	r3, [pc, #332]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 80060ae:	689b      	ldr	r3, [r3, #8]
 80060b0:	4a52      	ldr	r2, [pc, #328]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 80060b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80060b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80060b8:	4b50      	ldr	r3, [pc, #320]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80060c0:	687b      	ldr	r3, [r7, #4]
 80060c2:	689b      	ldr	r3, [r3, #8]
 80060c4:	494d      	ldr	r1, [pc, #308]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 80060c6:	4313      	orrs	r3, r2
 80060c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f003 0301 	and.w	r3, r3, #1
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d044      	beq.n	8006160 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80060d6:	687b      	ldr	r3, [r7, #4]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2b01      	cmp	r3, #1
 80060dc:	d107      	bne.n	80060ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80060de:	4b47      	ldr	r3, [pc, #284]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d119      	bne.n	800611e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80060ea:	2301      	movs	r3, #1
 80060ec:	e07f      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060ee:	687b      	ldr	r3, [r7, #4]
 80060f0:	685b      	ldr	r3, [r3, #4]
 80060f2:	2b02      	cmp	r3, #2
 80060f4:	d003      	beq.n	80060fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80060fa:	2b03      	cmp	r3, #3
 80060fc:	d107      	bne.n	800610e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060fe:	4b3f      	ldr	r3, [pc, #252]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 8006100:	681b      	ldr	r3, [r3, #0]
 8006102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006106:	2b00      	cmp	r3, #0
 8006108:	d109      	bne.n	800611e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800610a:	2301      	movs	r3, #1
 800610c:	e06f      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800610e:	4b3b      	ldr	r3, [pc, #236]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 8006110:	681b      	ldr	r3, [r3, #0]
 8006112:	f003 0302 	and.w	r3, r3, #2
 8006116:	2b00      	cmp	r3, #0
 8006118:	d101      	bne.n	800611e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800611a:	2301      	movs	r3, #1
 800611c:	e067      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800611e:	4b37      	ldr	r3, [pc, #220]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 8006120:	689b      	ldr	r3, [r3, #8]
 8006122:	f023 0203 	bic.w	r2, r3, #3
 8006126:	687b      	ldr	r3, [r7, #4]
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	4934      	ldr	r1, [pc, #208]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 800612c:	4313      	orrs	r3, r2
 800612e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006130:	f7fd ff6a 	bl	8004008 <HAL_GetTick>
 8006134:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006136:	e00a      	b.n	800614e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006138:	f7fd ff66 	bl	8004008 <HAL_GetTick>
 800613c:	4602      	mov	r2, r0
 800613e:	68fb      	ldr	r3, [r7, #12]
 8006140:	1ad3      	subs	r3, r2, r3
 8006142:	f241 3288 	movw	r2, #5000	; 0x1388
 8006146:	4293      	cmp	r3, r2
 8006148:	d901      	bls.n	800614e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800614a:	2303      	movs	r3, #3
 800614c:	e04f      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800614e:	4b2b      	ldr	r3, [pc, #172]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 8006150:	689b      	ldr	r3, [r3, #8]
 8006152:	f003 020c 	and.w	r2, r3, #12
 8006156:	687b      	ldr	r3, [r7, #4]
 8006158:	685b      	ldr	r3, [r3, #4]
 800615a:	009b      	lsls	r3, r3, #2
 800615c:	429a      	cmp	r2, r3
 800615e:	d1eb      	bne.n	8006138 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006160:	4b25      	ldr	r3, [pc, #148]	; (80061f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	f003 0307 	and.w	r3, r3, #7
 8006168:	683a      	ldr	r2, [r7, #0]
 800616a:	429a      	cmp	r2, r3
 800616c:	d20c      	bcs.n	8006188 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800616e:	4b22      	ldr	r3, [pc, #136]	; (80061f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006170:	683a      	ldr	r2, [r7, #0]
 8006172:	b2d2      	uxtb	r2, r2
 8006174:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006176:	4b20      	ldr	r3, [pc, #128]	; (80061f8 <HAL_RCC_ClockConfig+0x1b8>)
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f003 0307 	and.w	r3, r3, #7
 800617e:	683a      	ldr	r2, [r7, #0]
 8006180:	429a      	cmp	r2, r3
 8006182:	d001      	beq.n	8006188 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006184:	2301      	movs	r3, #1
 8006186:	e032      	b.n	80061ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f003 0304 	and.w	r3, r3, #4
 8006190:	2b00      	cmp	r3, #0
 8006192:	d008      	beq.n	80061a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006194:	4b19      	ldr	r3, [pc, #100]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 8006196:	689b      	ldr	r3, [r3, #8]
 8006198:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	4916      	ldr	r1, [pc, #88]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 80061a2:	4313      	orrs	r3, r2
 80061a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80061a6:	687b      	ldr	r3, [r7, #4]
 80061a8:	681b      	ldr	r3, [r3, #0]
 80061aa:	f003 0308 	and.w	r3, r3, #8
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d009      	beq.n	80061c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80061b2:	4b12      	ldr	r3, [pc, #72]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 80061b4:	689b      	ldr	r3, [r3, #8]
 80061b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	691b      	ldr	r3, [r3, #16]
 80061be:	00db      	lsls	r3, r3, #3
 80061c0:	490e      	ldr	r1, [pc, #56]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 80061c2:	4313      	orrs	r3, r2
 80061c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80061c6:	f000 f821 	bl	800620c <HAL_RCC_GetSysClockFreq>
 80061ca:	4602      	mov	r2, r0
 80061cc:	4b0b      	ldr	r3, [pc, #44]	; (80061fc <HAL_RCC_ClockConfig+0x1bc>)
 80061ce:	689b      	ldr	r3, [r3, #8]
 80061d0:	091b      	lsrs	r3, r3, #4
 80061d2:	f003 030f 	and.w	r3, r3, #15
 80061d6:	490a      	ldr	r1, [pc, #40]	; (8006200 <HAL_RCC_ClockConfig+0x1c0>)
 80061d8:	5ccb      	ldrb	r3, [r1, r3]
 80061da:	fa22 f303 	lsr.w	r3, r2, r3
 80061de:	4a09      	ldr	r2, [pc, #36]	; (8006204 <HAL_RCC_ClockConfig+0x1c4>)
 80061e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80061e2:	4b09      	ldr	r3, [pc, #36]	; (8006208 <HAL_RCC_ClockConfig+0x1c8>)
 80061e4:	681b      	ldr	r3, [r3, #0]
 80061e6:	4618      	mov	r0, r3
 80061e8:	f7fd fd30 	bl	8003c4c <HAL_InitTick>

  return HAL_OK;
 80061ec:	2300      	movs	r3, #0
}
 80061ee:	4618      	mov	r0, r3
 80061f0:	3710      	adds	r7, #16
 80061f2:	46bd      	mov	sp, r7
 80061f4:	bd80      	pop	{r7, pc}
 80061f6:	bf00      	nop
 80061f8:	40023c00 	.word	0x40023c00
 80061fc:	40023800 	.word	0x40023800
 8006200:	0800ebe8 	.word	0x0800ebe8
 8006204:	20000024 	.word	0x20000024
 8006208:	20000028 	.word	0x20000028

0800620c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800620c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006210:	b090      	sub	sp, #64	; 0x40
 8006212:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006214:	2300      	movs	r3, #0
 8006216:	637b      	str	r3, [r7, #52]	; 0x34
 8006218:	2300      	movs	r3, #0
 800621a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800621c:	2300      	movs	r3, #0
 800621e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8006220:	2300      	movs	r3, #0
 8006222:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006224:	4b59      	ldr	r3, [pc, #356]	; (800638c <HAL_RCC_GetSysClockFreq+0x180>)
 8006226:	689b      	ldr	r3, [r3, #8]
 8006228:	f003 030c 	and.w	r3, r3, #12
 800622c:	2b08      	cmp	r3, #8
 800622e:	d00d      	beq.n	800624c <HAL_RCC_GetSysClockFreq+0x40>
 8006230:	2b08      	cmp	r3, #8
 8006232:	f200 80a1 	bhi.w	8006378 <HAL_RCC_GetSysClockFreq+0x16c>
 8006236:	2b00      	cmp	r3, #0
 8006238:	d002      	beq.n	8006240 <HAL_RCC_GetSysClockFreq+0x34>
 800623a:	2b04      	cmp	r3, #4
 800623c:	d003      	beq.n	8006246 <HAL_RCC_GetSysClockFreq+0x3a>
 800623e:	e09b      	b.n	8006378 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006240:	4b53      	ldr	r3, [pc, #332]	; (8006390 <HAL_RCC_GetSysClockFreq+0x184>)
 8006242:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8006244:	e09b      	b.n	800637e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006246:	4b53      	ldr	r3, [pc, #332]	; (8006394 <HAL_RCC_GetSysClockFreq+0x188>)
 8006248:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800624a:	e098      	b.n	800637e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800624c:	4b4f      	ldr	r3, [pc, #316]	; (800638c <HAL_RCC_GetSysClockFreq+0x180>)
 800624e:	685b      	ldr	r3, [r3, #4]
 8006250:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006254:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006256:	4b4d      	ldr	r3, [pc, #308]	; (800638c <HAL_RCC_GetSysClockFreq+0x180>)
 8006258:	685b      	ldr	r3, [r3, #4]
 800625a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800625e:	2b00      	cmp	r3, #0
 8006260:	d028      	beq.n	80062b4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006262:	4b4a      	ldr	r3, [pc, #296]	; (800638c <HAL_RCC_GetSysClockFreq+0x180>)
 8006264:	685b      	ldr	r3, [r3, #4]
 8006266:	099b      	lsrs	r3, r3, #6
 8006268:	2200      	movs	r2, #0
 800626a:	623b      	str	r3, [r7, #32]
 800626c:	627a      	str	r2, [r7, #36]	; 0x24
 800626e:	6a3b      	ldr	r3, [r7, #32]
 8006270:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8006274:	2100      	movs	r1, #0
 8006276:	4b47      	ldr	r3, [pc, #284]	; (8006394 <HAL_RCC_GetSysClockFreq+0x188>)
 8006278:	fb03 f201 	mul.w	r2, r3, r1
 800627c:	2300      	movs	r3, #0
 800627e:	fb00 f303 	mul.w	r3, r0, r3
 8006282:	4413      	add	r3, r2
 8006284:	4a43      	ldr	r2, [pc, #268]	; (8006394 <HAL_RCC_GetSysClockFreq+0x188>)
 8006286:	fba0 1202 	umull	r1, r2, r0, r2
 800628a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800628c:	460a      	mov	r2, r1
 800628e:	62ba      	str	r2, [r7, #40]	; 0x28
 8006290:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006292:	4413      	add	r3, r2
 8006294:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006296:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006298:	2200      	movs	r2, #0
 800629a:	61bb      	str	r3, [r7, #24]
 800629c:	61fa      	str	r2, [r7, #28]
 800629e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80062a2:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80062a6:	f7fa fccf 	bl	8000c48 <__aeabi_uldivmod>
 80062aa:	4602      	mov	r2, r0
 80062ac:	460b      	mov	r3, r1
 80062ae:	4613      	mov	r3, r2
 80062b0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80062b2:	e053      	b.n	800635c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80062b4:	4b35      	ldr	r3, [pc, #212]	; (800638c <HAL_RCC_GetSysClockFreq+0x180>)
 80062b6:	685b      	ldr	r3, [r3, #4]
 80062b8:	099b      	lsrs	r3, r3, #6
 80062ba:	2200      	movs	r2, #0
 80062bc:	613b      	str	r3, [r7, #16]
 80062be:	617a      	str	r2, [r7, #20]
 80062c0:	693b      	ldr	r3, [r7, #16]
 80062c2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 80062c6:	f04f 0b00 	mov.w	fp, #0
 80062ca:	4652      	mov	r2, sl
 80062cc:	465b      	mov	r3, fp
 80062ce:	f04f 0000 	mov.w	r0, #0
 80062d2:	f04f 0100 	mov.w	r1, #0
 80062d6:	0159      	lsls	r1, r3, #5
 80062d8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80062dc:	0150      	lsls	r0, r2, #5
 80062de:	4602      	mov	r2, r0
 80062e0:	460b      	mov	r3, r1
 80062e2:	ebb2 080a 	subs.w	r8, r2, sl
 80062e6:	eb63 090b 	sbc.w	r9, r3, fp
 80062ea:	f04f 0200 	mov.w	r2, #0
 80062ee:	f04f 0300 	mov.w	r3, #0
 80062f2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80062f6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80062fa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80062fe:	ebb2 0408 	subs.w	r4, r2, r8
 8006302:	eb63 0509 	sbc.w	r5, r3, r9
 8006306:	f04f 0200 	mov.w	r2, #0
 800630a:	f04f 0300 	mov.w	r3, #0
 800630e:	00eb      	lsls	r3, r5, #3
 8006310:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006314:	00e2      	lsls	r2, r4, #3
 8006316:	4614      	mov	r4, r2
 8006318:	461d      	mov	r5, r3
 800631a:	eb14 030a 	adds.w	r3, r4, sl
 800631e:	603b      	str	r3, [r7, #0]
 8006320:	eb45 030b 	adc.w	r3, r5, fp
 8006324:	607b      	str	r3, [r7, #4]
 8006326:	f04f 0200 	mov.w	r2, #0
 800632a:	f04f 0300 	mov.w	r3, #0
 800632e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8006332:	4629      	mov	r1, r5
 8006334:	028b      	lsls	r3, r1, #10
 8006336:	4621      	mov	r1, r4
 8006338:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800633c:	4621      	mov	r1, r4
 800633e:	028a      	lsls	r2, r1, #10
 8006340:	4610      	mov	r0, r2
 8006342:	4619      	mov	r1, r3
 8006344:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006346:	2200      	movs	r2, #0
 8006348:	60bb      	str	r3, [r7, #8]
 800634a:	60fa      	str	r2, [r7, #12]
 800634c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006350:	f7fa fc7a 	bl	8000c48 <__aeabi_uldivmod>
 8006354:	4602      	mov	r2, r0
 8006356:	460b      	mov	r3, r1
 8006358:	4613      	mov	r3, r2
 800635a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800635c:	4b0b      	ldr	r3, [pc, #44]	; (800638c <HAL_RCC_GetSysClockFreq+0x180>)
 800635e:	685b      	ldr	r3, [r3, #4]
 8006360:	0c1b      	lsrs	r3, r3, #16
 8006362:	f003 0303 	and.w	r3, r3, #3
 8006366:	3301      	adds	r3, #1
 8006368:	005b      	lsls	r3, r3, #1
 800636a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 800636c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800636e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006370:	fbb2 f3f3 	udiv	r3, r2, r3
 8006374:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8006376:	e002      	b.n	800637e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006378:	4b05      	ldr	r3, [pc, #20]	; (8006390 <HAL_RCC_GetSysClockFreq+0x184>)
 800637a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800637c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800637e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8006380:	4618      	mov	r0, r3
 8006382:	3740      	adds	r7, #64	; 0x40
 8006384:	46bd      	mov	sp, r7
 8006386:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800638a:	bf00      	nop
 800638c:	40023800 	.word	0x40023800
 8006390:	00f42400 	.word	0x00f42400
 8006394:	017d7840 	.word	0x017d7840

08006398 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006398:	b480      	push	{r7}
 800639a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800639c:	4b03      	ldr	r3, [pc, #12]	; (80063ac <HAL_RCC_GetHCLKFreq+0x14>)
 800639e:	681b      	ldr	r3, [r3, #0]
}
 80063a0:	4618      	mov	r0, r3
 80063a2:	46bd      	mov	sp, r7
 80063a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063a8:	4770      	bx	lr
 80063aa:	bf00      	nop
 80063ac:	20000024 	.word	0x20000024

080063b0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80063b4:	f7ff fff0 	bl	8006398 <HAL_RCC_GetHCLKFreq>
 80063b8:	4602      	mov	r2, r0
 80063ba:	4b05      	ldr	r3, [pc, #20]	; (80063d0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80063bc:	689b      	ldr	r3, [r3, #8]
 80063be:	0a9b      	lsrs	r3, r3, #10
 80063c0:	f003 0307 	and.w	r3, r3, #7
 80063c4:	4903      	ldr	r1, [pc, #12]	; (80063d4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80063c6:	5ccb      	ldrb	r3, [r1, r3]
 80063c8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063cc:	4618      	mov	r0, r3
 80063ce:	bd80      	pop	{r7, pc}
 80063d0:	40023800 	.word	0x40023800
 80063d4:	0800ebf8 	.word	0x0800ebf8

080063d8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80063d8:	b580      	push	{r7, lr}
 80063da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 80063dc:	f7ff ffdc 	bl	8006398 <HAL_RCC_GetHCLKFreq>
 80063e0:	4602      	mov	r2, r0
 80063e2:	4b05      	ldr	r3, [pc, #20]	; (80063f8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80063e4:	689b      	ldr	r3, [r3, #8]
 80063e6:	0b5b      	lsrs	r3, r3, #13
 80063e8:	f003 0307 	and.w	r3, r3, #7
 80063ec:	4903      	ldr	r1, [pc, #12]	; (80063fc <HAL_RCC_GetPCLK2Freq+0x24>)
 80063ee:	5ccb      	ldrb	r3, [r1, r3]
 80063f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80063f4:	4618      	mov	r0, r3
 80063f6:	bd80      	pop	{r7, pc}
 80063f8:	40023800 	.word	0x40023800
 80063fc:	0800ebf8 	.word	0x0800ebf8

08006400 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8006400:	b480      	push	{r7}
 8006402:	b083      	sub	sp, #12
 8006404:	af00      	add	r7, sp, #0
 8006406:	6078      	str	r0, [r7, #4]
 8006408:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	220f      	movs	r2, #15
 800640e:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8006410:	4b12      	ldr	r3, [pc, #72]	; (800645c <HAL_RCC_GetClockConfig+0x5c>)
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	f003 0203 	and.w	r2, r3, #3
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800641c:	4b0f      	ldr	r3, [pc, #60]	; (800645c <HAL_RCC_GetClockConfig+0x5c>)
 800641e:	689b      	ldr	r3, [r3, #8]
 8006420:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8006424:	687b      	ldr	r3, [r7, #4]
 8006426:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8006428:	4b0c      	ldr	r3, [pc, #48]	; (800645c <HAL_RCC_GetClockConfig+0x5c>)
 800642a:	689b      	ldr	r3, [r3, #8]
 800642c:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8006434:	4b09      	ldr	r3, [pc, #36]	; (800645c <HAL_RCC_GetClockConfig+0x5c>)
 8006436:	689b      	ldr	r3, [r3, #8]
 8006438:	08db      	lsrs	r3, r3, #3
 800643a:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8006442:	4b07      	ldr	r3, [pc, #28]	; (8006460 <HAL_RCC_GetClockConfig+0x60>)
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f003 0207 	and.w	r2, r3, #7
 800644a:	683b      	ldr	r3, [r7, #0]
 800644c:	601a      	str	r2, [r3, #0]
}
 800644e:	bf00      	nop
 8006450:	370c      	adds	r7, #12
 8006452:	46bd      	mov	sp, r7
 8006454:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006458:	4770      	bx	lr
 800645a:	bf00      	nop
 800645c:	40023800 	.word	0x40023800
 8006460:	40023c00 	.word	0x40023c00

08006464 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e041      	b.n	80064fa <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fd fa5c 	bl	8003948 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2202      	movs	r2, #2
 8006494:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681a      	ldr	r2, [r3, #0]
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	3304      	adds	r3, #4
 80064a0:	4619      	mov	r1, r3
 80064a2:	4610      	mov	r0, r2
 80064a4:	f000 fe08 	bl	80070b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	2201      	movs	r2, #1
 80064ac:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064b0:	687b      	ldr	r3, [r7, #4]
 80064b2:	2201      	movs	r2, #1
 80064b4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	2201      	movs	r2, #1
 80064bc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	2201      	movs	r2, #1
 80064c4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	2201      	movs	r2, #1
 80064cc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80064d0:	687b      	ldr	r3, [r7, #4]
 80064d2:	2201      	movs	r2, #1
 80064d4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	2201      	movs	r2, #1
 80064dc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	2201      	movs	r2, #1
 80064e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80064e8:	687b      	ldr	r3, [r7, #4]
 80064ea:	2201      	movs	r2, #1
 80064ec:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	2201      	movs	r2, #1
 80064f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80064f8:	2300      	movs	r3, #0
}
 80064fa:	4618      	mov	r0, r3
 80064fc:	3708      	adds	r7, #8
 80064fe:	46bd      	mov	sp, r7
 8006500:	bd80      	pop	{r7, pc}
	...

08006504 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8006504:	b480      	push	{r7}
 8006506:	b085      	sub	sp, #20
 8006508:	af00      	add	r7, sp, #0
 800650a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006512:	b2db      	uxtb	r3, r3
 8006514:	2b01      	cmp	r3, #1
 8006516:	d001      	beq.n	800651c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006518:	2301      	movs	r3, #1
 800651a:	e04e      	b.n	80065ba <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	2202      	movs	r2, #2
 8006520:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	68da      	ldr	r2, [r3, #12]
 800652a:	687b      	ldr	r3, [r7, #4]
 800652c:	681b      	ldr	r3, [r3, #0]
 800652e:	f042 0201 	orr.w	r2, r2, #1
 8006532:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	4a23      	ldr	r2, [pc, #140]	; (80065c8 <HAL_TIM_Base_Start_IT+0xc4>)
 800653a:	4293      	cmp	r3, r2
 800653c:	d022      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006546:	d01d      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a1f      	ldr	r2, [pc, #124]	; (80065cc <HAL_TIM_Base_Start_IT+0xc8>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d018      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	4a1e      	ldr	r2, [pc, #120]	; (80065d0 <HAL_TIM_Base_Start_IT+0xcc>)
 8006558:	4293      	cmp	r3, r2
 800655a:	d013      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	4a1c      	ldr	r2, [pc, #112]	; (80065d4 <HAL_TIM_Base_Start_IT+0xd0>)
 8006562:	4293      	cmp	r3, r2
 8006564:	d00e      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	4a1b      	ldr	r2, [pc, #108]	; (80065d8 <HAL_TIM_Base_Start_IT+0xd4>)
 800656c:	4293      	cmp	r3, r2
 800656e:	d009      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	681b      	ldr	r3, [r3, #0]
 8006574:	4a19      	ldr	r2, [pc, #100]	; (80065dc <HAL_TIM_Base_Start_IT+0xd8>)
 8006576:	4293      	cmp	r3, r2
 8006578:	d004      	beq.n	8006584 <HAL_TIM_Base_Start_IT+0x80>
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	681b      	ldr	r3, [r3, #0]
 800657e:	4a18      	ldr	r2, [pc, #96]	; (80065e0 <HAL_TIM_Base_Start_IT+0xdc>)
 8006580:	4293      	cmp	r3, r2
 8006582:	d111      	bne.n	80065a8 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	689b      	ldr	r3, [r3, #8]
 800658a:	f003 0307 	and.w	r3, r3, #7
 800658e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006590:	68fb      	ldr	r3, [r7, #12]
 8006592:	2b06      	cmp	r3, #6
 8006594:	d010      	beq.n	80065b8 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8006596:	687b      	ldr	r3, [r7, #4]
 8006598:	681b      	ldr	r3, [r3, #0]
 800659a:	681a      	ldr	r2, [r3, #0]
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	f042 0201 	orr.w	r2, r2, #1
 80065a4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80065a6:	e007      	b.n	80065b8 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80065a8:	687b      	ldr	r3, [r7, #4]
 80065aa:	681b      	ldr	r3, [r3, #0]
 80065ac:	681a      	ldr	r2, [r3, #0]
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	681b      	ldr	r3, [r3, #0]
 80065b2:	f042 0201 	orr.w	r2, r2, #1
 80065b6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80065b8:	2300      	movs	r3, #0
}
 80065ba:	4618      	mov	r0, r3
 80065bc:	3714      	adds	r7, #20
 80065be:	46bd      	mov	sp, r7
 80065c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c4:	4770      	bx	lr
 80065c6:	bf00      	nop
 80065c8:	40010000 	.word	0x40010000
 80065cc:	40000400 	.word	0x40000400
 80065d0:	40000800 	.word	0x40000800
 80065d4:	40000c00 	.word	0x40000c00
 80065d8:	40010400 	.word	0x40010400
 80065dc:	40014000 	.word	0x40014000
 80065e0:	40001800 	.word	0x40001800

080065e4 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80065e4:	b580      	push	{r7, lr}
 80065e6:	b082      	sub	sp, #8
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2b00      	cmp	r3, #0
 80065f0:	d101      	bne.n	80065f6 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80065f2:	2301      	movs	r3, #1
 80065f4:	e041      	b.n	800667a <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065fc:	b2db      	uxtb	r3, r3
 80065fe:	2b00      	cmp	r3, #0
 8006600:	d106      	bne.n	8006610 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	2200      	movs	r2, #0
 8006606:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800660a:	6878      	ldr	r0, [r7, #4]
 800660c:	f000 f839 	bl	8006682 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2202      	movs	r2, #2
 8006614:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006618:	687b      	ldr	r3, [r7, #4]
 800661a:	681a      	ldr	r2, [r3, #0]
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	3304      	adds	r3, #4
 8006620:	4619      	mov	r1, r3
 8006622:	4610      	mov	r0, r2
 8006624:	f000 fd48 	bl	80070b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2201      	movs	r2, #1
 800662c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	2201      	movs	r2, #1
 8006634:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2201      	movs	r2, #1
 800663c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	2201      	movs	r2, #1
 8006644:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	2201      	movs	r2, #1
 800664c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2201      	movs	r2, #1
 8006654:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	2201      	movs	r2, #1
 800665c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006660:	687b      	ldr	r3, [r7, #4]
 8006662:	2201      	movs	r2, #1
 8006664:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	2201      	movs	r2, #1
 800666c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006670:	687b      	ldr	r3, [r7, #4]
 8006672:	2201      	movs	r2, #1
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006678:	2300      	movs	r3, #0
}
 800667a:	4618      	mov	r0, r3
 800667c:	3708      	adds	r7, #8
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}

08006682 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8006682:	b480      	push	{r7}
 8006684:	b083      	sub	sp, #12
 8006686:	af00      	add	r7, sp, #0
 8006688:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800668a:	bf00      	nop
 800668c:	370c      	adds	r7, #12
 800668e:	46bd      	mov	sp, r7
 8006690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006694:	4770      	bx	lr
	...

08006698 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006698:	b580      	push	{r7, lr}
 800669a:	b084      	sub	sp, #16
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80066a2:	683b      	ldr	r3, [r7, #0]
 80066a4:	2b00      	cmp	r3, #0
 80066a6:	d109      	bne.n	80066bc <HAL_TIM_PWM_Start+0x24>
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ae:	b2db      	uxtb	r3, r3
 80066b0:	2b01      	cmp	r3, #1
 80066b2:	bf14      	ite	ne
 80066b4:	2301      	movne	r3, #1
 80066b6:	2300      	moveq	r3, #0
 80066b8:	b2db      	uxtb	r3, r3
 80066ba:	e022      	b.n	8006702 <HAL_TIM_PWM_Start+0x6a>
 80066bc:	683b      	ldr	r3, [r7, #0]
 80066be:	2b04      	cmp	r3, #4
 80066c0:	d109      	bne.n	80066d6 <HAL_TIM_PWM_Start+0x3e>
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80066c8:	b2db      	uxtb	r3, r3
 80066ca:	2b01      	cmp	r3, #1
 80066cc:	bf14      	ite	ne
 80066ce:	2301      	movne	r3, #1
 80066d0:	2300      	moveq	r3, #0
 80066d2:	b2db      	uxtb	r3, r3
 80066d4:	e015      	b.n	8006702 <HAL_TIM_PWM_Start+0x6a>
 80066d6:	683b      	ldr	r3, [r7, #0]
 80066d8:	2b08      	cmp	r3, #8
 80066da:	d109      	bne.n	80066f0 <HAL_TIM_PWM_Start+0x58>
 80066dc:	687b      	ldr	r3, [r7, #4]
 80066de:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80066e2:	b2db      	uxtb	r3, r3
 80066e4:	2b01      	cmp	r3, #1
 80066e6:	bf14      	ite	ne
 80066e8:	2301      	movne	r3, #1
 80066ea:	2300      	moveq	r3, #0
 80066ec:	b2db      	uxtb	r3, r3
 80066ee:	e008      	b.n	8006702 <HAL_TIM_PWM_Start+0x6a>
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80066f6:	b2db      	uxtb	r3, r3
 80066f8:	2b01      	cmp	r3, #1
 80066fa:	bf14      	ite	ne
 80066fc:	2301      	movne	r3, #1
 80066fe:	2300      	moveq	r3, #0
 8006700:	b2db      	uxtb	r3, r3
 8006702:	2b00      	cmp	r3, #0
 8006704:	d001      	beq.n	800670a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8006706:	2301      	movs	r3, #1
 8006708:	e07c      	b.n	8006804 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 800670a:	683b      	ldr	r3, [r7, #0]
 800670c:	2b00      	cmp	r3, #0
 800670e:	d104      	bne.n	800671a <HAL_TIM_PWM_Start+0x82>
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	2202      	movs	r2, #2
 8006714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006718:	e013      	b.n	8006742 <HAL_TIM_PWM_Start+0xaa>
 800671a:	683b      	ldr	r3, [r7, #0]
 800671c:	2b04      	cmp	r3, #4
 800671e:	d104      	bne.n	800672a <HAL_TIM_PWM_Start+0x92>
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	2202      	movs	r2, #2
 8006724:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8006728:	e00b      	b.n	8006742 <HAL_TIM_PWM_Start+0xaa>
 800672a:	683b      	ldr	r3, [r7, #0]
 800672c:	2b08      	cmp	r3, #8
 800672e:	d104      	bne.n	800673a <HAL_TIM_PWM_Start+0xa2>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	2202      	movs	r2, #2
 8006734:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006738:	e003      	b.n	8006742 <HAL_TIM_PWM_Start+0xaa>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	2202      	movs	r2, #2
 800673e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8006742:	687b      	ldr	r3, [r7, #4]
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	2201      	movs	r2, #1
 8006748:	6839      	ldr	r1, [r7, #0]
 800674a:	4618      	mov	r0, r3
 800674c:	f000 ff9e 	bl	800768c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4a2d      	ldr	r2, [pc, #180]	; (800680c <HAL_TIM_PWM_Start+0x174>)
 8006756:	4293      	cmp	r3, r2
 8006758:	d004      	beq.n	8006764 <HAL_TIM_PWM_Start+0xcc>
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	681b      	ldr	r3, [r3, #0]
 800675e:	4a2c      	ldr	r2, [pc, #176]	; (8006810 <HAL_TIM_PWM_Start+0x178>)
 8006760:	4293      	cmp	r3, r2
 8006762:	d101      	bne.n	8006768 <HAL_TIM_PWM_Start+0xd0>
 8006764:	2301      	movs	r3, #1
 8006766:	e000      	b.n	800676a <HAL_TIM_PWM_Start+0xd2>
 8006768:	2300      	movs	r3, #0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d007      	beq.n	800677e <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	681b      	ldr	r3, [r3, #0]
 8006772:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800677c:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	4a22      	ldr	r2, [pc, #136]	; (800680c <HAL_TIM_PWM_Start+0x174>)
 8006784:	4293      	cmp	r3, r2
 8006786:	d022      	beq.n	80067ce <HAL_TIM_PWM_Start+0x136>
 8006788:	687b      	ldr	r3, [r7, #4]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006790:	d01d      	beq.n	80067ce <HAL_TIM_PWM_Start+0x136>
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	4a1f      	ldr	r2, [pc, #124]	; (8006814 <HAL_TIM_PWM_Start+0x17c>)
 8006798:	4293      	cmp	r3, r2
 800679a:	d018      	beq.n	80067ce <HAL_TIM_PWM_Start+0x136>
 800679c:	687b      	ldr	r3, [r7, #4]
 800679e:	681b      	ldr	r3, [r3, #0]
 80067a0:	4a1d      	ldr	r2, [pc, #116]	; (8006818 <HAL_TIM_PWM_Start+0x180>)
 80067a2:	4293      	cmp	r3, r2
 80067a4:	d013      	beq.n	80067ce <HAL_TIM_PWM_Start+0x136>
 80067a6:	687b      	ldr	r3, [r7, #4]
 80067a8:	681b      	ldr	r3, [r3, #0]
 80067aa:	4a1c      	ldr	r2, [pc, #112]	; (800681c <HAL_TIM_PWM_Start+0x184>)
 80067ac:	4293      	cmp	r3, r2
 80067ae:	d00e      	beq.n	80067ce <HAL_TIM_PWM_Start+0x136>
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	4a16      	ldr	r2, [pc, #88]	; (8006810 <HAL_TIM_PWM_Start+0x178>)
 80067b6:	4293      	cmp	r3, r2
 80067b8:	d009      	beq.n	80067ce <HAL_TIM_PWM_Start+0x136>
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	4a18      	ldr	r2, [pc, #96]	; (8006820 <HAL_TIM_PWM_Start+0x188>)
 80067c0:	4293      	cmp	r3, r2
 80067c2:	d004      	beq.n	80067ce <HAL_TIM_PWM_Start+0x136>
 80067c4:	687b      	ldr	r3, [r7, #4]
 80067c6:	681b      	ldr	r3, [r3, #0]
 80067c8:	4a16      	ldr	r2, [pc, #88]	; (8006824 <HAL_TIM_PWM_Start+0x18c>)
 80067ca:	4293      	cmp	r3, r2
 80067cc:	d111      	bne.n	80067f2 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	681b      	ldr	r3, [r3, #0]
 80067d2:	689b      	ldr	r3, [r3, #8]
 80067d4:	f003 0307 	and.w	r3, r3, #7
 80067d8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067da:	68fb      	ldr	r3, [r7, #12]
 80067dc:	2b06      	cmp	r3, #6
 80067de:	d010      	beq.n	8006802 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 80067e0:	687b      	ldr	r3, [r7, #4]
 80067e2:	681b      	ldr	r3, [r3, #0]
 80067e4:	681a      	ldr	r2, [r3, #0]
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	681b      	ldr	r3, [r3, #0]
 80067ea:	f042 0201 	orr.w	r2, r2, #1
 80067ee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80067f0:	e007      	b.n	8006802 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	681a      	ldr	r2, [r3, #0]
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	f042 0201 	orr.w	r2, r2, #1
 8006800:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8006802:	2300      	movs	r3, #0
}
 8006804:	4618      	mov	r0, r3
 8006806:	3710      	adds	r7, #16
 8006808:	46bd      	mov	sp, r7
 800680a:	bd80      	pop	{r7, pc}
 800680c:	40010000 	.word	0x40010000
 8006810:	40010400 	.word	0x40010400
 8006814:	40000400 	.word	0x40000400
 8006818:	40000800 	.word	0x40000800
 800681c:	40000c00 	.word	0x40000c00
 8006820:	40014000 	.word	0x40014000
 8006824:	40001800 	.word	0x40001800

08006828 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8006828:	b580      	push	{r7, lr}
 800682a:	b086      	sub	sp, #24
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
 8006830:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	2b00      	cmp	r3, #0
 8006836:	d101      	bne.n	800683c <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8006838:	2301      	movs	r3, #1
 800683a:	e097      	b.n	800696c <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006842:	b2db      	uxtb	r3, r3
 8006844:	2b00      	cmp	r3, #0
 8006846:	d106      	bne.n	8006856 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006848:	687b      	ldr	r3, [r7, #4]
 800684a:	2200      	movs	r2, #0
 800684c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8006850:	6878      	ldr	r0, [r7, #4]
 8006852:	f7fd f8d7 	bl	8003a04 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2202      	movs	r2, #2
 800685a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800685e:	687b      	ldr	r3, [r7, #4]
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	689b      	ldr	r3, [r3, #8]
 8006864:	687a      	ldr	r2, [r7, #4]
 8006866:	6812      	ldr	r2, [r2, #0]
 8006868:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800686c:	f023 0307 	bic.w	r3, r3, #7
 8006870:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006872:	687b      	ldr	r3, [r7, #4]
 8006874:	681a      	ldr	r2, [r3, #0]
 8006876:	687b      	ldr	r3, [r7, #4]
 8006878:	3304      	adds	r3, #4
 800687a:	4619      	mov	r1, r3
 800687c:	4610      	mov	r0, r2
 800687e:	f000 fc1b 	bl	80070b8 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	689b      	ldr	r3, [r3, #8]
 8006888:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	699b      	ldr	r3, [r3, #24]
 8006890:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	681b      	ldr	r3, [r3, #0]
 8006896:	6a1b      	ldr	r3, [r3, #32]
 8006898:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800689a:	683b      	ldr	r3, [r7, #0]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	697a      	ldr	r2, [r7, #20]
 80068a0:	4313      	orrs	r3, r2
 80068a2:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80068a4:	693b      	ldr	r3, [r7, #16]
 80068a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068aa:	f023 0303 	bic.w	r3, r3, #3
 80068ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80068b0:	683b      	ldr	r3, [r7, #0]
 80068b2:	689a      	ldr	r2, [r3, #8]
 80068b4:	683b      	ldr	r3, [r7, #0]
 80068b6:	699b      	ldr	r3, [r3, #24]
 80068b8:	021b      	lsls	r3, r3, #8
 80068ba:	4313      	orrs	r3, r2
 80068bc:	693a      	ldr	r2, [r7, #16]
 80068be:	4313      	orrs	r3, r2
 80068c0:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80068c8:	f023 030c 	bic.w	r3, r3, #12
 80068cc:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80068ce:	693b      	ldr	r3, [r7, #16]
 80068d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80068d4:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80068d8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 80068da:	683b      	ldr	r3, [r7, #0]
 80068dc:	68da      	ldr	r2, [r3, #12]
 80068de:	683b      	ldr	r3, [r7, #0]
 80068e0:	69db      	ldr	r3, [r3, #28]
 80068e2:	021b      	lsls	r3, r3, #8
 80068e4:	4313      	orrs	r3, r2
 80068e6:	693a      	ldr	r2, [r7, #16]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 80068ec:	683b      	ldr	r3, [r7, #0]
 80068ee:	691b      	ldr	r3, [r3, #16]
 80068f0:	011a      	lsls	r2, r3, #4
 80068f2:	683b      	ldr	r3, [r7, #0]
 80068f4:	6a1b      	ldr	r3, [r3, #32]
 80068f6:	031b      	lsls	r3, r3, #12
 80068f8:	4313      	orrs	r3, r2
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006906:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006908:	68fb      	ldr	r3, [r7, #12]
 800690a:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800690e:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	685a      	ldr	r2, [r3, #4]
 8006914:	683b      	ldr	r3, [r7, #0]
 8006916:	695b      	ldr	r3, [r3, #20]
 8006918:	011b      	lsls	r3, r3, #4
 800691a:	4313      	orrs	r3, r2
 800691c:	68fa      	ldr	r2, [r7, #12]
 800691e:	4313      	orrs	r3, r2
 8006920:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	681b      	ldr	r3, [r3, #0]
 8006926:	697a      	ldr	r2, [r7, #20]
 8006928:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800692a:	687b      	ldr	r3, [r7, #4]
 800692c:	681b      	ldr	r3, [r3, #0]
 800692e:	693a      	ldr	r2, [r7, #16]
 8006930:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006932:	687b      	ldr	r3, [r7, #4]
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	68fa      	ldr	r2, [r7, #12]
 8006938:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800693a:	687b      	ldr	r3, [r7, #4]
 800693c:	2201      	movs	r2, #1
 800693e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006942:	687b      	ldr	r3, [r7, #4]
 8006944:	2201      	movs	r2, #1
 8006946:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	2201      	movs	r2, #1
 800694e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006952:	687b      	ldr	r3, [r7, #4]
 8006954:	2201      	movs	r2, #1
 8006956:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 800695a:	687b      	ldr	r3, [r7, #4]
 800695c:	2201      	movs	r2, #1
 800695e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006962:	687b      	ldr	r3, [r7, #4]
 8006964:	2201      	movs	r2, #1
 8006966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800696a:	2300      	movs	r3, #0
}
 800696c:	4618      	mov	r0, r3
 800696e:	3718      	adds	r7, #24
 8006970:	46bd      	mov	sp, r7
 8006972:	bd80      	pop	{r7, pc}

08006974 <HAL_TIM_Encoder_Start_IT>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start_IT(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006974:	b580      	push	{r7, lr}
 8006976:	b084      	sub	sp, #16
 8006978:	af00      	add	r7, sp, #0
 800697a:	6078      	str	r0, [r7, #4]
 800697c:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800697e:	687b      	ldr	r3, [r7, #4]
 8006980:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006984:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006986:	687b      	ldr	r3, [r7, #4]
 8006988:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 800698c:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006994:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 800699c:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800699e:	683b      	ldr	r3, [r7, #0]
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	d110      	bne.n	80069c6 <HAL_TIM_Encoder_Start_IT+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069a4:	7bfb      	ldrb	r3, [r7, #15]
 80069a6:	2b01      	cmp	r3, #1
 80069a8:	d102      	bne.n	80069b0 <HAL_TIM_Encoder_Start_IT+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 80069aa:	7b7b      	ldrb	r3, [r7, #13]
 80069ac:	2b01      	cmp	r3, #1
 80069ae:	d001      	beq.n	80069b4 <HAL_TIM_Encoder_Start_IT+0x40>
    {
      return HAL_ERROR;
 80069b0:	2301      	movs	r3, #1
 80069b2:	e089      	b.n	8006ac8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	2202      	movs	r2, #2
 80069b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	2202      	movs	r2, #2
 80069c0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80069c4:	e031      	b.n	8006a2a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 80069c6:	683b      	ldr	r3, [r7, #0]
 80069c8:	2b04      	cmp	r3, #4
 80069ca:	d110      	bne.n	80069ee <HAL_TIM_Encoder_Start_IT+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069cc:	7bbb      	ldrb	r3, [r7, #14]
 80069ce:	2b01      	cmp	r3, #1
 80069d0:	d102      	bne.n	80069d8 <HAL_TIM_Encoder_Start_IT+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80069d2:	7b3b      	ldrb	r3, [r7, #12]
 80069d4:	2b01      	cmp	r3, #1
 80069d6:	d001      	beq.n	80069dc <HAL_TIM_Encoder_Start_IT+0x68>
    {
      return HAL_ERROR;
 80069d8:	2301      	movs	r3, #1
 80069da:	e075      	b.n	8006ac8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	2202      	movs	r2, #2
 80069e0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2202      	movs	r2, #2
 80069e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80069ec:	e01d      	b.n	8006a2a <HAL_TIM_Encoder_Start_IT+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069ee:	7bfb      	ldrb	r3, [r7, #15]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d108      	bne.n	8006a06 <HAL_TIM_Encoder_Start_IT+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80069f4:	7bbb      	ldrb	r3, [r7, #14]
 80069f6:	2b01      	cmp	r3, #1
 80069f8:	d105      	bne.n	8006a06 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80069fa:	7b7b      	ldrb	r3, [r7, #13]
 80069fc:	2b01      	cmp	r3, #1
 80069fe:	d102      	bne.n	8006a06 <HAL_TIM_Encoder_Start_IT+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006a00:	7b3b      	ldrb	r3, [r7, #12]
 8006a02:	2b01      	cmp	r3, #1
 8006a04:	d001      	beq.n	8006a0a <HAL_TIM_Encoder_Start_IT+0x96>
    {
      return HAL_ERROR;
 8006a06:	2301      	movs	r3, #1
 8006a08:	e05e      	b.n	8006ac8 <HAL_TIM_Encoder_Start_IT+0x154>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	2202      	movs	r2, #2
 8006a0e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	2202      	movs	r2, #2
 8006a16:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	2202      	movs	r2, #2
 8006a1e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006a22:	687b      	ldr	r3, [r7, #4]
 8006a24:	2202      	movs	r2, #2
 8006a26:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  /* Enable the capture compare Interrupts 1 and/or 2 */
  switch (Channel)
 8006a2a:	683b      	ldr	r3, [r7, #0]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d003      	beq.n	8006a38 <HAL_TIM_Encoder_Start_IT+0xc4>
 8006a30:	683b      	ldr	r3, [r7, #0]
 8006a32:	2b04      	cmp	r3, #4
 8006a34:	d010      	beq.n	8006a58 <HAL_TIM_Encoder_Start_IT+0xe4>
 8006a36:	e01f      	b.n	8006a78 <HAL_TIM_Encoder_Start_IT+0x104>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a38:	687b      	ldr	r3, [r7, #4]
 8006a3a:	681b      	ldr	r3, [r3, #0]
 8006a3c:	2201      	movs	r2, #1
 8006a3e:	2100      	movs	r1, #0
 8006a40:	4618      	mov	r0, r3
 8006a42:	f000 fe23 	bl	800768c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	681b      	ldr	r3, [r3, #0]
 8006a4a:	68da      	ldr	r2, [r3, #12]
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f042 0202 	orr.w	r2, r2, #2
 8006a54:	60da      	str	r2, [r3, #12]
      break;
 8006a56:	e02e      	b.n	8006ab6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	2201      	movs	r2, #1
 8006a5e:	2104      	movs	r1, #4
 8006a60:	4618      	mov	r0, r3
 8006a62:	f000 fe13 	bl	800768c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	681b      	ldr	r3, [r3, #0]
 8006a6a:	68da      	ldr	r2, [r3, #12]
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	f042 0204 	orr.w	r2, r2, #4
 8006a74:	60da      	str	r2, [r3, #12]
      break;
 8006a76:	e01e      	b.n	8006ab6 <HAL_TIM_Encoder_Start_IT+0x142>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	2201      	movs	r2, #1
 8006a7e:	2100      	movs	r1, #0
 8006a80:	4618      	mov	r0, r3
 8006a82:	f000 fe03 	bl	800768c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006a86:	687b      	ldr	r3, [r7, #4]
 8006a88:	681b      	ldr	r3, [r3, #0]
 8006a8a:	2201      	movs	r2, #1
 8006a8c:	2104      	movs	r1, #4
 8006a8e:	4618      	mov	r0, r3
 8006a90:	f000 fdfc 	bl	800768c <TIM_CCxChannelCmd>
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC1);
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	68da      	ldr	r2, [r3, #12]
 8006a9a:	687b      	ldr	r3, [r7, #4]
 8006a9c:	681b      	ldr	r3, [r3, #0]
 8006a9e:	f042 0202 	orr.w	r2, r2, #2
 8006aa2:	60da      	str	r2, [r3, #12]
      __HAL_TIM_ENABLE_IT(htim, TIM_IT_CC2);
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	681b      	ldr	r3, [r3, #0]
 8006aa8:	68da      	ldr	r2, [r3, #12]
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	681b      	ldr	r3, [r3, #0]
 8006aae:	f042 0204 	orr.w	r2, r2, #4
 8006ab2:	60da      	str	r2, [r3, #12]
      break;
 8006ab4:	bf00      	nop
    }
  }

  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	681b      	ldr	r3, [r3, #0]
 8006aba:	681a      	ldr	r2, [r3, #0]
 8006abc:	687b      	ldr	r3, [r7, #4]
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f042 0201 	orr.w	r2, r2, #1
 8006ac4:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006ac6:	2300      	movs	r3, #0
}
 8006ac8:	4618      	mov	r0, r3
 8006aca:	3710      	adds	r7, #16
 8006acc:	46bd      	mov	sp, r7
 8006ace:	bd80      	pop	{r7, pc}

08006ad0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006ad0:	b580      	push	{r7, lr}
 8006ad2:	b082      	sub	sp, #8
 8006ad4:	af00      	add	r7, sp, #0
 8006ad6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	681b      	ldr	r3, [r3, #0]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	f003 0302 	and.w	r3, r3, #2
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d122      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	681b      	ldr	r3, [r3, #0]
 8006aea:	68db      	ldr	r3, [r3, #12]
 8006aec:	f003 0302 	and.w	r3, r3, #2
 8006af0:	2b02      	cmp	r3, #2
 8006af2:	d11b      	bne.n	8006b2c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006af4:	687b      	ldr	r3, [r7, #4]
 8006af6:	681b      	ldr	r3, [r3, #0]
 8006af8:	f06f 0202 	mvn.w	r2, #2
 8006afc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006b04:	687b      	ldr	r3, [r7, #4]
 8006b06:	681b      	ldr	r3, [r3, #0]
 8006b08:	699b      	ldr	r3, [r3, #24]
 8006b0a:	f003 0303 	and.w	r3, r3, #3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d003      	beq.n	8006b1a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006b12:	6878      	ldr	r0, [r7, #4]
 8006b14:	f7fc fa90 	bl	8003038 <HAL_TIM_IC_CaptureCallback>
 8006b18:	e005      	b.n	8006b26 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b1a:	6878      	ldr	r0, [r7, #4]
 8006b1c:	f000 faae 	bl	800707c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b20:	6878      	ldr	r0, [r7, #4]
 8006b22:	f000 fab5 	bl	8007090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2200      	movs	r2, #0
 8006b2a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	681b      	ldr	r3, [r3, #0]
 8006b30:	691b      	ldr	r3, [r3, #16]
 8006b32:	f003 0304 	and.w	r3, r3, #4
 8006b36:	2b04      	cmp	r3, #4
 8006b38:	d122      	bne.n	8006b80 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	681b      	ldr	r3, [r3, #0]
 8006b3e:	68db      	ldr	r3, [r3, #12]
 8006b40:	f003 0304 	and.w	r3, r3, #4
 8006b44:	2b04      	cmp	r3, #4
 8006b46:	d11b      	bne.n	8006b80 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	681b      	ldr	r3, [r3, #0]
 8006b4c:	f06f 0204 	mvn.w	r2, #4
 8006b50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006b52:	687b      	ldr	r3, [r7, #4]
 8006b54:	2202      	movs	r2, #2
 8006b56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	681b      	ldr	r3, [r3, #0]
 8006b5c:	699b      	ldr	r3, [r3, #24]
 8006b5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006b62:	2b00      	cmp	r3, #0
 8006b64:	d003      	beq.n	8006b6e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006b66:	6878      	ldr	r0, [r7, #4]
 8006b68:	f7fc fa66 	bl	8003038 <HAL_TIM_IC_CaptureCallback>
 8006b6c:	e005      	b.n	8006b7a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006b6e:	6878      	ldr	r0, [r7, #4]
 8006b70:	f000 fa84 	bl	800707c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006b74:	6878      	ldr	r0, [r7, #4]
 8006b76:	f000 fa8b 	bl	8007090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	2200      	movs	r2, #0
 8006b7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	681b      	ldr	r3, [r3, #0]
 8006b84:	691b      	ldr	r3, [r3, #16]
 8006b86:	f003 0308 	and.w	r3, r3, #8
 8006b8a:	2b08      	cmp	r3, #8
 8006b8c:	d122      	bne.n	8006bd4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	68db      	ldr	r3, [r3, #12]
 8006b94:	f003 0308 	and.w	r3, r3, #8
 8006b98:	2b08      	cmp	r3, #8
 8006b9a:	d11b      	bne.n	8006bd4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	f06f 0208 	mvn.w	r2, #8
 8006ba4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2204      	movs	r2, #4
 8006baa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006bac:	687b      	ldr	r3, [r7, #4]
 8006bae:	681b      	ldr	r3, [r3, #0]
 8006bb0:	69db      	ldr	r3, [r3, #28]
 8006bb2:	f003 0303 	and.w	r3, r3, #3
 8006bb6:	2b00      	cmp	r3, #0
 8006bb8:	d003      	beq.n	8006bc2 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006bba:	6878      	ldr	r0, [r7, #4]
 8006bbc:	f7fc fa3c 	bl	8003038 <HAL_TIM_IC_CaptureCallback>
 8006bc0:	e005      	b.n	8006bce <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006bc2:	6878      	ldr	r0, [r7, #4]
 8006bc4:	f000 fa5a 	bl	800707c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006bc8:	6878      	ldr	r0, [r7, #4]
 8006bca:	f000 fa61 	bl	8007090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006bce:	687b      	ldr	r3, [r7, #4]
 8006bd0:	2200      	movs	r2, #0
 8006bd2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	691b      	ldr	r3, [r3, #16]
 8006bda:	f003 0310 	and.w	r3, r3, #16
 8006bde:	2b10      	cmp	r3, #16
 8006be0:	d122      	bne.n	8006c28 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006be2:	687b      	ldr	r3, [r7, #4]
 8006be4:	681b      	ldr	r3, [r3, #0]
 8006be6:	68db      	ldr	r3, [r3, #12]
 8006be8:	f003 0310 	and.w	r3, r3, #16
 8006bec:	2b10      	cmp	r3, #16
 8006bee:	d11b      	bne.n	8006c28 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	f06f 0210 	mvn.w	r2, #16
 8006bf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006bfa:	687b      	ldr	r3, [r7, #4]
 8006bfc:	2208      	movs	r2, #8
 8006bfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	69db      	ldr	r3, [r3, #28]
 8006c06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d003      	beq.n	8006c16 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006c0e:	6878      	ldr	r0, [r7, #4]
 8006c10:	f7fc fa12 	bl	8003038 <HAL_TIM_IC_CaptureCallback>
 8006c14:	e005      	b.n	8006c22 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c16:	6878      	ldr	r0, [r7, #4]
 8006c18:	f000 fa30 	bl	800707c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c1c:	6878      	ldr	r0, [r7, #4]
 8006c1e:	f000 fa37 	bl	8007090 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	2200      	movs	r2, #0
 8006c26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006c28:	687b      	ldr	r3, [r7, #4]
 8006c2a:	681b      	ldr	r3, [r3, #0]
 8006c2c:	691b      	ldr	r3, [r3, #16]
 8006c2e:	f003 0301 	and.w	r3, r3, #1
 8006c32:	2b01      	cmp	r3, #1
 8006c34:	d10e      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68db      	ldr	r3, [r3, #12]
 8006c3c:	f003 0301 	and.w	r3, r3, #1
 8006c40:	2b01      	cmp	r3, #1
 8006c42:	d107      	bne.n	8006c54 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	681b      	ldr	r3, [r3, #0]
 8006c48:	f06f 0201 	mvn.w	r2, #1
 8006c4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006c4e:	6878      	ldr	r0, [r7, #4]
 8006c50:	f7fc fd7a 	bl	8003748 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	691b      	ldr	r3, [r3, #16]
 8006c5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c5e:	2b80      	cmp	r3, #128	; 0x80
 8006c60:	d10e      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	68db      	ldr	r3, [r3, #12]
 8006c68:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c6c:	2b80      	cmp	r3, #128	; 0x80
 8006c6e:	d107      	bne.n	8006c80 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	681b      	ldr	r3, [r3, #0]
 8006c74:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006c78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 fe04 	bl	8007888 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006c80:	687b      	ldr	r3, [r7, #4]
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	691b      	ldr	r3, [r3, #16]
 8006c86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c8a:	2b40      	cmp	r3, #64	; 0x40
 8006c8c:	d10e      	bne.n	8006cac <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006c8e:	687b      	ldr	r3, [r7, #4]
 8006c90:	681b      	ldr	r3, [r3, #0]
 8006c92:	68db      	ldr	r3, [r3, #12]
 8006c94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c98:	2b40      	cmp	r3, #64	; 0x40
 8006c9a:	d107      	bne.n	8006cac <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	681b      	ldr	r3, [r3, #0]
 8006ca0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f000 f9fc 	bl	80070a4 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	681b      	ldr	r3, [r3, #0]
 8006cb0:	691b      	ldr	r3, [r3, #16]
 8006cb2:	f003 0320 	and.w	r3, r3, #32
 8006cb6:	2b20      	cmp	r3, #32
 8006cb8:	d10e      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	68db      	ldr	r3, [r3, #12]
 8006cc0:	f003 0320 	and.w	r3, r3, #32
 8006cc4:	2b20      	cmp	r3, #32
 8006cc6:	d107      	bne.n	8006cd8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f06f 0220 	mvn.w	r2, #32
 8006cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006cd2:	6878      	ldr	r0, [r7, #4]
 8006cd4:	f000 fdce 	bl	8007874 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006cd8:	bf00      	nop
 8006cda:	3708      	adds	r7, #8
 8006cdc:	46bd      	mov	sp, r7
 8006cde:	bd80      	pop	{r7, pc}

08006ce0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006ce0:	b580      	push	{r7, lr}
 8006ce2:	b086      	sub	sp, #24
 8006ce4:	af00      	add	r7, sp, #0
 8006ce6:	60f8      	str	r0, [r7, #12]
 8006ce8:	60b9      	str	r1, [r7, #8]
 8006cea:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8006cec:	2300      	movs	r3, #0
 8006cee:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006cf6:	2b01      	cmp	r3, #1
 8006cf8:	d101      	bne.n	8006cfe <HAL_TIM_PWM_ConfigChannel+0x1e>
 8006cfa:	2302      	movs	r3, #2
 8006cfc:	e0ae      	b.n	8006e5c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8006cfe:	68fb      	ldr	r3, [r7, #12]
 8006d00:	2201      	movs	r2, #1
 8006d02:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2b0c      	cmp	r3, #12
 8006d0a:	f200 809f 	bhi.w	8006e4c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8006d0e:	a201      	add	r2, pc, #4	; (adr r2, 8006d14 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8006d10:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006d14:	08006d49 	.word	0x08006d49
 8006d18:	08006e4d 	.word	0x08006e4d
 8006d1c:	08006e4d 	.word	0x08006e4d
 8006d20:	08006e4d 	.word	0x08006e4d
 8006d24:	08006d89 	.word	0x08006d89
 8006d28:	08006e4d 	.word	0x08006e4d
 8006d2c:	08006e4d 	.word	0x08006e4d
 8006d30:	08006e4d 	.word	0x08006e4d
 8006d34:	08006dcb 	.word	0x08006dcb
 8006d38:	08006e4d 	.word	0x08006e4d
 8006d3c:	08006e4d 	.word	0x08006e4d
 8006d40:	08006e4d 	.word	0x08006e4d
 8006d44:	08006e0b 	.word	0x08006e0b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006d48:	68fb      	ldr	r3, [r7, #12]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	68b9      	ldr	r1, [r7, #8]
 8006d4e:	4618      	mov	r0, r3
 8006d50:	f000 fa52 	bl	80071f8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	699a      	ldr	r2, [r3, #24]
 8006d5a:	68fb      	ldr	r3, [r7, #12]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f042 0208 	orr.w	r2, r2, #8
 8006d62:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	699a      	ldr	r2, [r3, #24]
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	681b      	ldr	r3, [r3, #0]
 8006d6e:	f022 0204 	bic.w	r2, r2, #4
 8006d72:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006d74:	68fb      	ldr	r3, [r7, #12]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	6999      	ldr	r1, [r3, #24]
 8006d7a:	68bb      	ldr	r3, [r7, #8]
 8006d7c:	691a      	ldr	r2, [r3, #16]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	430a      	orrs	r2, r1
 8006d84:	619a      	str	r2, [r3, #24]
      break;
 8006d86:	e064      	b.n	8006e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006d88:	68fb      	ldr	r3, [r7, #12]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	68b9      	ldr	r1, [r7, #8]
 8006d8e:	4618      	mov	r0, r3
 8006d90:	f000 faa2 	bl	80072d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	699a      	ldr	r2, [r3, #24]
 8006d9a:	68fb      	ldr	r3, [r7, #12]
 8006d9c:	681b      	ldr	r3, [r3, #0]
 8006d9e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006da2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	699a      	ldr	r2, [r3, #24]
 8006daa:	68fb      	ldr	r3, [r7, #12]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006db2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	6999      	ldr	r1, [r3, #24]
 8006dba:	68bb      	ldr	r3, [r7, #8]
 8006dbc:	691b      	ldr	r3, [r3, #16]
 8006dbe:	021a      	lsls	r2, r3, #8
 8006dc0:	68fb      	ldr	r3, [r7, #12]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	430a      	orrs	r2, r1
 8006dc6:	619a      	str	r2, [r3, #24]
      break;
 8006dc8:	e043      	b.n	8006e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006dca:	68fb      	ldr	r3, [r7, #12]
 8006dcc:	681b      	ldr	r3, [r3, #0]
 8006dce:	68b9      	ldr	r1, [r7, #8]
 8006dd0:	4618      	mov	r0, r3
 8006dd2:	f000 faf7 	bl	80073c4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006dd6:	68fb      	ldr	r3, [r7, #12]
 8006dd8:	681b      	ldr	r3, [r3, #0]
 8006dda:	69da      	ldr	r2, [r3, #28]
 8006ddc:	68fb      	ldr	r3, [r7, #12]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	f042 0208 	orr.w	r2, r2, #8
 8006de4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	681b      	ldr	r3, [r3, #0]
 8006dea:	69da      	ldr	r2, [r3, #28]
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f022 0204 	bic.w	r2, r2, #4
 8006df4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006df6:	68fb      	ldr	r3, [r7, #12]
 8006df8:	681b      	ldr	r3, [r3, #0]
 8006dfa:	69d9      	ldr	r1, [r3, #28]
 8006dfc:	68bb      	ldr	r3, [r7, #8]
 8006dfe:	691a      	ldr	r2, [r3, #16]
 8006e00:	68fb      	ldr	r3, [r7, #12]
 8006e02:	681b      	ldr	r3, [r3, #0]
 8006e04:	430a      	orrs	r2, r1
 8006e06:	61da      	str	r2, [r3, #28]
      break;
 8006e08:	e023      	b.n	8006e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	68b9      	ldr	r1, [r7, #8]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f000 fb4b 	bl	80074ac <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006e16:	68fb      	ldr	r3, [r7, #12]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	69da      	ldr	r2, [r3, #28]
 8006e1c:	68fb      	ldr	r3, [r7, #12]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006e24:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	69da      	ldr	r2, [r3, #28]
 8006e2c:	68fb      	ldr	r3, [r7, #12]
 8006e2e:	681b      	ldr	r3, [r3, #0]
 8006e30:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006e34:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006e36:	68fb      	ldr	r3, [r7, #12]
 8006e38:	681b      	ldr	r3, [r3, #0]
 8006e3a:	69d9      	ldr	r1, [r3, #28]
 8006e3c:	68bb      	ldr	r3, [r7, #8]
 8006e3e:	691b      	ldr	r3, [r3, #16]
 8006e40:	021a      	lsls	r2, r3, #8
 8006e42:	68fb      	ldr	r3, [r7, #12]
 8006e44:	681b      	ldr	r3, [r3, #0]
 8006e46:	430a      	orrs	r2, r1
 8006e48:	61da      	str	r2, [r3, #28]
      break;
 8006e4a:	e002      	b.n	8006e52 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8006e4c:	2301      	movs	r3, #1
 8006e4e:	75fb      	strb	r3, [r7, #23]
      break;
 8006e50:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006e52:	68fb      	ldr	r3, [r7, #12]
 8006e54:	2200      	movs	r2, #0
 8006e56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006e5a:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e5c:	4618      	mov	r0, r3
 8006e5e:	3718      	adds	r7, #24
 8006e60:	46bd      	mov	sp, r7
 8006e62:	bd80      	pop	{r7, pc}

08006e64 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006e64:	b580      	push	{r7, lr}
 8006e66:	b084      	sub	sp, #16
 8006e68:	af00      	add	r7, sp, #0
 8006e6a:	6078      	str	r0, [r7, #4]
 8006e6c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006e6e:	2300      	movs	r3, #0
 8006e70:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e72:	687b      	ldr	r3, [r7, #4]
 8006e74:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e78:	2b01      	cmp	r3, #1
 8006e7a:	d101      	bne.n	8006e80 <HAL_TIM_ConfigClockSource+0x1c>
 8006e7c:	2302      	movs	r3, #2
 8006e7e:	e0b4      	b.n	8006fea <HAL_TIM_ConfigClockSource+0x186>
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2201      	movs	r2, #1
 8006e84:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006e88:	687b      	ldr	r3, [r7, #4]
 8006e8a:	2202      	movs	r2, #2
 8006e8c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	689b      	ldr	r3, [r3, #8]
 8006e96:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006e98:	68bb      	ldr	r3, [r7, #8]
 8006e9a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006e9e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ea0:	68bb      	ldr	r3, [r7, #8]
 8006ea2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ea6:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8006ea8:	687b      	ldr	r3, [r7, #4]
 8006eaa:	681b      	ldr	r3, [r3, #0]
 8006eac:	68ba      	ldr	r2, [r7, #8]
 8006eae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8006eb0:	683b      	ldr	r3, [r7, #0]
 8006eb2:	681b      	ldr	r3, [r3, #0]
 8006eb4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006eb8:	d03e      	beq.n	8006f38 <HAL_TIM_ConfigClockSource+0xd4>
 8006eba:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8006ebe:	f200 8087 	bhi.w	8006fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ec2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ec6:	f000 8086 	beq.w	8006fd6 <HAL_TIM_ConfigClockSource+0x172>
 8006eca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ece:	d87f      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed0:	2b70      	cmp	r3, #112	; 0x70
 8006ed2:	d01a      	beq.n	8006f0a <HAL_TIM_ConfigClockSource+0xa6>
 8006ed4:	2b70      	cmp	r3, #112	; 0x70
 8006ed6:	d87b      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ed8:	2b60      	cmp	r3, #96	; 0x60
 8006eda:	d050      	beq.n	8006f7e <HAL_TIM_ConfigClockSource+0x11a>
 8006edc:	2b60      	cmp	r3, #96	; 0x60
 8006ede:	d877      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee0:	2b50      	cmp	r3, #80	; 0x50
 8006ee2:	d03c      	beq.n	8006f5e <HAL_TIM_ConfigClockSource+0xfa>
 8006ee4:	2b50      	cmp	r3, #80	; 0x50
 8006ee6:	d873      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ee8:	2b40      	cmp	r3, #64	; 0x40
 8006eea:	d058      	beq.n	8006f9e <HAL_TIM_ConfigClockSource+0x13a>
 8006eec:	2b40      	cmp	r3, #64	; 0x40
 8006eee:	d86f      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef0:	2b30      	cmp	r3, #48	; 0x30
 8006ef2:	d064      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x15a>
 8006ef4:	2b30      	cmp	r3, #48	; 0x30
 8006ef6:	d86b      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006ef8:	2b20      	cmp	r3, #32
 8006efa:	d060      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x15a>
 8006efc:	2b20      	cmp	r3, #32
 8006efe:	d867      	bhi.n	8006fd0 <HAL_TIM_ConfigClockSource+0x16c>
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d05c      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x15a>
 8006f04:	2b10      	cmp	r3, #16
 8006f06:	d05a      	beq.n	8006fbe <HAL_TIM_ConfigClockSource+0x15a>
 8006f08:	e062      	b.n	8006fd0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f0a:	687b      	ldr	r3, [r7, #4]
 8006f0c:	6818      	ldr	r0, [r3, #0]
 8006f0e:	683b      	ldr	r3, [r7, #0]
 8006f10:	6899      	ldr	r1, [r3, #8]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	685a      	ldr	r2, [r3, #4]
 8006f16:	683b      	ldr	r3, [r7, #0]
 8006f18:	68db      	ldr	r3, [r3, #12]
 8006f1a:	f000 fb97 	bl	800764c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006f1e:	687b      	ldr	r3, [r7, #4]
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	689b      	ldr	r3, [r3, #8]
 8006f24:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006f26:	68bb      	ldr	r3, [r7, #8]
 8006f28:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006f2c:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	68ba      	ldr	r2, [r7, #8]
 8006f34:	609a      	str	r2, [r3, #8]
      break;
 8006f36:	e04f      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	6818      	ldr	r0, [r3, #0]
 8006f3c:	683b      	ldr	r3, [r7, #0]
 8006f3e:	6899      	ldr	r1, [r3, #8]
 8006f40:	683b      	ldr	r3, [r7, #0]
 8006f42:	685a      	ldr	r2, [r3, #4]
 8006f44:	683b      	ldr	r3, [r7, #0]
 8006f46:	68db      	ldr	r3, [r3, #12]
 8006f48:	f000 fb80 	bl	800764c <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006f4c:	687b      	ldr	r3, [r7, #4]
 8006f4e:	681b      	ldr	r3, [r3, #0]
 8006f50:	689a      	ldr	r2, [r3, #8]
 8006f52:	687b      	ldr	r3, [r7, #4]
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006f5a:	609a      	str	r2, [r3, #8]
      break;
 8006f5c:	e03c      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f5e:	687b      	ldr	r3, [r7, #4]
 8006f60:	6818      	ldr	r0, [r3, #0]
 8006f62:	683b      	ldr	r3, [r7, #0]
 8006f64:	6859      	ldr	r1, [r3, #4]
 8006f66:	683b      	ldr	r3, [r7, #0]
 8006f68:	68db      	ldr	r3, [r3, #12]
 8006f6a:	461a      	mov	r2, r3
 8006f6c:	f000 faf4 	bl	8007558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006f70:	687b      	ldr	r3, [r7, #4]
 8006f72:	681b      	ldr	r3, [r3, #0]
 8006f74:	2150      	movs	r1, #80	; 0x50
 8006f76:	4618      	mov	r0, r3
 8006f78:	f000 fb4d 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006f7c:	e02c      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	6818      	ldr	r0, [r3, #0]
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	6859      	ldr	r1, [r3, #4]
 8006f86:	683b      	ldr	r3, [r7, #0]
 8006f88:	68db      	ldr	r3, [r3, #12]
 8006f8a:	461a      	mov	r2, r3
 8006f8c:	f000 fb13 	bl	80075b6 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006f90:	687b      	ldr	r3, [r7, #4]
 8006f92:	681b      	ldr	r3, [r3, #0]
 8006f94:	2160      	movs	r1, #96	; 0x60
 8006f96:	4618      	mov	r0, r3
 8006f98:	f000 fb3d 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006f9c:	e01c      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006f9e:	687b      	ldr	r3, [r7, #4]
 8006fa0:	6818      	ldr	r0, [r3, #0]
 8006fa2:	683b      	ldr	r3, [r7, #0]
 8006fa4:	6859      	ldr	r1, [r3, #4]
 8006fa6:	683b      	ldr	r3, [r7, #0]
 8006fa8:	68db      	ldr	r3, [r3, #12]
 8006faa:	461a      	mov	r2, r3
 8006fac:	f000 fad4 	bl	8007558 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8006fb0:	687b      	ldr	r3, [r7, #4]
 8006fb2:	681b      	ldr	r3, [r3, #0]
 8006fb4:	2140      	movs	r1, #64	; 0x40
 8006fb6:	4618      	mov	r0, r3
 8006fb8:	f000 fb2d 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006fbc:	e00c      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	681a      	ldr	r2, [r3, #0]
 8006fc2:	683b      	ldr	r3, [r7, #0]
 8006fc4:	681b      	ldr	r3, [r3, #0]
 8006fc6:	4619      	mov	r1, r3
 8006fc8:	4610      	mov	r0, r2
 8006fca:	f000 fb24 	bl	8007616 <TIM_ITRx_SetConfig>
      break;
 8006fce:	e003      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8006fd0:	2301      	movs	r3, #1
 8006fd2:	73fb      	strb	r3, [r7, #15]
      break;
 8006fd4:	e000      	b.n	8006fd8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8006fd6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2201      	movs	r2, #1
 8006fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	2200      	movs	r2, #0
 8006fe4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8006fe8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006fea:	4618      	mov	r0, r3
 8006fec:	3710      	adds	r7, #16
 8006fee:	46bd      	mov	sp, r7
 8006ff0:	bd80      	pop	{r7, pc}
	...

08006ff4 <HAL_TIM_ReadCapturedValue>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval Captured value
  */
uint32_t HAL_TIM_ReadCapturedValue(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006ff4:	b480      	push	{r7}
 8006ff6:	b085      	sub	sp, #20
 8006ff8:	af00      	add	r7, sp, #0
 8006ffa:	6078      	str	r0, [r7, #4]
 8006ffc:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg = 0U;
 8006ffe:	2300      	movs	r3, #0
 8007000:	60fb      	str	r3, [r7, #12]

  switch (Channel)
 8007002:	683b      	ldr	r3, [r7, #0]
 8007004:	2b0c      	cmp	r3, #12
 8007006:	d831      	bhi.n	800706c <HAL_TIM_ReadCapturedValue+0x78>
 8007008:	a201      	add	r2, pc, #4	; (adr r2, 8007010 <HAL_TIM_ReadCapturedValue+0x1c>)
 800700a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800700e:	bf00      	nop
 8007010:	08007045 	.word	0x08007045
 8007014:	0800706d 	.word	0x0800706d
 8007018:	0800706d 	.word	0x0800706d
 800701c:	0800706d 	.word	0x0800706d
 8007020:	0800704f 	.word	0x0800704f
 8007024:	0800706d 	.word	0x0800706d
 8007028:	0800706d 	.word	0x0800706d
 800702c:	0800706d 	.word	0x0800706d
 8007030:	08007059 	.word	0x08007059
 8007034:	0800706d 	.word	0x0800706d
 8007038:	0800706d 	.word	0x0800706d
 800703c:	0800706d 	.word	0x0800706d
 8007040:	08007063 	.word	0x08007063
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Return the capture 1 value */
      tmpreg =  htim->Instance->CCR1;
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800704a:	60fb      	str	r3, [r7, #12]

      break;
 800704c:	e00f      	b.n	800706e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Return the capture 2 value */
      tmpreg =   htim->Instance->CCR2;
 800704e:	687b      	ldr	r3, [r7, #4]
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007054:	60fb      	str	r3, [r7, #12]

      break;
 8007056:	e00a      	b.n	800706e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Return the capture 3 value */
      tmpreg =   htim->Instance->CCR3;
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	681b      	ldr	r3, [r3, #0]
 800705c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800705e:	60fb      	str	r3, [r7, #12]

      break;
 8007060:	e005      	b.n	800706e <HAL_TIM_ReadCapturedValue+0x7a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Return the capture 4 value */
      tmpreg =   htim->Instance->CCR4;
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007068:	60fb      	str	r3, [r7, #12]

      break;
 800706a:	e000      	b.n	800706e <HAL_TIM_ReadCapturedValue+0x7a>
    }

    default:
      break;
 800706c:	bf00      	nop
  }

  return tmpreg;
 800706e:	68fb      	ldr	r3, [r7, #12]
}
 8007070:	4618      	mov	r0, r3
 8007072:	3714      	adds	r7, #20
 8007074:	46bd      	mov	sp, r7
 8007076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707a:	4770      	bx	lr

0800707c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800707c:	b480      	push	{r7}
 800707e:	b083      	sub	sp, #12
 8007080:	af00      	add	r7, sp, #0
 8007082:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007084:	bf00      	nop
 8007086:	370c      	adds	r7, #12
 8007088:	46bd      	mov	sp, r7
 800708a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800708e:	4770      	bx	lr

08007090 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007090:	b480      	push	{r7}
 8007092:	b083      	sub	sp, #12
 8007094:	af00      	add	r7, sp, #0
 8007096:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007098:	bf00      	nop
 800709a:	370c      	adds	r7, #12
 800709c:	46bd      	mov	sp, r7
 800709e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a2:	4770      	bx	lr

080070a4 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80070a4:	b480      	push	{r7}
 80070a6:	b083      	sub	sp, #12
 80070a8:	af00      	add	r7, sp, #0
 80070aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80070ac:	bf00      	nop
 80070ae:	370c      	adds	r7, #12
 80070b0:	46bd      	mov	sp, r7
 80070b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070b6:	4770      	bx	lr

080070b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80070b8:	b480      	push	{r7}
 80070ba:	b085      	sub	sp, #20
 80070bc:	af00      	add	r7, sp, #0
 80070be:	6078      	str	r0, [r7, #4]
 80070c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80070c2:	687b      	ldr	r3, [r7, #4]
 80070c4:	681b      	ldr	r3, [r3, #0]
 80070c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	4a40      	ldr	r2, [pc, #256]	; (80071cc <TIM_Base_SetConfig+0x114>)
 80070cc:	4293      	cmp	r3, r2
 80070ce:	d013      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80070d6:	d00f      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	4a3d      	ldr	r2, [pc, #244]	; (80071d0 <TIM_Base_SetConfig+0x118>)
 80070dc:	4293      	cmp	r3, r2
 80070de:	d00b      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	4a3c      	ldr	r2, [pc, #240]	; (80071d4 <TIM_Base_SetConfig+0x11c>)
 80070e4:	4293      	cmp	r3, r2
 80070e6:	d007      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	4a3b      	ldr	r2, [pc, #236]	; (80071d8 <TIM_Base_SetConfig+0x120>)
 80070ec:	4293      	cmp	r3, r2
 80070ee:	d003      	beq.n	80070f8 <TIM_Base_SetConfig+0x40>
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	4a3a      	ldr	r2, [pc, #232]	; (80071dc <TIM_Base_SetConfig+0x124>)
 80070f4:	4293      	cmp	r3, r2
 80070f6:	d108      	bne.n	800710a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80070f8:	68fb      	ldr	r3, [r7, #12]
 80070fa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80070fe:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007100:	683b      	ldr	r3, [r7, #0]
 8007102:	685b      	ldr	r3, [r3, #4]
 8007104:	68fa      	ldr	r2, [r7, #12]
 8007106:	4313      	orrs	r3, r2
 8007108:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800710a:	687b      	ldr	r3, [r7, #4]
 800710c:	4a2f      	ldr	r2, [pc, #188]	; (80071cc <TIM_Base_SetConfig+0x114>)
 800710e:	4293      	cmp	r3, r2
 8007110:	d02b      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007112:	687b      	ldr	r3, [r7, #4]
 8007114:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007118:	d027      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800711a:	687b      	ldr	r3, [r7, #4]
 800711c:	4a2c      	ldr	r2, [pc, #176]	; (80071d0 <TIM_Base_SetConfig+0x118>)
 800711e:	4293      	cmp	r3, r2
 8007120:	d023      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007122:	687b      	ldr	r3, [r7, #4]
 8007124:	4a2b      	ldr	r2, [pc, #172]	; (80071d4 <TIM_Base_SetConfig+0x11c>)
 8007126:	4293      	cmp	r3, r2
 8007128:	d01f      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800712a:	687b      	ldr	r3, [r7, #4]
 800712c:	4a2a      	ldr	r2, [pc, #168]	; (80071d8 <TIM_Base_SetConfig+0x120>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d01b      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	4a29      	ldr	r2, [pc, #164]	; (80071dc <TIM_Base_SetConfig+0x124>)
 8007136:	4293      	cmp	r3, r2
 8007138:	d017      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800713a:	687b      	ldr	r3, [r7, #4]
 800713c:	4a28      	ldr	r2, [pc, #160]	; (80071e0 <TIM_Base_SetConfig+0x128>)
 800713e:	4293      	cmp	r3, r2
 8007140:	d013      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	4a27      	ldr	r2, [pc, #156]	; (80071e4 <TIM_Base_SetConfig+0x12c>)
 8007146:	4293      	cmp	r3, r2
 8007148:	d00f      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800714a:	687b      	ldr	r3, [r7, #4]
 800714c:	4a26      	ldr	r2, [pc, #152]	; (80071e8 <TIM_Base_SetConfig+0x130>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00b      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	4a25      	ldr	r2, [pc, #148]	; (80071ec <TIM_Base_SetConfig+0x134>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d007      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	4a24      	ldr	r2, [pc, #144]	; (80071f0 <TIM_Base_SetConfig+0x138>)
 800715e:	4293      	cmp	r3, r2
 8007160:	d003      	beq.n	800716a <TIM_Base_SetConfig+0xb2>
 8007162:	687b      	ldr	r3, [r7, #4]
 8007164:	4a23      	ldr	r2, [pc, #140]	; (80071f4 <TIM_Base_SetConfig+0x13c>)
 8007166:	4293      	cmp	r3, r2
 8007168:	d108      	bne.n	800717c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800716a:	68fb      	ldr	r3, [r7, #12]
 800716c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007170:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007172:	683b      	ldr	r3, [r7, #0]
 8007174:	68db      	ldr	r3, [r3, #12]
 8007176:	68fa      	ldr	r2, [r7, #12]
 8007178:	4313      	orrs	r3, r2
 800717a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007182:	683b      	ldr	r3, [r7, #0]
 8007184:	695b      	ldr	r3, [r3, #20]
 8007186:	4313      	orrs	r3, r2
 8007188:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	68fa      	ldr	r2, [r7, #12]
 800718e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007190:	683b      	ldr	r3, [r7, #0]
 8007192:	689a      	ldr	r2, [r3, #8]
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007198:	683b      	ldr	r3, [r7, #0]
 800719a:	681a      	ldr	r2, [r3, #0]
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a0a      	ldr	r2, [pc, #40]	; (80071cc <TIM_Base_SetConfig+0x114>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d003      	beq.n	80071b0 <TIM_Base_SetConfig+0xf8>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	4a0c      	ldr	r2, [pc, #48]	; (80071dc <TIM_Base_SetConfig+0x124>)
 80071ac:	4293      	cmp	r3, r2
 80071ae:	d103      	bne.n	80071b8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80071b0:	683b      	ldr	r3, [r7, #0]
 80071b2:	691a      	ldr	r2, [r3, #16]
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	2201      	movs	r2, #1
 80071bc:	615a      	str	r2, [r3, #20]
}
 80071be:	bf00      	nop
 80071c0:	3714      	adds	r7, #20
 80071c2:	46bd      	mov	sp, r7
 80071c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071c8:	4770      	bx	lr
 80071ca:	bf00      	nop
 80071cc:	40010000 	.word	0x40010000
 80071d0:	40000400 	.word	0x40000400
 80071d4:	40000800 	.word	0x40000800
 80071d8:	40000c00 	.word	0x40000c00
 80071dc:	40010400 	.word	0x40010400
 80071e0:	40014000 	.word	0x40014000
 80071e4:	40014400 	.word	0x40014400
 80071e8:	40014800 	.word	0x40014800
 80071ec:	40001800 	.word	0x40001800
 80071f0:	40001c00 	.word	0x40001c00
 80071f4:	40002000 	.word	0x40002000

080071f8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80071f8:	b480      	push	{r7}
 80071fa:	b087      	sub	sp, #28
 80071fc:	af00      	add	r7, sp, #0
 80071fe:	6078      	str	r0, [r7, #4]
 8007200:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	6a1b      	ldr	r3, [r3, #32]
 8007206:	f023 0201 	bic.w	r2, r3, #1
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800720e:	687b      	ldr	r3, [r7, #4]
 8007210:	6a1b      	ldr	r3, [r3, #32]
 8007212:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	685b      	ldr	r3, [r3, #4]
 8007218:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	699b      	ldr	r3, [r3, #24]
 800721e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007220:	68fb      	ldr	r3, [r7, #12]
 8007222:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007226:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f023 0303 	bic.w	r3, r3, #3
 800722e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007230:	683b      	ldr	r3, [r7, #0]
 8007232:	681b      	ldr	r3, [r3, #0]
 8007234:	68fa      	ldr	r2, [r7, #12]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800723a:	697b      	ldr	r3, [r7, #20]
 800723c:	f023 0302 	bic.w	r3, r3, #2
 8007240:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007242:	683b      	ldr	r3, [r7, #0]
 8007244:	689b      	ldr	r3, [r3, #8]
 8007246:	697a      	ldr	r2, [r7, #20]
 8007248:	4313      	orrs	r3, r2
 800724a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	4a20      	ldr	r2, [pc, #128]	; (80072d0 <TIM_OC1_SetConfig+0xd8>)
 8007250:	4293      	cmp	r3, r2
 8007252:	d003      	beq.n	800725c <TIM_OC1_SetConfig+0x64>
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	4a1f      	ldr	r2, [pc, #124]	; (80072d4 <TIM_OC1_SetConfig+0xdc>)
 8007258:	4293      	cmp	r3, r2
 800725a:	d10c      	bne.n	8007276 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800725c:	697b      	ldr	r3, [r7, #20]
 800725e:	f023 0308 	bic.w	r3, r3, #8
 8007262:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007264:	683b      	ldr	r3, [r7, #0]
 8007266:	68db      	ldr	r3, [r3, #12]
 8007268:	697a      	ldr	r2, [r7, #20]
 800726a:	4313      	orrs	r3, r2
 800726c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800726e:	697b      	ldr	r3, [r7, #20]
 8007270:	f023 0304 	bic.w	r3, r3, #4
 8007274:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007276:	687b      	ldr	r3, [r7, #4]
 8007278:	4a15      	ldr	r2, [pc, #84]	; (80072d0 <TIM_OC1_SetConfig+0xd8>)
 800727a:	4293      	cmp	r3, r2
 800727c:	d003      	beq.n	8007286 <TIM_OC1_SetConfig+0x8e>
 800727e:	687b      	ldr	r3, [r7, #4]
 8007280:	4a14      	ldr	r2, [pc, #80]	; (80072d4 <TIM_OC1_SetConfig+0xdc>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d111      	bne.n	80072aa <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007286:	693b      	ldr	r3, [r7, #16]
 8007288:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800728c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800728e:	693b      	ldr	r3, [r7, #16]
 8007290:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007294:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007296:	683b      	ldr	r3, [r7, #0]
 8007298:	695b      	ldr	r3, [r3, #20]
 800729a:	693a      	ldr	r2, [r7, #16]
 800729c:	4313      	orrs	r3, r2
 800729e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80072a0:	683b      	ldr	r3, [r7, #0]
 80072a2:	699b      	ldr	r3, [r3, #24]
 80072a4:	693a      	ldr	r2, [r7, #16]
 80072a6:	4313      	orrs	r3, r2
 80072a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	693a      	ldr	r2, [r7, #16]
 80072ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	68fa      	ldr	r2, [r7, #12]
 80072b4:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80072b6:	683b      	ldr	r3, [r7, #0]
 80072b8:	685a      	ldr	r2, [r3, #4]
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80072be:	687b      	ldr	r3, [r7, #4]
 80072c0:	697a      	ldr	r2, [r7, #20]
 80072c2:	621a      	str	r2, [r3, #32]
}
 80072c4:	bf00      	nop
 80072c6:	371c      	adds	r7, #28
 80072c8:	46bd      	mov	sp, r7
 80072ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072ce:	4770      	bx	lr
 80072d0:	40010000 	.word	0x40010000
 80072d4:	40010400 	.word	0x40010400

080072d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80072d8:	b480      	push	{r7}
 80072da:	b087      	sub	sp, #28
 80072dc:	af00      	add	r7, sp, #0
 80072de:	6078      	str	r0, [r7, #4]
 80072e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80072e2:	687b      	ldr	r3, [r7, #4]
 80072e4:	6a1b      	ldr	r3, [r3, #32]
 80072e6:	f023 0210 	bic.w	r2, r3, #16
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072ee:	687b      	ldr	r3, [r7, #4]
 80072f0:	6a1b      	ldr	r3, [r3, #32]
 80072f2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072f4:	687b      	ldr	r3, [r7, #4]
 80072f6:	685b      	ldr	r3, [r3, #4]
 80072f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072fa:	687b      	ldr	r3, [r7, #4]
 80072fc:	699b      	ldr	r3, [r3, #24]
 80072fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007300:	68fb      	ldr	r3, [r7, #12]
 8007302:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007306:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007308:	68fb      	ldr	r3, [r7, #12]
 800730a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800730e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007310:	683b      	ldr	r3, [r7, #0]
 8007312:	681b      	ldr	r3, [r3, #0]
 8007314:	021b      	lsls	r3, r3, #8
 8007316:	68fa      	ldr	r2, [r7, #12]
 8007318:	4313      	orrs	r3, r2
 800731a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800731c:	697b      	ldr	r3, [r7, #20]
 800731e:	f023 0320 	bic.w	r3, r3, #32
 8007322:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007324:	683b      	ldr	r3, [r7, #0]
 8007326:	689b      	ldr	r3, [r3, #8]
 8007328:	011b      	lsls	r3, r3, #4
 800732a:	697a      	ldr	r2, [r7, #20]
 800732c:	4313      	orrs	r3, r2
 800732e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	4a22      	ldr	r2, [pc, #136]	; (80073bc <TIM_OC2_SetConfig+0xe4>)
 8007334:	4293      	cmp	r3, r2
 8007336:	d003      	beq.n	8007340 <TIM_OC2_SetConfig+0x68>
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	4a21      	ldr	r2, [pc, #132]	; (80073c0 <TIM_OC2_SetConfig+0xe8>)
 800733c:	4293      	cmp	r3, r2
 800733e:	d10d      	bne.n	800735c <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007340:	697b      	ldr	r3, [r7, #20]
 8007342:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007346:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007348:	683b      	ldr	r3, [r7, #0]
 800734a:	68db      	ldr	r3, [r3, #12]
 800734c:	011b      	lsls	r3, r3, #4
 800734e:	697a      	ldr	r2, [r7, #20]
 8007350:	4313      	orrs	r3, r2
 8007352:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007354:	697b      	ldr	r3, [r7, #20]
 8007356:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800735a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800735c:	687b      	ldr	r3, [r7, #4]
 800735e:	4a17      	ldr	r2, [pc, #92]	; (80073bc <TIM_OC2_SetConfig+0xe4>)
 8007360:	4293      	cmp	r3, r2
 8007362:	d003      	beq.n	800736c <TIM_OC2_SetConfig+0x94>
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	4a16      	ldr	r2, [pc, #88]	; (80073c0 <TIM_OC2_SetConfig+0xe8>)
 8007368:	4293      	cmp	r3, r2
 800736a:	d113      	bne.n	8007394 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800736c:	693b      	ldr	r3, [r7, #16]
 800736e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007372:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007374:	693b      	ldr	r3, [r7, #16]
 8007376:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800737a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800737c:	683b      	ldr	r3, [r7, #0]
 800737e:	695b      	ldr	r3, [r3, #20]
 8007380:	009b      	lsls	r3, r3, #2
 8007382:	693a      	ldr	r2, [r7, #16]
 8007384:	4313      	orrs	r3, r2
 8007386:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007388:	683b      	ldr	r3, [r7, #0]
 800738a:	699b      	ldr	r3, [r3, #24]
 800738c:	009b      	lsls	r3, r3, #2
 800738e:	693a      	ldr	r2, [r7, #16]
 8007390:	4313      	orrs	r3, r2
 8007392:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	693a      	ldr	r2, [r7, #16]
 8007398:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	68fa      	ldr	r2, [r7, #12]
 800739e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80073a0:	683b      	ldr	r3, [r7, #0]
 80073a2:	685a      	ldr	r2, [r3, #4]
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	697a      	ldr	r2, [r7, #20]
 80073ac:	621a      	str	r2, [r3, #32]
}
 80073ae:	bf00      	nop
 80073b0:	371c      	adds	r7, #28
 80073b2:	46bd      	mov	sp, r7
 80073b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073b8:	4770      	bx	lr
 80073ba:	bf00      	nop
 80073bc:	40010000 	.word	0x40010000
 80073c0:	40010400 	.word	0x40010400

080073c4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80073c4:	b480      	push	{r7}
 80073c6:	b087      	sub	sp, #28
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
 80073cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80073ce:	687b      	ldr	r3, [r7, #4]
 80073d0:	6a1b      	ldr	r3, [r3, #32]
 80073d2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80073d6:	687b      	ldr	r3, [r7, #4]
 80073d8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	6a1b      	ldr	r3, [r3, #32]
 80073de:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	685b      	ldr	r3, [r3, #4]
 80073e4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	69db      	ldr	r3, [r3, #28]
 80073ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80073f2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80073f4:	68fb      	ldr	r3, [r7, #12]
 80073f6:	f023 0303 	bic.w	r3, r3, #3
 80073fa:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	681b      	ldr	r3, [r3, #0]
 8007400:	68fa      	ldr	r2, [r7, #12]
 8007402:	4313      	orrs	r3, r2
 8007404:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007406:	697b      	ldr	r3, [r7, #20]
 8007408:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800740c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800740e:	683b      	ldr	r3, [r7, #0]
 8007410:	689b      	ldr	r3, [r3, #8]
 8007412:	021b      	lsls	r3, r3, #8
 8007414:	697a      	ldr	r2, [r7, #20]
 8007416:	4313      	orrs	r3, r2
 8007418:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	4a21      	ldr	r2, [pc, #132]	; (80074a4 <TIM_OC3_SetConfig+0xe0>)
 800741e:	4293      	cmp	r3, r2
 8007420:	d003      	beq.n	800742a <TIM_OC3_SetConfig+0x66>
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	4a20      	ldr	r2, [pc, #128]	; (80074a8 <TIM_OC3_SetConfig+0xe4>)
 8007426:	4293      	cmp	r3, r2
 8007428:	d10d      	bne.n	8007446 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007430:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007432:	683b      	ldr	r3, [r7, #0]
 8007434:	68db      	ldr	r3, [r3, #12]
 8007436:	021b      	lsls	r3, r3, #8
 8007438:	697a      	ldr	r2, [r7, #20]
 800743a:	4313      	orrs	r3, r2
 800743c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800743e:	697b      	ldr	r3, [r7, #20]
 8007440:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007444:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	4a16      	ldr	r2, [pc, #88]	; (80074a4 <TIM_OC3_SetConfig+0xe0>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d003      	beq.n	8007456 <TIM_OC3_SetConfig+0x92>
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	4a15      	ldr	r2, [pc, #84]	; (80074a8 <TIM_OC3_SetConfig+0xe4>)
 8007452:	4293      	cmp	r3, r2
 8007454:	d113      	bne.n	800747e <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007456:	693b      	ldr	r3, [r7, #16]
 8007458:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800745c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800745e:	693b      	ldr	r3, [r7, #16]
 8007460:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007464:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007466:	683b      	ldr	r3, [r7, #0]
 8007468:	695b      	ldr	r3, [r3, #20]
 800746a:	011b      	lsls	r3, r3, #4
 800746c:	693a      	ldr	r2, [r7, #16]
 800746e:	4313      	orrs	r3, r2
 8007470:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007472:	683b      	ldr	r3, [r7, #0]
 8007474:	699b      	ldr	r3, [r3, #24]
 8007476:	011b      	lsls	r3, r3, #4
 8007478:	693a      	ldr	r2, [r7, #16]
 800747a:	4313      	orrs	r3, r2
 800747c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	693a      	ldr	r2, [r7, #16]
 8007482:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	68fa      	ldr	r2, [r7, #12]
 8007488:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800748a:	683b      	ldr	r3, [r7, #0]
 800748c:	685a      	ldr	r2, [r3, #4]
 800748e:	687b      	ldr	r3, [r7, #4]
 8007490:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007492:	687b      	ldr	r3, [r7, #4]
 8007494:	697a      	ldr	r2, [r7, #20]
 8007496:	621a      	str	r2, [r3, #32]
}
 8007498:	bf00      	nop
 800749a:	371c      	adds	r7, #28
 800749c:	46bd      	mov	sp, r7
 800749e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074a2:	4770      	bx	lr
 80074a4:	40010000 	.word	0x40010000
 80074a8:	40010400 	.word	0x40010400

080074ac <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80074ac:	b480      	push	{r7}
 80074ae:	b087      	sub	sp, #28
 80074b0:	af00      	add	r7, sp, #0
 80074b2:	6078      	str	r0, [r7, #4]
 80074b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80074b6:	687b      	ldr	r3, [r7, #4]
 80074b8:	6a1b      	ldr	r3, [r3, #32]
 80074ba:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80074be:	687b      	ldr	r3, [r7, #4]
 80074c0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80074c2:	687b      	ldr	r3, [r7, #4]
 80074c4:	6a1b      	ldr	r3, [r3, #32]
 80074c6:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80074c8:	687b      	ldr	r3, [r7, #4]
 80074ca:	685b      	ldr	r3, [r3, #4]
 80074cc:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	69db      	ldr	r3, [r3, #28]
 80074d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80074d4:	68fb      	ldr	r3, [r7, #12]
 80074d6:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80074da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80074e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80074e4:	683b      	ldr	r3, [r7, #0]
 80074e6:	681b      	ldr	r3, [r3, #0]
 80074e8:	021b      	lsls	r3, r3, #8
 80074ea:	68fa      	ldr	r2, [r7, #12]
 80074ec:	4313      	orrs	r3, r2
 80074ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80074f0:	693b      	ldr	r3, [r7, #16]
 80074f2:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074f6:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80074f8:	683b      	ldr	r3, [r7, #0]
 80074fa:	689b      	ldr	r3, [r3, #8]
 80074fc:	031b      	lsls	r3, r3, #12
 80074fe:	693a      	ldr	r2, [r7, #16]
 8007500:	4313      	orrs	r3, r2
 8007502:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007504:	687b      	ldr	r3, [r7, #4]
 8007506:	4a12      	ldr	r2, [pc, #72]	; (8007550 <TIM_OC4_SetConfig+0xa4>)
 8007508:	4293      	cmp	r3, r2
 800750a:	d003      	beq.n	8007514 <TIM_OC4_SetConfig+0x68>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	4a11      	ldr	r2, [pc, #68]	; (8007554 <TIM_OC4_SetConfig+0xa8>)
 8007510:	4293      	cmp	r3, r2
 8007512:	d109      	bne.n	8007528 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007514:	697b      	ldr	r3, [r7, #20]
 8007516:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800751a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800751c:	683b      	ldr	r3, [r7, #0]
 800751e:	695b      	ldr	r3, [r3, #20]
 8007520:	019b      	lsls	r3, r3, #6
 8007522:	697a      	ldr	r2, [r7, #20]
 8007524:	4313      	orrs	r3, r2
 8007526:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007528:	687b      	ldr	r3, [r7, #4]
 800752a:	697a      	ldr	r2, [r7, #20]
 800752c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	68fa      	ldr	r2, [r7, #12]
 8007532:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007534:	683b      	ldr	r3, [r7, #0]
 8007536:	685a      	ldr	r2, [r3, #4]
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	693a      	ldr	r2, [r7, #16]
 8007540:	621a      	str	r2, [r3, #32]
}
 8007542:	bf00      	nop
 8007544:	371c      	adds	r7, #28
 8007546:	46bd      	mov	sp, r7
 8007548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800754c:	4770      	bx	lr
 800754e:	bf00      	nop
 8007550:	40010000 	.word	0x40010000
 8007554:	40010400 	.word	0x40010400

08007558 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007558:	b480      	push	{r7}
 800755a:	b087      	sub	sp, #28
 800755c:	af00      	add	r7, sp, #0
 800755e:	60f8      	str	r0, [r7, #12]
 8007560:	60b9      	str	r1, [r7, #8]
 8007562:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007564:	68fb      	ldr	r3, [r7, #12]
 8007566:	6a1b      	ldr	r3, [r3, #32]
 8007568:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800756a:	68fb      	ldr	r3, [r7, #12]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	f023 0201 	bic.w	r2, r3, #1
 8007572:	68fb      	ldr	r3, [r7, #12]
 8007574:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007576:	68fb      	ldr	r3, [r7, #12]
 8007578:	699b      	ldr	r3, [r3, #24]
 800757a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800757c:	693b      	ldr	r3, [r7, #16]
 800757e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007582:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	011b      	lsls	r3, r3, #4
 8007588:	693a      	ldr	r2, [r7, #16]
 800758a:	4313      	orrs	r3, r2
 800758c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800758e:	697b      	ldr	r3, [r7, #20]
 8007590:	f023 030a 	bic.w	r3, r3, #10
 8007594:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007596:	697a      	ldr	r2, [r7, #20]
 8007598:	68bb      	ldr	r3, [r7, #8]
 800759a:	4313      	orrs	r3, r2
 800759c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800759e:	68fb      	ldr	r3, [r7, #12]
 80075a0:	693a      	ldr	r2, [r7, #16]
 80075a2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075a4:	68fb      	ldr	r3, [r7, #12]
 80075a6:	697a      	ldr	r2, [r7, #20]
 80075a8:	621a      	str	r2, [r3, #32]
}
 80075aa:	bf00      	nop
 80075ac:	371c      	adds	r7, #28
 80075ae:	46bd      	mov	sp, r7
 80075b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075b4:	4770      	bx	lr

080075b6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075b6:	b480      	push	{r7}
 80075b8:	b087      	sub	sp, #28
 80075ba:	af00      	add	r7, sp, #0
 80075bc:	60f8      	str	r0, [r7, #12]
 80075be:	60b9      	str	r1, [r7, #8]
 80075c0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	6a1b      	ldr	r3, [r3, #32]
 80075c6:	f023 0210 	bic.w	r2, r3, #16
 80075ca:	68fb      	ldr	r3, [r7, #12]
 80075cc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075ce:	68fb      	ldr	r3, [r7, #12]
 80075d0:	699b      	ldr	r3, [r3, #24]
 80075d2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80075d4:	68fb      	ldr	r3, [r7, #12]
 80075d6:	6a1b      	ldr	r3, [r3, #32]
 80075d8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80075da:	697b      	ldr	r3, [r7, #20]
 80075dc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80075e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80075e2:	687b      	ldr	r3, [r7, #4]
 80075e4:	031b      	lsls	r3, r3, #12
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	4313      	orrs	r3, r2
 80075ea:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80075ec:	693b      	ldr	r3, [r7, #16]
 80075ee:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80075f2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80075f4:	68bb      	ldr	r3, [r7, #8]
 80075f6:	011b      	lsls	r3, r3, #4
 80075f8:	693a      	ldr	r2, [r7, #16]
 80075fa:	4313      	orrs	r3, r2
 80075fc:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80075fe:	68fb      	ldr	r3, [r7, #12]
 8007600:	697a      	ldr	r2, [r7, #20]
 8007602:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007604:	68fb      	ldr	r3, [r7, #12]
 8007606:	693a      	ldr	r2, [r7, #16]
 8007608:	621a      	str	r2, [r3, #32]
}
 800760a:	bf00      	nop
 800760c:	371c      	adds	r7, #28
 800760e:	46bd      	mov	sp, r7
 8007610:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007614:	4770      	bx	lr

08007616 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007616:	b480      	push	{r7}
 8007618:	b085      	sub	sp, #20
 800761a:	af00      	add	r7, sp, #0
 800761c:	6078      	str	r0, [r7, #4]
 800761e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	689b      	ldr	r3, [r3, #8]
 8007624:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007626:	68fb      	ldr	r3, [r7, #12]
 8007628:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800762c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800762e:	683a      	ldr	r2, [r7, #0]
 8007630:	68fb      	ldr	r3, [r7, #12]
 8007632:	4313      	orrs	r3, r2
 8007634:	f043 0307 	orr.w	r3, r3, #7
 8007638:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800763a:	687b      	ldr	r3, [r7, #4]
 800763c:	68fa      	ldr	r2, [r7, #12]
 800763e:	609a      	str	r2, [r3, #8]
}
 8007640:	bf00      	nop
 8007642:	3714      	adds	r7, #20
 8007644:	46bd      	mov	sp, r7
 8007646:	f85d 7b04 	ldr.w	r7, [sp], #4
 800764a:	4770      	bx	lr

0800764c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800764c:	b480      	push	{r7}
 800764e:	b087      	sub	sp, #28
 8007650:	af00      	add	r7, sp, #0
 8007652:	60f8      	str	r0, [r7, #12]
 8007654:	60b9      	str	r1, [r7, #8]
 8007656:	607a      	str	r2, [r7, #4]
 8007658:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800765a:	68fb      	ldr	r3, [r7, #12]
 800765c:	689b      	ldr	r3, [r3, #8]
 800765e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007660:	697b      	ldr	r3, [r7, #20]
 8007662:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007666:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8007668:	683b      	ldr	r3, [r7, #0]
 800766a:	021a      	lsls	r2, r3, #8
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	431a      	orrs	r2, r3
 8007670:	68bb      	ldr	r3, [r7, #8]
 8007672:	4313      	orrs	r3, r2
 8007674:	697a      	ldr	r2, [r7, #20]
 8007676:	4313      	orrs	r3, r2
 8007678:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800767a:	68fb      	ldr	r3, [r7, #12]
 800767c:	697a      	ldr	r2, [r7, #20]
 800767e:	609a      	str	r2, [r3, #8]
}
 8007680:	bf00      	nop
 8007682:	371c      	adds	r7, #28
 8007684:	46bd      	mov	sp, r7
 8007686:	f85d 7b04 	ldr.w	r7, [sp], #4
 800768a:	4770      	bx	lr

0800768c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800768c:	b480      	push	{r7}
 800768e:	b087      	sub	sp, #28
 8007690:	af00      	add	r7, sp, #0
 8007692:	60f8      	str	r0, [r7, #12]
 8007694:	60b9      	str	r1, [r7, #8]
 8007696:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8007698:	68bb      	ldr	r3, [r7, #8]
 800769a:	f003 031f 	and.w	r3, r3, #31
 800769e:	2201      	movs	r2, #1
 80076a0:	fa02 f303 	lsl.w	r3, r2, r3
 80076a4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6a1a      	ldr	r2, [r3, #32]
 80076aa:	697b      	ldr	r3, [r7, #20]
 80076ac:	43db      	mvns	r3, r3
 80076ae:	401a      	ands	r2, r3
 80076b0:	68fb      	ldr	r3, [r7, #12]
 80076b2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	6a1a      	ldr	r2, [r3, #32]
 80076b8:	68bb      	ldr	r3, [r7, #8]
 80076ba:	f003 031f 	and.w	r3, r3, #31
 80076be:	6879      	ldr	r1, [r7, #4]
 80076c0:	fa01 f303 	lsl.w	r3, r1, r3
 80076c4:	431a      	orrs	r2, r3
 80076c6:	68fb      	ldr	r3, [r7, #12]
 80076c8:	621a      	str	r2, [r3, #32]
}
 80076ca:	bf00      	nop
 80076cc:	371c      	adds	r7, #28
 80076ce:	46bd      	mov	sp, r7
 80076d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076d4:	4770      	bx	lr
	...

080076d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80076d8:	b480      	push	{r7}
 80076da:	b085      	sub	sp, #20
 80076dc:	af00      	add	r7, sp, #0
 80076de:	6078      	str	r0, [r7, #4]
 80076e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80076e8:	2b01      	cmp	r3, #1
 80076ea:	d101      	bne.n	80076f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80076ec:	2302      	movs	r3, #2
 80076ee:	e05a      	b.n	80077a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80076f0:	687b      	ldr	r3, [r7, #4]
 80076f2:	2201      	movs	r2, #1
 80076f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	2202      	movs	r2, #2
 80076fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007700:	687b      	ldr	r3, [r7, #4]
 8007702:	681b      	ldr	r3, [r3, #0]
 8007704:	685b      	ldr	r3, [r3, #4]
 8007706:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007708:	687b      	ldr	r3, [r7, #4]
 800770a:	681b      	ldr	r3, [r3, #0]
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007710:	68fb      	ldr	r3, [r7, #12]
 8007712:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007716:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007718:	683b      	ldr	r3, [r7, #0]
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	68fa      	ldr	r2, [r7, #12]
 800771e:	4313      	orrs	r3, r2
 8007720:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	681b      	ldr	r3, [r3, #0]
 8007726:	68fa      	ldr	r2, [r7, #12]
 8007728:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	681b      	ldr	r3, [r3, #0]
 800772e:	4a21      	ldr	r2, [pc, #132]	; (80077b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8007730:	4293      	cmp	r3, r2
 8007732:	d022      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007734:	687b      	ldr	r3, [r7, #4]
 8007736:	681b      	ldr	r3, [r3, #0]
 8007738:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800773c:	d01d      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800773e:	687b      	ldr	r3, [r7, #4]
 8007740:	681b      	ldr	r3, [r3, #0]
 8007742:	4a1d      	ldr	r2, [pc, #116]	; (80077b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8007744:	4293      	cmp	r3, r2
 8007746:	d018      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	4a1b      	ldr	r2, [pc, #108]	; (80077bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800774e:	4293      	cmp	r3, r2
 8007750:	d013      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007752:	687b      	ldr	r3, [r7, #4]
 8007754:	681b      	ldr	r3, [r3, #0]
 8007756:	4a1a      	ldr	r2, [pc, #104]	; (80077c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8007758:	4293      	cmp	r3, r2
 800775a:	d00e      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800775c:	687b      	ldr	r3, [r7, #4]
 800775e:	681b      	ldr	r3, [r3, #0]
 8007760:	4a18      	ldr	r2, [pc, #96]	; (80077c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8007762:	4293      	cmp	r3, r2
 8007764:	d009      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007766:	687b      	ldr	r3, [r7, #4]
 8007768:	681b      	ldr	r3, [r3, #0]
 800776a:	4a17      	ldr	r2, [pc, #92]	; (80077c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800776c:	4293      	cmp	r3, r2
 800776e:	d004      	beq.n	800777a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8007770:	687b      	ldr	r3, [r7, #4]
 8007772:	681b      	ldr	r3, [r3, #0]
 8007774:	4a15      	ldr	r2, [pc, #84]	; (80077cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8007776:	4293      	cmp	r3, r2
 8007778:	d10c      	bne.n	8007794 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800777a:	68bb      	ldr	r3, [r7, #8]
 800777c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007780:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8007782:	683b      	ldr	r3, [r7, #0]
 8007784:	685b      	ldr	r3, [r3, #4]
 8007786:	68ba      	ldr	r2, [r7, #8]
 8007788:	4313      	orrs	r3, r2
 800778a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	68ba      	ldr	r2, [r7, #8]
 8007792:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8007794:	687b      	ldr	r3, [r7, #4]
 8007796:	2201      	movs	r2, #1
 8007798:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800779c:	687b      	ldr	r3, [r7, #4]
 800779e:	2200      	movs	r2, #0
 80077a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077a4:	2300      	movs	r3, #0
}
 80077a6:	4618      	mov	r0, r3
 80077a8:	3714      	adds	r7, #20
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	40010000 	.word	0x40010000
 80077b8:	40000400 	.word	0x40000400
 80077bc:	40000800 	.word	0x40000800
 80077c0:	40000c00 	.word	0x40000c00
 80077c4:	40010400 	.word	0x40010400
 80077c8:	40014000 	.word	0x40014000
 80077cc:	40001800 	.word	0x40001800

080077d0 <HAL_TIMEx_ConfigBreakDeadTime>:
  *         interrupt can be enabled by calling the @ref __HAL_TIM_ENABLE_IT macro.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_ConfigBreakDeadTime(TIM_HandleTypeDef *htim,
                                                TIM_BreakDeadTimeConfigTypeDef *sBreakDeadTimeConfig)
{
 80077d0:	b480      	push	{r7}
 80077d2:	b085      	sub	sp, #20
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
 80077d8:	6039      	str	r1, [r7, #0]
  /* Keep this variable initialized to 0 as it is used to configure BDTR register */
  uint32_t tmpbdtr = 0U;
 80077da:	2300      	movs	r3, #0
 80077dc:	60fb      	str	r3, [r7, #12]
  assert_param(IS_TIM_BREAK_STATE(sBreakDeadTimeConfig->BreakState));
  assert_param(IS_TIM_BREAK_POLARITY(sBreakDeadTimeConfig->BreakPolarity));
  assert_param(IS_TIM_AUTOMATIC_OUTPUT_STATE(sBreakDeadTimeConfig->AutomaticOutput));

  /* Check input state */
  __HAL_LOCK(htim);
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80077e4:	2b01      	cmp	r3, #1
 80077e6:	d101      	bne.n	80077ec <HAL_TIMEx_ConfigBreakDeadTime+0x1c>
 80077e8:	2302      	movs	r3, #2
 80077ea:	e03d      	b.n	8007868 <HAL_TIMEx_ConfigBreakDeadTime+0x98>
 80077ec:	687b      	ldr	r3, [r7, #4]
 80077ee:	2201      	movs	r2, #1
 80077f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Set the Lock level, the Break enable Bit and the Polarity, the OSSR State,
     the OSSI State, the dead time value and the Automatic Output Enable Bit */

  /* Set the BDTR bits */
  MODIFY_REG(tmpbdtr, TIM_BDTR_DTG, sBreakDeadTimeConfig->DeadTime);
 80077f4:	68fb      	ldr	r3, [r7, #12]
 80077f6:	f023 02ff 	bic.w	r2, r3, #255	; 0xff
 80077fa:	683b      	ldr	r3, [r7, #0]
 80077fc:	68db      	ldr	r3, [r3, #12]
 80077fe:	4313      	orrs	r3, r2
 8007800:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_LOCK, sBreakDeadTimeConfig->LockLevel);
 8007802:	68fb      	ldr	r3, [r7, #12]
 8007804:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8007808:	683b      	ldr	r3, [r7, #0]
 800780a:	689b      	ldr	r3, [r3, #8]
 800780c:	4313      	orrs	r3, r2
 800780e:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSI, sBreakDeadTimeConfig->OffStateIDLEMode);
 8007810:	68fb      	ldr	r3, [r7, #12]
 8007812:	f423 6280 	bic.w	r2, r3, #1024	; 0x400
 8007816:	683b      	ldr	r3, [r7, #0]
 8007818:	685b      	ldr	r3, [r3, #4]
 800781a:	4313      	orrs	r3, r2
 800781c:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_OSSR, sBreakDeadTimeConfig->OffStateRunMode);
 800781e:	68fb      	ldr	r3, [r7, #12]
 8007820:	f423 6200 	bic.w	r2, r3, #2048	; 0x800
 8007824:	683b      	ldr	r3, [r7, #0]
 8007826:	681b      	ldr	r3, [r3, #0]
 8007828:	4313      	orrs	r3, r2
 800782a:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKE, sBreakDeadTimeConfig->BreakState);
 800782c:	68fb      	ldr	r3, [r7, #12]
 800782e:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007832:	683b      	ldr	r3, [r7, #0]
 8007834:	691b      	ldr	r3, [r3, #16]
 8007836:	4313      	orrs	r3, r2
 8007838:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_BKP, sBreakDeadTimeConfig->BreakPolarity);
 800783a:	68fb      	ldr	r3, [r7, #12]
 800783c:	f423 5200 	bic.w	r2, r3, #8192	; 0x2000
 8007840:	683b      	ldr	r3, [r7, #0]
 8007842:	695b      	ldr	r3, [r3, #20]
 8007844:	4313      	orrs	r3, r2
 8007846:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(tmpbdtr, TIM_BDTR_AOE, sBreakDeadTimeConfig->AutomaticOutput);
 8007848:	68fb      	ldr	r3, [r7, #12]
 800784a:	f423 4280 	bic.w	r2, r3, #16384	; 0x4000
 800784e:	683b      	ldr	r3, [r7, #0]
 8007850:	69db      	ldr	r3, [r3, #28]
 8007852:	4313      	orrs	r3, r2
 8007854:	60fb      	str	r3, [r7, #12]


  /* Set TIMx_BDTR */
  htim->Instance->BDTR = tmpbdtr;
 8007856:	687b      	ldr	r3, [r7, #4]
 8007858:	681b      	ldr	r3, [r3, #0]
 800785a:	68fa      	ldr	r2, [r7, #12]
 800785c:	645a      	str	r2, [r3, #68]	; 0x44

  __HAL_UNLOCK(htim);
 800785e:	687b      	ldr	r3, [r7, #4]
 8007860:	2200      	movs	r2, #0
 8007862:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007866:	2300      	movs	r3, #0
}
 8007868:	4618      	mov	r0, r3
 800786a:	3714      	adds	r7, #20
 800786c:	46bd      	mov	sp, r7
 800786e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007872:	4770      	bx	lr

08007874 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007874:	b480      	push	{r7}
 8007876:	b083      	sub	sp, #12
 8007878:	af00      	add	r7, sp, #0
 800787a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800787c:	bf00      	nop
 800787e:	370c      	adds	r7, #12
 8007880:	46bd      	mov	sp, r7
 8007882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007886:	4770      	bx	lr

08007888 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007888:	b480      	push	{r7}
 800788a:	b083      	sub	sp, #12
 800788c:	af00      	add	r7, sp, #0
 800788e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007890:	bf00      	nop
 8007892:	370c      	adds	r7, #12
 8007894:	46bd      	mov	sp, r7
 8007896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789a:	4770      	bx	lr

0800789c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800789c:	b580      	push	{r7, lr}
 800789e:	b082      	sub	sp, #8
 80078a0:	af00      	add	r7, sp, #0
 80078a2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80078a4:	687b      	ldr	r3, [r7, #4]
 80078a6:	2b00      	cmp	r3, #0
 80078a8:	d101      	bne.n	80078ae <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80078aa:	2301      	movs	r3, #1
 80078ac:	e03f      	b.n	800792e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80078ae:	687b      	ldr	r3, [r7, #4]
 80078b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b4:	b2db      	uxtb	r3, r3
 80078b6:	2b00      	cmp	r3, #0
 80078b8:	d106      	bne.n	80078c8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80078ba:	687b      	ldr	r3, [r7, #4]
 80078bc:	2200      	movs	r2, #0
 80078be:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80078c2:	6878      	ldr	r0, [r7, #4]
 80078c4:	f7fc f972 	bl	8003bac <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80078c8:	687b      	ldr	r3, [r7, #4]
 80078ca:	2224      	movs	r2, #36	; 0x24
 80078cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	681b      	ldr	r3, [r3, #0]
 80078d4:	68da      	ldr	r2, [r3, #12]
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	681b      	ldr	r3, [r3, #0]
 80078da:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80078de:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fddf 	bl	80084a4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	681b      	ldr	r3, [r3, #0]
 80078ea:	691a      	ldr	r2, [r3, #16]
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80078f4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80078f6:	687b      	ldr	r3, [r7, #4]
 80078f8:	681b      	ldr	r3, [r3, #0]
 80078fa:	695a      	ldr	r2, [r3, #20]
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	681b      	ldr	r3, [r3, #0]
 8007900:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007904:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007906:	687b      	ldr	r3, [r7, #4]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	68da      	ldr	r2, [r3, #12]
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8007914:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2220      	movs	r2, #32
 8007920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2220      	movs	r2, #32
 8007928:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}

08007936 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8007936:	b580      	push	{r7, lr}
 8007938:	b08a      	sub	sp, #40	; 0x28
 800793a:	af02      	add	r7, sp, #8
 800793c:	60f8      	str	r0, [r7, #12]
 800793e:	60b9      	str	r1, [r7, #8]
 8007940:	603b      	str	r3, [r7, #0]
 8007942:	4613      	mov	r3, r2
 8007944:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8007946:	2300      	movs	r3, #0
 8007948:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007950:	b2db      	uxtb	r3, r3
 8007952:	2b20      	cmp	r3, #32
 8007954:	d17c      	bne.n	8007a50 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8007956:	68bb      	ldr	r3, [r7, #8]
 8007958:	2b00      	cmp	r3, #0
 800795a:	d002      	beq.n	8007962 <HAL_UART_Transmit+0x2c>
 800795c:	88fb      	ldrh	r3, [r7, #6]
 800795e:	2b00      	cmp	r3, #0
 8007960:	d101      	bne.n	8007966 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8007962:	2301      	movs	r3, #1
 8007964:	e075      	b.n	8007a52 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007966:	68fb      	ldr	r3, [r7, #12]
 8007968:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800796c:	2b01      	cmp	r3, #1
 800796e:	d101      	bne.n	8007974 <HAL_UART_Transmit+0x3e>
 8007970:	2302      	movs	r3, #2
 8007972:	e06e      	b.n	8007a52 <HAL_UART_Transmit+0x11c>
 8007974:	68fb      	ldr	r3, [r7, #12]
 8007976:	2201      	movs	r2, #1
 8007978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	2200      	movs	r2, #0
 8007980:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007982:	68fb      	ldr	r3, [r7, #12]
 8007984:	2221      	movs	r2, #33	; 0x21
 8007986:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800798a:	f7fc fb3d 	bl	8004008 <HAL_GetTick>
 800798e:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	88fa      	ldrh	r2, [r7, #6]
 8007994:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007996:	68fb      	ldr	r3, [r7, #12]
 8007998:	88fa      	ldrh	r2, [r7, #6]
 800799a:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800799c:	68fb      	ldr	r3, [r7, #12]
 800799e:	689b      	ldr	r3, [r3, #8]
 80079a0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80079a4:	d108      	bne.n	80079b8 <HAL_UART_Transmit+0x82>
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	691b      	ldr	r3, [r3, #16]
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d104      	bne.n	80079b8 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 80079ae:	2300      	movs	r3, #0
 80079b0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80079b2:	68bb      	ldr	r3, [r7, #8]
 80079b4:	61bb      	str	r3, [r7, #24]
 80079b6:	e003      	b.n	80079c0 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 80079b8:	68bb      	ldr	r3, [r7, #8]
 80079ba:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80079bc:	2300      	movs	r3, #0
 80079be:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 80079c0:	68fb      	ldr	r3, [r7, #12]
 80079c2:	2200      	movs	r2, #0
 80079c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 80079c8:	e02a      	b.n	8007a20 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80079ca:	683b      	ldr	r3, [r7, #0]
 80079cc:	9300      	str	r3, [sp, #0]
 80079ce:	697b      	ldr	r3, [r7, #20]
 80079d0:	2200      	movs	r2, #0
 80079d2:	2180      	movs	r1, #128	; 0x80
 80079d4:	68f8      	ldr	r0, [r7, #12]
 80079d6:	f000 fb1f 	bl	8008018 <UART_WaitOnFlagUntilTimeout>
 80079da:	4603      	mov	r3, r0
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d001      	beq.n	80079e4 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 80079e0:	2303      	movs	r3, #3
 80079e2:	e036      	b.n	8007a52 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 80079e4:	69fb      	ldr	r3, [r7, #28]
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d10b      	bne.n	8007a02 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80079ea:	69bb      	ldr	r3, [r7, #24]
 80079ec:	881b      	ldrh	r3, [r3, #0]
 80079ee:	461a      	mov	r2, r3
 80079f0:	68fb      	ldr	r3, [r7, #12]
 80079f2:	681b      	ldr	r3, [r3, #0]
 80079f4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80079f8:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80079fa:	69bb      	ldr	r3, [r7, #24]
 80079fc:	3302      	adds	r3, #2
 80079fe:	61bb      	str	r3, [r7, #24]
 8007a00:	e007      	b.n	8007a12 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8007a02:	69fb      	ldr	r3, [r7, #28]
 8007a04:	781a      	ldrb	r2, [r3, #0]
 8007a06:	68fb      	ldr	r3, [r7, #12]
 8007a08:	681b      	ldr	r3, [r3, #0]
 8007a0a:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8007a0c:	69fb      	ldr	r3, [r7, #28]
 8007a0e:	3301      	adds	r3, #1
 8007a10:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a16:	b29b      	uxth	r3, r3
 8007a18:	3b01      	subs	r3, #1
 8007a1a:	b29a      	uxth	r2, r3
 8007a1c:	68fb      	ldr	r3, [r7, #12]
 8007a1e:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007a24:	b29b      	uxth	r3, r3
 8007a26:	2b00      	cmp	r3, #0
 8007a28:	d1cf      	bne.n	80079ca <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8007a2a:	683b      	ldr	r3, [r7, #0]
 8007a2c:	9300      	str	r3, [sp, #0]
 8007a2e:	697b      	ldr	r3, [r7, #20]
 8007a30:	2200      	movs	r2, #0
 8007a32:	2140      	movs	r1, #64	; 0x40
 8007a34:	68f8      	ldr	r0, [r7, #12]
 8007a36:	f000 faef 	bl	8008018 <UART_WaitOnFlagUntilTimeout>
 8007a3a:	4603      	mov	r3, r0
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d001      	beq.n	8007a44 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8007a40:	2303      	movs	r3, #3
 8007a42:	e006      	b.n	8007a52 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	2220      	movs	r2, #32
 8007a48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8007a4c:	2300      	movs	r3, #0
 8007a4e:	e000      	b.n	8007a52 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8007a50:	2302      	movs	r3, #2
  }
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3720      	adds	r7, #32
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	60f8      	str	r0, [r7, #12]
 8007a62:	60b9      	str	r1, [r7, #8]
 8007a64:	4613      	mov	r3, r2
 8007a66:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8007a68:	68fb      	ldr	r3, [r7, #12]
 8007a6a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007a6e:	b2db      	uxtb	r3, r3
 8007a70:	2b20      	cmp	r3, #32
 8007a72:	d11d      	bne.n	8007ab0 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8007a74:	68bb      	ldr	r3, [r7, #8]
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d002      	beq.n	8007a80 <HAL_UART_Receive_IT+0x26>
 8007a7a:	88fb      	ldrh	r3, [r7, #6]
 8007a7c:	2b00      	cmp	r3, #0
 8007a7e:	d101      	bne.n	8007a84 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8007a80:	2301      	movs	r3, #1
 8007a82:	e016      	b.n	8007ab2 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a8a:	2b01      	cmp	r3, #1
 8007a8c:	d101      	bne.n	8007a92 <HAL_UART_Receive_IT+0x38>
 8007a8e:	2302      	movs	r3, #2
 8007a90:	e00f      	b.n	8007ab2 <HAL_UART_Receive_IT+0x58>
 8007a92:	68fb      	ldr	r3, [r7, #12]
 8007a94:	2201      	movs	r2, #1
 8007a96:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2200      	movs	r2, #0
 8007a9e:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8007aa0:	88fb      	ldrh	r3, [r7, #6]
 8007aa2:	461a      	mov	r2, r3
 8007aa4:	68b9      	ldr	r1, [r7, #8]
 8007aa6:	68f8      	ldr	r0, [r7, #12]
 8007aa8:	f000 fb24 	bl	80080f4 <UART_Start_Receive_IT>
 8007aac:	4603      	mov	r3, r0
 8007aae:	e000      	b.n	8007ab2 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8007ab0:	2302      	movs	r3, #2
  }
}
 8007ab2:	4618      	mov	r0, r3
 8007ab4:	3710      	adds	r7, #16
 8007ab6:	46bd      	mov	sp, r7
 8007ab8:	bd80      	pop	{r7, pc}
	...

08007abc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007abc:	b580      	push	{r7, lr}
 8007abe:	b0ba      	sub	sp, #232	; 0xe8
 8007ac0:	af00      	add	r7, sp, #0
 8007ac2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681b      	ldr	r3, [r3, #0]
 8007aca:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007ace:	687b      	ldr	r3, [r7, #4]
 8007ad0:	681b      	ldr	r3, [r3, #0]
 8007ad2:	68db      	ldr	r3, [r3, #12]
 8007ad4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	681b      	ldr	r3, [r3, #0]
 8007adc:	695b      	ldr	r3, [r3, #20]
 8007ade:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8007ae2:	2300      	movs	r3, #0
 8007ae4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8007ae8:	2300      	movs	r3, #0
 8007aea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007af2:	f003 030f 	and.w	r3, r3, #15
 8007af6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8007afa:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	d10f      	bne.n	8007b22 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d009      	beq.n	8007b22 <HAL_UART_IRQHandler+0x66>
 8007b0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b12:	f003 0320 	and.w	r3, r3, #32
 8007b16:	2b00      	cmp	r3, #0
 8007b18:	d003      	beq.n	8007b22 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8007b1a:	6878      	ldr	r0, [r7, #4]
 8007b1c:	f000 fc07 	bl	800832e <UART_Receive_IT>
      return;
 8007b20:	e256      	b.n	8007fd0 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8007b22:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8007b26:	2b00      	cmp	r3, #0
 8007b28:	f000 80de 	beq.w	8007ce8 <HAL_UART_IRQHandler+0x22c>
 8007b2c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b30:	f003 0301 	and.w	r3, r3, #1
 8007b34:	2b00      	cmp	r3, #0
 8007b36:	d106      	bne.n	8007b46 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007b38:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b3c:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	f000 80d1 	beq.w	8007ce8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007b46:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b4a:	f003 0301 	and.w	r3, r3, #1
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d00b      	beq.n	8007b6a <HAL_UART_IRQHandler+0xae>
 8007b52:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007b56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007b5a:	2b00      	cmp	r3, #0
 8007b5c:	d005      	beq.n	8007b6a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007b5e:	687b      	ldr	r3, [r7, #4]
 8007b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b62:	f043 0201 	orr.w	r2, r3, #1
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b6a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b6e:	f003 0304 	and.w	r3, r3, #4
 8007b72:	2b00      	cmp	r3, #0
 8007b74:	d00b      	beq.n	8007b8e <HAL_UART_IRQHandler+0xd2>
 8007b76:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b7a:	f003 0301 	and.w	r3, r3, #1
 8007b7e:	2b00      	cmp	r3, #0
 8007b80:	d005      	beq.n	8007b8e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b86:	f043 0202 	orr.w	r2, r3, #2
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007b8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007b92:	f003 0302 	and.w	r3, r3, #2
 8007b96:	2b00      	cmp	r3, #0
 8007b98:	d00b      	beq.n	8007bb2 <HAL_UART_IRQHandler+0xf6>
 8007b9a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007b9e:	f003 0301 	and.w	r3, r3, #1
 8007ba2:	2b00      	cmp	r3, #0
 8007ba4:	d005      	beq.n	8007bb2 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007baa:	f043 0204 	orr.w	r2, r3, #4
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8007bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bb6:	f003 0308 	and.w	r3, r3, #8
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d011      	beq.n	8007be2 <HAL_UART_IRQHandler+0x126>
 8007bbe:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bc2:	f003 0320 	and.w	r3, r3, #32
 8007bc6:	2b00      	cmp	r3, #0
 8007bc8:	d105      	bne.n	8007bd6 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8007bca:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8007bce:	f003 0301 	and.w	r3, r3, #1
 8007bd2:	2b00      	cmp	r3, #0
 8007bd4:	d005      	beq.n	8007be2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007bda:	f043 0208 	orr.w	r2, r3, #8
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007be6:	2b00      	cmp	r3, #0
 8007be8:	f000 81ed 	beq.w	8007fc6 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007bec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007bf0:	f003 0320 	and.w	r3, r3, #32
 8007bf4:	2b00      	cmp	r3, #0
 8007bf6:	d008      	beq.n	8007c0a <HAL_UART_IRQHandler+0x14e>
 8007bf8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007bfc:	f003 0320 	and.w	r3, r3, #32
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d002      	beq.n	8007c0a <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8007c04:	6878      	ldr	r0, [r7, #4]
 8007c06:	f000 fb92 	bl	800832e <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	695b      	ldr	r3, [r3, #20]
 8007c10:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c14:	2b40      	cmp	r3, #64	; 0x40
 8007c16:	bf0c      	ite	eq
 8007c18:	2301      	moveq	r3, #1
 8007c1a:	2300      	movne	r3, #0
 8007c1c:	b2db      	uxtb	r3, r3
 8007c1e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c26:	f003 0308 	and.w	r3, r3, #8
 8007c2a:	2b00      	cmp	r3, #0
 8007c2c:	d103      	bne.n	8007c36 <HAL_UART_IRQHandler+0x17a>
 8007c2e:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8007c32:	2b00      	cmp	r3, #0
 8007c34:	d04f      	beq.n	8007cd6 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007c36:	6878      	ldr	r0, [r7, #4]
 8007c38:	f000 fa9a 	bl	8008170 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007c3c:	687b      	ldr	r3, [r7, #4]
 8007c3e:	681b      	ldr	r3, [r3, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007c46:	2b40      	cmp	r3, #64	; 0x40
 8007c48:	d141      	bne.n	8007cce <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c4a:	687b      	ldr	r3, [r7, #4]
 8007c4c:	681b      	ldr	r3, [r3, #0]
 8007c4e:	3314      	adds	r3, #20
 8007c50:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c54:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8007c58:	e853 3f00 	ldrex	r3, [r3]
 8007c5c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8007c60:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8007c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007c68:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	3314      	adds	r3, #20
 8007c72:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8007c76:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8007c7a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c7e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8007c82:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8007c86:	e841 2300 	strex	r3, r2, [r1]
 8007c8a:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8007c8e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8007c92:	2b00      	cmp	r3, #0
 8007c94:	d1d9      	bne.n	8007c4a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007c96:	687b      	ldr	r3, [r7, #4]
 8007c98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c9a:	2b00      	cmp	r3, #0
 8007c9c:	d013      	beq.n	8007cc6 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007c9e:	687b      	ldr	r3, [r7, #4]
 8007ca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ca2:	4a7d      	ldr	r2, [pc, #500]	; (8007e98 <HAL_UART_IRQHandler+0x3dc>)
 8007ca4:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007caa:	4618      	mov	r0, r3
 8007cac:	f7fc fd90 	bl	80047d0 <HAL_DMA_Abort_IT>
 8007cb0:	4603      	mov	r3, r0
 8007cb2:	2b00      	cmp	r3, #0
 8007cb4:	d016      	beq.n	8007ce4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007cbc:	687a      	ldr	r2, [r7, #4]
 8007cbe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007cc0:	4610      	mov	r0, r2
 8007cc2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cc4:	e00e      	b.n	8007ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007cc6:	6878      	ldr	r0, [r7, #4]
 8007cc8:	f000 f990 	bl	8007fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ccc:	e00a      	b.n	8007ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007cce:	6878      	ldr	r0, [r7, #4]
 8007cd0:	f000 f98c 	bl	8007fec <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007cd4:	e006      	b.n	8007ce4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007cd6:	6878      	ldr	r0, [r7, #4]
 8007cd8:	f000 f988 	bl	8007fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007cdc:	687b      	ldr	r3, [r7, #4]
 8007cde:	2200      	movs	r2, #0
 8007ce0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007ce2:	e170      	b.n	8007fc6 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ce4:	bf00      	nop
    return;
 8007ce6:	e16e      	b.n	8007fc6 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007cec:	2b01      	cmp	r3, #1
 8007cee:	f040 814a 	bne.w	8007f86 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8007cf2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007cf6:	f003 0310 	and.w	r3, r3, #16
 8007cfa:	2b00      	cmp	r3, #0
 8007cfc:	f000 8143 	beq.w	8007f86 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8007d00:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007d04:	f003 0310 	and.w	r3, r3, #16
 8007d08:	2b00      	cmp	r3, #0
 8007d0a:	f000 813c 	beq.w	8007f86 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007d0e:	2300      	movs	r3, #0
 8007d10:	60bb      	str	r3, [r7, #8]
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	681b      	ldr	r3, [r3, #0]
 8007d18:	60bb      	str	r3, [r7, #8]
 8007d1a:	687b      	ldr	r3, [r7, #4]
 8007d1c:	681b      	ldr	r3, [r3, #0]
 8007d1e:	685b      	ldr	r3, [r3, #4]
 8007d20:	60bb      	str	r3, [r7, #8]
 8007d22:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007d24:	687b      	ldr	r3, [r7, #4]
 8007d26:	681b      	ldr	r3, [r3, #0]
 8007d28:	695b      	ldr	r3, [r3, #20]
 8007d2a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2e:	2b40      	cmp	r3, #64	; 0x40
 8007d30:	f040 80b4 	bne.w	8007e9c <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007d34:	687b      	ldr	r3, [r7, #4]
 8007d36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	685b      	ldr	r3, [r3, #4]
 8007d3c:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8007d40:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8007d44:	2b00      	cmp	r3, #0
 8007d46:	f000 8140 	beq.w	8007fca <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007d4e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d52:	429a      	cmp	r2, r3
 8007d54:	f080 8139 	bcs.w	8007fca <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8007d5e:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007d60:	687b      	ldr	r3, [r7, #4]
 8007d62:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007d64:	69db      	ldr	r3, [r3, #28]
 8007d66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007d6a:	f000 8088 	beq.w	8007e7e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	330c      	adds	r3, #12
 8007d74:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007d78:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8007d7c:	e853 3f00 	ldrex	r3, [r3]
 8007d80:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8007d84:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8007d88:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d8c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007d90:	687b      	ldr	r3, [r7, #4]
 8007d92:	681b      	ldr	r3, [r3, #0]
 8007d94:	330c      	adds	r3, #12
 8007d96:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8007d9a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007d9e:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007da2:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8007da6:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8007daa:	e841 2300 	strex	r3, r2, [r1]
 8007dae:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8007db2:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8007db6:	2b00      	cmp	r3, #0
 8007db8:	d1d9      	bne.n	8007d6e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	3314      	adds	r3, #20
 8007dc0:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dc2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8007dc4:	e853 3f00 	ldrex	r3, [r3]
 8007dc8:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8007dca:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8007dcc:	f023 0301 	bic.w	r3, r3, #1
 8007dd0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	3314      	adds	r3, #20
 8007dda:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8007dde:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8007de2:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007de4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8007de6:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8007dea:	e841 2300 	strex	r3, r2, [r1]
 8007dee:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8007df0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8007df2:	2b00      	cmp	r3, #0
 8007df4:	d1e1      	bne.n	8007dba <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007df6:	687b      	ldr	r3, [r7, #4]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	3314      	adds	r3, #20
 8007dfc:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007dfe:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8007e00:	e853 3f00 	ldrex	r3, [r3]
 8007e04:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8007e06:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8007e08:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007e0c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	3314      	adds	r3, #20
 8007e16:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8007e1a:	66fa      	str	r2, [r7, #108]	; 0x6c
 8007e1c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e1e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8007e20:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8007e22:	e841 2300 	strex	r3, r2, [r1]
 8007e26:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8007e28:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8007e2a:	2b00      	cmp	r3, #0
 8007e2c:	d1e3      	bne.n	8007df6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	2220      	movs	r2, #32
 8007e32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	2200      	movs	r2, #0
 8007e3a:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007e3c:	687b      	ldr	r3, [r7, #4]
 8007e3e:	681b      	ldr	r3, [r3, #0]
 8007e40:	330c      	adds	r3, #12
 8007e42:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007e44:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007e46:	e853 3f00 	ldrex	r3, [r3]
 8007e4a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8007e4c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8007e4e:	f023 0310 	bic.w	r3, r3, #16
 8007e52:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	681b      	ldr	r3, [r3, #0]
 8007e5a:	330c      	adds	r3, #12
 8007e5c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8007e60:	65ba      	str	r2, [r7, #88]	; 0x58
 8007e62:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007e64:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8007e66:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8007e68:	e841 2300 	strex	r3, r2, [r1]
 8007e6c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8007e6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007e70:	2b00      	cmp	r3, #0
 8007e72:	d1e3      	bne.n	8007e3c <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e78:	4618      	mov	r0, r3
 8007e7a:	f7fc fc39 	bl	80046f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007e82:	687b      	ldr	r3, [r7, #4]
 8007e84:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007e86:	b29b      	uxth	r3, r3
 8007e88:	1ad3      	subs	r3, r2, r3
 8007e8a:	b29b      	uxth	r3, r3
 8007e8c:	4619      	mov	r1, r3
 8007e8e:	6878      	ldr	r0, [r7, #4]
 8007e90:	f000 f8b6 	bl	8008000 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007e94:	e099      	b.n	8007fca <HAL_UART_IRQHandler+0x50e>
 8007e96:	bf00      	nop
 8007e98:	08008237 	.word	0x08008237
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007ea4:	b29b      	uxth	r3, r3
 8007ea6:	1ad3      	subs	r3, r2, r3
 8007ea8:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8007eac:	687b      	ldr	r3, [r7, #4]
 8007eae:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007eb0:	b29b      	uxth	r3, r3
 8007eb2:	2b00      	cmp	r3, #0
 8007eb4:	f000 808b 	beq.w	8007fce <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8007eb8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	f000 8086 	beq.w	8007fce <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	681b      	ldr	r3, [r3, #0]
 8007ec6:	330c      	adds	r3, #12
 8007ec8:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007eca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007ecc:	e853 3f00 	ldrex	r3, [r3]
 8007ed0:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8007ed2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007ed4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007ed8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8007edc:	687b      	ldr	r3, [r7, #4]
 8007ede:	681b      	ldr	r3, [r3, #0]
 8007ee0:	330c      	adds	r3, #12
 8007ee2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8007ee6:	647a      	str	r2, [r7, #68]	; 0x44
 8007ee8:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007eea:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007eec:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007eee:	e841 2300 	strex	r3, r2, [r1]
 8007ef2:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007ef4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007ef6:	2b00      	cmp	r3, #0
 8007ef8:	d1e3      	bne.n	8007ec2 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	3314      	adds	r3, #20
 8007f00:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007f04:	e853 3f00 	ldrex	r3, [r3]
 8007f08:	623b      	str	r3, [r7, #32]
   return(result);
 8007f0a:	6a3b      	ldr	r3, [r7, #32]
 8007f0c:	f023 0301 	bic.w	r3, r3, #1
 8007f10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8007f14:	687b      	ldr	r3, [r7, #4]
 8007f16:	681b      	ldr	r3, [r3, #0]
 8007f18:	3314      	adds	r3, #20
 8007f1a:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8007f1e:	633a      	str	r2, [r7, #48]	; 0x30
 8007f20:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f22:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007f24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007f26:	e841 2300 	strex	r3, r2, [r1]
 8007f2a:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007f2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007f2e:	2b00      	cmp	r3, #0
 8007f30:	d1e3      	bne.n	8007efa <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	2220      	movs	r2, #32
 8007f36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	2200      	movs	r2, #0
 8007f3e:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007f40:	687b      	ldr	r3, [r7, #4]
 8007f42:	681b      	ldr	r3, [r3, #0]
 8007f44:	330c      	adds	r3, #12
 8007f46:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007f48:	693b      	ldr	r3, [r7, #16]
 8007f4a:	e853 3f00 	ldrex	r3, [r3]
 8007f4e:	60fb      	str	r3, [r7, #12]
   return(result);
 8007f50:	68fb      	ldr	r3, [r7, #12]
 8007f52:	f023 0310 	bic.w	r3, r3, #16
 8007f56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007f5a:	687b      	ldr	r3, [r7, #4]
 8007f5c:	681b      	ldr	r3, [r3, #0]
 8007f5e:	330c      	adds	r3, #12
 8007f60:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8007f64:	61fa      	str	r2, [r7, #28]
 8007f66:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007f68:	69b9      	ldr	r1, [r7, #24]
 8007f6a:	69fa      	ldr	r2, [r7, #28]
 8007f6c:	e841 2300 	strex	r3, r2, [r1]
 8007f70:	617b      	str	r3, [r7, #20]
   return(result);
 8007f72:	697b      	ldr	r3, [r7, #20]
 8007f74:	2b00      	cmp	r3, #0
 8007f76:	d1e3      	bne.n	8007f40 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007f78:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	6878      	ldr	r0, [r7, #4]
 8007f80:	f000 f83e 	bl	8008000 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8007f84:	e023      	b.n	8007fce <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007f86:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007f8a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f8e:	2b00      	cmp	r3, #0
 8007f90:	d009      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x4ea>
 8007f92:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007f96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f9a:	2b00      	cmp	r3, #0
 8007f9c:	d003      	beq.n	8007fa6 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8007f9e:	6878      	ldr	r0, [r7, #4]
 8007fa0:	f000 f95d 	bl	800825e <UART_Transmit_IT>
    return;
 8007fa4:	e014      	b.n	8007fd0 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007fa6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8007faa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fae:	2b00      	cmp	r3, #0
 8007fb0:	d00e      	beq.n	8007fd0 <HAL_UART_IRQHandler+0x514>
 8007fb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8007fb6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d008      	beq.n	8007fd0 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8007fbe:	6878      	ldr	r0, [r7, #4]
 8007fc0:	f000 f99d 	bl	80082fe <UART_EndTransmit_IT>
    return;
 8007fc4:	e004      	b.n	8007fd0 <HAL_UART_IRQHandler+0x514>
    return;
 8007fc6:	bf00      	nop
 8007fc8:	e002      	b.n	8007fd0 <HAL_UART_IRQHandler+0x514>
      return;
 8007fca:	bf00      	nop
 8007fcc:	e000      	b.n	8007fd0 <HAL_UART_IRQHandler+0x514>
      return;
 8007fce:	bf00      	nop
  }
}
 8007fd0:	37e8      	adds	r7, #232	; 0xe8
 8007fd2:	46bd      	mov	sp, r7
 8007fd4:	bd80      	pop	{r7, pc}
 8007fd6:	bf00      	nop

08007fd8 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007fd8:	b480      	push	{r7}
 8007fda:	b083      	sub	sp, #12
 8007fdc:	af00      	add	r7, sp, #0
 8007fde:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007fe0:	bf00      	nop
 8007fe2:	370c      	adds	r7, #12
 8007fe4:	46bd      	mov	sp, r7
 8007fe6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fea:	4770      	bx	lr

08007fec <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007fec:	b480      	push	{r7}
 8007fee:	b083      	sub	sp, #12
 8007ff0:	af00      	add	r7, sp, #0
 8007ff2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007ff4:	bf00      	nop
 8007ff6:	370c      	adds	r7, #12
 8007ff8:	46bd      	mov	sp, r7
 8007ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ffe:	4770      	bx	lr

08008000 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008000:	b480      	push	{r7}
 8008002:	b083      	sub	sp, #12
 8008004:	af00      	add	r7, sp, #0
 8008006:	6078      	str	r0, [r7, #4]
 8008008:	460b      	mov	r3, r1
 800800a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800800c:	bf00      	nop
 800800e:	370c      	adds	r7, #12
 8008010:	46bd      	mov	sp, r7
 8008012:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008016:	4770      	bx	lr

08008018 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008018:	b580      	push	{r7, lr}
 800801a:	b090      	sub	sp, #64	; 0x40
 800801c:	af00      	add	r7, sp, #0
 800801e:	60f8      	str	r0, [r7, #12]
 8008020:	60b9      	str	r1, [r7, #8]
 8008022:	603b      	str	r3, [r7, #0]
 8008024:	4613      	mov	r3, r2
 8008026:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008028:	e050      	b.n	80080cc <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800802a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800802c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008030:	d04c      	beq.n	80080cc <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008032:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008034:	2b00      	cmp	r3, #0
 8008036:	d007      	beq.n	8008048 <UART_WaitOnFlagUntilTimeout+0x30>
 8008038:	f7fb ffe6 	bl	8004008 <HAL_GetTick>
 800803c:	4602      	mov	r2, r0
 800803e:	683b      	ldr	r3, [r7, #0]
 8008040:	1ad3      	subs	r3, r2, r3
 8008042:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008044:	429a      	cmp	r2, r3
 8008046:	d241      	bcs.n	80080cc <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008048:	68fb      	ldr	r3, [r7, #12]
 800804a:	681b      	ldr	r3, [r3, #0]
 800804c:	330c      	adds	r3, #12
 800804e:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008050:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008052:	e853 3f00 	ldrex	r3, [r3]
 8008056:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008058:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800805a:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800805e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	330c      	adds	r3, #12
 8008066:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008068:	637a      	str	r2, [r7, #52]	; 0x34
 800806a:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800806c:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800806e:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008070:	e841 2300 	strex	r3, r2, [r1]
 8008074:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008076:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008078:	2b00      	cmp	r3, #0
 800807a:	d1e5      	bne.n	8008048 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	3314      	adds	r3, #20
 8008082:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008084:	697b      	ldr	r3, [r7, #20]
 8008086:	e853 3f00 	ldrex	r3, [r3]
 800808a:	613b      	str	r3, [r7, #16]
   return(result);
 800808c:	693b      	ldr	r3, [r7, #16]
 800808e:	f023 0301 	bic.w	r3, r3, #1
 8008092:	63bb      	str	r3, [r7, #56]	; 0x38
 8008094:	68fb      	ldr	r3, [r7, #12]
 8008096:	681b      	ldr	r3, [r3, #0]
 8008098:	3314      	adds	r3, #20
 800809a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800809c:	623a      	str	r2, [r7, #32]
 800809e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80080a0:	69f9      	ldr	r1, [r7, #28]
 80080a2:	6a3a      	ldr	r2, [r7, #32]
 80080a4:	e841 2300 	strex	r3, r2, [r1]
 80080a8:	61bb      	str	r3, [r7, #24]
   return(result);
 80080aa:	69bb      	ldr	r3, [r7, #24]
 80080ac:	2b00      	cmp	r3, #0
 80080ae:	d1e5      	bne.n	800807c <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80080b0:	68fb      	ldr	r3, [r7, #12]
 80080b2:	2220      	movs	r2, #32
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80080b8:	68fb      	ldr	r3, [r7, #12]
 80080ba:	2220      	movs	r2, #32
 80080bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80080c0:	68fb      	ldr	r3, [r7, #12]
 80080c2:	2200      	movs	r2, #0
 80080c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80080c8:	2303      	movs	r3, #3
 80080ca:	e00f      	b.n	80080ec <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	681a      	ldr	r2, [r3, #0]
 80080d2:	68bb      	ldr	r3, [r7, #8]
 80080d4:	4013      	ands	r3, r2
 80080d6:	68ba      	ldr	r2, [r7, #8]
 80080d8:	429a      	cmp	r2, r3
 80080da:	bf0c      	ite	eq
 80080dc:	2301      	moveq	r3, #1
 80080de:	2300      	movne	r3, #0
 80080e0:	b2db      	uxtb	r3, r3
 80080e2:	461a      	mov	r2, r3
 80080e4:	79fb      	ldrb	r3, [r7, #7]
 80080e6:	429a      	cmp	r2, r3
 80080e8:	d09f      	beq.n	800802a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80080ea:	2300      	movs	r3, #0
}
 80080ec:	4618      	mov	r0, r3
 80080ee:	3740      	adds	r7, #64	; 0x40
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b085      	sub	sp, #20
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	60b9      	str	r1, [r7, #8]
 80080fe:	4613      	mov	r3, r2
 8008100:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	68ba      	ldr	r2, [r7, #8]
 8008106:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008108:	68fb      	ldr	r3, [r7, #12]
 800810a:	88fa      	ldrh	r2, [r7, #6]
 800810c:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800810e:	68fb      	ldr	r3, [r7, #12]
 8008110:	88fa      	ldrh	r2, [r7, #6]
 8008112:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	2200      	movs	r2, #0
 8008118:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800811a:	68fb      	ldr	r3, [r7, #12]
 800811c:	2222      	movs	r2, #34	; 0x22
 800811e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	2200      	movs	r2, #0
 8008126:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	691b      	ldr	r3, [r3, #16]
 800812e:	2b00      	cmp	r3, #0
 8008130:	d007      	beq.n	8008142 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008132:	68fb      	ldr	r3, [r7, #12]
 8008134:	681b      	ldr	r3, [r3, #0]
 8008136:	68da      	ldr	r2, [r3, #12]
 8008138:	68fb      	ldr	r3, [r7, #12]
 800813a:	681b      	ldr	r3, [r3, #0]
 800813c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008140:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008142:	68fb      	ldr	r3, [r7, #12]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	695a      	ldr	r2, [r3, #20]
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	f042 0201 	orr.w	r2, r2, #1
 8008150:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	681b      	ldr	r3, [r3, #0]
 8008156:	68da      	ldr	r2, [r3, #12]
 8008158:	68fb      	ldr	r3, [r7, #12]
 800815a:	681b      	ldr	r3, [r3, #0]
 800815c:	f042 0220 	orr.w	r2, r2, #32
 8008160:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008162:	2300      	movs	r3, #0
}
 8008164:	4618      	mov	r0, r3
 8008166:	3714      	adds	r7, #20
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr

08008170 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008170:	b480      	push	{r7}
 8008172:	b095      	sub	sp, #84	; 0x54
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	330c      	adds	r3, #12
 800817e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008180:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008182:	e853 3f00 	ldrex	r3, [r3]
 8008186:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800818a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800818e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	330c      	adds	r3, #12
 8008196:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008198:	643a      	str	r2, [r7, #64]	; 0x40
 800819a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800819c:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800819e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 80081a0:	e841 2300 	strex	r3, r2, [r1]
 80081a4:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 80081a6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80081a8:	2b00      	cmp	r3, #0
 80081aa:	d1e5      	bne.n	8008178 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80081ac:	687b      	ldr	r3, [r7, #4]
 80081ae:	681b      	ldr	r3, [r3, #0]
 80081b0:	3314      	adds	r3, #20
 80081b2:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081b4:	6a3b      	ldr	r3, [r7, #32]
 80081b6:	e853 3f00 	ldrex	r3, [r3]
 80081ba:	61fb      	str	r3, [r7, #28]
   return(result);
 80081bc:	69fb      	ldr	r3, [r7, #28]
 80081be:	f023 0301 	bic.w	r3, r3, #1
 80081c2:	64bb      	str	r3, [r7, #72]	; 0x48
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	3314      	adds	r3, #20
 80081ca:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80081cc:	62fa      	str	r2, [r7, #44]	; 0x2c
 80081ce:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80081d0:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80081d2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80081d4:	e841 2300 	strex	r3, r2, [r1]
 80081d8:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80081da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80081dc:	2b00      	cmp	r3, #0
 80081de:	d1e5      	bne.n	80081ac <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80081e0:	687b      	ldr	r3, [r7, #4]
 80081e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80081e4:	2b01      	cmp	r3, #1
 80081e6:	d119      	bne.n	800821c <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	681b      	ldr	r3, [r3, #0]
 80081ec:	330c      	adds	r3, #12
 80081ee:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80081f0:	68fb      	ldr	r3, [r7, #12]
 80081f2:	e853 3f00 	ldrex	r3, [r3]
 80081f6:	60bb      	str	r3, [r7, #8]
   return(result);
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	f023 0310 	bic.w	r3, r3, #16
 80081fe:	647b      	str	r3, [r7, #68]	; 0x44
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	681b      	ldr	r3, [r3, #0]
 8008204:	330c      	adds	r3, #12
 8008206:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008208:	61ba      	str	r2, [r7, #24]
 800820a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800820c:	6979      	ldr	r1, [r7, #20]
 800820e:	69ba      	ldr	r2, [r7, #24]
 8008210:	e841 2300 	strex	r3, r2, [r1]
 8008214:	613b      	str	r3, [r7, #16]
   return(result);
 8008216:	693b      	ldr	r3, [r7, #16]
 8008218:	2b00      	cmp	r3, #0
 800821a:	d1e5      	bne.n	80081e8 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2220      	movs	r2, #32
 8008220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2200      	movs	r2, #0
 8008228:	631a      	str	r2, [r3, #48]	; 0x30
}
 800822a:	bf00      	nop
 800822c:	3754      	adds	r7, #84	; 0x54
 800822e:	46bd      	mov	sp, r7
 8008230:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008234:	4770      	bx	lr

08008236 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008236:	b580      	push	{r7, lr}
 8008238:	b084      	sub	sp, #16
 800823a:	af00      	add	r7, sp, #0
 800823c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008242:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008244:	68fb      	ldr	r3, [r7, #12]
 8008246:	2200      	movs	r2, #0
 8008248:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800824a:	68fb      	ldr	r3, [r7, #12]
 800824c:	2200      	movs	r2, #0
 800824e:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008250:	68f8      	ldr	r0, [r7, #12]
 8008252:	f7ff fecb 	bl	8007fec <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008256:	bf00      	nop
 8008258:	3710      	adds	r7, #16
 800825a:	46bd      	mov	sp, r7
 800825c:	bd80      	pop	{r7, pc}

0800825e <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800825e:	b480      	push	{r7}
 8008260:	b085      	sub	sp, #20
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800826c:	b2db      	uxtb	r3, r3
 800826e:	2b21      	cmp	r3, #33	; 0x21
 8008270:	d13e      	bne.n	80082f0 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	689b      	ldr	r3, [r3, #8]
 8008276:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800827a:	d114      	bne.n	80082a6 <UART_Transmit_IT+0x48>
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	691b      	ldr	r3, [r3, #16]
 8008280:	2b00      	cmp	r3, #0
 8008282:	d110      	bne.n	80082a6 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	881b      	ldrh	r3, [r3, #0]
 800828e:	461a      	mov	r2, r3
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008298:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	6a1b      	ldr	r3, [r3, #32]
 800829e:	1c9a      	adds	r2, r3, #2
 80082a0:	687b      	ldr	r3, [r7, #4]
 80082a2:	621a      	str	r2, [r3, #32]
 80082a4:	e008      	b.n	80082b8 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80082a6:	687b      	ldr	r3, [r7, #4]
 80082a8:	6a1b      	ldr	r3, [r3, #32]
 80082aa:	1c59      	adds	r1, r3, #1
 80082ac:	687a      	ldr	r2, [r7, #4]
 80082ae:	6211      	str	r1, [r2, #32]
 80082b0:	781a      	ldrb	r2, [r3, #0]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80082bc:	b29b      	uxth	r3, r3
 80082be:	3b01      	subs	r3, #1
 80082c0:	b29b      	uxth	r3, r3
 80082c2:	687a      	ldr	r2, [r7, #4]
 80082c4:	4619      	mov	r1, r3
 80082c6:	84d1      	strh	r1, [r2, #38]	; 0x26
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	d10f      	bne.n	80082ec <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	681b      	ldr	r3, [r3, #0]
 80082d0:	68da      	ldr	r2, [r3, #12]
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	681b      	ldr	r3, [r3, #0]
 80082d6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80082da:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80082ea:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80082ec:	2300      	movs	r3, #0
 80082ee:	e000      	b.n	80082f2 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80082f0:	2302      	movs	r3, #2
  }
}
 80082f2:	4618      	mov	r0, r3
 80082f4:	3714      	adds	r7, #20
 80082f6:	46bd      	mov	sp, r7
 80082f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082fc:	4770      	bx	lr

080082fe <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80082fe:	b580      	push	{r7, lr}
 8008300:	b082      	sub	sp, #8
 8008302:	af00      	add	r7, sp, #0
 8008304:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008306:	687b      	ldr	r3, [r7, #4]
 8008308:	681b      	ldr	r3, [r3, #0]
 800830a:	68da      	ldr	r2, [r3, #12]
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	681b      	ldr	r3, [r3, #0]
 8008310:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008314:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	2220      	movs	r2, #32
 800831a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f7ff fe5a 	bl	8007fd8 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008324:	2300      	movs	r3, #0
}
 8008326:	4618      	mov	r0, r3
 8008328:	3708      	adds	r7, #8
 800832a:	46bd      	mov	sp, r7
 800832c:	bd80      	pop	{r7, pc}

0800832e <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800832e:	b580      	push	{r7, lr}
 8008330:	b08c      	sub	sp, #48	; 0x30
 8008332:	af00      	add	r7, sp, #0
 8008334:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800833c:	b2db      	uxtb	r3, r3
 800833e:	2b22      	cmp	r3, #34	; 0x22
 8008340:	f040 80ab 	bne.w	800849a <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	689b      	ldr	r3, [r3, #8]
 8008348:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800834c:	d117      	bne.n	800837e <UART_Receive_IT+0x50>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	691b      	ldr	r3, [r3, #16]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d113      	bne.n	800837e <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008356:	2300      	movs	r3, #0
 8008358:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800835a:	687b      	ldr	r3, [r7, #4]
 800835c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800835e:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	b29b      	uxth	r3, r3
 8008368:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800836c:	b29a      	uxth	r2, r3
 800836e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008370:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008376:	1c9a      	adds	r2, r3, #2
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	629a      	str	r2, [r3, #40]	; 0x28
 800837c:	e026      	b.n	80083cc <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800837e:	687b      	ldr	r3, [r7, #4]
 8008380:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008382:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8008384:	2300      	movs	r3, #0
 8008386:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	689b      	ldr	r3, [r3, #8]
 800838c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008390:	d007      	beq.n	80083a2 <UART_Receive_IT+0x74>
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	689b      	ldr	r3, [r3, #8]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d10a      	bne.n	80083b0 <UART_Receive_IT+0x82>
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	691b      	ldr	r3, [r3, #16]
 800839e:	2b00      	cmp	r3, #0
 80083a0:	d106      	bne.n	80083b0 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80083a2:	687b      	ldr	r3, [r7, #4]
 80083a4:	681b      	ldr	r3, [r3, #0]
 80083a6:	685b      	ldr	r3, [r3, #4]
 80083a8:	b2da      	uxtb	r2, r3
 80083aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083ac:	701a      	strb	r2, [r3, #0]
 80083ae:	e008      	b.n	80083c2 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	685b      	ldr	r3, [r3, #4]
 80083b6:	b2db      	uxtb	r3, r3
 80083b8:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80083bc:	b2da      	uxtb	r2, r3
 80083be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80083c0:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80083c6:	1c5a      	adds	r2, r3, #1
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80083cc:	687b      	ldr	r3, [r7, #4]
 80083ce:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80083d0:	b29b      	uxth	r3, r3
 80083d2:	3b01      	subs	r3, #1
 80083d4:	b29b      	uxth	r3, r3
 80083d6:	687a      	ldr	r2, [r7, #4]
 80083d8:	4619      	mov	r1, r3
 80083da:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80083dc:	2b00      	cmp	r3, #0
 80083de:	d15a      	bne.n	8008496 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	68da      	ldr	r2, [r3, #12]
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	f022 0220 	bic.w	r2, r2, #32
 80083ee:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	681b      	ldr	r3, [r3, #0]
 80083f4:	68da      	ldr	r2, [r3, #12]
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80083fe:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	681b      	ldr	r3, [r3, #0]
 8008404:	695a      	ldr	r2, [r3, #20]
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	681b      	ldr	r3, [r3, #0]
 800840a:	f022 0201 	bic.w	r2, r2, #1
 800840e:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	2220      	movs	r2, #32
 8008414:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800841c:	2b01      	cmp	r3, #1
 800841e:	d135      	bne.n	800848c <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	2200      	movs	r2, #0
 8008424:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008426:	687b      	ldr	r3, [r7, #4]
 8008428:	681b      	ldr	r3, [r3, #0]
 800842a:	330c      	adds	r3, #12
 800842c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	e853 3f00 	ldrex	r3, [r3]
 8008434:	613b      	str	r3, [r7, #16]
   return(result);
 8008436:	693b      	ldr	r3, [r7, #16]
 8008438:	f023 0310 	bic.w	r3, r3, #16
 800843c:	627b      	str	r3, [r7, #36]	; 0x24
 800843e:	687b      	ldr	r3, [r7, #4]
 8008440:	681b      	ldr	r3, [r3, #0]
 8008442:	330c      	adds	r3, #12
 8008444:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008446:	623a      	str	r2, [r7, #32]
 8008448:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800844a:	69f9      	ldr	r1, [r7, #28]
 800844c:	6a3a      	ldr	r2, [r7, #32]
 800844e:	e841 2300 	strex	r3, r2, [r1]
 8008452:	61bb      	str	r3, [r7, #24]
   return(result);
 8008454:	69bb      	ldr	r3, [r7, #24]
 8008456:	2b00      	cmp	r3, #0
 8008458:	d1e5      	bne.n	8008426 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	681b      	ldr	r3, [r3, #0]
 800845e:	681b      	ldr	r3, [r3, #0]
 8008460:	f003 0310 	and.w	r3, r3, #16
 8008464:	2b10      	cmp	r3, #16
 8008466:	d10a      	bne.n	800847e <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008468:	2300      	movs	r3, #0
 800846a:	60fb      	str	r3, [r7, #12]
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	681b      	ldr	r3, [r3, #0]
 8008470:	681b      	ldr	r3, [r3, #0]
 8008472:	60fb      	str	r3, [r7, #12]
 8008474:	687b      	ldr	r3, [r7, #4]
 8008476:	681b      	ldr	r3, [r3, #0]
 8008478:	685b      	ldr	r3, [r3, #4]
 800847a:	60fb      	str	r3, [r7, #12]
 800847c:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800847e:	687b      	ldr	r3, [r7, #4]
 8008480:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008482:	4619      	mov	r1, r3
 8008484:	6878      	ldr	r0, [r7, #4]
 8008486:	f7ff fdbb 	bl	8008000 <HAL_UARTEx_RxEventCallback>
 800848a:	e002      	b.n	8008492 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800848c:	6878      	ldr	r0, [r7, #4]
 800848e:	f7f9 fa01 	bl	8001894 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8008492:	2300      	movs	r3, #0
 8008494:	e002      	b.n	800849c <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8008496:	2300      	movs	r3, #0
 8008498:	e000      	b.n	800849c <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800849a:	2302      	movs	r3, #2
  }
}
 800849c:	4618      	mov	r0, r3
 800849e:	3730      	adds	r7, #48	; 0x30
 80084a0:	46bd      	mov	sp, r7
 80084a2:	bd80      	pop	{r7, pc}

080084a4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80084a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80084a8:	b0c0      	sub	sp, #256	; 0x100
 80084aa:	af00      	add	r7, sp, #0
 80084ac:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80084b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084b4:	681b      	ldr	r3, [r3, #0]
 80084b6:	691b      	ldr	r3, [r3, #16]
 80084b8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80084bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c0:	68d9      	ldr	r1, [r3, #12]
 80084c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084c6:	681a      	ldr	r2, [r3, #0]
 80084c8:	ea40 0301 	orr.w	r3, r0, r1
 80084cc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80084ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d2:	689a      	ldr	r2, [r3, #8]
 80084d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084d8:	691b      	ldr	r3, [r3, #16]
 80084da:	431a      	orrs	r2, r3
 80084dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e0:	695b      	ldr	r3, [r3, #20]
 80084e2:	431a      	orrs	r2, r3
 80084e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084e8:	69db      	ldr	r3, [r3, #28]
 80084ea:	4313      	orrs	r3, r2
 80084ec:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80084f0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	68db      	ldr	r3, [r3, #12]
 80084f8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80084fc:	f021 010c 	bic.w	r1, r1, #12
 8008500:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008504:	681a      	ldr	r2, [r3, #0]
 8008506:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800850a:	430b      	orrs	r3, r1
 800850c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800850e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008512:	681b      	ldr	r3, [r3, #0]
 8008514:	695b      	ldr	r3, [r3, #20]
 8008516:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800851a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800851e:	6999      	ldr	r1, [r3, #24]
 8008520:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008524:	681a      	ldr	r2, [r3, #0]
 8008526:	ea40 0301 	orr.w	r3, r0, r1
 800852a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800852c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008530:	681a      	ldr	r2, [r3, #0]
 8008532:	4b8f      	ldr	r3, [pc, #572]	; (8008770 <UART_SetConfig+0x2cc>)
 8008534:	429a      	cmp	r2, r3
 8008536:	d005      	beq.n	8008544 <UART_SetConfig+0xa0>
 8008538:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800853c:	681a      	ldr	r2, [r3, #0]
 800853e:	4b8d      	ldr	r3, [pc, #564]	; (8008774 <UART_SetConfig+0x2d0>)
 8008540:	429a      	cmp	r2, r3
 8008542:	d104      	bne.n	800854e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008544:	f7fd ff48 	bl	80063d8 <HAL_RCC_GetPCLK2Freq>
 8008548:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800854c:	e003      	b.n	8008556 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800854e:	f7fd ff2f 	bl	80063b0 <HAL_RCC_GetPCLK1Freq>
 8008552:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008556:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800855a:	69db      	ldr	r3, [r3, #28]
 800855c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008560:	f040 810c 	bne.w	800877c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008564:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008568:	2200      	movs	r2, #0
 800856a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800856e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8008572:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8008576:	4622      	mov	r2, r4
 8008578:	462b      	mov	r3, r5
 800857a:	1891      	adds	r1, r2, r2
 800857c:	65b9      	str	r1, [r7, #88]	; 0x58
 800857e:	415b      	adcs	r3, r3
 8008580:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008582:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8008586:	4621      	mov	r1, r4
 8008588:	eb12 0801 	adds.w	r8, r2, r1
 800858c:	4629      	mov	r1, r5
 800858e:	eb43 0901 	adc.w	r9, r3, r1
 8008592:	f04f 0200 	mov.w	r2, #0
 8008596:	f04f 0300 	mov.w	r3, #0
 800859a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800859e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80085a2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80085a6:	4690      	mov	r8, r2
 80085a8:	4699      	mov	r9, r3
 80085aa:	4623      	mov	r3, r4
 80085ac:	eb18 0303 	adds.w	r3, r8, r3
 80085b0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 80085b4:	462b      	mov	r3, r5
 80085b6:	eb49 0303 	adc.w	r3, r9, r3
 80085ba:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 80085be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	2200      	movs	r2, #0
 80085c6:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 80085ca:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 80085ce:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 80085d2:	460b      	mov	r3, r1
 80085d4:	18db      	adds	r3, r3, r3
 80085d6:	653b      	str	r3, [r7, #80]	; 0x50
 80085d8:	4613      	mov	r3, r2
 80085da:	eb42 0303 	adc.w	r3, r2, r3
 80085de:	657b      	str	r3, [r7, #84]	; 0x54
 80085e0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 80085e4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 80085e8:	f7f8 fb2e 	bl	8000c48 <__aeabi_uldivmod>
 80085ec:	4602      	mov	r2, r0
 80085ee:	460b      	mov	r3, r1
 80085f0:	4b61      	ldr	r3, [pc, #388]	; (8008778 <UART_SetConfig+0x2d4>)
 80085f2:	fba3 2302 	umull	r2, r3, r3, r2
 80085f6:	095b      	lsrs	r3, r3, #5
 80085f8:	011c      	lsls	r4, r3, #4
 80085fa:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80085fe:	2200      	movs	r2, #0
 8008600:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008604:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8008608:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800860c:	4642      	mov	r2, r8
 800860e:	464b      	mov	r3, r9
 8008610:	1891      	adds	r1, r2, r2
 8008612:	64b9      	str	r1, [r7, #72]	; 0x48
 8008614:	415b      	adcs	r3, r3
 8008616:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008618:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800861c:	4641      	mov	r1, r8
 800861e:	eb12 0a01 	adds.w	sl, r2, r1
 8008622:	4649      	mov	r1, r9
 8008624:	eb43 0b01 	adc.w	fp, r3, r1
 8008628:	f04f 0200 	mov.w	r2, #0
 800862c:	f04f 0300 	mov.w	r3, #0
 8008630:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8008634:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8008638:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800863c:	4692      	mov	sl, r2
 800863e:	469b      	mov	fp, r3
 8008640:	4643      	mov	r3, r8
 8008642:	eb1a 0303 	adds.w	r3, sl, r3
 8008646:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800864a:	464b      	mov	r3, r9
 800864c:	eb4b 0303 	adc.w	r3, fp, r3
 8008650:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8008654:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008658:	685b      	ldr	r3, [r3, #4]
 800865a:	2200      	movs	r2, #0
 800865c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008660:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8008664:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8008668:	460b      	mov	r3, r1
 800866a:	18db      	adds	r3, r3, r3
 800866c:	643b      	str	r3, [r7, #64]	; 0x40
 800866e:	4613      	mov	r3, r2
 8008670:	eb42 0303 	adc.w	r3, r2, r3
 8008674:	647b      	str	r3, [r7, #68]	; 0x44
 8008676:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800867a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800867e:	f7f8 fae3 	bl	8000c48 <__aeabi_uldivmod>
 8008682:	4602      	mov	r2, r0
 8008684:	460b      	mov	r3, r1
 8008686:	4611      	mov	r1, r2
 8008688:	4b3b      	ldr	r3, [pc, #236]	; (8008778 <UART_SetConfig+0x2d4>)
 800868a:	fba3 2301 	umull	r2, r3, r3, r1
 800868e:	095b      	lsrs	r3, r3, #5
 8008690:	2264      	movs	r2, #100	; 0x64
 8008692:	fb02 f303 	mul.w	r3, r2, r3
 8008696:	1acb      	subs	r3, r1, r3
 8008698:	00db      	lsls	r3, r3, #3
 800869a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800869e:	4b36      	ldr	r3, [pc, #216]	; (8008778 <UART_SetConfig+0x2d4>)
 80086a0:	fba3 2302 	umull	r2, r3, r3, r2
 80086a4:	095b      	lsrs	r3, r3, #5
 80086a6:	005b      	lsls	r3, r3, #1
 80086a8:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80086ac:	441c      	add	r4, r3
 80086ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80086b2:	2200      	movs	r2, #0
 80086b4:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80086b8:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 80086bc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 80086c0:	4642      	mov	r2, r8
 80086c2:	464b      	mov	r3, r9
 80086c4:	1891      	adds	r1, r2, r2
 80086c6:	63b9      	str	r1, [r7, #56]	; 0x38
 80086c8:	415b      	adcs	r3, r3
 80086ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80086cc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80086d0:	4641      	mov	r1, r8
 80086d2:	1851      	adds	r1, r2, r1
 80086d4:	6339      	str	r1, [r7, #48]	; 0x30
 80086d6:	4649      	mov	r1, r9
 80086d8:	414b      	adcs	r3, r1
 80086da:	637b      	str	r3, [r7, #52]	; 0x34
 80086dc:	f04f 0200 	mov.w	r2, #0
 80086e0:	f04f 0300 	mov.w	r3, #0
 80086e4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80086e8:	4659      	mov	r1, fp
 80086ea:	00cb      	lsls	r3, r1, #3
 80086ec:	4651      	mov	r1, sl
 80086ee:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80086f2:	4651      	mov	r1, sl
 80086f4:	00ca      	lsls	r2, r1, #3
 80086f6:	4610      	mov	r0, r2
 80086f8:	4619      	mov	r1, r3
 80086fa:	4603      	mov	r3, r0
 80086fc:	4642      	mov	r2, r8
 80086fe:	189b      	adds	r3, r3, r2
 8008700:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008704:	464b      	mov	r3, r9
 8008706:	460a      	mov	r2, r1
 8008708:	eb42 0303 	adc.w	r3, r2, r3
 800870c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008710:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008714:	685b      	ldr	r3, [r3, #4]
 8008716:	2200      	movs	r2, #0
 8008718:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800871c:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8008720:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8008724:	460b      	mov	r3, r1
 8008726:	18db      	adds	r3, r3, r3
 8008728:	62bb      	str	r3, [r7, #40]	; 0x28
 800872a:	4613      	mov	r3, r2
 800872c:	eb42 0303 	adc.w	r3, r2, r3
 8008730:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008732:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008736:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800873a:	f7f8 fa85 	bl	8000c48 <__aeabi_uldivmod>
 800873e:	4602      	mov	r2, r0
 8008740:	460b      	mov	r3, r1
 8008742:	4b0d      	ldr	r3, [pc, #52]	; (8008778 <UART_SetConfig+0x2d4>)
 8008744:	fba3 1302 	umull	r1, r3, r3, r2
 8008748:	095b      	lsrs	r3, r3, #5
 800874a:	2164      	movs	r1, #100	; 0x64
 800874c:	fb01 f303 	mul.w	r3, r1, r3
 8008750:	1ad3      	subs	r3, r2, r3
 8008752:	00db      	lsls	r3, r3, #3
 8008754:	3332      	adds	r3, #50	; 0x32
 8008756:	4a08      	ldr	r2, [pc, #32]	; (8008778 <UART_SetConfig+0x2d4>)
 8008758:	fba2 2303 	umull	r2, r3, r2, r3
 800875c:	095b      	lsrs	r3, r3, #5
 800875e:	f003 0207 	and.w	r2, r3, #7
 8008762:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	4422      	add	r2, r4
 800876a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800876c:	e105      	b.n	800897a <UART_SetConfig+0x4d6>
 800876e:	bf00      	nop
 8008770:	40011000 	.word	0x40011000
 8008774:	40011400 	.word	0x40011400
 8008778:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800877c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008780:	2200      	movs	r2, #0
 8008782:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8008786:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800878a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800878e:	4642      	mov	r2, r8
 8008790:	464b      	mov	r3, r9
 8008792:	1891      	adds	r1, r2, r2
 8008794:	6239      	str	r1, [r7, #32]
 8008796:	415b      	adcs	r3, r3
 8008798:	627b      	str	r3, [r7, #36]	; 0x24
 800879a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800879e:	4641      	mov	r1, r8
 80087a0:	1854      	adds	r4, r2, r1
 80087a2:	4649      	mov	r1, r9
 80087a4:	eb43 0501 	adc.w	r5, r3, r1
 80087a8:	f04f 0200 	mov.w	r2, #0
 80087ac:	f04f 0300 	mov.w	r3, #0
 80087b0:	00eb      	lsls	r3, r5, #3
 80087b2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80087b6:	00e2      	lsls	r2, r4, #3
 80087b8:	4614      	mov	r4, r2
 80087ba:	461d      	mov	r5, r3
 80087bc:	4643      	mov	r3, r8
 80087be:	18e3      	adds	r3, r4, r3
 80087c0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 80087c4:	464b      	mov	r3, r9
 80087c6:	eb45 0303 	adc.w	r3, r5, r3
 80087ca:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 80087ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80087d2:	685b      	ldr	r3, [r3, #4]
 80087d4:	2200      	movs	r2, #0
 80087d6:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 80087da:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80087de:	f04f 0200 	mov.w	r2, #0
 80087e2:	f04f 0300 	mov.w	r3, #0
 80087e6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80087ea:	4629      	mov	r1, r5
 80087ec:	008b      	lsls	r3, r1, #2
 80087ee:	4621      	mov	r1, r4
 80087f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80087f4:	4621      	mov	r1, r4
 80087f6:	008a      	lsls	r2, r1, #2
 80087f8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80087fc:	f7f8 fa24 	bl	8000c48 <__aeabi_uldivmod>
 8008800:	4602      	mov	r2, r0
 8008802:	460b      	mov	r3, r1
 8008804:	4b60      	ldr	r3, [pc, #384]	; (8008988 <UART_SetConfig+0x4e4>)
 8008806:	fba3 2302 	umull	r2, r3, r3, r2
 800880a:	095b      	lsrs	r3, r3, #5
 800880c:	011c      	lsls	r4, r3, #4
 800880e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8008812:	2200      	movs	r2, #0
 8008814:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8008818:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800881c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8008820:	4642      	mov	r2, r8
 8008822:	464b      	mov	r3, r9
 8008824:	1891      	adds	r1, r2, r2
 8008826:	61b9      	str	r1, [r7, #24]
 8008828:	415b      	adcs	r3, r3
 800882a:	61fb      	str	r3, [r7, #28]
 800882c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008830:	4641      	mov	r1, r8
 8008832:	1851      	adds	r1, r2, r1
 8008834:	6139      	str	r1, [r7, #16]
 8008836:	4649      	mov	r1, r9
 8008838:	414b      	adcs	r3, r1
 800883a:	617b      	str	r3, [r7, #20]
 800883c:	f04f 0200 	mov.w	r2, #0
 8008840:	f04f 0300 	mov.w	r3, #0
 8008844:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008848:	4659      	mov	r1, fp
 800884a:	00cb      	lsls	r3, r1, #3
 800884c:	4651      	mov	r1, sl
 800884e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008852:	4651      	mov	r1, sl
 8008854:	00ca      	lsls	r2, r1, #3
 8008856:	4610      	mov	r0, r2
 8008858:	4619      	mov	r1, r3
 800885a:	4603      	mov	r3, r0
 800885c:	4642      	mov	r2, r8
 800885e:	189b      	adds	r3, r3, r2
 8008860:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8008864:	464b      	mov	r3, r9
 8008866:	460a      	mov	r2, r1
 8008868:	eb42 0303 	adc.w	r3, r2, r3
 800886c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8008870:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008874:	685b      	ldr	r3, [r3, #4]
 8008876:	2200      	movs	r2, #0
 8008878:	67bb      	str	r3, [r7, #120]	; 0x78
 800887a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800887c:	f04f 0200 	mov.w	r2, #0
 8008880:	f04f 0300 	mov.w	r3, #0
 8008884:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8008888:	4649      	mov	r1, r9
 800888a:	008b      	lsls	r3, r1, #2
 800888c:	4641      	mov	r1, r8
 800888e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008892:	4641      	mov	r1, r8
 8008894:	008a      	lsls	r2, r1, #2
 8008896:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800889a:	f7f8 f9d5 	bl	8000c48 <__aeabi_uldivmod>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	4b39      	ldr	r3, [pc, #228]	; (8008988 <UART_SetConfig+0x4e4>)
 80088a4:	fba3 1302 	umull	r1, r3, r3, r2
 80088a8:	095b      	lsrs	r3, r3, #5
 80088aa:	2164      	movs	r1, #100	; 0x64
 80088ac:	fb01 f303 	mul.w	r3, r1, r3
 80088b0:	1ad3      	subs	r3, r2, r3
 80088b2:	011b      	lsls	r3, r3, #4
 80088b4:	3332      	adds	r3, #50	; 0x32
 80088b6:	4a34      	ldr	r2, [pc, #208]	; (8008988 <UART_SetConfig+0x4e4>)
 80088b8:	fba2 2303 	umull	r2, r3, r2, r3
 80088bc:	095b      	lsrs	r3, r3, #5
 80088be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80088c2:	441c      	add	r4, r3
 80088c4:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80088c8:	2200      	movs	r2, #0
 80088ca:	673b      	str	r3, [r7, #112]	; 0x70
 80088cc:	677a      	str	r2, [r7, #116]	; 0x74
 80088ce:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 80088d2:	4642      	mov	r2, r8
 80088d4:	464b      	mov	r3, r9
 80088d6:	1891      	adds	r1, r2, r2
 80088d8:	60b9      	str	r1, [r7, #8]
 80088da:	415b      	adcs	r3, r3
 80088dc:	60fb      	str	r3, [r7, #12]
 80088de:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80088e2:	4641      	mov	r1, r8
 80088e4:	1851      	adds	r1, r2, r1
 80088e6:	6039      	str	r1, [r7, #0]
 80088e8:	4649      	mov	r1, r9
 80088ea:	414b      	adcs	r3, r1
 80088ec:	607b      	str	r3, [r7, #4]
 80088ee:	f04f 0200 	mov.w	r2, #0
 80088f2:	f04f 0300 	mov.w	r3, #0
 80088f6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80088fa:	4659      	mov	r1, fp
 80088fc:	00cb      	lsls	r3, r1, #3
 80088fe:	4651      	mov	r1, sl
 8008900:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8008904:	4651      	mov	r1, sl
 8008906:	00ca      	lsls	r2, r1, #3
 8008908:	4610      	mov	r0, r2
 800890a:	4619      	mov	r1, r3
 800890c:	4603      	mov	r3, r0
 800890e:	4642      	mov	r2, r8
 8008910:	189b      	adds	r3, r3, r2
 8008912:	66bb      	str	r3, [r7, #104]	; 0x68
 8008914:	464b      	mov	r3, r9
 8008916:	460a      	mov	r2, r1
 8008918:	eb42 0303 	adc.w	r3, r2, r3
 800891c:	66fb      	str	r3, [r7, #108]	; 0x6c
 800891e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008922:	685b      	ldr	r3, [r3, #4]
 8008924:	2200      	movs	r2, #0
 8008926:	663b      	str	r3, [r7, #96]	; 0x60
 8008928:	667a      	str	r2, [r7, #100]	; 0x64
 800892a:	f04f 0200 	mov.w	r2, #0
 800892e:	f04f 0300 	mov.w	r3, #0
 8008932:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8008936:	4649      	mov	r1, r9
 8008938:	008b      	lsls	r3, r1, #2
 800893a:	4641      	mov	r1, r8
 800893c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8008940:	4641      	mov	r1, r8
 8008942:	008a      	lsls	r2, r1, #2
 8008944:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8008948:	f7f8 f97e 	bl	8000c48 <__aeabi_uldivmod>
 800894c:	4602      	mov	r2, r0
 800894e:	460b      	mov	r3, r1
 8008950:	4b0d      	ldr	r3, [pc, #52]	; (8008988 <UART_SetConfig+0x4e4>)
 8008952:	fba3 1302 	umull	r1, r3, r3, r2
 8008956:	095b      	lsrs	r3, r3, #5
 8008958:	2164      	movs	r1, #100	; 0x64
 800895a:	fb01 f303 	mul.w	r3, r1, r3
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	011b      	lsls	r3, r3, #4
 8008962:	3332      	adds	r3, #50	; 0x32
 8008964:	4a08      	ldr	r2, [pc, #32]	; (8008988 <UART_SetConfig+0x4e4>)
 8008966:	fba2 2303 	umull	r2, r3, r2, r3
 800896a:	095b      	lsrs	r3, r3, #5
 800896c:	f003 020f 	and.w	r2, r3, #15
 8008970:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8008974:	681b      	ldr	r3, [r3, #0]
 8008976:	4422      	add	r2, r4
 8008978:	609a      	str	r2, [r3, #8]
}
 800897a:	bf00      	nop
 800897c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8008980:	46bd      	mov	sp, r7
 8008982:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008986:	bf00      	nop
 8008988:	51eb851f 	.word	0x51eb851f

0800898c <__NVIC_SetPriority>:
{
 800898c:	b480      	push	{r7}
 800898e:	b083      	sub	sp, #12
 8008990:	af00      	add	r7, sp, #0
 8008992:	4603      	mov	r3, r0
 8008994:	6039      	str	r1, [r7, #0]
 8008996:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8008998:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800899c:	2b00      	cmp	r3, #0
 800899e:	db0a      	blt.n	80089b6 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089a0:	683b      	ldr	r3, [r7, #0]
 80089a2:	b2da      	uxtb	r2, r3
 80089a4:	490c      	ldr	r1, [pc, #48]	; (80089d8 <__NVIC_SetPriority+0x4c>)
 80089a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80089aa:	0112      	lsls	r2, r2, #4
 80089ac:	b2d2      	uxtb	r2, r2
 80089ae:	440b      	add	r3, r1
 80089b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 80089b4:	e00a      	b.n	80089cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80089b6:	683b      	ldr	r3, [r7, #0]
 80089b8:	b2da      	uxtb	r2, r3
 80089ba:	4908      	ldr	r1, [pc, #32]	; (80089dc <__NVIC_SetPriority+0x50>)
 80089bc:	79fb      	ldrb	r3, [r7, #7]
 80089be:	f003 030f 	and.w	r3, r3, #15
 80089c2:	3b04      	subs	r3, #4
 80089c4:	0112      	lsls	r2, r2, #4
 80089c6:	b2d2      	uxtb	r2, r2
 80089c8:	440b      	add	r3, r1
 80089ca:	761a      	strb	r2, [r3, #24]
}
 80089cc:	bf00      	nop
 80089ce:	370c      	adds	r7, #12
 80089d0:	46bd      	mov	sp, r7
 80089d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089d6:	4770      	bx	lr
 80089d8:	e000e100 	.word	0xe000e100
 80089dc:	e000ed00 	.word	0xe000ed00

080089e0 <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 80089e0:	b580      	push	{r7, lr}
 80089e2:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 80089e4:	4b05      	ldr	r3, [pc, #20]	; (80089fc <SysTick_Handler+0x1c>)
 80089e6:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 80089e8:	f001 fd28 	bl	800a43c <xTaskGetSchedulerState>
 80089ec:	4603      	mov	r3, r0
 80089ee:	2b01      	cmp	r3, #1
 80089f0:	d001      	beq.n	80089f6 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 80089f2:	f002 fb11 	bl	800b018 <xPortSysTickHandler>
  }
}
 80089f6:	bf00      	nop
 80089f8:	bd80      	pop	{r7, pc}
 80089fa:	bf00      	nop
 80089fc:	e000e010 	.word	0xe000e010

08008a00 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 8008a00:	b580      	push	{r7, lr}
 8008a02:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 8008a04:	2100      	movs	r1, #0
 8008a06:	f06f 0004 	mvn.w	r0, #4
 8008a0a:	f7ff ffbf 	bl	800898c <__NVIC_SetPriority>
#endif
}
 8008a0e:	bf00      	nop
 8008a10:	bd80      	pop	{r7, pc}
	...

08008a14 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 8008a14:	b480      	push	{r7}
 8008a16:	b083      	sub	sp, #12
 8008a18:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a1a:	f3ef 8305 	mrs	r3, IPSR
 8008a1e:	603b      	str	r3, [r7, #0]
  return(result);
 8008a20:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d003      	beq.n	8008a2e <osKernelInitialize+0x1a>
    stat = osErrorISR;
 8008a26:	f06f 0305 	mvn.w	r3, #5
 8008a2a:	607b      	str	r3, [r7, #4]
 8008a2c:	e00c      	b.n	8008a48 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 8008a2e:	4b0a      	ldr	r3, [pc, #40]	; (8008a58 <osKernelInitialize+0x44>)
 8008a30:	681b      	ldr	r3, [r3, #0]
 8008a32:	2b00      	cmp	r3, #0
 8008a34:	d105      	bne.n	8008a42 <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 8008a36:	4b08      	ldr	r3, [pc, #32]	; (8008a58 <osKernelInitialize+0x44>)
 8008a38:	2201      	movs	r2, #1
 8008a3a:	601a      	str	r2, [r3, #0]
      stat = osOK;
 8008a3c:	2300      	movs	r3, #0
 8008a3e:	607b      	str	r3, [r7, #4]
 8008a40:	e002      	b.n	8008a48 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 8008a42:	f04f 33ff 	mov.w	r3, #4294967295
 8008a46:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a48:	687b      	ldr	r3, [r7, #4]
}
 8008a4a:	4618      	mov	r0, r3
 8008a4c:	370c      	adds	r7, #12
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a54:	4770      	bx	lr
 8008a56:	bf00      	nop
 8008a58:	20000604 	.word	0x20000604

08008a5c <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b082      	sub	sp, #8
 8008a60:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008a62:	f3ef 8305 	mrs	r3, IPSR
 8008a66:	603b      	str	r3, [r7, #0]
  return(result);
 8008a68:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d003      	beq.n	8008a76 <osKernelStart+0x1a>
    stat = osErrorISR;
 8008a6e:	f06f 0305 	mvn.w	r3, #5
 8008a72:	607b      	str	r3, [r7, #4]
 8008a74:	e010      	b.n	8008a98 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8008a76:	4b0b      	ldr	r3, [pc, #44]	; (8008aa4 <osKernelStart+0x48>)
 8008a78:	681b      	ldr	r3, [r3, #0]
 8008a7a:	2b01      	cmp	r3, #1
 8008a7c:	d109      	bne.n	8008a92 <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 8008a7e:	f7ff ffbf 	bl	8008a00 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 8008a82:	4b08      	ldr	r3, [pc, #32]	; (8008aa4 <osKernelStart+0x48>)
 8008a84:	2202      	movs	r2, #2
 8008a86:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8008a88:	f001 f87c 	bl	8009b84 <vTaskStartScheduler>
      stat = osOK;
 8008a8c:	2300      	movs	r3, #0
 8008a8e:	607b      	str	r3, [r7, #4]
 8008a90:	e002      	b.n	8008a98 <osKernelStart+0x3c>
    } else {
      stat = osError;
 8008a92:	f04f 33ff 	mov.w	r3, #4294967295
 8008a96:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8008a98:	687b      	ldr	r3, [r7, #4]
}
 8008a9a:	4618      	mov	r0, r3
 8008a9c:	3708      	adds	r7, #8
 8008a9e:	46bd      	mov	sp, r7
 8008aa0:	bd80      	pop	{r7, pc}
 8008aa2:	bf00      	nop
 8008aa4:	20000604 	.word	0x20000604

08008aa8 <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 8008aa8:	b580      	push	{r7, lr}
 8008aaa:	b08e      	sub	sp, #56	; 0x38
 8008aac:	af04      	add	r7, sp, #16
 8008aae:	60f8      	str	r0, [r7, #12]
 8008ab0:	60b9      	str	r1, [r7, #8]
 8008ab2:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 8008ab4:	2300      	movs	r3, #0
 8008ab6:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008ab8:	f3ef 8305 	mrs	r3, IPSR
 8008abc:	617b      	str	r3, [r7, #20]
  return(result);
 8008abe:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8008ac0:	2b00      	cmp	r3, #0
 8008ac2:	d17e      	bne.n	8008bc2 <osThreadNew+0x11a>
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	2b00      	cmp	r3, #0
 8008ac8:	d07b      	beq.n	8008bc2 <osThreadNew+0x11a>
    stack = configMINIMAL_STACK_SIZE;
 8008aca:	2380      	movs	r3, #128	; 0x80
 8008acc:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8008ace:	2318      	movs	r3, #24
 8008ad0:	61fb      	str	r3, [r7, #28]

    name = NULL;
 8008ad2:	2300      	movs	r3, #0
 8008ad4:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 8008ad6:	f04f 33ff 	mov.w	r3, #4294967295
 8008ada:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d045      	beq.n	8008b6e <osThreadNew+0xc6>
      if (attr->name != NULL) {
 8008ae2:	687b      	ldr	r3, [r7, #4]
 8008ae4:	681b      	ldr	r3, [r3, #0]
 8008ae6:	2b00      	cmp	r3, #0
 8008ae8:	d002      	beq.n	8008af0 <osThreadNew+0x48>
        name = attr->name;
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	699b      	ldr	r3, [r3, #24]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	d002      	beq.n	8008afe <osThreadNew+0x56>
        prio = (UBaseType_t)attr->priority;
 8008af8:	687b      	ldr	r3, [r7, #4]
 8008afa:	699b      	ldr	r3, [r3, #24]
 8008afc:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 8008afe:	69fb      	ldr	r3, [r7, #28]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d008      	beq.n	8008b16 <osThreadNew+0x6e>
 8008b04:	69fb      	ldr	r3, [r7, #28]
 8008b06:	2b38      	cmp	r3, #56	; 0x38
 8008b08:	d805      	bhi.n	8008b16 <osThreadNew+0x6e>
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	685b      	ldr	r3, [r3, #4]
 8008b0e:	f003 0301 	and.w	r3, r3, #1
 8008b12:	2b00      	cmp	r3, #0
 8008b14:	d001      	beq.n	8008b1a <osThreadNew+0x72>
        return (NULL);
 8008b16:	2300      	movs	r3, #0
 8008b18:	e054      	b.n	8008bc4 <osThreadNew+0x11c>
      }

      if (attr->stack_size > 0U) {
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	695b      	ldr	r3, [r3, #20]
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d003      	beq.n	8008b2a <osThreadNew+0x82>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 8008b22:	687b      	ldr	r3, [r7, #4]
 8008b24:	695b      	ldr	r3, [r3, #20]
 8008b26:	089b      	lsrs	r3, r3, #2
 8008b28:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d00e      	beq.n	8008b50 <osThreadNew+0xa8>
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	68db      	ldr	r3, [r3, #12]
 8008b36:	2bbb      	cmp	r3, #187	; 0xbb
 8008b38:	d90a      	bls.n	8008b50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8008b3e:	2b00      	cmp	r3, #0
 8008b40:	d006      	beq.n	8008b50 <osThreadNew+0xa8>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	695b      	ldr	r3, [r3, #20]
 8008b46:	2b00      	cmp	r3, #0
 8008b48:	d002      	beq.n	8008b50 <osThreadNew+0xa8>
        mem = 1;
 8008b4a:	2301      	movs	r3, #1
 8008b4c:	61bb      	str	r3, [r7, #24]
 8008b4e:	e010      	b.n	8008b72 <osThreadNew+0xca>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	689b      	ldr	r3, [r3, #8]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d10c      	bne.n	8008b72 <osThreadNew+0xca>
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	68db      	ldr	r3, [r3, #12]
 8008b5c:	2b00      	cmp	r3, #0
 8008b5e:	d108      	bne.n	8008b72 <osThreadNew+0xca>
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	691b      	ldr	r3, [r3, #16]
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	d104      	bne.n	8008b72 <osThreadNew+0xca>
          mem = 0;
 8008b68:	2300      	movs	r3, #0
 8008b6a:	61bb      	str	r3, [r7, #24]
 8008b6c:	e001      	b.n	8008b72 <osThreadNew+0xca>
        }
      }
    }
    else {
      mem = 0;
 8008b6e:	2300      	movs	r3, #0
 8008b70:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8008b72:	69bb      	ldr	r3, [r7, #24]
 8008b74:	2b01      	cmp	r3, #1
 8008b76:	d110      	bne.n	8008b9a <osThreadNew+0xf2>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8008b7c:	687a      	ldr	r2, [r7, #4]
 8008b7e:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8008b80:	9202      	str	r2, [sp, #8]
 8008b82:	9301      	str	r3, [sp, #4]
 8008b84:	69fb      	ldr	r3, [r7, #28]
 8008b86:	9300      	str	r3, [sp, #0]
 8008b88:	68bb      	ldr	r3, [r7, #8]
 8008b8a:	6a3a      	ldr	r2, [r7, #32]
 8008b8c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008b8e:	68f8      	ldr	r0, [r7, #12]
 8008b90:	f000 fe0c 	bl	80097ac <xTaskCreateStatic>
 8008b94:	4603      	mov	r3, r0
 8008b96:	613b      	str	r3, [r7, #16]
 8008b98:	e013      	b.n	8008bc2 <osThreadNew+0x11a>
      #endif
    }
    else {
      if (mem == 0) {
 8008b9a:	69bb      	ldr	r3, [r7, #24]
 8008b9c:	2b00      	cmp	r3, #0
 8008b9e:	d110      	bne.n	8008bc2 <osThreadNew+0x11a>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8008ba0:	6a3b      	ldr	r3, [r7, #32]
 8008ba2:	b29a      	uxth	r2, r3
 8008ba4:	f107 0310 	add.w	r3, r7, #16
 8008ba8:	9301      	str	r3, [sp, #4]
 8008baa:	69fb      	ldr	r3, [r7, #28]
 8008bac:	9300      	str	r3, [sp, #0]
 8008bae:	68bb      	ldr	r3, [r7, #8]
 8008bb0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8008bb2:	68f8      	ldr	r0, [r7, #12]
 8008bb4:	f000 fe57 	bl	8009866 <xTaskCreate>
 8008bb8:	4603      	mov	r3, r0
 8008bba:	2b01      	cmp	r3, #1
 8008bbc:	d001      	beq.n	8008bc2 <osThreadNew+0x11a>
            hTask = NULL;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8008bc2:	693b      	ldr	r3, [r7, #16]
}
 8008bc4:	4618      	mov	r0, r3
 8008bc6:	3728      	adds	r7, #40	; 0x28
 8008bc8:	46bd      	mov	sp, r7
 8008bca:	bd80      	pop	{r7, pc}

08008bcc <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	b084      	sub	sp, #16
 8008bd0:	af00      	add	r7, sp, #0
 8008bd2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8008bd4:	f3ef 8305 	mrs	r3, IPSR
 8008bd8:	60bb      	str	r3, [r7, #8]
  return(result);
 8008bda:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8008bdc:	2b00      	cmp	r3, #0
 8008bde:	d003      	beq.n	8008be8 <osDelay+0x1c>
    stat = osErrorISR;
 8008be0:	f06f 0305 	mvn.w	r3, #5
 8008be4:	60fb      	str	r3, [r7, #12]
 8008be6:	e007      	b.n	8008bf8 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8008be8:	2300      	movs	r3, #0
 8008bea:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	2b00      	cmp	r3, #0
 8008bf0:	d002      	beq.n	8008bf8 <osDelay+0x2c>
      vTaskDelay(ticks);
 8008bf2:	6878      	ldr	r0, [r7, #4]
 8008bf4:	f000 ff92 	bl	8009b1c <vTaskDelay>
    }
  }

  return (stat);
 8008bf8:	68fb      	ldr	r3, [r7, #12]
}
 8008bfa:	4618      	mov	r0, r3
 8008bfc:	3710      	adds	r7, #16
 8008bfe:	46bd      	mov	sp, r7
 8008c00:	bd80      	pop	{r7, pc}
	...

08008c04 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8008c04:	b480      	push	{r7}
 8008c06:	b085      	sub	sp, #20
 8008c08:	af00      	add	r7, sp, #0
 8008c0a:	60f8      	str	r0, [r7, #12]
 8008c0c:	60b9      	str	r1, [r7, #8]
 8008c0e:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8008c10:	68fb      	ldr	r3, [r7, #12]
 8008c12:	4a07      	ldr	r2, [pc, #28]	; (8008c30 <vApplicationGetIdleTaskMemory+0x2c>)
 8008c14:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 8008c16:	68bb      	ldr	r3, [r7, #8]
 8008c18:	4a06      	ldr	r2, [pc, #24]	; (8008c34 <vApplicationGetIdleTaskMemory+0x30>)
 8008c1a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	2280      	movs	r2, #128	; 0x80
 8008c20:	601a      	str	r2, [r3, #0]
}
 8008c22:	bf00      	nop
 8008c24:	3714      	adds	r7, #20
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	20000608 	.word	0x20000608
 8008c34:	200006c4 	.word	0x200006c4

08008c38 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 8008c38:	b480      	push	{r7}
 8008c3a:	b085      	sub	sp, #20
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8008c44:	68fb      	ldr	r3, [r7, #12]
 8008c46:	4a07      	ldr	r2, [pc, #28]	; (8008c64 <vApplicationGetTimerTaskMemory+0x2c>)
 8008c48:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 8008c4a:	68bb      	ldr	r3, [r7, #8]
 8008c4c:	4a06      	ldr	r2, [pc, #24]	; (8008c68 <vApplicationGetTimerTaskMemory+0x30>)
 8008c4e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008c56:	601a      	str	r2, [r3, #0]
}
 8008c58:	bf00      	nop
 8008c5a:	3714      	adds	r7, #20
 8008c5c:	46bd      	mov	sp, r7
 8008c5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c62:	4770      	bx	lr
 8008c64:	200008c4 	.word	0x200008c4
 8008c68:	20000980 	.word	0x20000980

08008c6c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 8008c6c:	b480      	push	{r7}
 8008c6e:	b083      	sub	sp, #12
 8008c70:	af00      	add	r7, sp, #0
 8008c72:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	f103 0208 	add.w	r2, r3, #8
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 8008c7e:	687b      	ldr	r3, [r7, #4]
 8008c80:	f04f 32ff 	mov.w	r2, #4294967295
 8008c84:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c86:	687b      	ldr	r3, [r7, #4]
 8008c88:	f103 0208 	add.w	r2, r3, #8
 8008c8c:	687b      	ldr	r3, [r7, #4]
 8008c8e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	f103 0208 	add.w	r2, r3, #8
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 8008c9a:	687b      	ldr	r3, [r7, #4]
 8008c9c:	2200      	movs	r2, #0
 8008c9e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 8008ca0:	bf00      	nop
 8008ca2:	370c      	adds	r7, #12
 8008ca4:	46bd      	mov	sp, r7
 8008ca6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008caa:	4770      	bx	lr

08008cac <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8008cac:	b480      	push	{r7}
 8008cae:	b083      	sub	sp, #12
 8008cb0:	af00      	add	r7, sp, #0
 8008cb2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8008cb4:	687b      	ldr	r3, [r7, #4]
 8008cb6:	2200      	movs	r2, #0
 8008cb8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 8008cba:	bf00      	nop
 8008cbc:	370c      	adds	r7, #12
 8008cbe:	46bd      	mov	sp, r7
 8008cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cc4:	4770      	bx	lr

08008cc6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008cc6:	b480      	push	{r7}
 8008cc8:	b085      	sub	sp, #20
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
 8008cce:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	685b      	ldr	r3, [r3, #4]
 8008cd4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 8008cd6:	683b      	ldr	r3, [r7, #0]
 8008cd8:	68fa      	ldr	r2, [r7, #12]
 8008cda:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8008cdc:	68fb      	ldr	r3, [r7, #12]
 8008cde:	689a      	ldr	r2, [r3, #8]
 8008ce0:	683b      	ldr	r3, [r7, #0]
 8008ce2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8008ce4:	68fb      	ldr	r3, [r7, #12]
 8008ce6:	689b      	ldr	r3, [r3, #8]
 8008ce8:	683a      	ldr	r2, [r7, #0]
 8008cea:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	683a      	ldr	r2, [r7, #0]
 8008cf0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8008cf2:	683b      	ldr	r3, [r7, #0]
 8008cf4:	687a      	ldr	r2, [r7, #4]
 8008cf6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	1c5a      	adds	r2, r3, #1
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	601a      	str	r2, [r3, #0]
}
 8008d02:	bf00      	nop
 8008d04:	3714      	adds	r7, #20
 8008d06:	46bd      	mov	sp, r7
 8008d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d0c:	4770      	bx	lr

08008d0e <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8008d0e:	b480      	push	{r7}
 8008d10:	b085      	sub	sp, #20
 8008d12:	af00      	add	r7, sp, #0
 8008d14:	6078      	str	r0, [r7, #4]
 8008d16:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 8008d18:	683b      	ldr	r3, [r7, #0]
 8008d1a:	681b      	ldr	r3, [r3, #0]
 8008d1c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8008d1e:	68bb      	ldr	r3, [r7, #8]
 8008d20:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008d24:	d103      	bne.n	8008d2e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 8008d26:	687b      	ldr	r3, [r7, #4]
 8008d28:	691b      	ldr	r3, [r3, #16]
 8008d2a:	60fb      	str	r3, [r7, #12]
 8008d2c:	e00c      	b.n	8008d48 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8008d2e:	687b      	ldr	r3, [r7, #4]
 8008d30:	3308      	adds	r3, #8
 8008d32:	60fb      	str	r3, [r7, #12]
 8008d34:	e002      	b.n	8008d3c <vListInsert+0x2e>
 8008d36:	68fb      	ldr	r3, [r7, #12]
 8008d38:	685b      	ldr	r3, [r3, #4]
 8008d3a:	60fb      	str	r3, [r7, #12]
 8008d3c:	68fb      	ldr	r3, [r7, #12]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	68ba      	ldr	r2, [r7, #8]
 8008d44:	429a      	cmp	r2, r3
 8008d46:	d2f6      	bcs.n	8008d36 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	685a      	ldr	r2, [r3, #4]
 8008d4c:	683b      	ldr	r3, [r7, #0]
 8008d4e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 8008d50:	683b      	ldr	r3, [r7, #0]
 8008d52:	685b      	ldr	r3, [r3, #4]
 8008d54:	683a      	ldr	r2, [r7, #0]
 8008d56:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 8008d58:	683b      	ldr	r3, [r7, #0]
 8008d5a:	68fa      	ldr	r2, [r7, #12]
 8008d5c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 8008d5e:	68fb      	ldr	r3, [r7, #12]
 8008d60:	683a      	ldr	r2, [r7, #0]
 8008d62:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 8008d64:	683b      	ldr	r3, [r7, #0]
 8008d66:	687a      	ldr	r2, [r7, #4]
 8008d68:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 8008d6a:	687b      	ldr	r3, [r7, #4]
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	1c5a      	adds	r2, r3, #1
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	601a      	str	r2, [r3, #0]
}
 8008d74:	bf00      	nop
 8008d76:	3714      	adds	r7, #20
 8008d78:	46bd      	mov	sp, r7
 8008d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d7e:	4770      	bx	lr

08008d80 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 8008d80:	b480      	push	{r7}
 8008d82:	b085      	sub	sp, #20
 8008d84:	af00      	add	r7, sp, #0
 8008d86:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	691b      	ldr	r3, [r3, #16]
 8008d8c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	687a      	ldr	r2, [r7, #4]
 8008d94:	6892      	ldr	r2, [r2, #8]
 8008d96:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	689b      	ldr	r3, [r3, #8]
 8008d9c:	687a      	ldr	r2, [r7, #4]
 8008d9e:	6852      	ldr	r2, [r2, #4]
 8008da0:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	687a      	ldr	r2, [r7, #4]
 8008da8:	429a      	cmp	r2, r3
 8008daa:	d103      	bne.n	8008db4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8008dac:	687b      	ldr	r3, [r7, #4]
 8008dae:	689a      	ldr	r2, [r3, #8]
 8008db0:	68fb      	ldr	r3, [r7, #12]
 8008db2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	2200      	movs	r2, #0
 8008db8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	681b      	ldr	r3, [r3, #0]
 8008dbe:	1e5a      	subs	r2, r3, #1
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	681b      	ldr	r3, [r3, #0]
}
 8008dc8:	4618      	mov	r0, r3
 8008dca:	3714      	adds	r7, #20
 8008dcc:	46bd      	mov	sp, r7
 8008dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd2:	4770      	bx	lr

08008dd4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8008dd4:	b580      	push	{r7, lr}
 8008dd6:	b084      	sub	sp, #16
 8008dd8:	af00      	add	r7, sp, #0
 8008dda:	6078      	str	r0, [r7, #4]
 8008ddc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8008dde:	687b      	ldr	r3, [r7, #4]
 8008de0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	2b00      	cmp	r3, #0
 8008de6:	d10a      	bne.n	8008dfe <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 8008de8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008dec:	f383 8811 	msr	BASEPRI, r3
 8008df0:	f3bf 8f6f 	isb	sy
 8008df4:	f3bf 8f4f 	dsb	sy
 8008df8:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 8008dfa:	bf00      	nop
 8008dfc:	e7fe      	b.n	8008dfc <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8008dfe:	f002 f879 	bl	800aef4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	681a      	ldr	r2, [r3, #0]
 8008e06:	68fb      	ldr	r3, [r7, #12]
 8008e08:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e0a:	68f9      	ldr	r1, [r7, #12]
 8008e0c:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e0e:	fb01 f303 	mul.w	r3, r1, r3
 8008e12:	441a      	add	r2, r3
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	2200      	movs	r2, #0
 8008e1c:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8008e1e:	68fb      	ldr	r3, [r7, #12]
 8008e20:	681a      	ldr	r2, [r3, #0]
 8008e22:	68fb      	ldr	r3, [r7, #12]
 8008e24:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8008e26:	68fb      	ldr	r3, [r7, #12]
 8008e28:	681a      	ldr	r2, [r3, #0]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008e2e:	3b01      	subs	r3, #1
 8008e30:	68f9      	ldr	r1, [r7, #12]
 8008e32:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8008e34:	fb01 f303 	mul.w	r3, r1, r3
 8008e38:	441a      	add	r2, r3
 8008e3a:	68fb      	ldr	r3, [r7, #12]
 8008e3c:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8008e3e:	68fb      	ldr	r3, [r7, #12]
 8008e40:	22ff      	movs	r2, #255	; 0xff
 8008e42:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	22ff      	movs	r2, #255	; 0xff
 8008e4a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 8008e4e:	683b      	ldr	r3, [r7, #0]
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d114      	bne.n	8008e7e <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	691b      	ldr	r3, [r3, #16]
 8008e58:	2b00      	cmp	r3, #0
 8008e5a:	d01a      	beq.n	8008e92 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	3310      	adds	r3, #16
 8008e60:	4618      	mov	r0, r3
 8008e62:	f001 f929 	bl	800a0b8 <xTaskRemoveFromEventList>
 8008e66:	4603      	mov	r3, r0
 8008e68:	2b00      	cmp	r3, #0
 8008e6a:	d012      	beq.n	8008e92 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 8008e6c:	4b0c      	ldr	r3, [pc, #48]	; (8008ea0 <xQueueGenericReset+0xcc>)
 8008e6e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008e72:	601a      	str	r2, [r3, #0]
 8008e74:	f3bf 8f4f 	dsb	sy
 8008e78:	f3bf 8f6f 	isb	sy
 8008e7c:	e009      	b.n	8008e92 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	3310      	adds	r3, #16
 8008e82:	4618      	mov	r0, r3
 8008e84:	f7ff fef2 	bl	8008c6c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 8008e88:	68fb      	ldr	r3, [r7, #12]
 8008e8a:	3324      	adds	r3, #36	; 0x24
 8008e8c:	4618      	mov	r0, r3
 8008e8e:	f7ff feed 	bl	8008c6c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 8008e92:	f002 f85f 	bl	800af54 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 8008e96:	2301      	movs	r3, #1
}
 8008e98:	4618      	mov	r0, r3
 8008e9a:	3710      	adds	r7, #16
 8008e9c:	46bd      	mov	sp, r7
 8008e9e:	bd80      	pop	{r7, pc}
 8008ea0:	e000ed04 	.word	0xe000ed04

08008ea4 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 8008ea4:	b580      	push	{r7, lr}
 8008ea6:	b08e      	sub	sp, #56	; 0x38
 8008ea8:	af02      	add	r7, sp, #8
 8008eaa:	60f8      	str	r0, [r7, #12]
 8008eac:	60b9      	str	r1, [r7, #8]
 8008eae:	607a      	str	r2, [r7, #4]
 8008eb0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8008eb2:	68fb      	ldr	r3, [r7, #12]
 8008eb4:	2b00      	cmp	r3, #0
 8008eb6:	d10a      	bne.n	8008ece <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 8008eb8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ebc:	f383 8811 	msr	BASEPRI, r3
 8008ec0:	f3bf 8f6f 	isb	sy
 8008ec4:	f3bf 8f4f 	dsb	sy
 8008ec8:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8008eca:	bf00      	nop
 8008ecc:	e7fe      	b.n	8008ecc <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8008ece:	683b      	ldr	r3, [r7, #0]
 8008ed0:	2b00      	cmp	r3, #0
 8008ed2:	d10a      	bne.n	8008eea <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8008ed4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ed8:	f383 8811 	msr	BASEPRI, r3
 8008edc:	f3bf 8f6f 	isb	sy
 8008ee0:	f3bf 8f4f 	dsb	sy
 8008ee4:	627b      	str	r3, [r7, #36]	; 0x24
}
 8008ee6:	bf00      	nop
 8008ee8:	e7fe      	b.n	8008ee8 <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 8008eea:	687b      	ldr	r3, [r7, #4]
 8008eec:	2b00      	cmp	r3, #0
 8008eee:	d002      	beq.n	8008ef6 <xQueueGenericCreateStatic+0x52>
 8008ef0:	68bb      	ldr	r3, [r7, #8]
 8008ef2:	2b00      	cmp	r3, #0
 8008ef4:	d001      	beq.n	8008efa <xQueueGenericCreateStatic+0x56>
 8008ef6:	2301      	movs	r3, #1
 8008ef8:	e000      	b.n	8008efc <xQueueGenericCreateStatic+0x58>
 8008efa:	2300      	movs	r3, #0
 8008efc:	2b00      	cmp	r3, #0
 8008efe:	d10a      	bne.n	8008f16 <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8008f00:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f04:	f383 8811 	msr	BASEPRI, r3
 8008f08:	f3bf 8f6f 	isb	sy
 8008f0c:	f3bf 8f4f 	dsb	sy
 8008f10:	623b      	str	r3, [r7, #32]
}
 8008f12:	bf00      	nop
 8008f14:	e7fe      	b.n	8008f14 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 8008f16:	687b      	ldr	r3, [r7, #4]
 8008f18:	2b00      	cmp	r3, #0
 8008f1a:	d102      	bne.n	8008f22 <xQueueGenericCreateStatic+0x7e>
 8008f1c:	68bb      	ldr	r3, [r7, #8]
 8008f1e:	2b00      	cmp	r3, #0
 8008f20:	d101      	bne.n	8008f26 <xQueueGenericCreateStatic+0x82>
 8008f22:	2301      	movs	r3, #1
 8008f24:	e000      	b.n	8008f28 <xQueueGenericCreateStatic+0x84>
 8008f26:	2300      	movs	r3, #0
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d10a      	bne.n	8008f42 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8008f2c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f30:	f383 8811 	msr	BASEPRI, r3
 8008f34:	f3bf 8f6f 	isb	sy
 8008f38:	f3bf 8f4f 	dsb	sy
 8008f3c:	61fb      	str	r3, [r7, #28]
}
 8008f3e:	bf00      	nop
 8008f40:	e7fe      	b.n	8008f40 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8008f42:	2350      	movs	r3, #80	; 0x50
 8008f44:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 8008f46:	697b      	ldr	r3, [r7, #20]
 8008f48:	2b50      	cmp	r3, #80	; 0x50
 8008f4a:	d00a      	beq.n	8008f62 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 8008f4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f50:	f383 8811 	msr	BASEPRI, r3
 8008f54:	f3bf 8f6f 	isb	sy
 8008f58:	f3bf 8f4f 	dsb	sy
 8008f5c:	61bb      	str	r3, [r7, #24]
}
 8008f5e:	bf00      	nop
 8008f60:	e7fe      	b.n	8008f60 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 8008f62:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8008f64:	683b      	ldr	r3, [r7, #0]
 8008f66:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 8008f68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d00d      	beq.n	8008f8a <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 8008f6e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f70:	2201      	movs	r2, #1
 8008f72:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8008f76:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 8008f7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008f7c:	9300      	str	r3, [sp, #0]
 8008f7e:	4613      	mov	r3, r2
 8008f80:	687a      	ldr	r2, [r7, #4]
 8008f82:	68b9      	ldr	r1, [r7, #8]
 8008f84:	68f8      	ldr	r0, [r7, #12]
 8008f86:	f000 f805 	bl	8008f94 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8008f8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 8008f8c:	4618      	mov	r0, r3
 8008f8e:	3730      	adds	r7, #48	; 0x30
 8008f90:	46bd      	mov	sp, r7
 8008f92:	bd80      	pop	{r7, pc}

08008f94 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 8008f94:	b580      	push	{r7, lr}
 8008f96:	b084      	sub	sp, #16
 8008f98:	af00      	add	r7, sp, #0
 8008f9a:	60f8      	str	r0, [r7, #12]
 8008f9c:	60b9      	str	r1, [r7, #8]
 8008f9e:	607a      	str	r2, [r7, #4]
 8008fa0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 8008fa2:	68bb      	ldr	r3, [r7, #8]
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d103      	bne.n	8008fb0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8008fa8:	69bb      	ldr	r3, [r7, #24]
 8008faa:	69ba      	ldr	r2, [r7, #24]
 8008fac:	601a      	str	r2, [r3, #0]
 8008fae:	e002      	b.n	8008fb6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8008fb0:	69bb      	ldr	r3, [r7, #24]
 8008fb2:	687a      	ldr	r2, [r7, #4]
 8008fb4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 8008fb6:	69bb      	ldr	r3, [r7, #24]
 8008fb8:	68fa      	ldr	r2, [r7, #12]
 8008fba:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8008fbc:	69bb      	ldr	r3, [r7, #24]
 8008fbe:	68ba      	ldr	r2, [r7, #8]
 8008fc0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 8008fc2:	2101      	movs	r1, #1
 8008fc4:	69b8      	ldr	r0, [r7, #24]
 8008fc6:	f7ff ff05 	bl	8008dd4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8008fca:	69bb      	ldr	r3, [r7, #24]
 8008fcc:	78fa      	ldrb	r2, [r7, #3]
 8008fce:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 8008fd2:	bf00      	nop
 8008fd4:	3710      	adds	r7, #16
 8008fd6:	46bd      	mov	sp, r7
 8008fd8:	bd80      	pop	{r7, pc}
	...

08008fdc <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 8008fdc:	b580      	push	{r7, lr}
 8008fde:	b08e      	sub	sp, #56	; 0x38
 8008fe0:	af00      	add	r7, sp, #0
 8008fe2:	60f8      	str	r0, [r7, #12]
 8008fe4:	60b9      	str	r1, [r7, #8]
 8008fe6:	607a      	str	r2, [r7, #4]
 8008fe8:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 8008fea:	2300      	movs	r3, #0
 8008fec:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8008fee:	68fb      	ldr	r3, [r7, #12]
 8008ff0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8008ff2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008ff4:	2b00      	cmp	r3, #0
 8008ff6:	d10a      	bne.n	800900e <xQueueGenericSend+0x32>
	__asm volatile
 8008ff8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffc:	f383 8811 	msr	BASEPRI, r3
 8009000:	f3bf 8f6f 	isb	sy
 8009004:	f3bf 8f4f 	dsb	sy
 8009008:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800900a:	bf00      	nop
 800900c:	e7fe      	b.n	800900c <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800900e:	68bb      	ldr	r3, [r7, #8]
 8009010:	2b00      	cmp	r3, #0
 8009012:	d103      	bne.n	800901c <xQueueGenericSend+0x40>
 8009014:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009016:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009018:	2b00      	cmp	r3, #0
 800901a:	d101      	bne.n	8009020 <xQueueGenericSend+0x44>
 800901c:	2301      	movs	r3, #1
 800901e:	e000      	b.n	8009022 <xQueueGenericSend+0x46>
 8009020:	2300      	movs	r3, #0
 8009022:	2b00      	cmp	r3, #0
 8009024:	d10a      	bne.n	800903c <xQueueGenericSend+0x60>
	__asm volatile
 8009026:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902a:	f383 8811 	msr	BASEPRI, r3
 800902e:	f3bf 8f6f 	isb	sy
 8009032:	f3bf 8f4f 	dsb	sy
 8009036:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009038:	bf00      	nop
 800903a:	e7fe      	b.n	800903a <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800903c:	683b      	ldr	r3, [r7, #0]
 800903e:	2b02      	cmp	r3, #2
 8009040:	d103      	bne.n	800904a <xQueueGenericSend+0x6e>
 8009042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009044:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009046:	2b01      	cmp	r3, #1
 8009048:	d101      	bne.n	800904e <xQueueGenericSend+0x72>
 800904a:	2301      	movs	r3, #1
 800904c:	e000      	b.n	8009050 <xQueueGenericSend+0x74>
 800904e:	2300      	movs	r3, #0
 8009050:	2b00      	cmp	r3, #0
 8009052:	d10a      	bne.n	800906a <xQueueGenericSend+0x8e>
	__asm volatile
 8009054:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009058:	f383 8811 	msr	BASEPRI, r3
 800905c:	f3bf 8f6f 	isb	sy
 8009060:	f3bf 8f4f 	dsb	sy
 8009064:	623b      	str	r3, [r7, #32]
}
 8009066:	bf00      	nop
 8009068:	e7fe      	b.n	8009068 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800906a:	f001 f9e7 	bl	800a43c <xTaskGetSchedulerState>
 800906e:	4603      	mov	r3, r0
 8009070:	2b00      	cmp	r3, #0
 8009072:	d102      	bne.n	800907a <xQueueGenericSend+0x9e>
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	2b00      	cmp	r3, #0
 8009078:	d101      	bne.n	800907e <xQueueGenericSend+0xa2>
 800907a:	2301      	movs	r3, #1
 800907c:	e000      	b.n	8009080 <xQueueGenericSend+0xa4>
 800907e:	2300      	movs	r3, #0
 8009080:	2b00      	cmp	r3, #0
 8009082:	d10a      	bne.n	800909a <xQueueGenericSend+0xbe>
	__asm volatile
 8009084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009088:	f383 8811 	msr	BASEPRI, r3
 800908c:	f3bf 8f6f 	isb	sy
 8009090:	f3bf 8f4f 	dsb	sy
 8009094:	61fb      	str	r3, [r7, #28]
}
 8009096:	bf00      	nop
 8009098:	e7fe      	b.n	8009098 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800909a:	f001 ff2b 	bl	800aef4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800909e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a0:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80090a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80090a6:	429a      	cmp	r2, r3
 80090a8:	d302      	bcc.n	80090b0 <xQueueGenericSend+0xd4>
 80090aa:	683b      	ldr	r3, [r7, #0]
 80090ac:	2b02      	cmp	r3, #2
 80090ae:	d129      	bne.n	8009104 <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80090b0:	683a      	ldr	r2, [r7, #0]
 80090b2:	68b9      	ldr	r1, [r7, #8]
 80090b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80090b6:	f000 fa0b 	bl	80094d0 <prvCopyDataToQueue>
 80090ba:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80090bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80090c0:	2b00      	cmp	r3, #0
 80090c2:	d010      	beq.n	80090e6 <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80090c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80090c6:	3324      	adds	r3, #36	; 0x24
 80090c8:	4618      	mov	r0, r3
 80090ca:	f000 fff5 	bl	800a0b8 <xTaskRemoveFromEventList>
 80090ce:	4603      	mov	r3, r0
 80090d0:	2b00      	cmp	r3, #0
 80090d2:	d013      	beq.n	80090fc <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80090d4:	4b3f      	ldr	r3, [pc, #252]	; (80091d4 <xQueueGenericSend+0x1f8>)
 80090d6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090da:	601a      	str	r2, [r3, #0]
 80090dc:	f3bf 8f4f 	dsb	sy
 80090e0:	f3bf 8f6f 	isb	sy
 80090e4:	e00a      	b.n	80090fc <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80090e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80090e8:	2b00      	cmp	r3, #0
 80090ea:	d007      	beq.n	80090fc <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80090ec:	4b39      	ldr	r3, [pc, #228]	; (80091d4 <xQueueGenericSend+0x1f8>)
 80090ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80090f2:	601a      	str	r2, [r3, #0]
 80090f4:	f3bf 8f4f 	dsb	sy
 80090f8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 80090fc:	f001 ff2a 	bl	800af54 <vPortExitCritical>
				return pdPASS;
 8009100:	2301      	movs	r3, #1
 8009102:	e063      	b.n	80091cc <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	2b00      	cmp	r3, #0
 8009108:	d103      	bne.n	8009112 <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800910a:	f001 ff23 	bl	800af54 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800910e:	2300      	movs	r3, #0
 8009110:	e05c      	b.n	80091cc <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8009112:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009114:	2b00      	cmp	r3, #0
 8009116:	d106      	bne.n	8009126 <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009118:	f107 0314 	add.w	r3, r7, #20
 800911c:	4618      	mov	r0, r3
 800911e:	f001 f82f 	bl	800a180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8009122:	2301      	movs	r3, #1
 8009124:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009126:	f001 ff15 	bl	800af54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800912a:	f000 fd9b 	bl	8009c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800912e:	f001 fee1 	bl	800aef4 <vPortEnterCritical>
 8009132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009134:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009138:	b25b      	sxtb	r3, r3
 800913a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800913e:	d103      	bne.n	8009148 <xQueueGenericSend+0x16c>
 8009140:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009142:	2200      	movs	r2, #0
 8009144:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800914a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800914e:	b25b      	sxtb	r3, r3
 8009150:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009154:	d103      	bne.n	800915e <xQueueGenericSend+0x182>
 8009156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009158:	2200      	movs	r2, #0
 800915a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800915e:	f001 fef9 	bl	800af54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8009162:	1d3a      	adds	r2, r7, #4
 8009164:	f107 0314 	add.w	r3, r7, #20
 8009168:	4611      	mov	r1, r2
 800916a:	4618      	mov	r0, r3
 800916c:	f001 f81e 	bl	800a1ac <xTaskCheckForTimeOut>
 8009170:	4603      	mov	r3, r0
 8009172:	2b00      	cmp	r3, #0
 8009174:	d124      	bne.n	80091c0 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8009176:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009178:	f000 faa2 	bl	80096c0 <prvIsQueueFull>
 800917c:	4603      	mov	r3, r0
 800917e:	2b00      	cmp	r3, #0
 8009180:	d018      	beq.n	80091b4 <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8009182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009184:	3310      	adds	r3, #16
 8009186:	687a      	ldr	r2, [r7, #4]
 8009188:	4611      	mov	r1, r2
 800918a:	4618      	mov	r0, r3
 800918c:	f000 ff44 	bl	800a018 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8009190:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8009192:	f000 fa2d 	bl	80095f0 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8009196:	f000 fd73 	bl	8009c80 <xTaskResumeAll>
 800919a:	4603      	mov	r3, r0
 800919c:	2b00      	cmp	r3, #0
 800919e:	f47f af7c 	bne.w	800909a <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 80091a2:	4b0c      	ldr	r3, [pc, #48]	; (80091d4 <xQueueGenericSend+0x1f8>)
 80091a4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80091a8:	601a      	str	r2, [r3, #0]
 80091aa:	f3bf 8f4f 	dsb	sy
 80091ae:	f3bf 8f6f 	isb	sy
 80091b2:	e772      	b.n	800909a <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 80091b4:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091b6:	f000 fa1b 	bl	80095f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80091ba:	f000 fd61 	bl	8009c80 <xTaskResumeAll>
 80091be:	e76c      	b.n	800909a <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 80091c0:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80091c2:	f000 fa15 	bl	80095f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80091c6:	f000 fd5b 	bl	8009c80 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 80091ca:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 80091cc:	4618      	mov	r0, r3
 80091ce:	3738      	adds	r7, #56	; 0x38
 80091d0:	46bd      	mov	sp, r7
 80091d2:	bd80      	pop	{r7, pc}
 80091d4:	e000ed04 	.word	0xe000ed04

080091d8 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 80091d8:	b580      	push	{r7, lr}
 80091da:	b090      	sub	sp, #64	; 0x40
 80091dc:	af00      	add	r7, sp, #0
 80091de:	60f8      	str	r0, [r7, #12]
 80091e0:	60b9      	str	r1, [r7, #8]
 80091e2:	607a      	str	r2, [r7, #4]
 80091e4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 80091e6:	68fb      	ldr	r3, [r7, #12]
 80091e8:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 80091ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d10a      	bne.n	8009206 <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 80091f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091f4:	f383 8811 	msr	BASEPRI, r3
 80091f8:	f3bf 8f6f 	isb	sy
 80091fc:	f3bf 8f4f 	dsb	sy
 8009200:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8009202:	bf00      	nop
 8009204:	e7fe      	b.n	8009204 <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009206:	68bb      	ldr	r3, [r7, #8]
 8009208:	2b00      	cmp	r3, #0
 800920a:	d103      	bne.n	8009214 <xQueueGenericSendFromISR+0x3c>
 800920c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800920e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009210:	2b00      	cmp	r3, #0
 8009212:	d101      	bne.n	8009218 <xQueueGenericSendFromISR+0x40>
 8009214:	2301      	movs	r3, #1
 8009216:	e000      	b.n	800921a <xQueueGenericSendFromISR+0x42>
 8009218:	2300      	movs	r3, #0
 800921a:	2b00      	cmp	r3, #0
 800921c:	d10a      	bne.n	8009234 <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 800921e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009222:	f383 8811 	msr	BASEPRI, r3
 8009226:	f3bf 8f6f 	isb	sy
 800922a:	f3bf 8f4f 	dsb	sy
 800922e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8009230:	bf00      	nop
 8009232:	e7fe      	b.n	8009232 <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8009234:	683b      	ldr	r3, [r7, #0]
 8009236:	2b02      	cmp	r3, #2
 8009238:	d103      	bne.n	8009242 <xQueueGenericSendFromISR+0x6a>
 800923a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800923c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800923e:	2b01      	cmp	r3, #1
 8009240:	d101      	bne.n	8009246 <xQueueGenericSendFromISR+0x6e>
 8009242:	2301      	movs	r3, #1
 8009244:	e000      	b.n	8009248 <xQueueGenericSendFromISR+0x70>
 8009246:	2300      	movs	r3, #0
 8009248:	2b00      	cmp	r3, #0
 800924a:	d10a      	bne.n	8009262 <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 800924c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009250:	f383 8811 	msr	BASEPRI, r3
 8009254:	f3bf 8f6f 	isb	sy
 8009258:	f3bf 8f4f 	dsb	sy
 800925c:	623b      	str	r3, [r7, #32]
}
 800925e:	bf00      	nop
 8009260:	e7fe      	b.n	8009260 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8009262:	f001 ff29 	bl	800b0b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8009266:	f3ef 8211 	mrs	r2, BASEPRI
 800926a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800926e:	f383 8811 	msr	BASEPRI, r3
 8009272:	f3bf 8f6f 	isb	sy
 8009276:	f3bf 8f4f 	dsb	sy
 800927a:	61fa      	str	r2, [r7, #28]
 800927c:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800927e:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8009280:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8009282:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009284:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8009286:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009288:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800928a:	429a      	cmp	r2, r3
 800928c:	d302      	bcc.n	8009294 <xQueueGenericSendFromISR+0xbc>
 800928e:	683b      	ldr	r3, [r7, #0]
 8009290:	2b02      	cmp	r3, #2
 8009292:	d12f      	bne.n	80092f4 <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8009294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009296:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800929a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 800929e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092a2:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80092a4:	683a      	ldr	r2, [r7, #0]
 80092a6:	68b9      	ldr	r1, [r7, #8]
 80092a8:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 80092aa:	f000 f911 	bl	80094d0 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 80092ae:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 80092b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80092b6:	d112      	bne.n	80092de <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80092b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80092bc:	2b00      	cmp	r3, #0
 80092be:	d016      	beq.n	80092ee <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80092c0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092c2:	3324      	adds	r3, #36	; 0x24
 80092c4:	4618      	mov	r0, r3
 80092c6:	f000 fef7 	bl	800a0b8 <xTaskRemoveFromEventList>
 80092ca:	4603      	mov	r3, r0
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00e      	beq.n	80092ee <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	2b00      	cmp	r3, #0
 80092d4:	d00b      	beq.n	80092ee <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	2201      	movs	r2, #1
 80092da:	601a      	str	r2, [r3, #0]
 80092dc:	e007      	b.n	80092ee <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 80092de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80092e2:	3301      	adds	r3, #1
 80092e4:	b2db      	uxtb	r3, r3
 80092e6:	b25a      	sxtb	r2, r3
 80092e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80092ea:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 80092ee:	2301      	movs	r3, #1
 80092f0:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 80092f2:	e001      	b.n	80092f8 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 80092f4:	2300      	movs	r3, #0
 80092f6:	63fb      	str	r3, [r7, #60]	; 0x3c
 80092f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80092fa:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 80092fc:	697b      	ldr	r3, [r7, #20]
 80092fe:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8009302:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8009304:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8009306:	4618      	mov	r0, r3
 8009308:	3740      	adds	r7, #64	; 0x40
 800930a:	46bd      	mov	sp, r7
 800930c:	bd80      	pop	{r7, pc}
	...

08009310 <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8009310:	b580      	push	{r7, lr}
 8009312:	b08c      	sub	sp, #48	; 0x30
 8009314:	af00      	add	r7, sp, #0
 8009316:	60f8      	str	r0, [r7, #12]
 8009318:	60b9      	str	r1, [r7, #8]
 800931a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800931c:	2300      	movs	r3, #0
 800931e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8009320:	68fb      	ldr	r3, [r7, #12]
 8009322:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8009324:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009326:	2b00      	cmp	r3, #0
 8009328:	d10a      	bne.n	8009340 <xQueueReceive+0x30>
	__asm volatile
 800932a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800932e:	f383 8811 	msr	BASEPRI, r3
 8009332:	f3bf 8f6f 	isb	sy
 8009336:	f3bf 8f4f 	dsb	sy
 800933a:	623b      	str	r3, [r7, #32]
}
 800933c:	bf00      	nop
 800933e:	e7fe      	b.n	800933e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8009340:	68bb      	ldr	r3, [r7, #8]
 8009342:	2b00      	cmp	r3, #0
 8009344:	d103      	bne.n	800934e <xQueueReceive+0x3e>
 8009346:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009348:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <xQueueReceive+0x42>
 800934e:	2301      	movs	r3, #1
 8009350:	e000      	b.n	8009354 <xQueueReceive+0x44>
 8009352:	2300      	movs	r3, #0
 8009354:	2b00      	cmp	r3, #0
 8009356:	d10a      	bne.n	800936e <xQueueReceive+0x5e>
	__asm volatile
 8009358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800935c:	f383 8811 	msr	BASEPRI, r3
 8009360:	f3bf 8f6f 	isb	sy
 8009364:	f3bf 8f4f 	dsb	sy
 8009368:	61fb      	str	r3, [r7, #28]
}
 800936a:	bf00      	nop
 800936c:	e7fe      	b.n	800936c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800936e:	f001 f865 	bl	800a43c <xTaskGetSchedulerState>
 8009372:	4603      	mov	r3, r0
 8009374:	2b00      	cmp	r3, #0
 8009376:	d102      	bne.n	800937e <xQueueReceive+0x6e>
 8009378:	687b      	ldr	r3, [r7, #4]
 800937a:	2b00      	cmp	r3, #0
 800937c:	d101      	bne.n	8009382 <xQueueReceive+0x72>
 800937e:	2301      	movs	r3, #1
 8009380:	e000      	b.n	8009384 <xQueueReceive+0x74>
 8009382:	2300      	movs	r3, #0
 8009384:	2b00      	cmp	r3, #0
 8009386:	d10a      	bne.n	800939e <xQueueReceive+0x8e>
	__asm volatile
 8009388:	f04f 0350 	mov.w	r3, #80	; 0x50
 800938c:	f383 8811 	msr	BASEPRI, r3
 8009390:	f3bf 8f6f 	isb	sy
 8009394:	f3bf 8f4f 	dsb	sy
 8009398:	61bb      	str	r3, [r7, #24]
}
 800939a:	bf00      	nop
 800939c:	e7fe      	b.n	800939c <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800939e:	f001 fda9 	bl	800aef4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80093a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80093a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d01f      	beq.n	80093ee <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80093ae:	68b9      	ldr	r1, [r7, #8]
 80093b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80093b2:	f000 f8f7 	bl	80095a4 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80093b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80093b8:	1e5a      	subs	r2, r3, #1
 80093ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80093be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c0:	691b      	ldr	r3, [r3, #16]
 80093c2:	2b00      	cmp	r3, #0
 80093c4:	d00f      	beq.n	80093e6 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80093c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80093c8:	3310      	adds	r3, #16
 80093ca:	4618      	mov	r0, r3
 80093cc:	f000 fe74 	bl	800a0b8 <xTaskRemoveFromEventList>
 80093d0:	4603      	mov	r3, r0
 80093d2:	2b00      	cmp	r3, #0
 80093d4:	d007      	beq.n	80093e6 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80093d6:	4b3d      	ldr	r3, [pc, #244]	; (80094cc <xQueueReceive+0x1bc>)
 80093d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80093dc:	601a      	str	r2, [r3, #0]
 80093de:	f3bf 8f4f 	dsb	sy
 80093e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80093e6:	f001 fdb5 	bl	800af54 <vPortExitCritical>
				return pdPASS;
 80093ea:	2301      	movs	r3, #1
 80093ec:	e069      	b.n	80094c2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	2b00      	cmp	r3, #0
 80093f2:	d103      	bne.n	80093fc <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80093f4:	f001 fdae 	bl	800af54 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80093f8:	2300      	movs	r3, #0
 80093fa:	e062      	b.n	80094c2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 80093fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80093fe:	2b00      	cmp	r3, #0
 8009400:	d106      	bne.n	8009410 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8009402:	f107 0310 	add.w	r3, r7, #16
 8009406:	4618      	mov	r0, r3
 8009408:	f000 feba 	bl	800a180 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800940c:	2301      	movs	r3, #1
 800940e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8009410:	f001 fda0 	bl	800af54 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8009414:	f000 fc26 	bl	8009c64 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8009418:	f001 fd6c 	bl	800aef4 <vPortEnterCritical>
 800941c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800941e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8009422:	b25b      	sxtb	r3, r3
 8009424:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009428:	d103      	bne.n	8009432 <xQueueReceive+0x122>
 800942a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942c:	2200      	movs	r2, #0
 800942e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009434:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009438:	b25b      	sxtb	r3, r3
 800943a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800943e:	d103      	bne.n	8009448 <xQueueReceive+0x138>
 8009440:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009442:	2200      	movs	r2, #0
 8009444:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009448:	f001 fd84 	bl	800af54 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800944c:	1d3a      	adds	r2, r7, #4
 800944e:	f107 0310 	add.w	r3, r7, #16
 8009452:	4611      	mov	r1, r2
 8009454:	4618      	mov	r0, r3
 8009456:	f000 fea9 	bl	800a1ac <xTaskCheckForTimeOut>
 800945a:	4603      	mov	r3, r0
 800945c:	2b00      	cmp	r3, #0
 800945e:	d123      	bne.n	80094a8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8009460:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8009462:	f000 f917 	bl	8009694 <prvIsQueueEmpty>
 8009466:	4603      	mov	r3, r0
 8009468:	2b00      	cmp	r3, #0
 800946a:	d017      	beq.n	800949c <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800946c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800946e:	3324      	adds	r3, #36	; 0x24
 8009470:	687a      	ldr	r2, [r7, #4]
 8009472:	4611      	mov	r1, r2
 8009474:	4618      	mov	r0, r3
 8009476:	f000 fdcf 	bl	800a018 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800947a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800947c:	f000 f8b8 	bl	80095f0 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8009480:	f000 fbfe 	bl	8009c80 <xTaskResumeAll>
 8009484:	4603      	mov	r3, r0
 8009486:	2b00      	cmp	r3, #0
 8009488:	d189      	bne.n	800939e <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 800948a:	4b10      	ldr	r3, [pc, #64]	; (80094cc <xQueueReceive+0x1bc>)
 800948c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009490:	601a      	str	r2, [r3, #0]
 8009492:	f3bf 8f4f 	dsb	sy
 8009496:	f3bf 8f6f 	isb	sy
 800949a:	e780      	b.n	800939e <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800949c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800949e:	f000 f8a7 	bl	80095f0 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80094a2:	f000 fbed 	bl	8009c80 <xTaskResumeAll>
 80094a6:	e77a      	b.n	800939e <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80094a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094aa:	f000 f8a1 	bl	80095f0 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80094ae:	f000 fbe7 	bl	8009c80 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80094b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80094b4:	f000 f8ee 	bl	8009694 <prvIsQueueEmpty>
 80094b8:	4603      	mov	r3, r0
 80094ba:	2b00      	cmp	r3, #0
 80094bc:	f43f af6f 	beq.w	800939e <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80094c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80094c2:	4618      	mov	r0, r3
 80094c4:	3730      	adds	r7, #48	; 0x30
 80094c6:	46bd      	mov	sp, r7
 80094c8:	bd80      	pop	{r7, pc}
 80094ca:	bf00      	nop
 80094cc:	e000ed04 	.word	0xe000ed04

080094d0 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80094d0:	b580      	push	{r7, lr}
 80094d2:	b086      	sub	sp, #24
 80094d4:	af00      	add	r7, sp, #0
 80094d6:	60f8      	str	r0, [r7, #12]
 80094d8:	60b9      	str	r1, [r7, #8]
 80094da:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 80094dc:	2300      	movs	r3, #0
 80094de:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80094e4:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80094ea:	2b00      	cmp	r3, #0
 80094ec:	d10d      	bne.n	800950a <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 80094ee:	68fb      	ldr	r3, [r7, #12]
 80094f0:	681b      	ldr	r3, [r3, #0]
 80094f2:	2b00      	cmp	r3, #0
 80094f4:	d14d      	bne.n	8009592 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 80094f6:	68fb      	ldr	r3, [r7, #12]
 80094f8:	689b      	ldr	r3, [r3, #8]
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 ffbc 	bl	800a478 <xTaskPriorityDisinherit>
 8009500:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8009502:	68fb      	ldr	r3, [r7, #12]
 8009504:	2200      	movs	r2, #0
 8009506:	609a      	str	r2, [r3, #8]
 8009508:	e043      	b.n	8009592 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800950a:	687b      	ldr	r3, [r7, #4]
 800950c:	2b00      	cmp	r3, #0
 800950e:	d119      	bne.n	8009544 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8009510:	68fb      	ldr	r3, [r7, #12]
 8009512:	6858      	ldr	r0, [r3, #4]
 8009514:	68fb      	ldr	r3, [r7, #12]
 8009516:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009518:	461a      	mov	r2, r3
 800951a:	68b9      	ldr	r1, [r7, #8]
 800951c:	f002 fc03 	bl	800bd26 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8009520:	68fb      	ldr	r3, [r7, #12]
 8009522:	685a      	ldr	r2, [r3, #4]
 8009524:	68fb      	ldr	r3, [r7, #12]
 8009526:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009528:	441a      	add	r2, r3
 800952a:	68fb      	ldr	r3, [r7, #12]
 800952c:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800952e:	68fb      	ldr	r3, [r7, #12]
 8009530:	685a      	ldr	r2, [r3, #4]
 8009532:	68fb      	ldr	r3, [r7, #12]
 8009534:	689b      	ldr	r3, [r3, #8]
 8009536:	429a      	cmp	r2, r3
 8009538:	d32b      	bcc.n	8009592 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800953a:	68fb      	ldr	r3, [r7, #12]
 800953c:	681a      	ldr	r2, [r3, #0]
 800953e:	68fb      	ldr	r3, [r7, #12]
 8009540:	605a      	str	r2, [r3, #4]
 8009542:	e026      	b.n	8009592 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	68d8      	ldr	r0, [r3, #12]
 8009548:	68fb      	ldr	r3, [r7, #12]
 800954a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800954c:	461a      	mov	r2, r3
 800954e:	68b9      	ldr	r1, [r7, #8]
 8009550:	f002 fbe9 	bl	800bd26 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	68da      	ldr	r2, [r3, #12]
 8009558:	68fb      	ldr	r3, [r7, #12]
 800955a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800955c:	425b      	negs	r3, r3
 800955e:	441a      	add	r2, r3
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	68da      	ldr	r2, [r3, #12]
 8009568:	68fb      	ldr	r3, [r7, #12]
 800956a:	681b      	ldr	r3, [r3, #0]
 800956c:	429a      	cmp	r2, r3
 800956e:	d207      	bcs.n	8009580 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8009570:	68fb      	ldr	r3, [r7, #12]
 8009572:	689a      	ldr	r2, [r3, #8]
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009578:	425b      	negs	r3, r3
 800957a:	441a      	add	r2, r3
 800957c:	68fb      	ldr	r3, [r7, #12]
 800957e:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 8009580:	687b      	ldr	r3, [r7, #4]
 8009582:	2b02      	cmp	r3, #2
 8009584:	d105      	bne.n	8009592 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8009586:	693b      	ldr	r3, [r7, #16]
 8009588:	2b00      	cmp	r3, #0
 800958a:	d002      	beq.n	8009592 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800958c:	693b      	ldr	r3, [r7, #16]
 800958e:	3b01      	subs	r3, #1
 8009590:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8009592:	693b      	ldr	r3, [r7, #16]
 8009594:	1c5a      	adds	r2, r3, #1
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800959a:	697b      	ldr	r3, [r7, #20]
}
 800959c:	4618      	mov	r0, r3
 800959e:	3718      	adds	r7, #24
 80095a0:	46bd      	mov	sp, r7
 80095a2:	bd80      	pop	{r7, pc}

080095a4 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80095a4:	b580      	push	{r7, lr}
 80095a6:	b082      	sub	sp, #8
 80095a8:	af00      	add	r7, sp, #0
 80095aa:	6078      	str	r0, [r7, #4]
 80095ac:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80095ae:	687b      	ldr	r3, [r7, #4]
 80095b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095b2:	2b00      	cmp	r3, #0
 80095b4:	d018      	beq.n	80095e8 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	68da      	ldr	r2, [r3, #12]
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095be:	441a      	add	r2, r3
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80095c4:	687b      	ldr	r3, [r7, #4]
 80095c6:	68da      	ldr	r2, [r3, #12]
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	689b      	ldr	r3, [r3, #8]
 80095cc:	429a      	cmp	r2, r3
 80095ce:	d303      	bcc.n	80095d8 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	681a      	ldr	r2, [r3, #0]
 80095d4:	687b      	ldr	r3, [r7, #4]
 80095d6:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	68d9      	ldr	r1, [r3, #12]
 80095dc:	687b      	ldr	r3, [r7, #4]
 80095de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80095e0:	461a      	mov	r2, r3
 80095e2:	6838      	ldr	r0, [r7, #0]
 80095e4:	f002 fb9f 	bl	800bd26 <memcpy>
	}
}
 80095e8:	bf00      	nop
 80095ea:	3708      	adds	r7, #8
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 80095f0:	b580      	push	{r7, lr}
 80095f2:	b084      	sub	sp, #16
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 80095f8:	f001 fc7c 	bl	800aef4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009602:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8009604:	e011      	b.n	800962a <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8009606:	687b      	ldr	r3, [r7, #4]
 8009608:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800960a:	2b00      	cmp	r3, #0
 800960c:	d012      	beq.n	8009634 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800960e:	687b      	ldr	r3, [r7, #4]
 8009610:	3324      	adds	r3, #36	; 0x24
 8009612:	4618      	mov	r0, r3
 8009614:	f000 fd50 	bl	800a0b8 <xTaskRemoveFromEventList>
 8009618:	4603      	mov	r3, r0
 800961a:	2b00      	cmp	r3, #0
 800961c:	d001      	beq.n	8009622 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800961e:	f000 fe27 	bl	800a270 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8009622:	7bfb      	ldrb	r3, [r7, #15]
 8009624:	3b01      	subs	r3, #1
 8009626:	b2db      	uxtb	r3, r3
 8009628:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800962a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800962e:	2b00      	cmp	r3, #0
 8009630:	dce9      	bgt.n	8009606 <prvUnlockQueue+0x16>
 8009632:	e000      	b.n	8009636 <prvUnlockQueue+0x46>
					break;
 8009634:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	22ff      	movs	r2, #255	; 0xff
 800963a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800963e:	f001 fc89 	bl	800af54 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8009642:	f001 fc57 	bl	800aef4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 8009646:	687b      	ldr	r3, [r7, #4]
 8009648:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800964c:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800964e:	e011      	b.n	8009674 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	691b      	ldr	r3, [r3, #16]
 8009654:	2b00      	cmp	r3, #0
 8009656:	d012      	beq.n	800967e <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8009658:	687b      	ldr	r3, [r7, #4]
 800965a:	3310      	adds	r3, #16
 800965c:	4618      	mov	r0, r3
 800965e:	f000 fd2b 	bl	800a0b8 <xTaskRemoveFromEventList>
 8009662:	4603      	mov	r3, r0
 8009664:	2b00      	cmp	r3, #0
 8009666:	d001      	beq.n	800966c <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 8009668:	f000 fe02 	bl	800a270 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800966c:	7bbb      	ldrb	r3, [r7, #14]
 800966e:	3b01      	subs	r3, #1
 8009670:	b2db      	uxtb	r3, r3
 8009672:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 8009674:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8009678:	2b00      	cmp	r3, #0
 800967a:	dce9      	bgt.n	8009650 <prvUnlockQueue+0x60>
 800967c:	e000      	b.n	8009680 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800967e:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	22ff      	movs	r2, #255	; 0xff
 8009684:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 8009688:	f001 fc64 	bl	800af54 <vPortExitCritical>
}
 800968c:	bf00      	nop
 800968e:	3710      	adds	r7, #16
 8009690:	46bd      	mov	sp, r7
 8009692:	bd80      	pop	{r7, pc}

08009694 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 8009694:	b580      	push	{r7, lr}
 8009696:	b084      	sub	sp, #16
 8009698:	af00      	add	r7, sp, #0
 800969a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800969c:	f001 fc2a 	bl	800aef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80096a4:	2b00      	cmp	r3, #0
 80096a6:	d102      	bne.n	80096ae <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80096a8:	2301      	movs	r3, #1
 80096aa:	60fb      	str	r3, [r7, #12]
 80096ac:	e001      	b.n	80096b2 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80096ae:	2300      	movs	r3, #0
 80096b0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096b2:	f001 fc4f 	bl	800af54 <vPortExitCritical>

	return xReturn;
 80096b6:	68fb      	ldr	r3, [r7, #12]
}
 80096b8:	4618      	mov	r0, r3
 80096ba:	3710      	adds	r7, #16
 80096bc:	46bd      	mov	sp, r7
 80096be:	bd80      	pop	{r7, pc}

080096c0 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80096c0:	b580      	push	{r7, lr}
 80096c2:	b084      	sub	sp, #16
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80096c8:	f001 fc14 	bl	800aef4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80096d0:	687b      	ldr	r3, [r7, #4]
 80096d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80096d4:	429a      	cmp	r2, r3
 80096d6:	d102      	bne.n	80096de <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80096d8:	2301      	movs	r3, #1
 80096da:	60fb      	str	r3, [r7, #12]
 80096dc:	e001      	b.n	80096e2 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 80096de:	2300      	movs	r3, #0
 80096e0:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80096e2:	f001 fc37 	bl	800af54 <vPortExitCritical>

	return xReturn;
 80096e6:	68fb      	ldr	r3, [r7, #12]
}
 80096e8:	4618      	mov	r0, r3
 80096ea:	3710      	adds	r7, #16
 80096ec:	46bd      	mov	sp, r7
 80096ee:	bd80      	pop	{r7, pc}

080096f0 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 80096f0:	b480      	push	{r7}
 80096f2:	b085      	sub	sp, #20
 80096f4:	af00      	add	r7, sp, #0
 80096f6:	6078      	str	r0, [r7, #4]
 80096f8:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80096fa:	2300      	movs	r3, #0
 80096fc:	60fb      	str	r3, [r7, #12]
 80096fe:	e014      	b.n	800972a <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8009700:	4a0f      	ldr	r2, [pc, #60]	; (8009740 <vQueueAddToRegistry+0x50>)
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8009708:	2b00      	cmp	r3, #0
 800970a:	d10b      	bne.n	8009724 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800970c:	490c      	ldr	r1, [pc, #48]	; (8009740 <vQueueAddToRegistry+0x50>)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	683a      	ldr	r2, [r7, #0]
 8009712:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 8009716:	4a0a      	ldr	r2, [pc, #40]	; (8009740 <vQueueAddToRegistry+0x50>)
 8009718:	68fb      	ldr	r3, [r7, #12]
 800971a:	00db      	lsls	r3, r3, #3
 800971c:	4413      	add	r3, r2
 800971e:	687a      	ldr	r2, [r7, #4]
 8009720:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 8009722:	e006      	b.n	8009732 <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8009724:	68fb      	ldr	r3, [r7, #12]
 8009726:	3301      	adds	r3, #1
 8009728:	60fb      	str	r3, [r7, #12]
 800972a:	68fb      	ldr	r3, [r7, #12]
 800972c:	2b07      	cmp	r3, #7
 800972e:	d9e7      	bls.n	8009700 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8009730:	bf00      	nop
 8009732:	bf00      	nop
 8009734:	3714      	adds	r7, #20
 8009736:	46bd      	mov	sp, r7
 8009738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800973c:	4770      	bx	lr
 800973e:	bf00      	nop
 8009740:	20000d80 	.word	0x20000d80

08009744 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8009744:	b580      	push	{r7, lr}
 8009746:	b086      	sub	sp, #24
 8009748:	af00      	add	r7, sp, #0
 800974a:	60f8      	str	r0, [r7, #12]
 800974c:	60b9      	str	r1, [r7, #8]
 800974e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 8009750:	68fb      	ldr	r3, [r7, #12]
 8009752:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 8009754:	f001 fbce 	bl	800aef4 <vPortEnterCritical>
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800975e:	b25b      	sxtb	r3, r3
 8009760:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009764:	d103      	bne.n	800976e <vQueueWaitForMessageRestricted+0x2a>
 8009766:	697b      	ldr	r3, [r7, #20]
 8009768:	2200      	movs	r2, #0
 800976a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800976e:	697b      	ldr	r3, [r7, #20]
 8009770:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8009774:	b25b      	sxtb	r3, r3
 8009776:	f1b3 3fff 	cmp.w	r3, #4294967295
 800977a:	d103      	bne.n	8009784 <vQueueWaitForMessageRestricted+0x40>
 800977c:	697b      	ldr	r3, [r7, #20]
 800977e:	2200      	movs	r2, #0
 8009780:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8009784:	f001 fbe6 	bl	800af54 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8009788:	697b      	ldr	r3, [r7, #20]
 800978a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800978c:	2b00      	cmp	r3, #0
 800978e:	d106      	bne.n	800979e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 8009790:	697b      	ldr	r3, [r7, #20]
 8009792:	3324      	adds	r3, #36	; 0x24
 8009794:	687a      	ldr	r2, [r7, #4]
 8009796:	68b9      	ldr	r1, [r7, #8]
 8009798:	4618      	mov	r0, r3
 800979a:	f000 fc61 	bl	800a060 <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800979e:	6978      	ldr	r0, [r7, #20]
 80097a0:	f7ff ff26 	bl	80095f0 <prvUnlockQueue>
	}
 80097a4:	bf00      	nop
 80097a6:	3718      	adds	r7, #24
 80097a8:	46bd      	mov	sp, r7
 80097aa:	bd80      	pop	{r7, pc}

080097ac <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 80097ac:	b580      	push	{r7, lr}
 80097ae:	b08e      	sub	sp, #56	; 0x38
 80097b0:	af04      	add	r7, sp, #16
 80097b2:	60f8      	str	r0, [r7, #12]
 80097b4:	60b9      	str	r1, [r7, #8]
 80097b6:	607a      	str	r2, [r7, #4]
 80097b8:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 80097ba:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10a      	bne.n	80097d6 <xTaskCreateStatic+0x2a>
	__asm volatile
 80097c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097c4:	f383 8811 	msr	BASEPRI, r3
 80097c8:	f3bf 8f6f 	isb	sy
 80097cc:	f3bf 8f4f 	dsb	sy
 80097d0:	623b      	str	r3, [r7, #32]
}
 80097d2:	bf00      	nop
 80097d4:	e7fe      	b.n	80097d4 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 80097d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80097d8:	2b00      	cmp	r3, #0
 80097da:	d10a      	bne.n	80097f2 <xTaskCreateStatic+0x46>
	__asm volatile
 80097dc:	f04f 0350 	mov.w	r3, #80	; 0x50
 80097e0:	f383 8811 	msr	BASEPRI, r3
 80097e4:	f3bf 8f6f 	isb	sy
 80097e8:	f3bf 8f4f 	dsb	sy
 80097ec:	61fb      	str	r3, [r7, #28]
}
 80097ee:	bf00      	nop
 80097f0:	e7fe      	b.n	80097f0 <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80097f2:	23bc      	movs	r3, #188	; 0xbc
 80097f4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80097f6:	693b      	ldr	r3, [r7, #16]
 80097f8:	2bbc      	cmp	r3, #188	; 0xbc
 80097fa:	d00a      	beq.n	8009812 <xTaskCreateStatic+0x66>
	__asm volatile
 80097fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009800:	f383 8811 	msr	BASEPRI, r3
 8009804:	f3bf 8f6f 	isb	sy
 8009808:	f3bf 8f4f 	dsb	sy
 800980c:	61bb      	str	r3, [r7, #24]
}
 800980e:	bf00      	nop
 8009810:	e7fe      	b.n	8009810 <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 8009812:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8009814:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009816:	2b00      	cmp	r3, #0
 8009818:	d01e      	beq.n	8009858 <xTaskCreateStatic+0xac>
 800981a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800981c:	2b00      	cmp	r3, #0
 800981e:	d01b      	beq.n	8009858 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 8009820:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009822:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 8009824:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009826:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8009828:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800982a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800982c:	2202      	movs	r2, #2
 800982e:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 8009832:	2300      	movs	r3, #0
 8009834:	9303      	str	r3, [sp, #12]
 8009836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009838:	9302      	str	r3, [sp, #8]
 800983a:	f107 0314 	add.w	r3, r7, #20
 800983e:	9301      	str	r3, [sp, #4]
 8009840:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009842:	9300      	str	r3, [sp, #0]
 8009844:	683b      	ldr	r3, [r7, #0]
 8009846:	687a      	ldr	r2, [r7, #4]
 8009848:	68b9      	ldr	r1, [r7, #8]
 800984a:	68f8      	ldr	r0, [r7, #12]
 800984c:	f000 f850 	bl	80098f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8009850:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8009852:	f000 f8f3 	bl	8009a3c <prvAddNewTaskToReadyList>
 8009856:	e001      	b.n	800985c <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 8009858:	2300      	movs	r3, #0
 800985a:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800985c:	697b      	ldr	r3, [r7, #20]
	}
 800985e:	4618      	mov	r0, r3
 8009860:	3728      	adds	r7, #40	; 0x28
 8009862:	46bd      	mov	sp, r7
 8009864:	bd80      	pop	{r7, pc}

08009866 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 8009866:	b580      	push	{r7, lr}
 8009868:	b08c      	sub	sp, #48	; 0x30
 800986a:	af04      	add	r7, sp, #16
 800986c:	60f8      	str	r0, [r7, #12]
 800986e:	60b9      	str	r1, [r7, #8]
 8009870:	603b      	str	r3, [r7, #0]
 8009872:	4613      	mov	r3, r2
 8009874:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 8009876:	88fb      	ldrh	r3, [r7, #6]
 8009878:	009b      	lsls	r3, r3, #2
 800987a:	4618      	mov	r0, r3
 800987c:	f001 fc5c 	bl	800b138 <pvPortMalloc>
 8009880:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8009882:	697b      	ldr	r3, [r7, #20]
 8009884:	2b00      	cmp	r3, #0
 8009886:	d00e      	beq.n	80098a6 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8009888:	20bc      	movs	r0, #188	; 0xbc
 800988a:	f001 fc55 	bl	800b138 <pvPortMalloc>
 800988e:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8009890:	69fb      	ldr	r3, [r7, #28]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d003      	beq.n	800989e <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8009896:	69fb      	ldr	r3, [r7, #28]
 8009898:	697a      	ldr	r2, [r7, #20]
 800989a:	631a      	str	r2, [r3, #48]	; 0x30
 800989c:	e005      	b.n	80098aa <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800989e:	6978      	ldr	r0, [r7, #20]
 80098a0:	f001 fd16 	bl	800b2d0 <vPortFree>
 80098a4:	e001      	b.n	80098aa <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 80098a6:	2300      	movs	r3, #0
 80098a8:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 80098aa:	69fb      	ldr	r3, [r7, #28]
 80098ac:	2b00      	cmp	r3, #0
 80098ae:	d017      	beq.n	80098e0 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 80098b0:	69fb      	ldr	r3, [r7, #28]
 80098b2:	2200      	movs	r2, #0
 80098b4:	f883 20b9 	strb.w	r2, [r3, #185]	; 0xb9
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 80098b8:	88fa      	ldrh	r2, [r7, #6]
 80098ba:	2300      	movs	r3, #0
 80098bc:	9303      	str	r3, [sp, #12]
 80098be:	69fb      	ldr	r3, [r7, #28]
 80098c0:	9302      	str	r3, [sp, #8]
 80098c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098c4:	9301      	str	r3, [sp, #4]
 80098c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098c8:	9300      	str	r3, [sp, #0]
 80098ca:	683b      	ldr	r3, [r7, #0]
 80098cc:	68b9      	ldr	r1, [r7, #8]
 80098ce:	68f8      	ldr	r0, [r7, #12]
 80098d0:	f000 f80e 	bl	80098f0 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80098d4:	69f8      	ldr	r0, [r7, #28]
 80098d6:	f000 f8b1 	bl	8009a3c <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 80098da:	2301      	movs	r3, #1
 80098dc:	61bb      	str	r3, [r7, #24]
 80098de:	e002      	b.n	80098e6 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 80098e0:	f04f 33ff 	mov.w	r3, #4294967295
 80098e4:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 80098e6:	69bb      	ldr	r3, [r7, #24]
	}
 80098e8:	4618      	mov	r0, r3
 80098ea:	3720      	adds	r7, #32
 80098ec:	46bd      	mov	sp, r7
 80098ee:	bd80      	pop	{r7, pc}

080098f0 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80098f0:	b580      	push	{r7, lr}
 80098f2:	b088      	sub	sp, #32
 80098f4:	af00      	add	r7, sp, #0
 80098f6:	60f8      	str	r0, [r7, #12]
 80098f8:	60b9      	str	r1, [r7, #8]
 80098fa:	607a      	str	r2, [r7, #4]
 80098fc:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 80098fe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009900:	6b18      	ldr	r0, [r3, #48]	; 0x30
 8009902:	687b      	ldr	r3, [r7, #4]
 8009904:	009b      	lsls	r3, r3, #2
 8009906:	461a      	mov	r2, r3
 8009908:	21a5      	movs	r1, #165	; 0xa5
 800990a:	f002 fa1a 	bl	800bd42 <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800990e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009910:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8009918:	3b01      	subs	r3, #1
 800991a:	009b      	lsls	r3, r3, #2
 800991c:	4413      	add	r3, r2
 800991e:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 8009920:	69bb      	ldr	r3, [r7, #24]
 8009922:	f023 0307 	bic.w	r3, r3, #7
 8009926:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 8009928:	69bb      	ldr	r3, [r7, #24]
 800992a:	f003 0307 	and.w	r3, r3, #7
 800992e:	2b00      	cmp	r3, #0
 8009930:	d00a      	beq.n	8009948 <prvInitialiseNewTask+0x58>
	__asm volatile
 8009932:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009936:	f383 8811 	msr	BASEPRI, r3
 800993a:	f3bf 8f6f 	isb	sy
 800993e:	f3bf 8f4f 	dsb	sy
 8009942:	617b      	str	r3, [r7, #20]
}
 8009944:	bf00      	nop
 8009946:	e7fe      	b.n	8009946 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 8009948:	68bb      	ldr	r3, [r7, #8]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d01f      	beq.n	800998e <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800994e:	2300      	movs	r3, #0
 8009950:	61fb      	str	r3, [r7, #28]
 8009952:	e012      	b.n	800997a <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 8009954:	68ba      	ldr	r2, [r7, #8]
 8009956:	69fb      	ldr	r3, [r7, #28]
 8009958:	4413      	add	r3, r2
 800995a:	7819      	ldrb	r1, [r3, #0]
 800995c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800995e:	69fb      	ldr	r3, [r7, #28]
 8009960:	4413      	add	r3, r2
 8009962:	3334      	adds	r3, #52	; 0x34
 8009964:	460a      	mov	r2, r1
 8009966:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8009968:	68ba      	ldr	r2, [r7, #8]
 800996a:	69fb      	ldr	r3, [r7, #28]
 800996c:	4413      	add	r3, r2
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d006      	beq.n	8009982 <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8009974:	69fb      	ldr	r3, [r7, #28]
 8009976:	3301      	adds	r3, #1
 8009978:	61fb      	str	r3, [r7, #28]
 800997a:	69fb      	ldr	r3, [r7, #28]
 800997c:	2b0f      	cmp	r3, #15
 800997e:	d9e9      	bls.n	8009954 <prvInitialiseNewTask+0x64>
 8009980:	e000      	b.n	8009984 <prvInitialiseNewTask+0x94>
			{
				break;
 8009982:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8009984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009986:	2200      	movs	r2, #0
 8009988:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800998c:	e003      	b.n	8009996 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800998e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009990:	2200      	movs	r2, #0
 8009992:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8009996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009998:	2b37      	cmp	r3, #55	; 0x37
 800999a:	d901      	bls.n	80099a0 <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800999c:	2337      	movs	r3, #55	; 0x37
 800999e:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 80099a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a2:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099a4:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 80099a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099a8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80099aa:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 80099ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ae:	2200      	movs	r2, #0
 80099b0:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 80099b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099b4:	3304      	adds	r3, #4
 80099b6:	4618      	mov	r0, r3
 80099b8:	f7ff f978 	bl	8008cac <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 80099bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099be:	3318      	adds	r3, #24
 80099c0:	4618      	mov	r0, r3
 80099c2:	f7ff f973 	bl	8008cac <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 80099c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099c8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099ca:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80099cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80099ce:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80099d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d4:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 80099d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80099da:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 80099dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099de:	2200      	movs	r2, #0
 80099e0:	f8c3 20b4 	str.w	r2, [r3, #180]	; 0xb4
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 80099e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099e6:	2200      	movs	r2, #0
 80099e8:	f883 20b8 	strb.w	r2, [r3, #184]	; 0xb8
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 80099ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099ee:	3354      	adds	r3, #84	; 0x54
 80099f0:	2260      	movs	r2, #96	; 0x60
 80099f2:	2100      	movs	r1, #0
 80099f4:	4618      	mov	r0, r3
 80099f6:	f002 f9a4 	bl	800bd42 <memset>
 80099fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80099fc:	4a0c      	ldr	r2, [pc, #48]	; (8009a30 <prvInitialiseNewTask+0x140>)
 80099fe:	659a      	str	r2, [r3, #88]	; 0x58
 8009a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a02:	4a0c      	ldr	r2, [pc, #48]	; (8009a34 <prvInitialiseNewTask+0x144>)
 8009a04:	65da      	str	r2, [r3, #92]	; 0x5c
 8009a06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a08:	4a0b      	ldr	r2, [pc, #44]	; (8009a38 <prvInitialiseNewTask+0x148>)
 8009a0a:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8009a0c:	683a      	ldr	r2, [r7, #0]
 8009a0e:	68f9      	ldr	r1, [r7, #12]
 8009a10:	69b8      	ldr	r0, [r7, #24]
 8009a12:	f001 f941 	bl	800ac98 <pxPortInitialiseStack>
 8009a16:	4602      	mov	r2, r0
 8009a18:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009a1a:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8009a1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a1e:	2b00      	cmp	r3, #0
 8009a20:	d002      	beq.n	8009a28 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 8009a22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a24:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009a26:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009a28:	bf00      	nop
 8009a2a:	3720      	adds	r7, #32
 8009a2c:	46bd      	mov	sp, r7
 8009a2e:	bd80      	pop	{r7, pc}
 8009a30:	0800f684 	.word	0x0800f684
 8009a34:	0800f6a4 	.word	0x0800f6a4
 8009a38:	0800f664 	.word	0x0800f664

08009a3c <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 8009a3c:	b580      	push	{r7, lr}
 8009a3e:	b082      	sub	sp, #8
 8009a40:	af00      	add	r7, sp, #0
 8009a42:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 8009a44:	f001 fa56 	bl	800aef4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 8009a48:	4b2d      	ldr	r3, [pc, #180]	; (8009b00 <prvAddNewTaskToReadyList+0xc4>)
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	3301      	adds	r3, #1
 8009a4e:	4a2c      	ldr	r2, [pc, #176]	; (8009b00 <prvAddNewTaskToReadyList+0xc4>)
 8009a50:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 8009a52:	4b2c      	ldr	r3, [pc, #176]	; (8009b04 <prvAddNewTaskToReadyList+0xc8>)
 8009a54:	681b      	ldr	r3, [r3, #0]
 8009a56:	2b00      	cmp	r3, #0
 8009a58:	d109      	bne.n	8009a6e <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8009a5a:	4a2a      	ldr	r2, [pc, #168]	; (8009b04 <prvAddNewTaskToReadyList+0xc8>)
 8009a5c:	687b      	ldr	r3, [r7, #4]
 8009a5e:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8009a60:	4b27      	ldr	r3, [pc, #156]	; (8009b00 <prvAddNewTaskToReadyList+0xc4>)
 8009a62:	681b      	ldr	r3, [r3, #0]
 8009a64:	2b01      	cmp	r3, #1
 8009a66:	d110      	bne.n	8009a8a <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8009a68:	f000 fc26 	bl	800a2b8 <prvInitialiseTaskLists>
 8009a6c:	e00d      	b.n	8009a8a <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8009a6e:	4b26      	ldr	r3, [pc, #152]	; (8009b08 <prvAddNewTaskToReadyList+0xcc>)
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	d109      	bne.n	8009a8a <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8009a76:	4b23      	ldr	r3, [pc, #140]	; (8009b04 <prvAddNewTaskToReadyList+0xc8>)
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009a7c:	687b      	ldr	r3, [r7, #4]
 8009a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009a80:	429a      	cmp	r2, r3
 8009a82:	d802      	bhi.n	8009a8a <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8009a84:	4a1f      	ldr	r2, [pc, #124]	; (8009b04 <prvAddNewTaskToReadyList+0xc8>)
 8009a86:	687b      	ldr	r3, [r7, #4]
 8009a88:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8009a8a:	4b20      	ldr	r3, [pc, #128]	; (8009b0c <prvAddNewTaskToReadyList+0xd0>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	3301      	adds	r3, #1
 8009a90:	4a1e      	ldr	r2, [pc, #120]	; (8009b0c <prvAddNewTaskToReadyList+0xd0>)
 8009a92:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8009a94:	4b1d      	ldr	r3, [pc, #116]	; (8009b0c <prvAddNewTaskToReadyList+0xd0>)
 8009a96:	681a      	ldr	r2, [r3, #0]
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009aa0:	4b1b      	ldr	r3, [pc, #108]	; (8009b10 <prvAddNewTaskToReadyList+0xd4>)
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	429a      	cmp	r2, r3
 8009aa6:	d903      	bls.n	8009ab0 <prvAddNewTaskToReadyList+0x74>
 8009aa8:	687b      	ldr	r3, [r7, #4]
 8009aaa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009aac:	4a18      	ldr	r2, [pc, #96]	; (8009b10 <prvAddNewTaskToReadyList+0xd4>)
 8009aae:	6013      	str	r3, [r2, #0]
 8009ab0:	687b      	ldr	r3, [r7, #4]
 8009ab2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ab4:	4613      	mov	r3, r2
 8009ab6:	009b      	lsls	r3, r3, #2
 8009ab8:	4413      	add	r3, r2
 8009aba:	009b      	lsls	r3, r3, #2
 8009abc:	4a15      	ldr	r2, [pc, #84]	; (8009b14 <prvAddNewTaskToReadyList+0xd8>)
 8009abe:	441a      	add	r2, r3
 8009ac0:	687b      	ldr	r3, [r7, #4]
 8009ac2:	3304      	adds	r3, #4
 8009ac4:	4619      	mov	r1, r3
 8009ac6:	4610      	mov	r0, r2
 8009ac8:	f7ff f8fd 	bl	8008cc6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8009acc:	f001 fa42 	bl	800af54 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8009ad0:	4b0d      	ldr	r3, [pc, #52]	; (8009b08 <prvAddNewTaskToReadyList+0xcc>)
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d00e      	beq.n	8009af6 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8009ad8:	4b0a      	ldr	r3, [pc, #40]	; (8009b04 <prvAddNewTaskToReadyList+0xc8>)
 8009ada:	681b      	ldr	r3, [r3, #0]
 8009adc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ade:	687b      	ldr	r3, [r7, #4]
 8009ae0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d207      	bcs.n	8009af6 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8009ae6:	4b0c      	ldr	r3, [pc, #48]	; (8009b18 <prvAddNewTaskToReadyList+0xdc>)
 8009ae8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009aec:	601a      	str	r2, [r3, #0]
 8009aee:	f3bf 8f4f 	dsb	sy
 8009af2:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8009af6:	bf00      	nop
 8009af8:	3708      	adds	r7, #8
 8009afa:	46bd      	mov	sp, r7
 8009afc:	bd80      	pop	{r7, pc}
 8009afe:	bf00      	nop
 8009b00:	20001294 	.word	0x20001294
 8009b04:	20000dc0 	.word	0x20000dc0
 8009b08:	200012a0 	.word	0x200012a0
 8009b0c:	200012b0 	.word	0x200012b0
 8009b10:	2000129c 	.word	0x2000129c
 8009b14:	20000dc4 	.word	0x20000dc4
 8009b18:	e000ed04 	.word	0xe000ed04

08009b1c <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8009b1c:	b580      	push	{r7, lr}
 8009b1e:	b084      	sub	sp, #16
 8009b20:	af00      	add	r7, sp, #0
 8009b22:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8009b24:	2300      	movs	r3, #0
 8009b26:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8009b28:	687b      	ldr	r3, [r7, #4]
 8009b2a:	2b00      	cmp	r3, #0
 8009b2c:	d017      	beq.n	8009b5e <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8009b2e:	4b13      	ldr	r3, [pc, #76]	; (8009b7c <vTaskDelay+0x60>)
 8009b30:	681b      	ldr	r3, [r3, #0]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	d00a      	beq.n	8009b4c <vTaskDelay+0x30>
	__asm volatile
 8009b36:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009b3a:	f383 8811 	msr	BASEPRI, r3
 8009b3e:	f3bf 8f6f 	isb	sy
 8009b42:	f3bf 8f4f 	dsb	sy
 8009b46:	60bb      	str	r3, [r7, #8]
}
 8009b48:	bf00      	nop
 8009b4a:	e7fe      	b.n	8009b4a <vTaskDelay+0x2e>
			vTaskSuspendAll();
 8009b4c:	f000 f88a 	bl	8009c64 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8009b50:	2100      	movs	r1, #0
 8009b52:	6878      	ldr	r0, [r7, #4]
 8009b54:	f000 fcfe 	bl	800a554 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8009b58:	f000 f892 	bl	8009c80 <xTaskResumeAll>
 8009b5c:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8009b5e:	68fb      	ldr	r3, [r7, #12]
 8009b60:	2b00      	cmp	r3, #0
 8009b62:	d107      	bne.n	8009b74 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 8009b64:	4b06      	ldr	r3, [pc, #24]	; (8009b80 <vTaskDelay+0x64>)
 8009b66:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009b6a:	601a      	str	r2, [r3, #0]
 8009b6c:	f3bf 8f4f 	dsb	sy
 8009b70:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8009b74:	bf00      	nop
 8009b76:	3710      	adds	r7, #16
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	bd80      	pop	{r7, pc}
 8009b7c:	200012bc 	.word	0x200012bc
 8009b80:	e000ed04 	.word	0xe000ed04

08009b84 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8009b84:	b580      	push	{r7, lr}
 8009b86:	b08a      	sub	sp, #40	; 0x28
 8009b88:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8009b92:	463a      	mov	r2, r7
 8009b94:	1d39      	adds	r1, r7, #4
 8009b96:	f107 0308 	add.w	r3, r7, #8
 8009b9a:	4618      	mov	r0, r3
 8009b9c:	f7ff f832 	bl	8008c04 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8009ba0:	6839      	ldr	r1, [r7, #0]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	68ba      	ldr	r2, [r7, #8]
 8009ba6:	9202      	str	r2, [sp, #8]
 8009ba8:	9301      	str	r3, [sp, #4]
 8009baa:	2300      	movs	r3, #0
 8009bac:	9300      	str	r3, [sp, #0]
 8009bae:	2300      	movs	r3, #0
 8009bb0:	460a      	mov	r2, r1
 8009bb2:	4924      	ldr	r1, [pc, #144]	; (8009c44 <vTaskStartScheduler+0xc0>)
 8009bb4:	4824      	ldr	r0, [pc, #144]	; (8009c48 <vTaskStartScheduler+0xc4>)
 8009bb6:	f7ff fdf9 	bl	80097ac <xTaskCreateStatic>
 8009bba:	4603      	mov	r3, r0
 8009bbc:	4a23      	ldr	r2, [pc, #140]	; (8009c4c <vTaskStartScheduler+0xc8>)
 8009bbe:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8009bc0:	4b22      	ldr	r3, [pc, #136]	; (8009c4c <vTaskStartScheduler+0xc8>)
 8009bc2:	681b      	ldr	r3, [r3, #0]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d002      	beq.n	8009bce <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8009bc8:	2301      	movs	r3, #1
 8009bca:	617b      	str	r3, [r7, #20]
 8009bcc:	e001      	b.n	8009bd2 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8009bce:	2300      	movs	r3, #0
 8009bd0:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8009bd2:	697b      	ldr	r3, [r7, #20]
 8009bd4:	2b01      	cmp	r3, #1
 8009bd6:	d102      	bne.n	8009bde <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8009bd8:	f000 fd10 	bl	800a5fc <xTimerCreateTimerTask>
 8009bdc:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8009bde:	697b      	ldr	r3, [r7, #20]
 8009be0:	2b01      	cmp	r3, #1
 8009be2:	d11b      	bne.n	8009c1c <vTaskStartScheduler+0x98>
	__asm volatile
 8009be4:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009be8:	f383 8811 	msr	BASEPRI, r3
 8009bec:	f3bf 8f6f 	isb	sy
 8009bf0:	f3bf 8f4f 	dsb	sy
 8009bf4:	613b      	str	r3, [r7, #16]
}
 8009bf6:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009bf8:	4b15      	ldr	r3, [pc, #84]	; (8009c50 <vTaskStartScheduler+0xcc>)
 8009bfa:	681b      	ldr	r3, [r3, #0]
 8009bfc:	3354      	adds	r3, #84	; 0x54
 8009bfe:	4a15      	ldr	r2, [pc, #84]	; (8009c54 <vTaskStartScheduler+0xd0>)
 8009c00:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8009c02:	4b15      	ldr	r3, [pc, #84]	; (8009c58 <vTaskStartScheduler+0xd4>)
 8009c04:	f04f 32ff 	mov.w	r2, #4294967295
 8009c08:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8009c0a:	4b14      	ldr	r3, [pc, #80]	; (8009c5c <vTaskStartScheduler+0xd8>)
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8009c10:	4b13      	ldr	r3, [pc, #76]	; (8009c60 <vTaskStartScheduler+0xdc>)
 8009c12:	2200      	movs	r2, #0
 8009c14:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8009c16:	f001 f8cb 	bl	800adb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8009c1a:	e00e      	b.n	8009c3a <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8009c1c:	697b      	ldr	r3, [r7, #20]
 8009c1e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009c22:	d10a      	bne.n	8009c3a <vTaskStartScheduler+0xb6>
	__asm volatile
 8009c24:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c28:	f383 8811 	msr	BASEPRI, r3
 8009c2c:	f3bf 8f6f 	isb	sy
 8009c30:	f3bf 8f4f 	dsb	sy
 8009c34:	60fb      	str	r3, [r7, #12]
}
 8009c36:	bf00      	nop
 8009c38:	e7fe      	b.n	8009c38 <vTaskStartScheduler+0xb4>
}
 8009c3a:	bf00      	nop
 8009c3c:	3718      	adds	r7, #24
 8009c3e:	46bd      	mov	sp, r7
 8009c40:	bd80      	pop	{r7, pc}
 8009c42:	bf00      	nop
 8009c44:	0800eaf8 	.word	0x0800eaf8
 8009c48:	0800a289 	.word	0x0800a289
 8009c4c:	200012b8 	.word	0x200012b8
 8009c50:	20000dc0 	.word	0x20000dc0
 8009c54:	20000034 	.word	0x20000034
 8009c58:	200012b4 	.word	0x200012b4
 8009c5c:	200012a0 	.word	0x200012a0
 8009c60:	20001298 	.word	0x20001298

08009c64 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8009c64:	b480      	push	{r7}
 8009c66:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8009c68:	4b04      	ldr	r3, [pc, #16]	; (8009c7c <vTaskSuspendAll+0x18>)
 8009c6a:	681b      	ldr	r3, [r3, #0]
 8009c6c:	3301      	adds	r3, #1
 8009c6e:	4a03      	ldr	r2, [pc, #12]	; (8009c7c <vTaskSuspendAll+0x18>)
 8009c70:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8009c72:	bf00      	nop
 8009c74:	46bd      	mov	sp, r7
 8009c76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009c7a:	4770      	bx	lr
 8009c7c:	200012bc 	.word	0x200012bc

08009c80 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8009c80:	b580      	push	{r7, lr}
 8009c82:	b084      	sub	sp, #16
 8009c84:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8009c86:	2300      	movs	r3, #0
 8009c88:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8009c8a:	2300      	movs	r3, #0
 8009c8c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8009c8e:	4b42      	ldr	r3, [pc, #264]	; (8009d98 <xTaskResumeAll+0x118>)
 8009c90:	681b      	ldr	r3, [r3, #0]
 8009c92:	2b00      	cmp	r3, #0
 8009c94:	d10a      	bne.n	8009cac <xTaskResumeAll+0x2c>
	__asm volatile
 8009c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009c9a:	f383 8811 	msr	BASEPRI, r3
 8009c9e:	f3bf 8f6f 	isb	sy
 8009ca2:	f3bf 8f4f 	dsb	sy
 8009ca6:	603b      	str	r3, [r7, #0]
}
 8009ca8:	bf00      	nop
 8009caa:	e7fe      	b.n	8009caa <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8009cac:	f001 f922 	bl	800aef4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8009cb0:	4b39      	ldr	r3, [pc, #228]	; (8009d98 <xTaskResumeAll+0x118>)
 8009cb2:	681b      	ldr	r3, [r3, #0]
 8009cb4:	3b01      	subs	r3, #1
 8009cb6:	4a38      	ldr	r2, [pc, #224]	; (8009d98 <xTaskResumeAll+0x118>)
 8009cb8:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009cba:	4b37      	ldr	r3, [pc, #220]	; (8009d98 <xTaskResumeAll+0x118>)
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	2b00      	cmp	r3, #0
 8009cc0:	d162      	bne.n	8009d88 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8009cc2:	4b36      	ldr	r3, [pc, #216]	; (8009d9c <xTaskResumeAll+0x11c>)
 8009cc4:	681b      	ldr	r3, [r3, #0]
 8009cc6:	2b00      	cmp	r3, #0
 8009cc8:	d05e      	beq.n	8009d88 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009cca:	e02f      	b.n	8009d2c <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009ccc:	4b34      	ldr	r3, [pc, #208]	; (8009da0 <xTaskResumeAll+0x120>)
 8009cce:	68db      	ldr	r3, [r3, #12]
 8009cd0:	68db      	ldr	r3, [r3, #12]
 8009cd2:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	3318      	adds	r3, #24
 8009cd8:	4618      	mov	r0, r3
 8009cda:	f7ff f851 	bl	8008d80 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	3304      	adds	r3, #4
 8009ce2:	4618      	mov	r0, r3
 8009ce4:	f7ff f84c 	bl	8008d80 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009cec:	4b2d      	ldr	r3, [pc, #180]	; (8009da4 <xTaskResumeAll+0x124>)
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	429a      	cmp	r2, r3
 8009cf2:	d903      	bls.n	8009cfc <xTaskResumeAll+0x7c>
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009cf8:	4a2a      	ldr	r2, [pc, #168]	; (8009da4 <xTaskResumeAll+0x124>)
 8009cfa:	6013      	str	r3, [r2, #0]
 8009cfc:	68fb      	ldr	r3, [r7, #12]
 8009cfe:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d00:	4613      	mov	r3, r2
 8009d02:	009b      	lsls	r3, r3, #2
 8009d04:	4413      	add	r3, r2
 8009d06:	009b      	lsls	r3, r3, #2
 8009d08:	4a27      	ldr	r2, [pc, #156]	; (8009da8 <xTaskResumeAll+0x128>)
 8009d0a:	441a      	add	r2, r3
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	3304      	adds	r3, #4
 8009d10:	4619      	mov	r1, r3
 8009d12:	4610      	mov	r0, r2
 8009d14:	f7fe ffd7 	bl	8008cc6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009d1c:	4b23      	ldr	r3, [pc, #140]	; (8009dac <xTaskResumeAll+0x12c>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009d22:	429a      	cmp	r2, r3
 8009d24:	d302      	bcc.n	8009d2c <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8009d26:	4b22      	ldr	r3, [pc, #136]	; (8009db0 <xTaskResumeAll+0x130>)
 8009d28:	2201      	movs	r2, #1
 8009d2a:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8009d2c:	4b1c      	ldr	r3, [pc, #112]	; (8009da0 <xTaskResumeAll+0x120>)
 8009d2e:	681b      	ldr	r3, [r3, #0]
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d1cb      	bne.n	8009ccc <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d001      	beq.n	8009d3e <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8009d3a:	f000 fb5f 	bl	800a3fc <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8009d3e:	4b1d      	ldr	r3, [pc, #116]	; (8009db4 <xTaskResumeAll+0x134>)
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8009d44:	687b      	ldr	r3, [r7, #4]
 8009d46:	2b00      	cmp	r3, #0
 8009d48:	d010      	beq.n	8009d6c <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8009d4a:	f000 f847 	bl	8009ddc <xTaskIncrementTick>
 8009d4e:	4603      	mov	r3, r0
 8009d50:	2b00      	cmp	r3, #0
 8009d52:	d002      	beq.n	8009d5a <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8009d54:	4b16      	ldr	r3, [pc, #88]	; (8009db0 <xTaskResumeAll+0x130>)
 8009d56:	2201      	movs	r2, #1
 8009d58:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8009d5a:	687b      	ldr	r3, [r7, #4]
 8009d5c:	3b01      	subs	r3, #1
 8009d5e:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8009d60:	687b      	ldr	r3, [r7, #4]
 8009d62:	2b00      	cmp	r3, #0
 8009d64:	d1f1      	bne.n	8009d4a <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8009d66:	4b13      	ldr	r3, [pc, #76]	; (8009db4 <xTaskResumeAll+0x134>)
 8009d68:	2200      	movs	r2, #0
 8009d6a:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8009d6c:	4b10      	ldr	r3, [pc, #64]	; (8009db0 <xTaskResumeAll+0x130>)
 8009d6e:	681b      	ldr	r3, [r3, #0]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d009      	beq.n	8009d88 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8009d74:	2301      	movs	r3, #1
 8009d76:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8009d78:	4b0f      	ldr	r3, [pc, #60]	; (8009db8 <xTaskResumeAll+0x138>)
 8009d7a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009d7e:	601a      	str	r2, [r3, #0]
 8009d80:	f3bf 8f4f 	dsb	sy
 8009d84:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8009d88:	f001 f8e4 	bl	800af54 <vPortExitCritical>

	return xAlreadyYielded;
 8009d8c:	68bb      	ldr	r3, [r7, #8]
}
 8009d8e:	4618      	mov	r0, r3
 8009d90:	3710      	adds	r7, #16
 8009d92:	46bd      	mov	sp, r7
 8009d94:	bd80      	pop	{r7, pc}
 8009d96:	bf00      	nop
 8009d98:	200012bc 	.word	0x200012bc
 8009d9c:	20001294 	.word	0x20001294
 8009da0:	20001254 	.word	0x20001254
 8009da4:	2000129c 	.word	0x2000129c
 8009da8:	20000dc4 	.word	0x20000dc4
 8009dac:	20000dc0 	.word	0x20000dc0
 8009db0:	200012a8 	.word	0x200012a8
 8009db4:	200012a4 	.word	0x200012a4
 8009db8:	e000ed04 	.word	0xe000ed04

08009dbc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8009dbc:	b480      	push	{r7}
 8009dbe:	b083      	sub	sp, #12
 8009dc0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8009dc2:	4b05      	ldr	r3, [pc, #20]	; (8009dd8 <xTaskGetTickCount+0x1c>)
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8009dc8:	687b      	ldr	r3, [r7, #4]
}
 8009dca:	4618      	mov	r0, r3
 8009dcc:	370c      	adds	r7, #12
 8009dce:	46bd      	mov	sp, r7
 8009dd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dd4:	4770      	bx	lr
 8009dd6:	bf00      	nop
 8009dd8:	20001298 	.word	0x20001298

08009ddc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8009ddc:	b580      	push	{r7, lr}
 8009dde:	b086      	sub	sp, #24
 8009de0:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8009de2:	2300      	movs	r3, #0
 8009de4:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8009de6:	4b4f      	ldr	r3, [pc, #316]	; (8009f24 <xTaskIncrementTick+0x148>)
 8009de8:	681b      	ldr	r3, [r3, #0]
 8009dea:	2b00      	cmp	r3, #0
 8009dec:	f040 808f 	bne.w	8009f0e <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8009df0:	4b4d      	ldr	r3, [pc, #308]	; (8009f28 <xTaskIncrementTick+0x14c>)
 8009df2:	681b      	ldr	r3, [r3, #0]
 8009df4:	3301      	adds	r3, #1
 8009df6:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8009df8:	4a4b      	ldr	r2, [pc, #300]	; (8009f28 <xTaskIncrementTick+0x14c>)
 8009dfa:	693b      	ldr	r3, [r7, #16]
 8009dfc:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8009dfe:	693b      	ldr	r3, [r7, #16]
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d120      	bne.n	8009e46 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8009e04:	4b49      	ldr	r3, [pc, #292]	; (8009f2c <xTaskIncrementTick+0x150>)
 8009e06:	681b      	ldr	r3, [r3, #0]
 8009e08:	681b      	ldr	r3, [r3, #0]
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d00a      	beq.n	8009e24 <xTaskIncrementTick+0x48>
	__asm volatile
 8009e0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009e12:	f383 8811 	msr	BASEPRI, r3
 8009e16:	f3bf 8f6f 	isb	sy
 8009e1a:	f3bf 8f4f 	dsb	sy
 8009e1e:	603b      	str	r3, [r7, #0]
}
 8009e20:	bf00      	nop
 8009e22:	e7fe      	b.n	8009e22 <xTaskIncrementTick+0x46>
 8009e24:	4b41      	ldr	r3, [pc, #260]	; (8009f2c <xTaskIncrementTick+0x150>)
 8009e26:	681b      	ldr	r3, [r3, #0]
 8009e28:	60fb      	str	r3, [r7, #12]
 8009e2a:	4b41      	ldr	r3, [pc, #260]	; (8009f30 <xTaskIncrementTick+0x154>)
 8009e2c:	681b      	ldr	r3, [r3, #0]
 8009e2e:	4a3f      	ldr	r2, [pc, #252]	; (8009f2c <xTaskIncrementTick+0x150>)
 8009e30:	6013      	str	r3, [r2, #0]
 8009e32:	4a3f      	ldr	r2, [pc, #252]	; (8009f30 <xTaskIncrementTick+0x154>)
 8009e34:	68fb      	ldr	r3, [r7, #12]
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	4b3e      	ldr	r3, [pc, #248]	; (8009f34 <xTaskIncrementTick+0x158>)
 8009e3a:	681b      	ldr	r3, [r3, #0]
 8009e3c:	3301      	adds	r3, #1
 8009e3e:	4a3d      	ldr	r2, [pc, #244]	; (8009f34 <xTaskIncrementTick+0x158>)
 8009e40:	6013      	str	r3, [r2, #0]
 8009e42:	f000 fadb 	bl	800a3fc <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8009e46:	4b3c      	ldr	r3, [pc, #240]	; (8009f38 <xTaskIncrementTick+0x15c>)
 8009e48:	681b      	ldr	r3, [r3, #0]
 8009e4a:	693a      	ldr	r2, [r7, #16]
 8009e4c:	429a      	cmp	r2, r3
 8009e4e:	d349      	bcc.n	8009ee4 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009e50:	4b36      	ldr	r3, [pc, #216]	; (8009f2c <xTaskIncrementTick+0x150>)
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	681b      	ldr	r3, [r3, #0]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	d104      	bne.n	8009e64 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8009e5a:	4b37      	ldr	r3, [pc, #220]	; (8009f38 <xTaskIncrementTick+0x15c>)
 8009e5c:	f04f 32ff 	mov.w	r2, #4294967295
 8009e60:	601a      	str	r2, [r3, #0]
					break;
 8009e62:	e03f      	b.n	8009ee4 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009e64:	4b31      	ldr	r3, [pc, #196]	; (8009f2c <xTaskIncrementTick+0x150>)
 8009e66:	681b      	ldr	r3, [r3, #0]
 8009e68:	68db      	ldr	r3, [r3, #12]
 8009e6a:	68db      	ldr	r3, [r3, #12]
 8009e6c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8009e6e:	68bb      	ldr	r3, [r7, #8]
 8009e70:	685b      	ldr	r3, [r3, #4]
 8009e72:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8009e74:	693a      	ldr	r2, [r7, #16]
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	429a      	cmp	r2, r3
 8009e7a:	d203      	bcs.n	8009e84 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8009e7c:	4a2e      	ldr	r2, [pc, #184]	; (8009f38 <xTaskIncrementTick+0x15c>)
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8009e82:	e02f      	b.n	8009ee4 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8009e84:	68bb      	ldr	r3, [r7, #8]
 8009e86:	3304      	adds	r3, #4
 8009e88:	4618      	mov	r0, r3
 8009e8a:	f7fe ff79 	bl	8008d80 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8009e8e:	68bb      	ldr	r3, [r7, #8]
 8009e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d004      	beq.n	8009ea0 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8009e96:	68bb      	ldr	r3, [r7, #8]
 8009e98:	3318      	adds	r3, #24
 8009e9a:	4618      	mov	r0, r3
 8009e9c:	f7fe ff70 	bl	8008d80 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8009ea0:	68bb      	ldr	r3, [r7, #8]
 8009ea2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ea4:	4b25      	ldr	r3, [pc, #148]	; (8009f3c <xTaskIncrementTick+0x160>)
 8009ea6:	681b      	ldr	r3, [r3, #0]
 8009ea8:	429a      	cmp	r2, r3
 8009eaa:	d903      	bls.n	8009eb4 <xTaskIncrementTick+0xd8>
 8009eac:	68bb      	ldr	r3, [r7, #8]
 8009eae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb0:	4a22      	ldr	r2, [pc, #136]	; (8009f3c <xTaskIncrementTick+0x160>)
 8009eb2:	6013      	str	r3, [r2, #0]
 8009eb4:	68bb      	ldr	r3, [r7, #8]
 8009eb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eb8:	4613      	mov	r3, r2
 8009eba:	009b      	lsls	r3, r3, #2
 8009ebc:	4413      	add	r3, r2
 8009ebe:	009b      	lsls	r3, r3, #2
 8009ec0:	4a1f      	ldr	r2, [pc, #124]	; (8009f40 <xTaskIncrementTick+0x164>)
 8009ec2:	441a      	add	r2, r3
 8009ec4:	68bb      	ldr	r3, [r7, #8]
 8009ec6:	3304      	adds	r3, #4
 8009ec8:	4619      	mov	r1, r3
 8009eca:	4610      	mov	r0, r2
 8009ecc:	f7fe fefb 	bl	8008cc6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8009ed0:	68bb      	ldr	r3, [r7, #8]
 8009ed2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009ed4:	4b1b      	ldr	r3, [pc, #108]	; (8009f44 <xTaskIncrementTick+0x168>)
 8009ed6:	681b      	ldr	r3, [r3, #0]
 8009ed8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eda:	429a      	cmp	r2, r3
 8009edc:	d3b8      	bcc.n	8009e50 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8009ede:	2301      	movs	r3, #1
 8009ee0:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8009ee2:	e7b5      	b.n	8009e50 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8009ee4:	4b17      	ldr	r3, [pc, #92]	; (8009f44 <xTaskIncrementTick+0x168>)
 8009ee6:	681b      	ldr	r3, [r3, #0]
 8009ee8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009eea:	4915      	ldr	r1, [pc, #84]	; (8009f40 <xTaskIncrementTick+0x164>)
 8009eec:	4613      	mov	r3, r2
 8009eee:	009b      	lsls	r3, r3, #2
 8009ef0:	4413      	add	r3, r2
 8009ef2:	009b      	lsls	r3, r3, #2
 8009ef4:	440b      	add	r3, r1
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	2b01      	cmp	r3, #1
 8009efa:	d901      	bls.n	8009f00 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8009efc:	2301      	movs	r3, #1
 8009efe:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8009f00:	4b11      	ldr	r3, [pc, #68]	; (8009f48 <xTaskIncrementTick+0x16c>)
 8009f02:	681b      	ldr	r3, [r3, #0]
 8009f04:	2b00      	cmp	r3, #0
 8009f06:	d007      	beq.n	8009f18 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8009f08:	2301      	movs	r3, #1
 8009f0a:	617b      	str	r3, [r7, #20]
 8009f0c:	e004      	b.n	8009f18 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8009f0e:	4b0f      	ldr	r3, [pc, #60]	; (8009f4c <xTaskIncrementTick+0x170>)
 8009f10:	681b      	ldr	r3, [r3, #0]
 8009f12:	3301      	adds	r3, #1
 8009f14:	4a0d      	ldr	r2, [pc, #52]	; (8009f4c <xTaskIncrementTick+0x170>)
 8009f16:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8009f18:	697b      	ldr	r3, [r7, #20]
}
 8009f1a:	4618      	mov	r0, r3
 8009f1c:	3718      	adds	r7, #24
 8009f1e:	46bd      	mov	sp, r7
 8009f20:	bd80      	pop	{r7, pc}
 8009f22:	bf00      	nop
 8009f24:	200012bc 	.word	0x200012bc
 8009f28:	20001298 	.word	0x20001298
 8009f2c:	2000124c 	.word	0x2000124c
 8009f30:	20001250 	.word	0x20001250
 8009f34:	200012ac 	.word	0x200012ac
 8009f38:	200012b4 	.word	0x200012b4
 8009f3c:	2000129c 	.word	0x2000129c
 8009f40:	20000dc4 	.word	0x20000dc4
 8009f44:	20000dc0 	.word	0x20000dc0
 8009f48:	200012a8 	.word	0x200012a8
 8009f4c:	200012a4 	.word	0x200012a4

08009f50 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8009f50:	b480      	push	{r7}
 8009f52:	b085      	sub	sp, #20
 8009f54:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8009f56:	4b2a      	ldr	r3, [pc, #168]	; (800a000 <vTaskSwitchContext+0xb0>)
 8009f58:	681b      	ldr	r3, [r3, #0]
 8009f5a:	2b00      	cmp	r3, #0
 8009f5c:	d003      	beq.n	8009f66 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8009f5e:	4b29      	ldr	r3, [pc, #164]	; (800a004 <vTaskSwitchContext+0xb4>)
 8009f60:	2201      	movs	r2, #1
 8009f62:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8009f64:	e046      	b.n	8009ff4 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 8009f66:	4b27      	ldr	r3, [pc, #156]	; (800a004 <vTaskSwitchContext+0xb4>)
 8009f68:	2200      	movs	r2, #0
 8009f6a:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8009f6c:	4b26      	ldr	r3, [pc, #152]	; (800a008 <vTaskSwitchContext+0xb8>)
 8009f6e:	681b      	ldr	r3, [r3, #0]
 8009f70:	60fb      	str	r3, [r7, #12]
 8009f72:	e010      	b.n	8009f96 <vTaskSwitchContext+0x46>
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	2b00      	cmp	r3, #0
 8009f78:	d10a      	bne.n	8009f90 <vTaskSwitchContext+0x40>
	__asm volatile
 8009f7a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009f7e:	f383 8811 	msr	BASEPRI, r3
 8009f82:	f3bf 8f6f 	isb	sy
 8009f86:	f3bf 8f4f 	dsb	sy
 8009f8a:	607b      	str	r3, [r7, #4]
}
 8009f8c:	bf00      	nop
 8009f8e:	e7fe      	b.n	8009f8e <vTaskSwitchContext+0x3e>
 8009f90:	68fb      	ldr	r3, [r7, #12]
 8009f92:	3b01      	subs	r3, #1
 8009f94:	60fb      	str	r3, [r7, #12]
 8009f96:	491d      	ldr	r1, [pc, #116]	; (800a00c <vTaskSwitchContext+0xbc>)
 8009f98:	68fa      	ldr	r2, [r7, #12]
 8009f9a:	4613      	mov	r3, r2
 8009f9c:	009b      	lsls	r3, r3, #2
 8009f9e:	4413      	add	r3, r2
 8009fa0:	009b      	lsls	r3, r3, #2
 8009fa2:	440b      	add	r3, r1
 8009fa4:	681b      	ldr	r3, [r3, #0]
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d0e4      	beq.n	8009f74 <vTaskSwitchContext+0x24>
 8009faa:	68fa      	ldr	r2, [r7, #12]
 8009fac:	4613      	mov	r3, r2
 8009fae:	009b      	lsls	r3, r3, #2
 8009fb0:	4413      	add	r3, r2
 8009fb2:	009b      	lsls	r3, r3, #2
 8009fb4:	4a15      	ldr	r2, [pc, #84]	; (800a00c <vTaskSwitchContext+0xbc>)
 8009fb6:	4413      	add	r3, r2
 8009fb8:	60bb      	str	r3, [r7, #8]
 8009fba:	68bb      	ldr	r3, [r7, #8]
 8009fbc:	685b      	ldr	r3, [r3, #4]
 8009fbe:	685a      	ldr	r2, [r3, #4]
 8009fc0:	68bb      	ldr	r3, [r7, #8]
 8009fc2:	605a      	str	r2, [r3, #4]
 8009fc4:	68bb      	ldr	r3, [r7, #8]
 8009fc6:	685a      	ldr	r2, [r3, #4]
 8009fc8:	68bb      	ldr	r3, [r7, #8]
 8009fca:	3308      	adds	r3, #8
 8009fcc:	429a      	cmp	r2, r3
 8009fce:	d104      	bne.n	8009fda <vTaskSwitchContext+0x8a>
 8009fd0:	68bb      	ldr	r3, [r7, #8]
 8009fd2:	685b      	ldr	r3, [r3, #4]
 8009fd4:	685a      	ldr	r2, [r3, #4]
 8009fd6:	68bb      	ldr	r3, [r7, #8]
 8009fd8:	605a      	str	r2, [r3, #4]
 8009fda:	68bb      	ldr	r3, [r7, #8]
 8009fdc:	685b      	ldr	r3, [r3, #4]
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	4a0b      	ldr	r2, [pc, #44]	; (800a010 <vTaskSwitchContext+0xc0>)
 8009fe2:	6013      	str	r3, [r2, #0]
 8009fe4:	4a08      	ldr	r2, [pc, #32]	; (800a008 <vTaskSwitchContext+0xb8>)
 8009fe6:	68fb      	ldr	r3, [r7, #12]
 8009fe8:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8009fea:	4b09      	ldr	r3, [pc, #36]	; (800a010 <vTaskSwitchContext+0xc0>)
 8009fec:	681b      	ldr	r3, [r3, #0]
 8009fee:	3354      	adds	r3, #84	; 0x54
 8009ff0:	4a08      	ldr	r2, [pc, #32]	; (800a014 <vTaskSwitchContext+0xc4>)
 8009ff2:	6013      	str	r3, [r2, #0]
}
 8009ff4:	bf00      	nop
 8009ff6:	3714      	adds	r7, #20
 8009ff8:	46bd      	mov	sp, r7
 8009ffa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ffe:	4770      	bx	lr
 800a000:	200012bc 	.word	0x200012bc
 800a004:	200012a8 	.word	0x200012a8
 800a008:	2000129c 	.word	0x2000129c
 800a00c:	20000dc4 	.word	0x20000dc4
 800a010:	20000dc0 	.word	0x20000dc0
 800a014:	20000034 	.word	0x20000034

0800a018 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800a018:	b580      	push	{r7, lr}
 800a01a:	b084      	sub	sp, #16
 800a01c:	af00      	add	r7, sp, #0
 800a01e:	6078      	str	r0, [r7, #4]
 800a020:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2b00      	cmp	r3, #0
 800a026:	d10a      	bne.n	800a03e <vTaskPlaceOnEventList+0x26>
	__asm volatile
 800a028:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a02c:	f383 8811 	msr	BASEPRI, r3
 800a030:	f3bf 8f6f 	isb	sy
 800a034:	f3bf 8f4f 	dsb	sy
 800a038:	60fb      	str	r3, [r7, #12]
}
 800a03a:	bf00      	nop
 800a03c:	e7fe      	b.n	800a03c <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a03e:	4b07      	ldr	r3, [pc, #28]	; (800a05c <vTaskPlaceOnEventList+0x44>)
 800a040:	681b      	ldr	r3, [r3, #0]
 800a042:	3318      	adds	r3, #24
 800a044:	4619      	mov	r1, r3
 800a046:	6878      	ldr	r0, [r7, #4]
 800a048:	f7fe fe61 	bl	8008d0e <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800a04c:	2101      	movs	r1, #1
 800a04e:	6838      	ldr	r0, [r7, #0]
 800a050:	f000 fa80 	bl	800a554 <prvAddCurrentTaskToDelayedList>
}
 800a054:	bf00      	nop
 800a056:	3710      	adds	r7, #16
 800a058:	46bd      	mov	sp, r7
 800a05a:	bd80      	pop	{r7, pc}
 800a05c:	20000dc0 	.word	0x20000dc0

0800a060 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800a060:	b580      	push	{r7, lr}
 800a062:	b086      	sub	sp, #24
 800a064:	af00      	add	r7, sp, #0
 800a066:	60f8      	str	r0, [r7, #12]
 800a068:	60b9      	str	r1, [r7, #8]
 800a06a:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800a06c:	68fb      	ldr	r3, [r7, #12]
 800a06e:	2b00      	cmp	r3, #0
 800a070:	d10a      	bne.n	800a088 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 800a072:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a076:	f383 8811 	msr	BASEPRI, r3
 800a07a:	f3bf 8f6f 	isb	sy
 800a07e:	f3bf 8f4f 	dsb	sy
 800a082:	617b      	str	r3, [r7, #20]
}
 800a084:	bf00      	nop
 800a086:	e7fe      	b.n	800a086 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800a088:	4b0a      	ldr	r3, [pc, #40]	; (800a0b4 <vTaskPlaceOnEventListRestricted+0x54>)
 800a08a:	681b      	ldr	r3, [r3, #0]
 800a08c:	3318      	adds	r3, #24
 800a08e:	4619      	mov	r1, r3
 800a090:	68f8      	ldr	r0, [r7, #12]
 800a092:	f7fe fe18 	bl	8008cc6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800a096:	687b      	ldr	r3, [r7, #4]
 800a098:	2b00      	cmp	r3, #0
 800a09a:	d002      	beq.n	800a0a2 <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 800a09c:	f04f 33ff 	mov.w	r3, #4294967295
 800a0a0:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800a0a2:	6879      	ldr	r1, [r7, #4]
 800a0a4:	68b8      	ldr	r0, [r7, #8]
 800a0a6:	f000 fa55 	bl	800a554 <prvAddCurrentTaskToDelayedList>
	}
 800a0aa:	bf00      	nop
 800a0ac:	3718      	adds	r7, #24
 800a0ae:	46bd      	mov	sp, r7
 800a0b0:	bd80      	pop	{r7, pc}
 800a0b2:	bf00      	nop
 800a0b4:	20000dc0 	.word	0x20000dc0

0800a0b8 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b086      	sub	sp, #24
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a0c0:	687b      	ldr	r3, [r7, #4]
 800a0c2:	68db      	ldr	r3, [r3, #12]
 800a0c4:	68db      	ldr	r3, [r3, #12]
 800a0c6:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800a0c8:	693b      	ldr	r3, [r7, #16]
 800a0ca:	2b00      	cmp	r3, #0
 800a0cc:	d10a      	bne.n	800a0e4 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 800a0ce:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a0d2:	f383 8811 	msr	BASEPRI, r3
 800a0d6:	f3bf 8f6f 	isb	sy
 800a0da:	f3bf 8f4f 	dsb	sy
 800a0de:	60fb      	str	r3, [r7, #12]
}
 800a0e0:	bf00      	nop
 800a0e2:	e7fe      	b.n	800a0e2 <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800a0e4:	693b      	ldr	r3, [r7, #16]
 800a0e6:	3318      	adds	r3, #24
 800a0e8:	4618      	mov	r0, r3
 800a0ea:	f7fe fe49 	bl	8008d80 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a0ee:	4b1e      	ldr	r3, [pc, #120]	; (800a168 <xTaskRemoveFromEventList+0xb0>)
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d11d      	bne.n	800a132 <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800a0f6:	693b      	ldr	r3, [r7, #16]
 800a0f8:	3304      	adds	r3, #4
 800a0fa:	4618      	mov	r0, r3
 800a0fc:	f7fe fe40 	bl	8008d80 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800a100:	693b      	ldr	r3, [r7, #16]
 800a102:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a104:	4b19      	ldr	r3, [pc, #100]	; (800a16c <xTaskRemoveFromEventList+0xb4>)
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	429a      	cmp	r2, r3
 800a10a:	d903      	bls.n	800a114 <xTaskRemoveFromEventList+0x5c>
 800a10c:	693b      	ldr	r3, [r7, #16]
 800a10e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a110:	4a16      	ldr	r2, [pc, #88]	; (800a16c <xTaskRemoveFromEventList+0xb4>)
 800a112:	6013      	str	r3, [r2, #0]
 800a114:	693b      	ldr	r3, [r7, #16]
 800a116:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a118:	4613      	mov	r3, r2
 800a11a:	009b      	lsls	r3, r3, #2
 800a11c:	4413      	add	r3, r2
 800a11e:	009b      	lsls	r3, r3, #2
 800a120:	4a13      	ldr	r2, [pc, #76]	; (800a170 <xTaskRemoveFromEventList+0xb8>)
 800a122:	441a      	add	r2, r3
 800a124:	693b      	ldr	r3, [r7, #16]
 800a126:	3304      	adds	r3, #4
 800a128:	4619      	mov	r1, r3
 800a12a:	4610      	mov	r0, r2
 800a12c:	f7fe fdcb 	bl	8008cc6 <vListInsertEnd>
 800a130:	e005      	b.n	800a13e <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800a132:	693b      	ldr	r3, [r7, #16]
 800a134:	3318      	adds	r3, #24
 800a136:	4619      	mov	r1, r3
 800a138:	480e      	ldr	r0, [pc, #56]	; (800a174 <xTaskRemoveFromEventList+0xbc>)
 800a13a:	f7fe fdc4 	bl	8008cc6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800a13e:	693b      	ldr	r3, [r7, #16]
 800a140:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a142:	4b0d      	ldr	r3, [pc, #52]	; (800a178 <xTaskRemoveFromEventList+0xc0>)
 800a144:	681b      	ldr	r3, [r3, #0]
 800a146:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a148:	429a      	cmp	r2, r3
 800a14a:	d905      	bls.n	800a158 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800a14c:	2301      	movs	r3, #1
 800a14e:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800a150:	4b0a      	ldr	r3, [pc, #40]	; (800a17c <xTaskRemoveFromEventList+0xc4>)
 800a152:	2201      	movs	r2, #1
 800a154:	601a      	str	r2, [r3, #0]
 800a156:	e001      	b.n	800a15c <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 800a158:	2300      	movs	r3, #0
 800a15a:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800a15c:	697b      	ldr	r3, [r7, #20]
}
 800a15e:	4618      	mov	r0, r3
 800a160:	3718      	adds	r7, #24
 800a162:	46bd      	mov	sp, r7
 800a164:	bd80      	pop	{r7, pc}
 800a166:	bf00      	nop
 800a168:	200012bc 	.word	0x200012bc
 800a16c:	2000129c 	.word	0x2000129c
 800a170:	20000dc4 	.word	0x20000dc4
 800a174:	20001254 	.word	0x20001254
 800a178:	20000dc0 	.word	0x20000dc0
 800a17c:	200012a8 	.word	0x200012a8

0800a180 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800a180:	b480      	push	{r7}
 800a182:	b083      	sub	sp, #12
 800a184:	af00      	add	r7, sp, #0
 800a186:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800a188:	4b06      	ldr	r3, [pc, #24]	; (800a1a4 <vTaskInternalSetTimeOutState+0x24>)
 800a18a:	681a      	ldr	r2, [r3, #0]
 800a18c:	687b      	ldr	r3, [r7, #4]
 800a18e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800a190:	4b05      	ldr	r3, [pc, #20]	; (800a1a8 <vTaskInternalSetTimeOutState+0x28>)
 800a192:	681a      	ldr	r2, [r3, #0]
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	605a      	str	r2, [r3, #4]
}
 800a198:	bf00      	nop
 800a19a:	370c      	adds	r7, #12
 800a19c:	46bd      	mov	sp, r7
 800a19e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a1a2:	4770      	bx	lr
 800a1a4:	200012ac 	.word	0x200012ac
 800a1a8:	20001298 	.word	0x20001298

0800a1ac <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800a1ac:	b580      	push	{r7, lr}
 800a1ae:	b088      	sub	sp, #32
 800a1b0:	af00      	add	r7, sp, #0
 800a1b2:	6078      	str	r0, [r7, #4]
 800a1b4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	2b00      	cmp	r3, #0
 800a1ba:	d10a      	bne.n	800a1d2 <xTaskCheckForTimeOut+0x26>
	__asm volatile
 800a1bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1c0:	f383 8811 	msr	BASEPRI, r3
 800a1c4:	f3bf 8f6f 	isb	sy
 800a1c8:	f3bf 8f4f 	dsb	sy
 800a1cc:	613b      	str	r3, [r7, #16]
}
 800a1ce:	bf00      	nop
 800a1d0:	e7fe      	b.n	800a1d0 <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 800a1d2:	683b      	ldr	r3, [r7, #0]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d10a      	bne.n	800a1ee <xTaskCheckForTimeOut+0x42>
	__asm volatile
 800a1d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a1dc:	f383 8811 	msr	BASEPRI, r3
 800a1e0:	f3bf 8f6f 	isb	sy
 800a1e4:	f3bf 8f4f 	dsb	sy
 800a1e8:	60fb      	str	r3, [r7, #12]
}
 800a1ea:	bf00      	nop
 800a1ec:	e7fe      	b.n	800a1ec <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 800a1ee:	f000 fe81 	bl	800aef4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800a1f2:	4b1d      	ldr	r3, [pc, #116]	; (800a268 <xTaskCheckForTimeOut+0xbc>)
 800a1f4:	681b      	ldr	r3, [r3, #0]
 800a1f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	685b      	ldr	r3, [r3, #4]
 800a1fc:	69ba      	ldr	r2, [r7, #24]
 800a1fe:	1ad3      	subs	r3, r2, r3
 800a200:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800a202:	683b      	ldr	r3, [r7, #0]
 800a204:	681b      	ldr	r3, [r3, #0]
 800a206:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a20a:	d102      	bne.n	800a212 <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800a20c:	2300      	movs	r3, #0
 800a20e:	61fb      	str	r3, [r7, #28]
 800a210:	e023      	b.n	800a25a <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800a212:	687b      	ldr	r3, [r7, #4]
 800a214:	681a      	ldr	r2, [r3, #0]
 800a216:	4b15      	ldr	r3, [pc, #84]	; (800a26c <xTaskCheckForTimeOut+0xc0>)
 800a218:	681b      	ldr	r3, [r3, #0]
 800a21a:	429a      	cmp	r2, r3
 800a21c:	d007      	beq.n	800a22e <xTaskCheckForTimeOut+0x82>
 800a21e:	687b      	ldr	r3, [r7, #4]
 800a220:	685b      	ldr	r3, [r3, #4]
 800a222:	69ba      	ldr	r2, [r7, #24]
 800a224:	429a      	cmp	r2, r3
 800a226:	d302      	bcc.n	800a22e <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800a228:	2301      	movs	r3, #1
 800a22a:	61fb      	str	r3, [r7, #28]
 800a22c:	e015      	b.n	800a25a <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800a22e:	683b      	ldr	r3, [r7, #0]
 800a230:	681b      	ldr	r3, [r3, #0]
 800a232:	697a      	ldr	r2, [r7, #20]
 800a234:	429a      	cmp	r2, r3
 800a236:	d20b      	bcs.n	800a250 <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800a238:	683b      	ldr	r3, [r7, #0]
 800a23a:	681a      	ldr	r2, [r3, #0]
 800a23c:	697b      	ldr	r3, [r7, #20]
 800a23e:	1ad2      	subs	r2, r2, r3
 800a240:	683b      	ldr	r3, [r7, #0]
 800a242:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800a244:	6878      	ldr	r0, [r7, #4]
 800a246:	f7ff ff9b 	bl	800a180 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800a24a:	2300      	movs	r3, #0
 800a24c:	61fb      	str	r3, [r7, #28]
 800a24e:	e004      	b.n	800a25a <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800a250:	683b      	ldr	r3, [r7, #0]
 800a252:	2200      	movs	r2, #0
 800a254:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800a256:	2301      	movs	r3, #1
 800a258:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800a25a:	f000 fe7b 	bl	800af54 <vPortExitCritical>

	return xReturn;
 800a25e:	69fb      	ldr	r3, [r7, #28]
}
 800a260:	4618      	mov	r0, r3
 800a262:	3720      	adds	r7, #32
 800a264:	46bd      	mov	sp, r7
 800a266:	bd80      	pop	{r7, pc}
 800a268:	20001298 	.word	0x20001298
 800a26c:	200012ac 	.word	0x200012ac

0800a270 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800a270:	b480      	push	{r7}
 800a272:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800a274:	4b03      	ldr	r3, [pc, #12]	; (800a284 <vTaskMissedYield+0x14>)
 800a276:	2201      	movs	r2, #1
 800a278:	601a      	str	r2, [r3, #0]
}
 800a27a:	bf00      	nop
 800a27c:	46bd      	mov	sp, r7
 800a27e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a282:	4770      	bx	lr
 800a284:	200012a8 	.word	0x200012a8

0800a288 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800a288:	b580      	push	{r7, lr}
 800a28a:	b082      	sub	sp, #8
 800a28c:	af00      	add	r7, sp, #0
 800a28e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800a290:	f000 f852 	bl	800a338 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800a294:	4b06      	ldr	r3, [pc, #24]	; (800a2b0 <prvIdleTask+0x28>)
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	2b01      	cmp	r3, #1
 800a29a:	d9f9      	bls.n	800a290 <prvIdleTask+0x8>
			{
				taskYIELD();
 800a29c:	4b05      	ldr	r3, [pc, #20]	; (800a2b4 <prvIdleTask+0x2c>)
 800a29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a2a2:	601a      	str	r2, [r3, #0]
 800a2a4:	f3bf 8f4f 	dsb	sy
 800a2a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800a2ac:	e7f0      	b.n	800a290 <prvIdleTask+0x8>
 800a2ae:	bf00      	nop
 800a2b0:	20000dc4 	.word	0x20000dc4
 800a2b4:	e000ed04 	.word	0xe000ed04

0800a2b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800a2b8:	b580      	push	{r7, lr}
 800a2ba:	b082      	sub	sp, #8
 800a2bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2be:	2300      	movs	r3, #0
 800a2c0:	607b      	str	r3, [r7, #4]
 800a2c2:	e00c      	b.n	800a2de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800a2c4:	687a      	ldr	r2, [r7, #4]
 800a2c6:	4613      	mov	r3, r2
 800a2c8:	009b      	lsls	r3, r3, #2
 800a2ca:	4413      	add	r3, r2
 800a2cc:	009b      	lsls	r3, r3, #2
 800a2ce:	4a12      	ldr	r2, [pc, #72]	; (800a318 <prvInitialiseTaskLists+0x60>)
 800a2d0:	4413      	add	r3, r2
 800a2d2:	4618      	mov	r0, r3
 800a2d4:	f7fe fcca 	bl	8008c6c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800a2d8:	687b      	ldr	r3, [r7, #4]
 800a2da:	3301      	adds	r3, #1
 800a2dc:	607b      	str	r3, [r7, #4]
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	2b37      	cmp	r3, #55	; 0x37
 800a2e2:	d9ef      	bls.n	800a2c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800a2e4:	480d      	ldr	r0, [pc, #52]	; (800a31c <prvInitialiseTaskLists+0x64>)
 800a2e6:	f7fe fcc1 	bl	8008c6c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800a2ea:	480d      	ldr	r0, [pc, #52]	; (800a320 <prvInitialiseTaskLists+0x68>)
 800a2ec:	f7fe fcbe 	bl	8008c6c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800a2f0:	480c      	ldr	r0, [pc, #48]	; (800a324 <prvInitialiseTaskLists+0x6c>)
 800a2f2:	f7fe fcbb 	bl	8008c6c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800a2f6:	480c      	ldr	r0, [pc, #48]	; (800a328 <prvInitialiseTaskLists+0x70>)
 800a2f8:	f7fe fcb8 	bl	8008c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800a2fc:	480b      	ldr	r0, [pc, #44]	; (800a32c <prvInitialiseTaskLists+0x74>)
 800a2fe:	f7fe fcb5 	bl	8008c6c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800a302:	4b0b      	ldr	r3, [pc, #44]	; (800a330 <prvInitialiseTaskLists+0x78>)
 800a304:	4a05      	ldr	r2, [pc, #20]	; (800a31c <prvInitialiseTaskLists+0x64>)
 800a306:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800a308:	4b0a      	ldr	r3, [pc, #40]	; (800a334 <prvInitialiseTaskLists+0x7c>)
 800a30a:	4a05      	ldr	r2, [pc, #20]	; (800a320 <prvInitialiseTaskLists+0x68>)
 800a30c:	601a      	str	r2, [r3, #0]
}
 800a30e:	bf00      	nop
 800a310:	3708      	adds	r7, #8
 800a312:	46bd      	mov	sp, r7
 800a314:	bd80      	pop	{r7, pc}
 800a316:	bf00      	nop
 800a318:	20000dc4 	.word	0x20000dc4
 800a31c:	20001224 	.word	0x20001224
 800a320:	20001238 	.word	0x20001238
 800a324:	20001254 	.word	0x20001254
 800a328:	20001268 	.word	0x20001268
 800a32c:	20001280 	.word	0x20001280
 800a330:	2000124c 	.word	0x2000124c
 800a334:	20001250 	.word	0x20001250

0800a338 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800a338:	b580      	push	{r7, lr}
 800a33a:	b082      	sub	sp, #8
 800a33c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a33e:	e019      	b.n	800a374 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800a340:	f000 fdd8 	bl	800aef4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a344:	4b10      	ldr	r3, [pc, #64]	; (800a388 <prvCheckTasksWaitingTermination+0x50>)
 800a346:	68db      	ldr	r3, [r3, #12]
 800a348:	68db      	ldr	r3, [r3, #12]
 800a34a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800a34c:	687b      	ldr	r3, [r7, #4]
 800a34e:	3304      	adds	r3, #4
 800a350:	4618      	mov	r0, r3
 800a352:	f7fe fd15 	bl	8008d80 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800a356:	4b0d      	ldr	r3, [pc, #52]	; (800a38c <prvCheckTasksWaitingTermination+0x54>)
 800a358:	681b      	ldr	r3, [r3, #0]
 800a35a:	3b01      	subs	r3, #1
 800a35c:	4a0b      	ldr	r2, [pc, #44]	; (800a38c <prvCheckTasksWaitingTermination+0x54>)
 800a35e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800a360:	4b0b      	ldr	r3, [pc, #44]	; (800a390 <prvCheckTasksWaitingTermination+0x58>)
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3b01      	subs	r3, #1
 800a366:	4a0a      	ldr	r2, [pc, #40]	; (800a390 <prvCheckTasksWaitingTermination+0x58>)
 800a368:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800a36a:	f000 fdf3 	bl	800af54 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800a36e:	6878      	ldr	r0, [r7, #4]
 800a370:	f000 f810 	bl	800a394 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800a374:	4b06      	ldr	r3, [pc, #24]	; (800a390 <prvCheckTasksWaitingTermination+0x58>)
 800a376:	681b      	ldr	r3, [r3, #0]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1e1      	bne.n	800a340 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800a37c:	bf00      	nop
 800a37e:	bf00      	nop
 800a380:	3708      	adds	r7, #8
 800a382:	46bd      	mov	sp, r7
 800a384:	bd80      	pop	{r7, pc}
 800a386:	bf00      	nop
 800a388:	20001268 	.word	0x20001268
 800a38c:	20001294 	.word	0x20001294
 800a390:	2000127c 	.word	0x2000127c

0800a394 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800a394:	b580      	push	{r7, lr}
 800a396:	b084      	sub	sp, #16
 800a398:	af00      	add	r7, sp, #0
 800a39a:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 800a39c:	687b      	ldr	r3, [r7, #4]
 800a39e:	3354      	adds	r3, #84	; 0x54
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f002 f9e3 	bl	800c76c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800a3a6:	687b      	ldr	r3, [r7, #4]
 800a3a8:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a3ac:	2b00      	cmp	r3, #0
 800a3ae:	d108      	bne.n	800a3c2 <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800a3b0:	687b      	ldr	r3, [r7, #4]
 800a3b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a3b4:	4618      	mov	r0, r3
 800a3b6:	f000 ff8b 	bl	800b2d0 <vPortFree>
				vPortFree( pxTCB );
 800a3ba:	6878      	ldr	r0, [r7, #4]
 800a3bc:	f000 ff88 	bl	800b2d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800a3c0:	e018      	b.n	800a3f4 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800a3c2:	687b      	ldr	r3, [r7, #4]
 800a3c4:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a3c8:	2b01      	cmp	r3, #1
 800a3ca:	d103      	bne.n	800a3d4 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 800a3cc:	6878      	ldr	r0, [r7, #4]
 800a3ce:	f000 ff7f 	bl	800b2d0 <vPortFree>
	}
 800a3d2:	e00f      	b.n	800a3f4 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800a3d4:	687b      	ldr	r3, [r7, #4]
 800a3d6:	f893 30b9 	ldrb.w	r3, [r3, #185]	; 0xb9
 800a3da:	2b02      	cmp	r3, #2
 800a3dc:	d00a      	beq.n	800a3f4 <prvDeleteTCB+0x60>
	__asm volatile
 800a3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a3e2:	f383 8811 	msr	BASEPRI, r3
 800a3e6:	f3bf 8f6f 	isb	sy
 800a3ea:	f3bf 8f4f 	dsb	sy
 800a3ee:	60fb      	str	r3, [r7, #12]
}
 800a3f0:	bf00      	nop
 800a3f2:	e7fe      	b.n	800a3f2 <prvDeleteTCB+0x5e>
	}
 800a3f4:	bf00      	nop
 800a3f6:	3710      	adds	r7, #16
 800a3f8:	46bd      	mov	sp, r7
 800a3fa:	bd80      	pop	{r7, pc}

0800a3fc <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b083      	sub	sp, #12
 800a400:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800a402:	4b0c      	ldr	r3, [pc, #48]	; (800a434 <prvResetNextTaskUnblockTime+0x38>)
 800a404:	681b      	ldr	r3, [r3, #0]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	2b00      	cmp	r3, #0
 800a40a:	d104      	bne.n	800a416 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800a40c:	4b0a      	ldr	r3, [pc, #40]	; (800a438 <prvResetNextTaskUnblockTime+0x3c>)
 800a40e:	f04f 32ff 	mov.w	r2, #4294967295
 800a412:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800a414:	e008      	b.n	800a428 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a416:	4b07      	ldr	r3, [pc, #28]	; (800a434 <prvResetNextTaskUnblockTime+0x38>)
 800a418:	681b      	ldr	r3, [r3, #0]
 800a41a:	68db      	ldr	r3, [r3, #12]
 800a41c:	68db      	ldr	r3, [r3, #12]
 800a41e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800a420:	687b      	ldr	r3, [r7, #4]
 800a422:	685b      	ldr	r3, [r3, #4]
 800a424:	4a04      	ldr	r2, [pc, #16]	; (800a438 <prvResetNextTaskUnblockTime+0x3c>)
 800a426:	6013      	str	r3, [r2, #0]
}
 800a428:	bf00      	nop
 800a42a:	370c      	adds	r7, #12
 800a42c:	46bd      	mov	sp, r7
 800a42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a432:	4770      	bx	lr
 800a434:	2000124c 	.word	0x2000124c
 800a438:	200012b4 	.word	0x200012b4

0800a43c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800a43c:	b480      	push	{r7}
 800a43e:	b083      	sub	sp, #12
 800a440:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800a442:	4b0b      	ldr	r3, [pc, #44]	; (800a470 <xTaskGetSchedulerState+0x34>)
 800a444:	681b      	ldr	r3, [r3, #0]
 800a446:	2b00      	cmp	r3, #0
 800a448:	d102      	bne.n	800a450 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800a44a:	2301      	movs	r3, #1
 800a44c:	607b      	str	r3, [r7, #4]
 800a44e:	e008      	b.n	800a462 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800a450:	4b08      	ldr	r3, [pc, #32]	; (800a474 <xTaskGetSchedulerState+0x38>)
 800a452:	681b      	ldr	r3, [r3, #0]
 800a454:	2b00      	cmp	r3, #0
 800a456:	d102      	bne.n	800a45e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800a458:	2302      	movs	r3, #2
 800a45a:	607b      	str	r3, [r7, #4]
 800a45c:	e001      	b.n	800a462 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800a45e:	2300      	movs	r3, #0
 800a460:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800a462:	687b      	ldr	r3, [r7, #4]
	}
 800a464:	4618      	mov	r0, r3
 800a466:	370c      	adds	r7, #12
 800a468:	46bd      	mov	sp, r7
 800a46a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a46e:	4770      	bx	lr
 800a470:	200012a0 	.word	0x200012a0
 800a474:	200012bc 	.word	0x200012bc

0800a478 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800a478:	b580      	push	{r7, lr}
 800a47a:	b086      	sub	sp, #24
 800a47c:	af00      	add	r7, sp, #0
 800a47e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800a484:	2300      	movs	r3, #0
 800a486:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	2b00      	cmp	r3, #0
 800a48c:	d056      	beq.n	800a53c <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800a48e:	4b2e      	ldr	r3, [pc, #184]	; (800a548 <xTaskPriorityDisinherit+0xd0>)
 800a490:	681b      	ldr	r3, [r3, #0]
 800a492:	693a      	ldr	r2, [r7, #16]
 800a494:	429a      	cmp	r2, r3
 800a496:	d00a      	beq.n	800a4ae <xTaskPriorityDisinherit+0x36>
	__asm volatile
 800a498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a49c:	f383 8811 	msr	BASEPRI, r3
 800a4a0:	f3bf 8f6f 	isb	sy
 800a4a4:	f3bf 8f4f 	dsb	sy
 800a4a8:	60fb      	str	r3, [r7, #12]
}
 800a4aa:	bf00      	nop
 800a4ac:	e7fe      	b.n	800a4ac <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800a4ae:	693b      	ldr	r3, [r7, #16]
 800a4b0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4b2:	2b00      	cmp	r3, #0
 800a4b4:	d10a      	bne.n	800a4cc <xTaskPriorityDisinherit+0x54>
	__asm volatile
 800a4b6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a4ba:	f383 8811 	msr	BASEPRI, r3
 800a4be:	f3bf 8f6f 	isb	sy
 800a4c2:	f3bf 8f4f 	dsb	sy
 800a4c6:	60bb      	str	r3, [r7, #8]
}
 800a4c8:	bf00      	nop
 800a4ca:	e7fe      	b.n	800a4ca <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 800a4cc:	693b      	ldr	r3, [r7, #16]
 800a4ce:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4d0:	1e5a      	subs	r2, r3, #1
 800a4d2:	693b      	ldr	r3, [r7, #16]
 800a4d4:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800a4d6:	693b      	ldr	r3, [r7, #16]
 800a4d8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a4da:	693b      	ldr	r3, [r7, #16]
 800a4dc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a4de:	429a      	cmp	r2, r3
 800a4e0:	d02c      	beq.n	800a53c <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a4e6:	2b00      	cmp	r3, #0
 800a4e8:	d128      	bne.n	800a53c <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a4ea:	693b      	ldr	r3, [r7, #16]
 800a4ec:	3304      	adds	r3, #4
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f7fe fc46 	bl	8008d80 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800a4f4:	693b      	ldr	r3, [r7, #16]
 800a4f6:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800a4f8:	693b      	ldr	r3, [r7, #16]
 800a4fa:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a4fc:	693b      	ldr	r3, [r7, #16]
 800a4fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a500:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800a504:	693b      	ldr	r3, [r7, #16]
 800a506:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800a508:	693b      	ldr	r3, [r7, #16]
 800a50a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a50c:	4b0f      	ldr	r3, [pc, #60]	; (800a54c <xTaskPriorityDisinherit+0xd4>)
 800a50e:	681b      	ldr	r3, [r3, #0]
 800a510:	429a      	cmp	r2, r3
 800a512:	d903      	bls.n	800a51c <xTaskPriorityDisinherit+0xa4>
 800a514:	693b      	ldr	r3, [r7, #16]
 800a516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a518:	4a0c      	ldr	r2, [pc, #48]	; (800a54c <xTaskPriorityDisinherit+0xd4>)
 800a51a:	6013      	str	r3, [r2, #0]
 800a51c:	693b      	ldr	r3, [r7, #16]
 800a51e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800a520:	4613      	mov	r3, r2
 800a522:	009b      	lsls	r3, r3, #2
 800a524:	4413      	add	r3, r2
 800a526:	009b      	lsls	r3, r3, #2
 800a528:	4a09      	ldr	r2, [pc, #36]	; (800a550 <xTaskPriorityDisinherit+0xd8>)
 800a52a:	441a      	add	r2, r3
 800a52c:	693b      	ldr	r3, [r7, #16]
 800a52e:	3304      	adds	r3, #4
 800a530:	4619      	mov	r1, r3
 800a532:	4610      	mov	r0, r2
 800a534:	f7fe fbc7 	bl	8008cc6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800a538:	2301      	movs	r3, #1
 800a53a:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800a53c:	697b      	ldr	r3, [r7, #20]
	}
 800a53e:	4618      	mov	r0, r3
 800a540:	3718      	adds	r7, #24
 800a542:	46bd      	mov	sp, r7
 800a544:	bd80      	pop	{r7, pc}
 800a546:	bf00      	nop
 800a548:	20000dc0 	.word	0x20000dc0
 800a54c:	2000129c 	.word	0x2000129c
 800a550:	20000dc4 	.word	0x20000dc4

0800a554 <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800a554:	b580      	push	{r7, lr}
 800a556:	b084      	sub	sp, #16
 800a558:	af00      	add	r7, sp, #0
 800a55a:	6078      	str	r0, [r7, #4]
 800a55c:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800a55e:	4b21      	ldr	r3, [pc, #132]	; (800a5e4 <prvAddCurrentTaskToDelayedList+0x90>)
 800a560:	681b      	ldr	r3, [r3, #0]
 800a562:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800a564:	4b20      	ldr	r3, [pc, #128]	; (800a5e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a566:	681b      	ldr	r3, [r3, #0]
 800a568:	3304      	adds	r3, #4
 800a56a:	4618      	mov	r0, r3
 800a56c:	f7fe fc08 	bl	8008d80 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a576:	d10a      	bne.n	800a58e <prvAddCurrentTaskToDelayedList+0x3a>
 800a578:	683b      	ldr	r3, [r7, #0]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	d007      	beq.n	800a58e <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a57e:	4b1a      	ldr	r3, [pc, #104]	; (800a5e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	3304      	adds	r3, #4
 800a584:	4619      	mov	r1, r3
 800a586:	4819      	ldr	r0, [pc, #100]	; (800a5ec <prvAddCurrentTaskToDelayedList+0x98>)
 800a588:	f7fe fb9d 	bl	8008cc6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800a58c:	e026      	b.n	800a5dc <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800a58e:	68fa      	ldr	r2, [r7, #12]
 800a590:	687b      	ldr	r3, [r7, #4]
 800a592:	4413      	add	r3, r2
 800a594:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800a596:	4b14      	ldr	r3, [pc, #80]	; (800a5e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a598:	681b      	ldr	r3, [r3, #0]
 800a59a:	68ba      	ldr	r2, [r7, #8]
 800a59c:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800a59e:	68ba      	ldr	r2, [r7, #8]
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	429a      	cmp	r2, r3
 800a5a4:	d209      	bcs.n	800a5ba <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5a6:	4b12      	ldr	r3, [pc, #72]	; (800a5f0 <prvAddCurrentTaskToDelayedList+0x9c>)
 800a5a8:	681a      	ldr	r2, [r3, #0]
 800a5aa:	4b0f      	ldr	r3, [pc, #60]	; (800a5e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	3304      	adds	r3, #4
 800a5b0:	4619      	mov	r1, r3
 800a5b2:	4610      	mov	r0, r2
 800a5b4:	f7fe fbab 	bl	8008d0e <vListInsert>
}
 800a5b8:	e010      	b.n	800a5dc <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800a5ba:	4b0e      	ldr	r3, [pc, #56]	; (800a5f4 <prvAddCurrentTaskToDelayedList+0xa0>)
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	4b0a      	ldr	r3, [pc, #40]	; (800a5e8 <prvAddCurrentTaskToDelayedList+0x94>)
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	3304      	adds	r3, #4
 800a5c4:	4619      	mov	r1, r3
 800a5c6:	4610      	mov	r0, r2
 800a5c8:	f7fe fba1 	bl	8008d0e <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800a5cc:	4b0a      	ldr	r3, [pc, #40]	; (800a5f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	68ba      	ldr	r2, [r7, #8]
 800a5d2:	429a      	cmp	r2, r3
 800a5d4:	d202      	bcs.n	800a5dc <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800a5d6:	4a08      	ldr	r2, [pc, #32]	; (800a5f8 <prvAddCurrentTaskToDelayedList+0xa4>)
 800a5d8:	68bb      	ldr	r3, [r7, #8]
 800a5da:	6013      	str	r3, [r2, #0]
}
 800a5dc:	bf00      	nop
 800a5de:	3710      	adds	r7, #16
 800a5e0:	46bd      	mov	sp, r7
 800a5e2:	bd80      	pop	{r7, pc}
 800a5e4:	20001298 	.word	0x20001298
 800a5e8:	20000dc0 	.word	0x20000dc0
 800a5ec:	20001280 	.word	0x20001280
 800a5f0:	20001250 	.word	0x20001250
 800a5f4:	2000124c 	.word	0x2000124c
 800a5f8:	200012b4 	.word	0x200012b4

0800a5fc <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800a5fc:	b580      	push	{r7, lr}
 800a5fe:	b08a      	sub	sp, #40	; 0x28
 800a600:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800a602:	2300      	movs	r3, #0
 800a604:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800a606:	f000 fb07 	bl	800ac18 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800a60a:	4b1c      	ldr	r3, [pc, #112]	; (800a67c <xTimerCreateTimerTask+0x80>)
 800a60c:	681b      	ldr	r3, [r3, #0]
 800a60e:	2b00      	cmp	r3, #0
 800a610:	d021      	beq.n	800a656 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800a612:	2300      	movs	r3, #0
 800a614:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800a616:	2300      	movs	r3, #0
 800a618:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800a61a:	1d3a      	adds	r2, r7, #4
 800a61c:	f107 0108 	add.w	r1, r7, #8
 800a620:	f107 030c 	add.w	r3, r7, #12
 800a624:	4618      	mov	r0, r3
 800a626:	f7fe fb07 	bl	8008c38 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800a62a:	6879      	ldr	r1, [r7, #4]
 800a62c:	68bb      	ldr	r3, [r7, #8]
 800a62e:	68fa      	ldr	r2, [r7, #12]
 800a630:	9202      	str	r2, [sp, #8]
 800a632:	9301      	str	r3, [sp, #4]
 800a634:	2302      	movs	r3, #2
 800a636:	9300      	str	r3, [sp, #0]
 800a638:	2300      	movs	r3, #0
 800a63a:	460a      	mov	r2, r1
 800a63c:	4910      	ldr	r1, [pc, #64]	; (800a680 <xTimerCreateTimerTask+0x84>)
 800a63e:	4811      	ldr	r0, [pc, #68]	; (800a684 <xTimerCreateTimerTask+0x88>)
 800a640:	f7ff f8b4 	bl	80097ac <xTaskCreateStatic>
 800a644:	4603      	mov	r3, r0
 800a646:	4a10      	ldr	r2, [pc, #64]	; (800a688 <xTimerCreateTimerTask+0x8c>)
 800a648:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800a64a:	4b0f      	ldr	r3, [pc, #60]	; (800a688 <xTimerCreateTimerTask+0x8c>)
 800a64c:	681b      	ldr	r3, [r3, #0]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d001      	beq.n	800a656 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800a652:	2301      	movs	r3, #1
 800a654:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800a656:	697b      	ldr	r3, [r7, #20]
 800a658:	2b00      	cmp	r3, #0
 800a65a:	d10a      	bne.n	800a672 <xTimerCreateTimerTask+0x76>
	__asm volatile
 800a65c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a660:	f383 8811 	msr	BASEPRI, r3
 800a664:	f3bf 8f6f 	isb	sy
 800a668:	f3bf 8f4f 	dsb	sy
 800a66c:	613b      	str	r3, [r7, #16]
}
 800a66e:	bf00      	nop
 800a670:	e7fe      	b.n	800a670 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800a672:	697b      	ldr	r3, [r7, #20]
}
 800a674:	4618      	mov	r0, r3
 800a676:	3718      	adds	r7, #24
 800a678:	46bd      	mov	sp, r7
 800a67a:	bd80      	pop	{r7, pc}
 800a67c:	200012f0 	.word	0x200012f0
 800a680:	0800eb00 	.word	0x0800eb00
 800a684:	0800a7c1 	.word	0x0800a7c1
 800a688:	200012f4 	.word	0x200012f4

0800a68c <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800a68c:	b580      	push	{r7, lr}
 800a68e:	b08a      	sub	sp, #40	; 0x28
 800a690:	af00      	add	r7, sp, #0
 800a692:	60f8      	str	r0, [r7, #12]
 800a694:	60b9      	str	r1, [r7, #8]
 800a696:	607a      	str	r2, [r7, #4]
 800a698:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800a69a:	2300      	movs	r3, #0
 800a69c:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800a69e:	68fb      	ldr	r3, [r7, #12]
 800a6a0:	2b00      	cmp	r3, #0
 800a6a2:	d10a      	bne.n	800a6ba <xTimerGenericCommand+0x2e>
	__asm volatile
 800a6a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a6a8:	f383 8811 	msr	BASEPRI, r3
 800a6ac:	f3bf 8f6f 	isb	sy
 800a6b0:	f3bf 8f4f 	dsb	sy
 800a6b4:	623b      	str	r3, [r7, #32]
}
 800a6b6:	bf00      	nop
 800a6b8:	e7fe      	b.n	800a6b8 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800a6ba:	4b1a      	ldr	r3, [pc, #104]	; (800a724 <xTimerGenericCommand+0x98>)
 800a6bc:	681b      	ldr	r3, [r3, #0]
 800a6be:	2b00      	cmp	r3, #0
 800a6c0:	d02a      	beq.n	800a718 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800a6c2:	68bb      	ldr	r3, [r7, #8]
 800a6c4:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800a6c6:	687b      	ldr	r3, [r7, #4]
 800a6c8:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800a6ce:	68bb      	ldr	r3, [r7, #8]
 800a6d0:	2b05      	cmp	r3, #5
 800a6d2:	dc18      	bgt.n	800a706 <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800a6d4:	f7ff feb2 	bl	800a43c <xTaskGetSchedulerState>
 800a6d8:	4603      	mov	r3, r0
 800a6da:	2b02      	cmp	r3, #2
 800a6dc:	d109      	bne.n	800a6f2 <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800a6de:	4b11      	ldr	r3, [pc, #68]	; (800a724 <xTimerGenericCommand+0x98>)
 800a6e0:	6818      	ldr	r0, [r3, #0]
 800a6e2:	f107 0110 	add.w	r1, r7, #16
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a6ea:	f7fe fc77 	bl	8008fdc <xQueueGenericSend>
 800a6ee:	6278      	str	r0, [r7, #36]	; 0x24
 800a6f0:	e012      	b.n	800a718 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800a6f2:	4b0c      	ldr	r3, [pc, #48]	; (800a724 <xTimerGenericCommand+0x98>)
 800a6f4:	6818      	ldr	r0, [r3, #0]
 800a6f6:	f107 0110 	add.w	r1, r7, #16
 800a6fa:	2300      	movs	r3, #0
 800a6fc:	2200      	movs	r2, #0
 800a6fe:	f7fe fc6d 	bl	8008fdc <xQueueGenericSend>
 800a702:	6278      	str	r0, [r7, #36]	; 0x24
 800a704:	e008      	b.n	800a718 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800a706:	4b07      	ldr	r3, [pc, #28]	; (800a724 <xTimerGenericCommand+0x98>)
 800a708:	6818      	ldr	r0, [r3, #0]
 800a70a:	f107 0110 	add.w	r1, r7, #16
 800a70e:	2300      	movs	r3, #0
 800a710:	683a      	ldr	r2, [r7, #0]
 800a712:	f7fe fd61 	bl	80091d8 <xQueueGenericSendFromISR>
 800a716:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800a718:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800a71a:	4618      	mov	r0, r3
 800a71c:	3728      	adds	r7, #40	; 0x28
 800a71e:	46bd      	mov	sp, r7
 800a720:	bd80      	pop	{r7, pc}
 800a722:	bf00      	nop
 800a724:	200012f0 	.word	0x200012f0

0800a728 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800a728:	b580      	push	{r7, lr}
 800a72a:	b088      	sub	sp, #32
 800a72c:	af02      	add	r7, sp, #8
 800a72e:	6078      	str	r0, [r7, #4]
 800a730:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800a732:	4b22      	ldr	r3, [pc, #136]	; (800a7bc <prvProcessExpiredTimer+0x94>)
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	68db      	ldr	r3, [r3, #12]
 800a738:	68db      	ldr	r3, [r3, #12]
 800a73a:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a73c:	697b      	ldr	r3, [r7, #20]
 800a73e:	3304      	adds	r3, #4
 800a740:	4618      	mov	r0, r3
 800a742:	f7fe fb1d 	bl	8008d80 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800a746:	697b      	ldr	r3, [r7, #20]
 800a748:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a74c:	f003 0304 	and.w	r3, r3, #4
 800a750:	2b00      	cmp	r3, #0
 800a752:	d022      	beq.n	800a79a <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800a754:	697b      	ldr	r3, [r7, #20]
 800a756:	699a      	ldr	r2, [r3, #24]
 800a758:	687b      	ldr	r3, [r7, #4]
 800a75a:	18d1      	adds	r1, r2, r3
 800a75c:	687b      	ldr	r3, [r7, #4]
 800a75e:	683a      	ldr	r2, [r7, #0]
 800a760:	6978      	ldr	r0, [r7, #20]
 800a762:	f000 f8d1 	bl	800a908 <prvInsertTimerInActiveList>
 800a766:	4603      	mov	r3, r0
 800a768:	2b00      	cmp	r3, #0
 800a76a:	d01f      	beq.n	800a7ac <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800a76c:	2300      	movs	r3, #0
 800a76e:	9300      	str	r3, [sp, #0]
 800a770:	2300      	movs	r3, #0
 800a772:	687a      	ldr	r2, [r7, #4]
 800a774:	2100      	movs	r1, #0
 800a776:	6978      	ldr	r0, [r7, #20]
 800a778:	f7ff ff88 	bl	800a68c <xTimerGenericCommand>
 800a77c:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800a77e:	693b      	ldr	r3, [r7, #16]
 800a780:	2b00      	cmp	r3, #0
 800a782:	d113      	bne.n	800a7ac <prvProcessExpiredTimer+0x84>
	__asm volatile
 800a784:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a788:	f383 8811 	msr	BASEPRI, r3
 800a78c:	f3bf 8f6f 	isb	sy
 800a790:	f3bf 8f4f 	dsb	sy
 800a794:	60fb      	str	r3, [r7, #12]
}
 800a796:	bf00      	nop
 800a798:	e7fe      	b.n	800a798 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800a7a0:	f023 0301 	bic.w	r3, r3, #1
 800a7a4:	b2da      	uxtb	r2, r3
 800a7a6:	697b      	ldr	r3, [r7, #20]
 800a7a8:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800a7ac:	697b      	ldr	r3, [r7, #20]
 800a7ae:	6a1b      	ldr	r3, [r3, #32]
 800a7b0:	6978      	ldr	r0, [r7, #20]
 800a7b2:	4798      	blx	r3
}
 800a7b4:	bf00      	nop
 800a7b6:	3718      	adds	r7, #24
 800a7b8:	46bd      	mov	sp, r7
 800a7ba:	bd80      	pop	{r7, pc}
 800a7bc:	200012e8 	.word	0x200012e8

0800a7c0 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800a7c0:	b580      	push	{r7, lr}
 800a7c2:	b084      	sub	sp, #16
 800a7c4:	af00      	add	r7, sp, #0
 800a7c6:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7c8:	f107 0308 	add.w	r3, r7, #8
 800a7cc:	4618      	mov	r0, r3
 800a7ce:	f000 f857 	bl	800a880 <prvGetNextExpireTime>
 800a7d2:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800a7d4:	68bb      	ldr	r3, [r7, #8]
 800a7d6:	4619      	mov	r1, r3
 800a7d8:	68f8      	ldr	r0, [r7, #12]
 800a7da:	f000 f803 	bl	800a7e4 <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800a7de:	f000 f8d5 	bl	800a98c <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800a7e2:	e7f1      	b.n	800a7c8 <prvTimerTask+0x8>

0800a7e4 <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800a7e4:	b580      	push	{r7, lr}
 800a7e6:	b084      	sub	sp, #16
 800a7e8:	af00      	add	r7, sp, #0
 800a7ea:	6078      	str	r0, [r7, #4]
 800a7ec:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800a7ee:	f7ff fa39 	bl	8009c64 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a7f2:	f107 0308 	add.w	r3, r7, #8
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f000 f866 	bl	800a8c8 <prvSampleTimeNow>
 800a7fc:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800a7fe:	68bb      	ldr	r3, [r7, #8]
 800a800:	2b00      	cmp	r3, #0
 800a802:	d130      	bne.n	800a866 <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800a804:	683b      	ldr	r3, [r7, #0]
 800a806:	2b00      	cmp	r3, #0
 800a808:	d10a      	bne.n	800a820 <prvProcessTimerOrBlockTask+0x3c>
 800a80a:	687a      	ldr	r2, [r7, #4]
 800a80c:	68fb      	ldr	r3, [r7, #12]
 800a80e:	429a      	cmp	r2, r3
 800a810:	d806      	bhi.n	800a820 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800a812:	f7ff fa35 	bl	8009c80 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800a816:	68f9      	ldr	r1, [r7, #12]
 800a818:	6878      	ldr	r0, [r7, #4]
 800a81a:	f7ff ff85 	bl	800a728 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800a81e:	e024      	b.n	800a86a <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800a820:	683b      	ldr	r3, [r7, #0]
 800a822:	2b00      	cmp	r3, #0
 800a824:	d008      	beq.n	800a838 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800a826:	4b13      	ldr	r3, [pc, #76]	; (800a874 <prvProcessTimerOrBlockTask+0x90>)
 800a828:	681b      	ldr	r3, [r3, #0]
 800a82a:	681b      	ldr	r3, [r3, #0]
 800a82c:	2b00      	cmp	r3, #0
 800a82e:	d101      	bne.n	800a834 <prvProcessTimerOrBlockTask+0x50>
 800a830:	2301      	movs	r3, #1
 800a832:	e000      	b.n	800a836 <prvProcessTimerOrBlockTask+0x52>
 800a834:	2300      	movs	r3, #0
 800a836:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800a838:	4b0f      	ldr	r3, [pc, #60]	; (800a878 <prvProcessTimerOrBlockTask+0x94>)
 800a83a:	6818      	ldr	r0, [r3, #0]
 800a83c:	687a      	ldr	r2, [r7, #4]
 800a83e:	68fb      	ldr	r3, [r7, #12]
 800a840:	1ad3      	subs	r3, r2, r3
 800a842:	683a      	ldr	r2, [r7, #0]
 800a844:	4619      	mov	r1, r3
 800a846:	f7fe ff7d 	bl	8009744 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800a84a:	f7ff fa19 	bl	8009c80 <xTaskResumeAll>
 800a84e:	4603      	mov	r3, r0
 800a850:	2b00      	cmp	r3, #0
 800a852:	d10a      	bne.n	800a86a <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800a854:	4b09      	ldr	r3, [pc, #36]	; (800a87c <prvProcessTimerOrBlockTask+0x98>)
 800a856:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800a85a:	601a      	str	r2, [r3, #0]
 800a85c:	f3bf 8f4f 	dsb	sy
 800a860:	f3bf 8f6f 	isb	sy
}
 800a864:	e001      	b.n	800a86a <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800a866:	f7ff fa0b 	bl	8009c80 <xTaskResumeAll>
}
 800a86a:	bf00      	nop
 800a86c:	3710      	adds	r7, #16
 800a86e:	46bd      	mov	sp, r7
 800a870:	bd80      	pop	{r7, pc}
 800a872:	bf00      	nop
 800a874:	200012ec 	.word	0x200012ec
 800a878:	200012f0 	.word	0x200012f0
 800a87c:	e000ed04 	.word	0xe000ed04

0800a880 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800a880:	b480      	push	{r7}
 800a882:	b085      	sub	sp, #20
 800a884:	af00      	add	r7, sp, #0
 800a886:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800a888:	4b0e      	ldr	r3, [pc, #56]	; (800a8c4 <prvGetNextExpireTime+0x44>)
 800a88a:	681b      	ldr	r3, [r3, #0]
 800a88c:	681b      	ldr	r3, [r3, #0]
 800a88e:	2b00      	cmp	r3, #0
 800a890:	d101      	bne.n	800a896 <prvGetNextExpireTime+0x16>
 800a892:	2201      	movs	r2, #1
 800a894:	e000      	b.n	800a898 <prvGetNextExpireTime+0x18>
 800a896:	2200      	movs	r2, #0
 800a898:	687b      	ldr	r3, [r7, #4]
 800a89a:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800a89c:	687b      	ldr	r3, [r7, #4]
 800a89e:	681b      	ldr	r3, [r3, #0]
 800a8a0:	2b00      	cmp	r3, #0
 800a8a2:	d105      	bne.n	800a8b0 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800a8a4:	4b07      	ldr	r3, [pc, #28]	; (800a8c4 <prvGetNextExpireTime+0x44>)
 800a8a6:	681b      	ldr	r3, [r3, #0]
 800a8a8:	68db      	ldr	r3, [r3, #12]
 800a8aa:	681b      	ldr	r3, [r3, #0]
 800a8ac:	60fb      	str	r3, [r7, #12]
 800a8ae:	e001      	b.n	800a8b4 <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800a8b0:	2300      	movs	r3, #0
 800a8b2:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800a8b4:	68fb      	ldr	r3, [r7, #12]
}
 800a8b6:	4618      	mov	r0, r3
 800a8b8:	3714      	adds	r7, #20
 800a8ba:	46bd      	mov	sp, r7
 800a8bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a8c0:	4770      	bx	lr
 800a8c2:	bf00      	nop
 800a8c4:	200012e8 	.word	0x200012e8

0800a8c8 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800a8c8:	b580      	push	{r7, lr}
 800a8ca:	b084      	sub	sp, #16
 800a8cc:	af00      	add	r7, sp, #0
 800a8ce:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800a8d0:	f7ff fa74 	bl	8009dbc <xTaskGetTickCount>
 800a8d4:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800a8d6:	4b0b      	ldr	r3, [pc, #44]	; (800a904 <prvSampleTimeNow+0x3c>)
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	68fa      	ldr	r2, [r7, #12]
 800a8dc:	429a      	cmp	r2, r3
 800a8de:	d205      	bcs.n	800a8ec <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800a8e0:	f000 f936 	bl	800ab50 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800a8e4:	687b      	ldr	r3, [r7, #4]
 800a8e6:	2201      	movs	r2, #1
 800a8e8:	601a      	str	r2, [r3, #0]
 800a8ea:	e002      	b.n	800a8f2 <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800a8ec:	687b      	ldr	r3, [r7, #4]
 800a8ee:	2200      	movs	r2, #0
 800a8f0:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800a8f2:	4a04      	ldr	r2, [pc, #16]	; (800a904 <prvSampleTimeNow+0x3c>)
 800a8f4:	68fb      	ldr	r3, [r7, #12]
 800a8f6:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800a8f8:	68fb      	ldr	r3, [r7, #12]
}
 800a8fa:	4618      	mov	r0, r3
 800a8fc:	3710      	adds	r7, #16
 800a8fe:	46bd      	mov	sp, r7
 800a900:	bd80      	pop	{r7, pc}
 800a902:	bf00      	nop
 800a904:	200012f8 	.word	0x200012f8

0800a908 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800a908:	b580      	push	{r7, lr}
 800a90a:	b086      	sub	sp, #24
 800a90c:	af00      	add	r7, sp, #0
 800a90e:	60f8      	str	r0, [r7, #12]
 800a910:	60b9      	str	r1, [r7, #8]
 800a912:	607a      	str	r2, [r7, #4]
 800a914:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800a916:	2300      	movs	r3, #0
 800a918:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800a91a:	68fb      	ldr	r3, [r7, #12]
 800a91c:	68ba      	ldr	r2, [r7, #8]
 800a91e:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	68fa      	ldr	r2, [r7, #12]
 800a924:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800a926:	68ba      	ldr	r2, [r7, #8]
 800a928:	687b      	ldr	r3, [r7, #4]
 800a92a:	429a      	cmp	r2, r3
 800a92c:	d812      	bhi.n	800a954 <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800a92e:	687a      	ldr	r2, [r7, #4]
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	1ad2      	subs	r2, r2, r3
 800a934:	68fb      	ldr	r3, [r7, #12]
 800a936:	699b      	ldr	r3, [r3, #24]
 800a938:	429a      	cmp	r2, r3
 800a93a:	d302      	bcc.n	800a942 <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800a93c:	2301      	movs	r3, #1
 800a93e:	617b      	str	r3, [r7, #20]
 800a940:	e01b      	b.n	800a97a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800a942:	4b10      	ldr	r3, [pc, #64]	; (800a984 <prvInsertTimerInActiveList+0x7c>)
 800a944:	681a      	ldr	r2, [r3, #0]
 800a946:	68fb      	ldr	r3, [r7, #12]
 800a948:	3304      	adds	r3, #4
 800a94a:	4619      	mov	r1, r3
 800a94c:	4610      	mov	r0, r2
 800a94e:	f7fe f9de 	bl	8008d0e <vListInsert>
 800a952:	e012      	b.n	800a97a <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800a954:	687a      	ldr	r2, [r7, #4]
 800a956:	683b      	ldr	r3, [r7, #0]
 800a958:	429a      	cmp	r2, r3
 800a95a:	d206      	bcs.n	800a96a <prvInsertTimerInActiveList+0x62>
 800a95c:	68ba      	ldr	r2, [r7, #8]
 800a95e:	683b      	ldr	r3, [r7, #0]
 800a960:	429a      	cmp	r2, r3
 800a962:	d302      	bcc.n	800a96a <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800a964:	2301      	movs	r3, #1
 800a966:	617b      	str	r3, [r7, #20]
 800a968:	e007      	b.n	800a97a <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800a96a:	4b07      	ldr	r3, [pc, #28]	; (800a988 <prvInsertTimerInActiveList+0x80>)
 800a96c:	681a      	ldr	r2, [r3, #0]
 800a96e:	68fb      	ldr	r3, [r7, #12]
 800a970:	3304      	adds	r3, #4
 800a972:	4619      	mov	r1, r3
 800a974:	4610      	mov	r0, r2
 800a976:	f7fe f9ca 	bl	8008d0e <vListInsert>
		}
	}

	return xProcessTimerNow;
 800a97a:	697b      	ldr	r3, [r7, #20]
}
 800a97c:	4618      	mov	r0, r3
 800a97e:	3718      	adds	r7, #24
 800a980:	46bd      	mov	sp, r7
 800a982:	bd80      	pop	{r7, pc}
 800a984:	200012ec 	.word	0x200012ec
 800a988:	200012e8 	.word	0x200012e8

0800a98c <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800a98c:	b580      	push	{r7, lr}
 800a98e:	b08e      	sub	sp, #56	; 0x38
 800a990:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800a992:	e0ca      	b.n	800ab2a <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800a994:	687b      	ldr	r3, [r7, #4]
 800a996:	2b00      	cmp	r3, #0
 800a998:	da18      	bge.n	800a9cc <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800a99a:	1d3b      	adds	r3, r7, #4
 800a99c:	3304      	adds	r3, #4
 800a99e:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800a9a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9a2:	2b00      	cmp	r3, #0
 800a9a4:	d10a      	bne.n	800a9bc <prvProcessReceivedCommands+0x30>
	__asm volatile
 800a9a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800a9aa:	f383 8811 	msr	BASEPRI, r3
 800a9ae:	f3bf 8f6f 	isb	sy
 800a9b2:	f3bf 8f4f 	dsb	sy
 800a9b6:	61fb      	str	r3, [r7, #28]
}
 800a9b8:	bf00      	nop
 800a9ba:	e7fe      	b.n	800a9ba <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800a9bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a9be:	681b      	ldr	r3, [r3, #0]
 800a9c0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9c2:	6850      	ldr	r0, [r2, #4]
 800a9c4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a9c6:	6892      	ldr	r2, [r2, #8]
 800a9c8:	4611      	mov	r1, r2
 800a9ca:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800a9cc:	687b      	ldr	r3, [r7, #4]
 800a9ce:	2b00      	cmp	r3, #0
 800a9d0:	f2c0 80aa 	blt.w	800ab28 <prvProcessReceivedCommands+0x19c>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800a9d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9da:	695b      	ldr	r3, [r3, #20]
 800a9dc:	2b00      	cmp	r3, #0
 800a9de:	d004      	beq.n	800a9ea <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800a9e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a9e2:	3304      	adds	r3, #4
 800a9e4:	4618      	mov	r0, r3
 800a9e6:	f7fe f9cb 	bl	8008d80 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800a9ea:	463b      	mov	r3, r7
 800a9ec:	4618      	mov	r0, r3
 800a9ee:	f7ff ff6b 	bl	800a8c8 <prvSampleTimeNow>
 800a9f2:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	2b09      	cmp	r3, #9
 800a9f8:	f200 8097 	bhi.w	800ab2a <prvProcessReceivedCommands+0x19e>
 800a9fc:	a201      	add	r2, pc, #4	; (adr r2, 800aa04 <prvProcessReceivedCommands+0x78>)
 800a9fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800aa02:	bf00      	nop
 800aa04:	0800aa2d 	.word	0x0800aa2d
 800aa08:	0800aa2d 	.word	0x0800aa2d
 800aa0c:	0800aa2d 	.word	0x0800aa2d
 800aa10:	0800aaa1 	.word	0x0800aaa1
 800aa14:	0800aab5 	.word	0x0800aab5
 800aa18:	0800aaff 	.word	0x0800aaff
 800aa1c:	0800aa2d 	.word	0x0800aa2d
 800aa20:	0800aa2d 	.word	0x0800aa2d
 800aa24:	0800aaa1 	.word	0x0800aaa1
 800aa28:	0800aab5 	.word	0x0800aab5
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aa2c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa2e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa32:	f043 0301 	orr.w	r3, r3, #1
 800aa36:	b2da      	uxtb	r2, r3
 800aa38:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa3a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800aa3e:	68ba      	ldr	r2, [r7, #8]
 800aa40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa42:	699b      	ldr	r3, [r3, #24]
 800aa44:	18d1      	adds	r1, r2, r3
 800aa46:	68bb      	ldr	r3, [r7, #8]
 800aa48:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aa4a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa4c:	f7ff ff5c 	bl	800a908 <prvInsertTimerInActiveList>
 800aa50:	4603      	mov	r3, r0
 800aa52:	2b00      	cmp	r3, #0
 800aa54:	d069      	beq.n	800ab2a <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800aa56:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa58:	6a1b      	ldr	r3, [r3, #32]
 800aa5a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa5c:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800aa5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa60:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aa64:	f003 0304 	and.w	r3, r3, #4
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d05e      	beq.n	800ab2a <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800aa6c:	68ba      	ldr	r2, [r7, #8]
 800aa6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aa70:	699b      	ldr	r3, [r3, #24]
 800aa72:	441a      	add	r2, r3
 800aa74:	2300      	movs	r3, #0
 800aa76:	9300      	str	r3, [sp, #0]
 800aa78:	2300      	movs	r3, #0
 800aa7a:	2100      	movs	r1, #0
 800aa7c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aa7e:	f7ff fe05 	bl	800a68c <xTimerGenericCommand>
 800aa82:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800aa84:	6a3b      	ldr	r3, [r7, #32]
 800aa86:	2b00      	cmp	r3, #0
 800aa88:	d14f      	bne.n	800ab2a <prvProcessReceivedCommands+0x19e>
	__asm volatile
 800aa8a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aa8e:	f383 8811 	msr	BASEPRI, r3
 800aa92:	f3bf 8f6f 	isb	sy
 800aa96:	f3bf 8f4f 	dsb	sy
 800aa9a:	61bb      	str	r3, [r7, #24]
}
 800aa9c:	bf00      	nop
 800aa9e:	e7fe      	b.n	800aa9e <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800aaa0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaa2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaa6:	f023 0301 	bic.w	r3, r3, #1
 800aaaa:	b2da      	uxtb	r2, r3
 800aaac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaae:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800aab2:	e03a      	b.n	800ab2a <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800aab4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aab6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800aaba:	f043 0301 	orr.w	r3, r3, #1
 800aabe:	b2da      	uxtb	r2, r3
 800aac0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aac2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800aac6:	68ba      	ldr	r2, [r7, #8]
 800aac8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaca:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800aacc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aace:	699b      	ldr	r3, [r3, #24]
 800aad0:	2b00      	cmp	r3, #0
 800aad2:	d10a      	bne.n	800aaea <prvProcessReceivedCommands+0x15e>
	__asm volatile
 800aad4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aad8:	f383 8811 	msr	BASEPRI, r3
 800aadc:	f3bf 8f6f 	isb	sy
 800aae0:	f3bf 8f4f 	dsb	sy
 800aae4:	617b      	str	r3, [r7, #20]
}
 800aae6:	bf00      	nop
 800aae8:	e7fe      	b.n	800aae8 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800aaea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800aaec:	699a      	ldr	r2, [r3, #24]
 800aaee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf0:	18d1      	adds	r1, r2, r3
 800aaf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800aaf4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800aaf6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800aaf8:	f7ff ff06 	bl	800a908 <prvInsertTimerInActiveList>
					break;
 800aafc:	e015      	b.n	800ab2a <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800aafe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab00:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab04:	f003 0302 	and.w	r3, r3, #2
 800ab08:	2b00      	cmp	r3, #0
 800ab0a:	d103      	bne.n	800ab14 <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 800ab0c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ab0e:	f000 fbdf 	bl	800b2d0 <vPortFree>
 800ab12:	e00a      	b.n	800ab2a <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ab14:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab16:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab1a:	f023 0301 	bic.w	r3, r3, #1
 800ab1e:	b2da      	uxtb	r2, r3
 800ab20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ab22:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ab26:	e000      	b.n	800ab2a <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ab28:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ab2a:	4b08      	ldr	r3, [pc, #32]	; (800ab4c <prvProcessReceivedCommands+0x1c0>)
 800ab2c:	681b      	ldr	r3, [r3, #0]
 800ab2e:	1d39      	adds	r1, r7, #4
 800ab30:	2200      	movs	r2, #0
 800ab32:	4618      	mov	r0, r3
 800ab34:	f7fe fbec 	bl	8009310 <xQueueReceive>
 800ab38:	4603      	mov	r3, r0
 800ab3a:	2b00      	cmp	r3, #0
 800ab3c:	f47f af2a 	bne.w	800a994 <prvProcessReceivedCommands+0x8>
	}
}
 800ab40:	bf00      	nop
 800ab42:	bf00      	nop
 800ab44:	3730      	adds	r7, #48	; 0x30
 800ab46:	46bd      	mov	sp, r7
 800ab48:	bd80      	pop	{r7, pc}
 800ab4a:	bf00      	nop
 800ab4c:	200012f0 	.word	0x200012f0

0800ab50 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b088      	sub	sp, #32
 800ab54:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ab56:	e048      	b.n	800abea <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ab58:	4b2d      	ldr	r3, [pc, #180]	; (800ac10 <prvSwitchTimerLists+0xc0>)
 800ab5a:	681b      	ldr	r3, [r3, #0]
 800ab5c:	68db      	ldr	r3, [r3, #12]
 800ab5e:	681b      	ldr	r3, [r3, #0]
 800ab60:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ab62:	4b2b      	ldr	r3, [pc, #172]	; (800ac10 <prvSwitchTimerLists+0xc0>)
 800ab64:	681b      	ldr	r3, [r3, #0]
 800ab66:	68db      	ldr	r3, [r3, #12]
 800ab68:	68db      	ldr	r3, [r3, #12]
 800ab6a:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ab6c:	68fb      	ldr	r3, [r7, #12]
 800ab6e:	3304      	adds	r3, #4
 800ab70:	4618      	mov	r0, r3
 800ab72:	f7fe f905 	bl	8008d80 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ab76:	68fb      	ldr	r3, [r7, #12]
 800ab78:	6a1b      	ldr	r3, [r3, #32]
 800ab7a:	68f8      	ldr	r0, [r7, #12]
 800ab7c:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ab7e:	68fb      	ldr	r3, [r7, #12]
 800ab80:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ab84:	f003 0304 	and.w	r3, r3, #4
 800ab88:	2b00      	cmp	r3, #0
 800ab8a:	d02e      	beq.n	800abea <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ab8c:	68fb      	ldr	r3, [r7, #12]
 800ab8e:	699b      	ldr	r3, [r3, #24]
 800ab90:	693a      	ldr	r2, [r7, #16]
 800ab92:	4413      	add	r3, r2
 800ab94:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ab96:	68ba      	ldr	r2, [r7, #8]
 800ab98:	693b      	ldr	r3, [r7, #16]
 800ab9a:	429a      	cmp	r2, r3
 800ab9c:	d90e      	bls.n	800abbc <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ab9e:	68fb      	ldr	r3, [r7, #12]
 800aba0:	68ba      	ldr	r2, [r7, #8]
 800aba2:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800aba4:	68fb      	ldr	r3, [r7, #12]
 800aba6:	68fa      	ldr	r2, [r7, #12]
 800aba8:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800abaa:	4b19      	ldr	r3, [pc, #100]	; (800ac10 <prvSwitchTimerLists+0xc0>)
 800abac:	681a      	ldr	r2, [r3, #0]
 800abae:	68fb      	ldr	r3, [r7, #12]
 800abb0:	3304      	adds	r3, #4
 800abb2:	4619      	mov	r1, r3
 800abb4:	4610      	mov	r0, r2
 800abb6:	f7fe f8aa 	bl	8008d0e <vListInsert>
 800abba:	e016      	b.n	800abea <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800abbc:	2300      	movs	r3, #0
 800abbe:	9300      	str	r3, [sp, #0]
 800abc0:	2300      	movs	r3, #0
 800abc2:	693a      	ldr	r2, [r7, #16]
 800abc4:	2100      	movs	r1, #0
 800abc6:	68f8      	ldr	r0, [r7, #12]
 800abc8:	f7ff fd60 	bl	800a68c <xTimerGenericCommand>
 800abcc:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800abce:	687b      	ldr	r3, [r7, #4]
 800abd0:	2b00      	cmp	r3, #0
 800abd2:	d10a      	bne.n	800abea <prvSwitchTimerLists+0x9a>
	__asm volatile
 800abd4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800abd8:	f383 8811 	msr	BASEPRI, r3
 800abdc:	f3bf 8f6f 	isb	sy
 800abe0:	f3bf 8f4f 	dsb	sy
 800abe4:	603b      	str	r3, [r7, #0]
}
 800abe6:	bf00      	nop
 800abe8:	e7fe      	b.n	800abe8 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800abea:	4b09      	ldr	r3, [pc, #36]	; (800ac10 <prvSwitchTimerLists+0xc0>)
 800abec:	681b      	ldr	r3, [r3, #0]
 800abee:	681b      	ldr	r3, [r3, #0]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d1b1      	bne.n	800ab58 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800abf4:	4b06      	ldr	r3, [pc, #24]	; (800ac10 <prvSwitchTimerLists+0xc0>)
 800abf6:	681b      	ldr	r3, [r3, #0]
 800abf8:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800abfa:	4b06      	ldr	r3, [pc, #24]	; (800ac14 <prvSwitchTimerLists+0xc4>)
 800abfc:	681b      	ldr	r3, [r3, #0]
 800abfe:	4a04      	ldr	r2, [pc, #16]	; (800ac10 <prvSwitchTimerLists+0xc0>)
 800ac00:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800ac02:	4a04      	ldr	r2, [pc, #16]	; (800ac14 <prvSwitchTimerLists+0xc4>)
 800ac04:	697b      	ldr	r3, [r7, #20]
 800ac06:	6013      	str	r3, [r2, #0]
}
 800ac08:	bf00      	nop
 800ac0a:	3718      	adds	r7, #24
 800ac0c:	46bd      	mov	sp, r7
 800ac0e:	bd80      	pop	{r7, pc}
 800ac10:	200012e8 	.word	0x200012e8
 800ac14:	200012ec 	.word	0x200012ec

0800ac18 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800ac18:	b580      	push	{r7, lr}
 800ac1a:	b082      	sub	sp, #8
 800ac1c:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800ac1e:	f000 f969 	bl	800aef4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800ac22:	4b15      	ldr	r3, [pc, #84]	; (800ac78 <prvCheckForValidListAndQueue+0x60>)
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	2b00      	cmp	r3, #0
 800ac28:	d120      	bne.n	800ac6c <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800ac2a:	4814      	ldr	r0, [pc, #80]	; (800ac7c <prvCheckForValidListAndQueue+0x64>)
 800ac2c:	f7fe f81e 	bl	8008c6c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800ac30:	4813      	ldr	r0, [pc, #76]	; (800ac80 <prvCheckForValidListAndQueue+0x68>)
 800ac32:	f7fe f81b 	bl	8008c6c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800ac36:	4b13      	ldr	r3, [pc, #76]	; (800ac84 <prvCheckForValidListAndQueue+0x6c>)
 800ac38:	4a10      	ldr	r2, [pc, #64]	; (800ac7c <prvCheckForValidListAndQueue+0x64>)
 800ac3a:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800ac3c:	4b12      	ldr	r3, [pc, #72]	; (800ac88 <prvCheckForValidListAndQueue+0x70>)
 800ac3e:	4a10      	ldr	r2, [pc, #64]	; (800ac80 <prvCheckForValidListAndQueue+0x68>)
 800ac40:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800ac42:	2300      	movs	r3, #0
 800ac44:	9300      	str	r3, [sp, #0]
 800ac46:	4b11      	ldr	r3, [pc, #68]	; (800ac8c <prvCheckForValidListAndQueue+0x74>)
 800ac48:	4a11      	ldr	r2, [pc, #68]	; (800ac90 <prvCheckForValidListAndQueue+0x78>)
 800ac4a:	2110      	movs	r1, #16
 800ac4c:	200a      	movs	r0, #10
 800ac4e:	f7fe f929 	bl	8008ea4 <xQueueGenericCreateStatic>
 800ac52:	4603      	mov	r3, r0
 800ac54:	4a08      	ldr	r2, [pc, #32]	; (800ac78 <prvCheckForValidListAndQueue+0x60>)
 800ac56:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800ac58:	4b07      	ldr	r3, [pc, #28]	; (800ac78 <prvCheckForValidListAndQueue+0x60>)
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	2b00      	cmp	r3, #0
 800ac5e:	d005      	beq.n	800ac6c <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800ac60:	4b05      	ldr	r3, [pc, #20]	; (800ac78 <prvCheckForValidListAndQueue+0x60>)
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	490b      	ldr	r1, [pc, #44]	; (800ac94 <prvCheckForValidListAndQueue+0x7c>)
 800ac66:	4618      	mov	r0, r3
 800ac68:	f7fe fd42 	bl	80096f0 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800ac6c:	f000 f972 	bl	800af54 <vPortExitCritical>
}
 800ac70:	bf00      	nop
 800ac72:	46bd      	mov	sp, r7
 800ac74:	bd80      	pop	{r7, pc}
 800ac76:	bf00      	nop
 800ac78:	200012f0 	.word	0x200012f0
 800ac7c:	200012c0 	.word	0x200012c0
 800ac80:	200012d4 	.word	0x200012d4
 800ac84:	200012e8 	.word	0x200012e8
 800ac88:	200012ec 	.word	0x200012ec
 800ac8c:	2000139c 	.word	0x2000139c
 800ac90:	200012fc 	.word	0x200012fc
 800ac94:	0800eb08 	.word	0x0800eb08

0800ac98 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800ac98:	b480      	push	{r7}
 800ac9a:	b085      	sub	sp, #20
 800ac9c:	af00      	add	r7, sp, #0
 800ac9e:	60f8      	str	r0, [r7, #12]
 800aca0:	60b9      	str	r1, [r7, #8]
 800aca2:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800aca4:	68fb      	ldr	r3, [r7, #12]
 800aca6:	3b04      	subs	r3, #4
 800aca8:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800acaa:	68fb      	ldr	r3, [r7, #12]
 800acac:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800acb0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acb2:	68fb      	ldr	r3, [r7, #12]
 800acb4:	3b04      	subs	r3, #4
 800acb6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800acb8:	68bb      	ldr	r3, [r7, #8]
 800acba:	f023 0201 	bic.w	r2, r3, #1
 800acbe:	68fb      	ldr	r3, [r7, #12]
 800acc0:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800acc2:	68fb      	ldr	r3, [r7, #12]
 800acc4:	3b04      	subs	r3, #4
 800acc6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800acc8:	4a0c      	ldr	r2, [pc, #48]	; (800acfc <pxPortInitialiseStack+0x64>)
 800acca:	68fb      	ldr	r3, [r7, #12]
 800accc:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800acce:	68fb      	ldr	r3, [r7, #12]
 800acd0:	3b14      	subs	r3, #20
 800acd2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800acd4:	687a      	ldr	r2, [r7, #4]
 800acd6:	68fb      	ldr	r3, [r7, #12]
 800acd8:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	3b04      	subs	r3, #4
 800acde:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800ace0:	68fb      	ldr	r3, [r7, #12]
 800ace2:	f06f 0202 	mvn.w	r2, #2
 800ace6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800ace8:	68fb      	ldr	r3, [r7, #12]
 800acea:	3b20      	subs	r3, #32
 800acec:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800acee:	68fb      	ldr	r3, [r7, #12]
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	3714      	adds	r7, #20
 800acf4:	46bd      	mov	sp, r7
 800acf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800acfa:	4770      	bx	lr
 800acfc:	0800ad01 	.word	0x0800ad01

0800ad00 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800ad00:	b480      	push	{r7}
 800ad02:	b085      	sub	sp, #20
 800ad04:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800ad06:	2300      	movs	r3, #0
 800ad08:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800ad0a:	4b12      	ldr	r3, [pc, #72]	; (800ad54 <prvTaskExitError+0x54>)
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ad12:	d00a      	beq.n	800ad2a <prvTaskExitError+0x2a>
	__asm volatile
 800ad14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad18:	f383 8811 	msr	BASEPRI, r3
 800ad1c:	f3bf 8f6f 	isb	sy
 800ad20:	f3bf 8f4f 	dsb	sy
 800ad24:	60fb      	str	r3, [r7, #12]
}
 800ad26:	bf00      	nop
 800ad28:	e7fe      	b.n	800ad28 <prvTaskExitError+0x28>
	__asm volatile
 800ad2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ad2e:	f383 8811 	msr	BASEPRI, r3
 800ad32:	f3bf 8f6f 	isb	sy
 800ad36:	f3bf 8f4f 	dsb	sy
 800ad3a:	60bb      	str	r3, [r7, #8]
}
 800ad3c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800ad3e:	bf00      	nop
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	2b00      	cmp	r3, #0
 800ad44:	d0fc      	beq.n	800ad40 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800ad46:	bf00      	nop
 800ad48:	bf00      	nop
 800ad4a:	3714      	adds	r7, #20
 800ad4c:	46bd      	mov	sp, r7
 800ad4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad52:	4770      	bx	lr
 800ad54:	20000030 	.word	0x20000030
	...

0800ad60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800ad60:	4b07      	ldr	r3, [pc, #28]	; (800ad80 <pxCurrentTCBConst2>)
 800ad62:	6819      	ldr	r1, [r3, #0]
 800ad64:	6808      	ldr	r0, [r1, #0]
 800ad66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad6a:	f380 8809 	msr	PSP, r0
 800ad6e:	f3bf 8f6f 	isb	sy
 800ad72:	f04f 0000 	mov.w	r0, #0
 800ad76:	f380 8811 	msr	BASEPRI, r0
 800ad7a:	4770      	bx	lr
 800ad7c:	f3af 8000 	nop.w

0800ad80 <pxCurrentTCBConst2>:
 800ad80:	20000dc0 	.word	0x20000dc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800ad84:	bf00      	nop
 800ad86:	bf00      	nop

0800ad88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800ad88:	4808      	ldr	r0, [pc, #32]	; (800adac <prvPortStartFirstTask+0x24>)
 800ad8a:	6800      	ldr	r0, [r0, #0]
 800ad8c:	6800      	ldr	r0, [r0, #0]
 800ad8e:	f380 8808 	msr	MSP, r0
 800ad92:	f04f 0000 	mov.w	r0, #0
 800ad96:	f380 8814 	msr	CONTROL, r0
 800ad9a:	b662      	cpsie	i
 800ad9c:	b661      	cpsie	f
 800ad9e:	f3bf 8f4f 	dsb	sy
 800ada2:	f3bf 8f6f 	isb	sy
 800ada6:	df00      	svc	0
 800ada8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800adaa:	bf00      	nop
 800adac:	e000ed08 	.word	0xe000ed08

0800adb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800adb0:	b580      	push	{r7, lr}
 800adb2:	b086      	sub	sp, #24
 800adb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800adb6:	4b46      	ldr	r3, [pc, #280]	; (800aed0 <xPortStartScheduler+0x120>)
 800adb8:	681b      	ldr	r3, [r3, #0]
 800adba:	4a46      	ldr	r2, [pc, #280]	; (800aed4 <xPortStartScheduler+0x124>)
 800adbc:	4293      	cmp	r3, r2
 800adbe:	d10a      	bne.n	800add6 <xPortStartScheduler+0x26>
	__asm volatile
 800adc0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800adc4:	f383 8811 	msr	BASEPRI, r3
 800adc8:	f3bf 8f6f 	isb	sy
 800adcc:	f3bf 8f4f 	dsb	sy
 800add0:	613b      	str	r3, [r7, #16]
}
 800add2:	bf00      	nop
 800add4:	e7fe      	b.n	800add4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800add6:	4b3e      	ldr	r3, [pc, #248]	; (800aed0 <xPortStartScheduler+0x120>)
 800add8:	681b      	ldr	r3, [r3, #0]
 800adda:	4a3f      	ldr	r2, [pc, #252]	; (800aed8 <xPortStartScheduler+0x128>)
 800addc:	4293      	cmp	r3, r2
 800adde:	d10a      	bne.n	800adf6 <xPortStartScheduler+0x46>
	__asm volatile
 800ade0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ade4:	f383 8811 	msr	BASEPRI, r3
 800ade8:	f3bf 8f6f 	isb	sy
 800adec:	f3bf 8f4f 	dsb	sy
 800adf0:	60fb      	str	r3, [r7, #12]
}
 800adf2:	bf00      	nop
 800adf4:	e7fe      	b.n	800adf4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800adf6:	4b39      	ldr	r3, [pc, #228]	; (800aedc <xPortStartScheduler+0x12c>)
 800adf8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800adfa:	697b      	ldr	r3, [r7, #20]
 800adfc:	781b      	ldrb	r3, [r3, #0]
 800adfe:	b2db      	uxtb	r3, r3
 800ae00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800ae02:	697b      	ldr	r3, [r7, #20]
 800ae04:	22ff      	movs	r2, #255	; 0xff
 800ae06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	781b      	ldrb	r3, [r3, #0]
 800ae0c:	b2db      	uxtb	r3, r3
 800ae0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800ae10:	78fb      	ldrb	r3, [r7, #3]
 800ae12:	b2db      	uxtb	r3, r3
 800ae14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800ae18:	b2da      	uxtb	r2, r3
 800ae1a:	4b31      	ldr	r3, [pc, #196]	; (800aee0 <xPortStartScheduler+0x130>)
 800ae1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800ae1e:	4b31      	ldr	r3, [pc, #196]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae20:	2207      	movs	r2, #7
 800ae22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae24:	e009      	b.n	800ae3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 800ae26:	4b2f      	ldr	r3, [pc, #188]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae28:	681b      	ldr	r3, [r3, #0]
 800ae2a:	3b01      	subs	r3, #1
 800ae2c:	4a2d      	ldr	r2, [pc, #180]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800ae30:	78fb      	ldrb	r3, [r7, #3]
 800ae32:	b2db      	uxtb	r3, r3
 800ae34:	005b      	lsls	r3, r3, #1
 800ae36:	b2db      	uxtb	r3, r3
 800ae38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800ae3a:	78fb      	ldrb	r3, [r7, #3]
 800ae3c:	b2db      	uxtb	r3, r3
 800ae3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ae42:	2b80      	cmp	r3, #128	; 0x80
 800ae44:	d0ef      	beq.n	800ae26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800ae46:	4b27      	ldr	r3, [pc, #156]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae48:	681b      	ldr	r3, [r3, #0]
 800ae4a:	f1c3 0307 	rsb	r3, r3, #7
 800ae4e:	2b04      	cmp	r3, #4
 800ae50:	d00a      	beq.n	800ae68 <xPortStartScheduler+0xb8>
	__asm volatile
 800ae52:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ae56:	f383 8811 	msr	BASEPRI, r3
 800ae5a:	f3bf 8f6f 	isb	sy
 800ae5e:	f3bf 8f4f 	dsb	sy
 800ae62:	60bb      	str	r3, [r7, #8]
}
 800ae64:	bf00      	nop
 800ae66:	e7fe      	b.n	800ae66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800ae68:	4b1e      	ldr	r3, [pc, #120]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae6a:	681b      	ldr	r3, [r3, #0]
 800ae6c:	021b      	lsls	r3, r3, #8
 800ae6e:	4a1d      	ldr	r2, [pc, #116]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800ae72:	4b1c      	ldr	r3, [pc, #112]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae74:	681b      	ldr	r3, [r3, #0]
 800ae76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800ae7a:	4a1a      	ldr	r2, [pc, #104]	; (800aee4 <xPortStartScheduler+0x134>)
 800ae7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800ae7e:	687b      	ldr	r3, [r7, #4]
 800ae80:	b2da      	uxtb	r2, r3
 800ae82:	697b      	ldr	r3, [r7, #20]
 800ae84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800ae86:	4b18      	ldr	r3, [pc, #96]	; (800aee8 <xPortStartScheduler+0x138>)
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	4a17      	ldr	r2, [pc, #92]	; (800aee8 <xPortStartScheduler+0x138>)
 800ae8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800ae90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800ae92:	4b15      	ldr	r3, [pc, #84]	; (800aee8 <xPortStartScheduler+0x138>)
 800ae94:	681b      	ldr	r3, [r3, #0]
 800ae96:	4a14      	ldr	r2, [pc, #80]	; (800aee8 <xPortStartScheduler+0x138>)
 800ae98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800ae9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800ae9e:	f000 f8dd 	bl	800b05c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800aea2:	4b12      	ldr	r3, [pc, #72]	; (800aeec <xPortStartScheduler+0x13c>)
 800aea4:	2200      	movs	r2, #0
 800aea6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800aea8:	f000 f8fc 	bl	800b0a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800aeac:	4b10      	ldr	r3, [pc, #64]	; (800aef0 <xPortStartScheduler+0x140>)
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	4a0f      	ldr	r2, [pc, #60]	; (800aef0 <xPortStartScheduler+0x140>)
 800aeb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800aeb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800aeb8:	f7ff ff66 	bl	800ad88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800aebc:	f7ff f848 	bl	8009f50 <vTaskSwitchContext>
	prvTaskExitError();
 800aec0:	f7ff ff1e 	bl	800ad00 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800aec4:	2300      	movs	r3, #0
}
 800aec6:	4618      	mov	r0, r3
 800aec8:	3718      	adds	r7, #24
 800aeca:	46bd      	mov	sp, r7
 800aecc:	bd80      	pop	{r7, pc}
 800aece:	bf00      	nop
 800aed0:	e000ed00 	.word	0xe000ed00
 800aed4:	410fc271 	.word	0x410fc271
 800aed8:	410fc270 	.word	0x410fc270
 800aedc:	e000e400 	.word	0xe000e400
 800aee0:	200013ec 	.word	0x200013ec
 800aee4:	200013f0 	.word	0x200013f0
 800aee8:	e000ed20 	.word	0xe000ed20
 800aeec:	20000030 	.word	0x20000030
 800aef0:	e000ef34 	.word	0xe000ef34

0800aef4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800aef4:	b480      	push	{r7}
 800aef6:	b083      	sub	sp, #12
 800aef8:	af00      	add	r7, sp, #0
	__asm volatile
 800aefa:	f04f 0350 	mov.w	r3, #80	; 0x50
 800aefe:	f383 8811 	msr	BASEPRI, r3
 800af02:	f3bf 8f6f 	isb	sy
 800af06:	f3bf 8f4f 	dsb	sy
 800af0a:	607b      	str	r3, [r7, #4]
}
 800af0c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800af0e:	4b0f      	ldr	r3, [pc, #60]	; (800af4c <vPortEnterCritical+0x58>)
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	3301      	adds	r3, #1
 800af14:	4a0d      	ldr	r2, [pc, #52]	; (800af4c <vPortEnterCritical+0x58>)
 800af16:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800af18:	4b0c      	ldr	r3, [pc, #48]	; (800af4c <vPortEnterCritical+0x58>)
 800af1a:	681b      	ldr	r3, [r3, #0]
 800af1c:	2b01      	cmp	r3, #1
 800af1e:	d10f      	bne.n	800af40 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800af20:	4b0b      	ldr	r3, [pc, #44]	; (800af50 <vPortEnterCritical+0x5c>)
 800af22:	681b      	ldr	r3, [r3, #0]
 800af24:	b2db      	uxtb	r3, r3
 800af26:	2b00      	cmp	r3, #0
 800af28:	d00a      	beq.n	800af40 <vPortEnterCritical+0x4c>
	__asm volatile
 800af2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af2e:	f383 8811 	msr	BASEPRI, r3
 800af32:	f3bf 8f6f 	isb	sy
 800af36:	f3bf 8f4f 	dsb	sy
 800af3a:	603b      	str	r3, [r7, #0]
}
 800af3c:	bf00      	nop
 800af3e:	e7fe      	b.n	800af3e <vPortEnterCritical+0x4a>
	}
}
 800af40:	bf00      	nop
 800af42:	370c      	adds	r7, #12
 800af44:	46bd      	mov	sp, r7
 800af46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af4a:	4770      	bx	lr
 800af4c:	20000030 	.word	0x20000030
 800af50:	e000ed04 	.word	0xe000ed04

0800af54 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800af5a:	4b12      	ldr	r3, [pc, #72]	; (800afa4 <vPortExitCritical+0x50>)
 800af5c:	681b      	ldr	r3, [r3, #0]
 800af5e:	2b00      	cmp	r3, #0
 800af60:	d10a      	bne.n	800af78 <vPortExitCritical+0x24>
	__asm volatile
 800af62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800af66:	f383 8811 	msr	BASEPRI, r3
 800af6a:	f3bf 8f6f 	isb	sy
 800af6e:	f3bf 8f4f 	dsb	sy
 800af72:	607b      	str	r3, [r7, #4]
}
 800af74:	bf00      	nop
 800af76:	e7fe      	b.n	800af76 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 800af78:	4b0a      	ldr	r3, [pc, #40]	; (800afa4 <vPortExitCritical+0x50>)
 800af7a:	681b      	ldr	r3, [r3, #0]
 800af7c:	3b01      	subs	r3, #1
 800af7e:	4a09      	ldr	r2, [pc, #36]	; (800afa4 <vPortExitCritical+0x50>)
 800af80:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800af82:	4b08      	ldr	r3, [pc, #32]	; (800afa4 <vPortExitCritical+0x50>)
 800af84:	681b      	ldr	r3, [r3, #0]
 800af86:	2b00      	cmp	r3, #0
 800af88:	d105      	bne.n	800af96 <vPortExitCritical+0x42>
 800af8a:	2300      	movs	r3, #0
 800af8c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800af8e:	683b      	ldr	r3, [r7, #0]
 800af90:	f383 8811 	msr	BASEPRI, r3
}
 800af94:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 800af96:	bf00      	nop
 800af98:	370c      	adds	r7, #12
 800af9a:	46bd      	mov	sp, r7
 800af9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800afa0:	4770      	bx	lr
 800afa2:	bf00      	nop
 800afa4:	20000030 	.word	0x20000030
	...

0800afb0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800afb0:	f3ef 8009 	mrs	r0, PSP
 800afb4:	f3bf 8f6f 	isb	sy
 800afb8:	4b15      	ldr	r3, [pc, #84]	; (800b010 <pxCurrentTCBConst>)
 800afba:	681a      	ldr	r2, [r3, #0]
 800afbc:	f01e 0f10 	tst.w	lr, #16
 800afc0:	bf08      	it	eq
 800afc2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800afc6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afca:	6010      	str	r0, [r2, #0]
 800afcc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800afd0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800afd4:	f380 8811 	msr	BASEPRI, r0
 800afd8:	f3bf 8f4f 	dsb	sy
 800afdc:	f3bf 8f6f 	isb	sy
 800afe0:	f7fe ffb6 	bl	8009f50 <vTaskSwitchContext>
 800afe4:	f04f 0000 	mov.w	r0, #0
 800afe8:	f380 8811 	msr	BASEPRI, r0
 800afec:	bc09      	pop	{r0, r3}
 800afee:	6819      	ldr	r1, [r3, #0]
 800aff0:	6808      	ldr	r0, [r1, #0]
 800aff2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aff6:	f01e 0f10 	tst.w	lr, #16
 800affa:	bf08      	it	eq
 800affc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800b000:	f380 8809 	msr	PSP, r0
 800b004:	f3bf 8f6f 	isb	sy
 800b008:	4770      	bx	lr
 800b00a:	bf00      	nop
 800b00c:	f3af 8000 	nop.w

0800b010 <pxCurrentTCBConst>:
 800b010:	20000dc0 	.word	0x20000dc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800b014:	bf00      	nop
 800b016:	bf00      	nop

0800b018 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800b018:	b580      	push	{r7, lr}
 800b01a:	b082      	sub	sp, #8
 800b01c:	af00      	add	r7, sp, #0
	__asm volatile
 800b01e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b022:	f383 8811 	msr	BASEPRI, r3
 800b026:	f3bf 8f6f 	isb	sy
 800b02a:	f3bf 8f4f 	dsb	sy
 800b02e:	607b      	str	r3, [r7, #4]
}
 800b030:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800b032:	f7fe fed3 	bl	8009ddc <xTaskIncrementTick>
 800b036:	4603      	mov	r3, r0
 800b038:	2b00      	cmp	r3, #0
 800b03a:	d003      	beq.n	800b044 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800b03c:	4b06      	ldr	r3, [pc, #24]	; (800b058 <xPortSysTickHandler+0x40>)
 800b03e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800b042:	601a      	str	r2, [r3, #0]
 800b044:	2300      	movs	r3, #0
 800b046:	603b      	str	r3, [r7, #0]
	__asm volatile
 800b048:	683b      	ldr	r3, [r7, #0]
 800b04a:	f383 8811 	msr	BASEPRI, r3
}
 800b04e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 800b050:	bf00      	nop
 800b052:	3708      	adds	r7, #8
 800b054:	46bd      	mov	sp, r7
 800b056:	bd80      	pop	{r7, pc}
 800b058:	e000ed04 	.word	0xe000ed04

0800b05c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800b05c:	b480      	push	{r7}
 800b05e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800b060:	4b0b      	ldr	r3, [pc, #44]	; (800b090 <vPortSetupTimerInterrupt+0x34>)
 800b062:	2200      	movs	r2, #0
 800b064:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800b066:	4b0b      	ldr	r3, [pc, #44]	; (800b094 <vPortSetupTimerInterrupt+0x38>)
 800b068:	2200      	movs	r2, #0
 800b06a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800b06c:	4b0a      	ldr	r3, [pc, #40]	; (800b098 <vPortSetupTimerInterrupt+0x3c>)
 800b06e:	681b      	ldr	r3, [r3, #0]
 800b070:	4a0a      	ldr	r2, [pc, #40]	; (800b09c <vPortSetupTimerInterrupt+0x40>)
 800b072:	fba2 2303 	umull	r2, r3, r2, r3
 800b076:	099b      	lsrs	r3, r3, #6
 800b078:	4a09      	ldr	r2, [pc, #36]	; (800b0a0 <vPortSetupTimerInterrupt+0x44>)
 800b07a:	3b01      	subs	r3, #1
 800b07c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800b07e:	4b04      	ldr	r3, [pc, #16]	; (800b090 <vPortSetupTimerInterrupt+0x34>)
 800b080:	2207      	movs	r2, #7
 800b082:	601a      	str	r2, [r3, #0]
}
 800b084:	bf00      	nop
 800b086:	46bd      	mov	sp, r7
 800b088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b08c:	4770      	bx	lr
 800b08e:	bf00      	nop
 800b090:	e000e010 	.word	0xe000e010
 800b094:	e000e018 	.word	0xe000e018
 800b098:	20000024 	.word	0x20000024
 800b09c:	10624dd3 	.word	0x10624dd3
 800b0a0:	e000e014 	.word	0xe000e014

0800b0a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800b0a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800b0b4 <vPortEnableVFP+0x10>
 800b0a8:	6801      	ldr	r1, [r0, #0]
 800b0aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800b0ae:	6001      	str	r1, [r0, #0]
 800b0b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800b0b2:	bf00      	nop
 800b0b4:	e000ed88 	.word	0xe000ed88

0800b0b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800b0b8:	b480      	push	{r7}
 800b0ba:	b085      	sub	sp, #20
 800b0bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800b0be:	f3ef 8305 	mrs	r3, IPSR
 800b0c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2b0f      	cmp	r3, #15
 800b0c8:	d914      	bls.n	800b0f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800b0ca:	4a17      	ldr	r2, [pc, #92]	; (800b128 <vPortValidateInterruptPriority+0x70>)
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	4413      	add	r3, r2
 800b0d0:	781b      	ldrb	r3, [r3, #0]
 800b0d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800b0d4:	4b15      	ldr	r3, [pc, #84]	; (800b12c <vPortValidateInterruptPriority+0x74>)
 800b0d6:	781b      	ldrb	r3, [r3, #0]
 800b0d8:	7afa      	ldrb	r2, [r7, #11]
 800b0da:	429a      	cmp	r2, r3
 800b0dc:	d20a      	bcs.n	800b0f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 800b0de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b0e2:	f383 8811 	msr	BASEPRI, r3
 800b0e6:	f3bf 8f6f 	isb	sy
 800b0ea:	f3bf 8f4f 	dsb	sy
 800b0ee:	607b      	str	r3, [r7, #4]
}
 800b0f0:	bf00      	nop
 800b0f2:	e7fe      	b.n	800b0f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800b0f4:	4b0e      	ldr	r3, [pc, #56]	; (800b130 <vPortValidateInterruptPriority+0x78>)
 800b0f6:	681b      	ldr	r3, [r3, #0]
 800b0f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800b0fc:	4b0d      	ldr	r3, [pc, #52]	; (800b134 <vPortValidateInterruptPriority+0x7c>)
 800b0fe:	681b      	ldr	r3, [r3, #0]
 800b100:	429a      	cmp	r2, r3
 800b102:	d90a      	bls.n	800b11a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 800b104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b108:	f383 8811 	msr	BASEPRI, r3
 800b10c:	f3bf 8f6f 	isb	sy
 800b110:	f3bf 8f4f 	dsb	sy
 800b114:	603b      	str	r3, [r7, #0]
}
 800b116:	bf00      	nop
 800b118:	e7fe      	b.n	800b118 <vPortValidateInterruptPriority+0x60>
	}
 800b11a:	bf00      	nop
 800b11c:	3714      	adds	r7, #20
 800b11e:	46bd      	mov	sp, r7
 800b120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b124:	4770      	bx	lr
 800b126:	bf00      	nop
 800b128:	e000e3f0 	.word	0xe000e3f0
 800b12c:	200013ec 	.word	0x200013ec
 800b130:	e000ed0c 	.word	0xe000ed0c
 800b134:	200013f0 	.word	0x200013f0

0800b138 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800b138:	b580      	push	{r7, lr}
 800b13a:	b08a      	sub	sp, #40	; 0x28
 800b13c:	af00      	add	r7, sp, #0
 800b13e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800b140:	2300      	movs	r3, #0
 800b142:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800b144:	f7fe fd8e 	bl	8009c64 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800b148:	4b5b      	ldr	r3, [pc, #364]	; (800b2b8 <pvPortMalloc+0x180>)
 800b14a:	681b      	ldr	r3, [r3, #0]
 800b14c:	2b00      	cmp	r3, #0
 800b14e:	d101      	bne.n	800b154 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800b150:	f000 f920 	bl	800b394 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800b154:	4b59      	ldr	r3, [pc, #356]	; (800b2bc <pvPortMalloc+0x184>)
 800b156:	681a      	ldr	r2, [r3, #0]
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	4013      	ands	r3, r2
 800b15c:	2b00      	cmp	r3, #0
 800b15e:	f040 8093 	bne.w	800b288 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800b162:	687b      	ldr	r3, [r7, #4]
 800b164:	2b00      	cmp	r3, #0
 800b166:	d01d      	beq.n	800b1a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 800b168:	2208      	movs	r2, #8
 800b16a:	687b      	ldr	r3, [r7, #4]
 800b16c:	4413      	add	r3, r2
 800b16e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800b170:	687b      	ldr	r3, [r7, #4]
 800b172:	f003 0307 	and.w	r3, r3, #7
 800b176:	2b00      	cmp	r3, #0
 800b178:	d014      	beq.n	800b1a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	f023 0307 	bic.w	r3, r3, #7
 800b180:	3308      	adds	r3, #8
 800b182:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	f003 0307 	and.w	r3, r3, #7
 800b18a:	2b00      	cmp	r3, #0
 800b18c:	d00a      	beq.n	800b1a4 <pvPortMalloc+0x6c>
	__asm volatile
 800b18e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b192:	f383 8811 	msr	BASEPRI, r3
 800b196:	f3bf 8f6f 	isb	sy
 800b19a:	f3bf 8f4f 	dsb	sy
 800b19e:	617b      	str	r3, [r7, #20]
}
 800b1a0:	bf00      	nop
 800b1a2:	e7fe      	b.n	800b1a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800b1a4:	687b      	ldr	r3, [r7, #4]
 800b1a6:	2b00      	cmp	r3, #0
 800b1a8:	d06e      	beq.n	800b288 <pvPortMalloc+0x150>
 800b1aa:	4b45      	ldr	r3, [pc, #276]	; (800b2c0 <pvPortMalloc+0x188>)
 800b1ac:	681b      	ldr	r3, [r3, #0]
 800b1ae:	687a      	ldr	r2, [r7, #4]
 800b1b0:	429a      	cmp	r2, r3
 800b1b2:	d869      	bhi.n	800b288 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800b1b4:	4b43      	ldr	r3, [pc, #268]	; (800b2c4 <pvPortMalloc+0x18c>)
 800b1b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800b1b8:	4b42      	ldr	r3, [pc, #264]	; (800b2c4 <pvPortMalloc+0x18c>)
 800b1ba:	681b      	ldr	r3, [r3, #0]
 800b1bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1be:	e004      	b.n	800b1ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 800b1c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800b1c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1c6:	681b      	ldr	r3, [r3, #0]
 800b1c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800b1ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1cc:	685b      	ldr	r3, [r3, #4]
 800b1ce:	687a      	ldr	r2, [r7, #4]
 800b1d0:	429a      	cmp	r2, r3
 800b1d2:	d903      	bls.n	800b1dc <pvPortMalloc+0xa4>
 800b1d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	2b00      	cmp	r3, #0
 800b1da:	d1f1      	bne.n	800b1c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800b1dc:	4b36      	ldr	r3, [pc, #216]	; (800b2b8 <pvPortMalloc+0x180>)
 800b1de:	681b      	ldr	r3, [r3, #0]
 800b1e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b1e2:	429a      	cmp	r2, r3
 800b1e4:	d050      	beq.n	800b288 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800b1e6:	6a3b      	ldr	r3, [r7, #32]
 800b1e8:	681b      	ldr	r3, [r3, #0]
 800b1ea:	2208      	movs	r2, #8
 800b1ec:	4413      	add	r3, r2
 800b1ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800b1f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1f2:	681a      	ldr	r2, [r3, #0]
 800b1f4:	6a3b      	ldr	r3, [r7, #32]
 800b1f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800b1f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b1fa:	685a      	ldr	r2, [r3, #4]
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	1ad2      	subs	r2, r2, r3
 800b200:	2308      	movs	r3, #8
 800b202:	005b      	lsls	r3, r3, #1
 800b204:	429a      	cmp	r2, r3
 800b206:	d91f      	bls.n	800b248 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800b208:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b20a:	687b      	ldr	r3, [r7, #4]
 800b20c:	4413      	add	r3, r2
 800b20e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800b210:	69bb      	ldr	r3, [r7, #24]
 800b212:	f003 0307 	and.w	r3, r3, #7
 800b216:	2b00      	cmp	r3, #0
 800b218:	d00a      	beq.n	800b230 <pvPortMalloc+0xf8>
	__asm volatile
 800b21a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b21e:	f383 8811 	msr	BASEPRI, r3
 800b222:	f3bf 8f6f 	isb	sy
 800b226:	f3bf 8f4f 	dsb	sy
 800b22a:	613b      	str	r3, [r7, #16]
}
 800b22c:	bf00      	nop
 800b22e:	e7fe      	b.n	800b22e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800b230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b232:	685a      	ldr	r2, [r3, #4]
 800b234:	687b      	ldr	r3, [r7, #4]
 800b236:	1ad2      	subs	r2, r2, r3
 800b238:	69bb      	ldr	r3, [r7, #24]
 800b23a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800b23c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b23e:	687a      	ldr	r2, [r7, #4]
 800b240:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800b242:	69b8      	ldr	r0, [r7, #24]
 800b244:	f000 f908 	bl	800b458 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800b248:	4b1d      	ldr	r3, [pc, #116]	; (800b2c0 <pvPortMalloc+0x188>)
 800b24a:	681a      	ldr	r2, [r3, #0]
 800b24c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b24e:	685b      	ldr	r3, [r3, #4]
 800b250:	1ad3      	subs	r3, r2, r3
 800b252:	4a1b      	ldr	r2, [pc, #108]	; (800b2c0 <pvPortMalloc+0x188>)
 800b254:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800b256:	4b1a      	ldr	r3, [pc, #104]	; (800b2c0 <pvPortMalloc+0x188>)
 800b258:	681a      	ldr	r2, [r3, #0]
 800b25a:	4b1b      	ldr	r3, [pc, #108]	; (800b2c8 <pvPortMalloc+0x190>)
 800b25c:	681b      	ldr	r3, [r3, #0]
 800b25e:	429a      	cmp	r2, r3
 800b260:	d203      	bcs.n	800b26a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800b262:	4b17      	ldr	r3, [pc, #92]	; (800b2c0 <pvPortMalloc+0x188>)
 800b264:	681b      	ldr	r3, [r3, #0]
 800b266:	4a18      	ldr	r2, [pc, #96]	; (800b2c8 <pvPortMalloc+0x190>)
 800b268:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800b26a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b26c:	685a      	ldr	r2, [r3, #4]
 800b26e:	4b13      	ldr	r3, [pc, #76]	; (800b2bc <pvPortMalloc+0x184>)
 800b270:	681b      	ldr	r3, [r3, #0]
 800b272:	431a      	orrs	r2, r3
 800b274:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b276:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b27a:	2200      	movs	r2, #0
 800b27c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800b27e:	4b13      	ldr	r3, [pc, #76]	; (800b2cc <pvPortMalloc+0x194>)
 800b280:	681b      	ldr	r3, [r3, #0]
 800b282:	3301      	adds	r3, #1
 800b284:	4a11      	ldr	r2, [pc, #68]	; (800b2cc <pvPortMalloc+0x194>)
 800b286:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800b288:	f7fe fcfa 	bl	8009c80 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800b28c:	69fb      	ldr	r3, [r7, #28]
 800b28e:	f003 0307 	and.w	r3, r3, #7
 800b292:	2b00      	cmp	r3, #0
 800b294:	d00a      	beq.n	800b2ac <pvPortMalloc+0x174>
	__asm volatile
 800b296:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b29a:	f383 8811 	msr	BASEPRI, r3
 800b29e:	f3bf 8f6f 	isb	sy
 800b2a2:	f3bf 8f4f 	dsb	sy
 800b2a6:	60fb      	str	r3, [r7, #12]
}
 800b2a8:	bf00      	nop
 800b2aa:	e7fe      	b.n	800b2aa <pvPortMalloc+0x172>
	return pvReturn;
 800b2ac:	69fb      	ldr	r3, [r7, #28]
}
 800b2ae:	4618      	mov	r0, r3
 800b2b0:	3728      	adds	r7, #40	; 0x28
 800b2b2:	46bd      	mov	sp, r7
 800b2b4:	bd80      	pop	{r7, pc}
 800b2b6:	bf00      	nop
 800b2b8:	20004ffc 	.word	0x20004ffc
 800b2bc:	20005010 	.word	0x20005010
 800b2c0:	20005000 	.word	0x20005000
 800b2c4:	20004ff4 	.word	0x20004ff4
 800b2c8:	20005004 	.word	0x20005004
 800b2cc:	20005008 	.word	0x20005008

0800b2d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800b2d0:	b580      	push	{r7, lr}
 800b2d2:	b086      	sub	sp, #24
 800b2d4:	af00      	add	r7, sp, #0
 800b2d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800b2d8:	687b      	ldr	r3, [r7, #4]
 800b2da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800b2dc:	687b      	ldr	r3, [r7, #4]
 800b2de:	2b00      	cmp	r3, #0
 800b2e0:	d04d      	beq.n	800b37e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800b2e2:	2308      	movs	r3, #8
 800b2e4:	425b      	negs	r3, r3
 800b2e6:	697a      	ldr	r2, [r7, #20]
 800b2e8:	4413      	add	r3, r2
 800b2ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800b2ec:	697b      	ldr	r3, [r7, #20]
 800b2ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800b2f0:	693b      	ldr	r3, [r7, #16]
 800b2f2:	685a      	ldr	r2, [r3, #4]
 800b2f4:	4b24      	ldr	r3, [pc, #144]	; (800b388 <vPortFree+0xb8>)
 800b2f6:	681b      	ldr	r3, [r3, #0]
 800b2f8:	4013      	ands	r3, r2
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	d10a      	bne.n	800b314 <vPortFree+0x44>
	__asm volatile
 800b2fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b302:	f383 8811 	msr	BASEPRI, r3
 800b306:	f3bf 8f6f 	isb	sy
 800b30a:	f3bf 8f4f 	dsb	sy
 800b30e:	60fb      	str	r3, [r7, #12]
}
 800b310:	bf00      	nop
 800b312:	e7fe      	b.n	800b312 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800b314:	693b      	ldr	r3, [r7, #16]
 800b316:	681b      	ldr	r3, [r3, #0]
 800b318:	2b00      	cmp	r3, #0
 800b31a:	d00a      	beq.n	800b332 <vPortFree+0x62>
	__asm volatile
 800b31c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800b320:	f383 8811 	msr	BASEPRI, r3
 800b324:	f3bf 8f6f 	isb	sy
 800b328:	f3bf 8f4f 	dsb	sy
 800b32c:	60bb      	str	r3, [r7, #8]
}
 800b32e:	bf00      	nop
 800b330:	e7fe      	b.n	800b330 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800b332:	693b      	ldr	r3, [r7, #16]
 800b334:	685a      	ldr	r2, [r3, #4]
 800b336:	4b14      	ldr	r3, [pc, #80]	; (800b388 <vPortFree+0xb8>)
 800b338:	681b      	ldr	r3, [r3, #0]
 800b33a:	4013      	ands	r3, r2
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d01e      	beq.n	800b37e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800b340:	693b      	ldr	r3, [r7, #16]
 800b342:	681b      	ldr	r3, [r3, #0]
 800b344:	2b00      	cmp	r3, #0
 800b346:	d11a      	bne.n	800b37e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800b348:	693b      	ldr	r3, [r7, #16]
 800b34a:	685a      	ldr	r2, [r3, #4]
 800b34c:	4b0e      	ldr	r3, [pc, #56]	; (800b388 <vPortFree+0xb8>)
 800b34e:	681b      	ldr	r3, [r3, #0]
 800b350:	43db      	mvns	r3, r3
 800b352:	401a      	ands	r2, r3
 800b354:	693b      	ldr	r3, [r7, #16]
 800b356:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800b358:	f7fe fc84 	bl	8009c64 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800b35c:	693b      	ldr	r3, [r7, #16]
 800b35e:	685a      	ldr	r2, [r3, #4]
 800b360:	4b0a      	ldr	r3, [pc, #40]	; (800b38c <vPortFree+0xbc>)
 800b362:	681b      	ldr	r3, [r3, #0]
 800b364:	4413      	add	r3, r2
 800b366:	4a09      	ldr	r2, [pc, #36]	; (800b38c <vPortFree+0xbc>)
 800b368:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800b36a:	6938      	ldr	r0, [r7, #16]
 800b36c:	f000 f874 	bl	800b458 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 800b370:	4b07      	ldr	r3, [pc, #28]	; (800b390 <vPortFree+0xc0>)
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	3301      	adds	r3, #1
 800b376:	4a06      	ldr	r2, [pc, #24]	; (800b390 <vPortFree+0xc0>)
 800b378:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800b37a:	f7fe fc81 	bl	8009c80 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800b37e:	bf00      	nop
 800b380:	3718      	adds	r7, #24
 800b382:	46bd      	mov	sp, r7
 800b384:	bd80      	pop	{r7, pc}
 800b386:	bf00      	nop
 800b388:	20005010 	.word	0x20005010
 800b38c:	20005000 	.word	0x20005000
 800b390:	2000500c 	.word	0x2000500c

0800b394 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800b394:	b480      	push	{r7}
 800b396:	b085      	sub	sp, #20
 800b398:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800b39a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800b39e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800b3a0:	4b27      	ldr	r3, [pc, #156]	; (800b440 <prvHeapInit+0xac>)
 800b3a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800b3a4:	68fb      	ldr	r3, [r7, #12]
 800b3a6:	f003 0307 	and.w	r3, r3, #7
 800b3aa:	2b00      	cmp	r3, #0
 800b3ac:	d00c      	beq.n	800b3c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800b3ae:	68fb      	ldr	r3, [r7, #12]
 800b3b0:	3307      	adds	r3, #7
 800b3b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3b4:	68fb      	ldr	r3, [r7, #12]
 800b3b6:	f023 0307 	bic.w	r3, r3, #7
 800b3ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800b3bc:	68ba      	ldr	r2, [r7, #8]
 800b3be:	68fb      	ldr	r3, [r7, #12]
 800b3c0:	1ad3      	subs	r3, r2, r3
 800b3c2:	4a1f      	ldr	r2, [pc, #124]	; (800b440 <prvHeapInit+0xac>)
 800b3c4:	4413      	add	r3, r2
 800b3c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800b3c8:	68fb      	ldr	r3, [r7, #12]
 800b3ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800b3cc:	4a1d      	ldr	r2, [pc, #116]	; (800b444 <prvHeapInit+0xb0>)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800b3d2:	4b1c      	ldr	r3, [pc, #112]	; (800b444 <prvHeapInit+0xb0>)
 800b3d4:	2200      	movs	r2, #0
 800b3d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800b3d8:	687b      	ldr	r3, [r7, #4]
 800b3da:	68ba      	ldr	r2, [r7, #8]
 800b3dc:	4413      	add	r3, r2
 800b3de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800b3e0:	2208      	movs	r2, #8
 800b3e2:	68fb      	ldr	r3, [r7, #12]
 800b3e4:	1a9b      	subs	r3, r3, r2
 800b3e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800b3e8:	68fb      	ldr	r3, [r7, #12]
 800b3ea:	f023 0307 	bic.w	r3, r3, #7
 800b3ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800b3f0:	68fb      	ldr	r3, [r7, #12]
 800b3f2:	4a15      	ldr	r2, [pc, #84]	; (800b448 <prvHeapInit+0xb4>)
 800b3f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800b3f6:	4b14      	ldr	r3, [pc, #80]	; (800b448 <prvHeapInit+0xb4>)
 800b3f8:	681b      	ldr	r3, [r3, #0]
 800b3fa:	2200      	movs	r2, #0
 800b3fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800b3fe:	4b12      	ldr	r3, [pc, #72]	; (800b448 <prvHeapInit+0xb4>)
 800b400:	681b      	ldr	r3, [r3, #0]
 800b402:	2200      	movs	r2, #0
 800b404:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800b40a:	683b      	ldr	r3, [r7, #0]
 800b40c:	68fa      	ldr	r2, [r7, #12]
 800b40e:	1ad2      	subs	r2, r2, r3
 800b410:	683b      	ldr	r3, [r7, #0]
 800b412:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800b414:	4b0c      	ldr	r3, [pc, #48]	; (800b448 <prvHeapInit+0xb4>)
 800b416:	681a      	ldr	r2, [r3, #0]
 800b418:	683b      	ldr	r3, [r7, #0]
 800b41a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b41c:	683b      	ldr	r3, [r7, #0]
 800b41e:	685b      	ldr	r3, [r3, #4]
 800b420:	4a0a      	ldr	r2, [pc, #40]	; (800b44c <prvHeapInit+0xb8>)
 800b422:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800b424:	683b      	ldr	r3, [r7, #0]
 800b426:	685b      	ldr	r3, [r3, #4]
 800b428:	4a09      	ldr	r2, [pc, #36]	; (800b450 <prvHeapInit+0xbc>)
 800b42a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800b42c:	4b09      	ldr	r3, [pc, #36]	; (800b454 <prvHeapInit+0xc0>)
 800b42e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800b432:	601a      	str	r2, [r3, #0]
}
 800b434:	bf00      	nop
 800b436:	3714      	adds	r7, #20
 800b438:	46bd      	mov	sp, r7
 800b43a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b43e:	4770      	bx	lr
 800b440:	200013f4 	.word	0x200013f4
 800b444:	20004ff4 	.word	0x20004ff4
 800b448:	20004ffc 	.word	0x20004ffc
 800b44c:	20005004 	.word	0x20005004
 800b450:	20005000 	.word	0x20005000
 800b454:	20005010 	.word	0x20005010

0800b458 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800b458:	b480      	push	{r7}
 800b45a:	b085      	sub	sp, #20
 800b45c:	af00      	add	r7, sp, #0
 800b45e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800b460:	4b28      	ldr	r3, [pc, #160]	; (800b504 <prvInsertBlockIntoFreeList+0xac>)
 800b462:	60fb      	str	r3, [r7, #12]
 800b464:	e002      	b.n	800b46c <prvInsertBlockIntoFreeList+0x14>
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	681b      	ldr	r3, [r3, #0]
 800b46a:	60fb      	str	r3, [r7, #12]
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	681b      	ldr	r3, [r3, #0]
 800b470:	687a      	ldr	r2, [r7, #4]
 800b472:	429a      	cmp	r2, r3
 800b474:	d8f7      	bhi.n	800b466 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800b476:	68fb      	ldr	r3, [r7, #12]
 800b478:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	685b      	ldr	r3, [r3, #4]
 800b47e:	68ba      	ldr	r2, [r7, #8]
 800b480:	4413      	add	r3, r2
 800b482:	687a      	ldr	r2, [r7, #4]
 800b484:	429a      	cmp	r2, r3
 800b486:	d108      	bne.n	800b49a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800b488:	68fb      	ldr	r3, [r7, #12]
 800b48a:	685a      	ldr	r2, [r3, #4]
 800b48c:	687b      	ldr	r3, [r7, #4]
 800b48e:	685b      	ldr	r3, [r3, #4]
 800b490:	441a      	add	r2, r3
 800b492:	68fb      	ldr	r3, [r7, #12]
 800b494:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800b496:	68fb      	ldr	r3, [r7, #12]
 800b498:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800b49a:	687b      	ldr	r3, [r7, #4]
 800b49c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	685b      	ldr	r3, [r3, #4]
 800b4a2:	68ba      	ldr	r2, [r7, #8]
 800b4a4:	441a      	add	r2, r3
 800b4a6:	68fb      	ldr	r3, [r7, #12]
 800b4a8:	681b      	ldr	r3, [r3, #0]
 800b4aa:	429a      	cmp	r2, r3
 800b4ac:	d118      	bne.n	800b4e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800b4ae:	68fb      	ldr	r3, [r7, #12]
 800b4b0:	681a      	ldr	r2, [r3, #0]
 800b4b2:	4b15      	ldr	r3, [pc, #84]	; (800b508 <prvInsertBlockIntoFreeList+0xb0>)
 800b4b4:	681b      	ldr	r3, [r3, #0]
 800b4b6:	429a      	cmp	r2, r3
 800b4b8:	d00d      	beq.n	800b4d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	685a      	ldr	r2, [r3, #4]
 800b4be:	68fb      	ldr	r3, [r7, #12]
 800b4c0:	681b      	ldr	r3, [r3, #0]
 800b4c2:	685b      	ldr	r3, [r3, #4]
 800b4c4:	441a      	add	r2, r3
 800b4c6:	687b      	ldr	r3, [r7, #4]
 800b4c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	681a      	ldr	r2, [r3, #0]
 800b4d0:	687b      	ldr	r3, [r7, #4]
 800b4d2:	601a      	str	r2, [r3, #0]
 800b4d4:	e008      	b.n	800b4e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800b4d6:	4b0c      	ldr	r3, [pc, #48]	; (800b508 <prvInsertBlockIntoFreeList+0xb0>)
 800b4d8:	681a      	ldr	r2, [r3, #0]
 800b4da:	687b      	ldr	r3, [r7, #4]
 800b4dc:	601a      	str	r2, [r3, #0]
 800b4de:	e003      	b.n	800b4e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800b4e0:	68fb      	ldr	r3, [r7, #12]
 800b4e2:	681a      	ldr	r2, [r3, #0]
 800b4e4:	687b      	ldr	r3, [r7, #4]
 800b4e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800b4e8:	68fa      	ldr	r2, [r7, #12]
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	429a      	cmp	r2, r3
 800b4ee:	d002      	beq.n	800b4f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800b4f0:	68fb      	ldr	r3, [r7, #12]
 800b4f2:	687a      	ldr	r2, [r7, #4]
 800b4f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800b4f6:	bf00      	nop
 800b4f8:	3714      	adds	r7, #20
 800b4fa:	46bd      	mov	sp, r7
 800b4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b500:	4770      	bx	lr
 800b502:	bf00      	nop
 800b504:	20004ff4 	.word	0x20004ff4
 800b508:	20004ffc 	.word	0x20004ffc

0800b50c <_ICM20948_SelectUserBank>:
#define ICM20948_ENABLE_SENSORS 0x3F
#define ICM20948_AUTO_SELECT_CLOCK 0x01

uint8_t readGyroDataZ[2];

HAL_StatusTypeDef _ICM20948_SelectUserBank(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, int userBankNum) {
 800b50c:	b580      	push	{r7, lr}
 800b50e:	b08a      	sub	sp, #40	; 0x28
 800b510:	af04      	add	r7, sp, #16
 800b512:	60f8      	str	r0, [r7, #12]
 800b514:	460b      	mov	r3, r1
 800b516:	607a      	str	r2, [r7, #4]
 800b518:	72fb      	strb	r3, [r7, #11]
	HAL_StatusTypeDef status = HAL_OK;
 800b51a:	2300      	movs	r3, #0
 800b51c:	75fb      	strb	r3, [r7, #23]
	uint8_t writeData = userBankNum << BIT_4;
 800b51e:	687b      	ldr	r3, [r7, #4]
 800b520:	b2db      	uxtb	r3, r3
 800b522:	011b      	lsls	r3, r3, #4
 800b524:	b2db      	uxtb	r3, r3
 800b526:	757b      	strb	r3, [r7, #21]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800b528:	7afb      	ldrb	r3, [r7, #11]
 800b52a:	2b00      	cmp	r3, #0
 800b52c:	d101      	bne.n	800b532 <_ICM20948_SelectUserBank+0x26>
 800b52e:	2368      	movs	r3, #104	; 0x68
 800b530:	e000      	b.n	800b534 <_ICM20948_SelectUserBank+0x28>
 800b532:	2369      	movs	r3, #105	; 0x69
 800b534:	75bb      	strb	r3, [r7, #22]

	status = HAL_I2C_Mem_Write(
 800b536:	7dbb      	ldrb	r3, [r7, #22]
 800b538:	b29b      	uxth	r3, r3
 800b53a:	005b      	lsls	r3, r3, #1
 800b53c:	b299      	uxth	r1, r3
 800b53e:	230a      	movs	r3, #10
 800b540:	9302      	str	r3, [sp, #8]
 800b542:	2301      	movs	r3, #1
 800b544:	9301      	str	r3, [sp, #4]
 800b546:	f107 0315 	add.w	r3, r7, #21
 800b54a:	9300      	str	r3, [sp, #0]
 800b54c:	2301      	movs	r3, #1
 800b54e:	227f      	movs	r2, #127	; 0x7f
 800b550:	68f8      	ldr	r0, [r7, #12]
 800b552:	f7f9 fc59 	bl	8004e08 <HAL_I2C_Mem_Write>
 800b556:	4603      	mov	r3, r0
 800b558:	75fb      	strb	r3, [r7, #23]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800b55a:	7dfb      	ldrb	r3, [r7, #23]
}
 800b55c:	4618      	mov	r0, r3
 800b55e:	3718      	adds	r7, #24
 800b560:	46bd      	mov	sp, r7
 800b562:	bd80      	pop	{r7, pc}

0800b564 <_ICM20948_WriteByte>:

HAL_StatusTypeDef _ICM20948_WriteByte(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const registerAddress, uint8_t writeData) {
 800b564:	b580      	push	{r7, lr}
 800b566:	b088      	sub	sp, #32
 800b568:	af04      	add	r7, sp, #16
 800b56a:	6078      	str	r0, [r7, #4]
 800b56c:	4608      	mov	r0, r1
 800b56e:	4611      	mov	r1, r2
 800b570:	461a      	mov	r2, r3
 800b572:	4603      	mov	r3, r0
 800b574:	70fb      	strb	r3, [r7, #3]
 800b576:	460b      	mov	r3, r1
 800b578:	70bb      	strb	r3, [r7, #2]
 800b57a:	4613      	mov	r3, r2
 800b57c:	707b      	strb	r3, [r7, #1]
	HAL_StatusTypeDef status = HAL_OK;
 800b57e:	2300      	movs	r3, #0
 800b580:	73fb      	strb	r3, [r7, #15]
	uint8_t deviceI2CAddress = (selectI2cAddress == 0)? ICM20948__I2C_SLAVE_ADDRESS_1: ICM20948__I2C_SLAVE_ADDRESS_2;
 800b582:	78fb      	ldrb	r3, [r7, #3]
 800b584:	2b00      	cmp	r3, #0
 800b586:	d101      	bne.n	800b58c <_ICM20948_WriteByte+0x28>
 800b588:	2368      	movs	r3, #104	; 0x68
 800b58a:	e000      	b.n	800b58e <_ICM20948_WriteByte+0x2a>
 800b58c:	2369      	movs	r3, #105	; 0x69
 800b58e:	73bb      	strb	r3, [r7, #14]

	status = HAL_I2C_Mem_Write(
 800b590:	7bbb      	ldrb	r3, [r7, #14]
 800b592:	b29b      	uxth	r3, r3
 800b594:	005b      	lsls	r3, r3, #1
 800b596:	b299      	uxth	r1, r3
 800b598:	78bb      	ldrb	r3, [r7, #2]
 800b59a:	b29a      	uxth	r2, r3
 800b59c:	230a      	movs	r3, #10
 800b59e:	9302      	str	r3, [sp, #8]
 800b5a0:	2301      	movs	r3, #1
 800b5a2:	9301      	str	r3, [sp, #4]
 800b5a4:	1c7b      	adds	r3, r7, #1
 800b5a6:	9300      	str	r3, [sp, #0]
 800b5a8:	2301      	movs	r3, #1
 800b5aa:	6878      	ldr	r0, [r7, #4]
 800b5ac:	f7f9 fc2c 	bl	8004e08 <HAL_I2C_Mem_Write>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	73fb      	strb	r3, [r7, #15]
			I2C_MEMADD_SIZE_8BIT,
			&writeData,
			I2C_MEMADD_SIZE_8BIT,
			10);

	return status;
 800b5b4:	7bfb      	ldrb	r3, [r7, #15]
}
 800b5b6:	4618      	mov	r0, r3
 800b5b8:	3710      	adds	r7, #16
 800b5ba:	46bd      	mov	sp, r7
 800b5bc:	bd80      	pop	{r7, pc}

0800b5be <ICM20948_init>:
	}
	
	return 0;
}

void ICM20948_init(I2C_HandleTypeDef * hi2c, uint8_t const selectI2cAddress, uint8_t const selectGyroSensitivity) {
 800b5be:	b580      	push	{r7, lr}
 800b5c0:	b084      	sub	sp, #16
 800b5c2:	af00      	add	r7, sp, #0
 800b5c4:	6078      	str	r0, [r7, #4]
 800b5c6:	460b      	mov	r3, r1
 800b5c8:	70fb      	strb	r3, [r7, #3]
 800b5ca:	4613      	mov	r3, r2
 800b5cc:	70bb      	strb	r3, [r7, #2]
	HAL_StatusTypeDef status = HAL_OK;
 800b5ce:	2300      	movs	r3, #0
 800b5d0:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800b5d2:	78fb      	ldrb	r3, [r7, #3]
 800b5d4:	2200      	movs	r2, #0
 800b5d6:	4619      	mov	r1, r3
 800b5d8:	6878      	ldr	r0, [r7, #4]
 800b5da:	f7ff ff97 	bl	800b50c <_ICM20948_SelectUserBank>
 800b5de:	4603      	mov	r3, r0
 800b5e0:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
 800b5e2:	78f9      	ldrb	r1, [r7, #3]
 800b5e4:	2380      	movs	r3, #128	; 0x80
 800b5e6:	2206      	movs	r2, #6
 800b5e8:	6878      	ldr	r0, [r7, #4]
 800b5ea:	f7ff ffbb 	bl	800b564 <_ICM20948_WriteByte>
 800b5ee:	4603      	mov	r3, r0
 800b5f0:	73fb      	strb	r3, [r7, #15]
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_1__REGISTER,
			ICM20948_RESET);

	HAL_Delay(200);
 800b5f2:	20c8      	movs	r0, #200	; 0xc8
 800b5f4:	f7f8 fd14 	bl	8004020 <HAL_Delay>

	status = _ICM20948_WriteByte(
 800b5f8:	78f9      	ldrb	r1, [r7, #3]
 800b5fa:	2301      	movs	r3, #1
 800b5fc:	2206      	movs	r2, #6
 800b5fe:	6878      	ldr	r0, [r7, #4]
 800b600:	f7ff ffb0 	bl	800b564 <_ICM20948_WriteByte>
 800b604:	4603      	mov	r3, r0
 800b606:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
			ICM20948_DISABLE_SENSORS); */ // For some reason this needs to be tested

	// disable accelerometer
	status = _ICM20948_WriteByte(
 800b608:	78f9      	ldrb	r1, [r7, #3]
 800b60a:	2338      	movs	r3, #56	; 0x38
 800b60c:	2207      	movs	r2, #7
 800b60e:	6878      	ldr	r0, [r7, #4]
 800b610:	f7ff ffa8 	bl	800b564 <_ICM20948_WriteByte>
 800b614:	4603      	mov	r3, r0
 800b616:	73fb      	strb	r3, [r7, #15]
				hi2c,
				selectI2cAddress,
				ICM20948__USER_BANK_0__PWR_MGMT_2__REGISTER,
				0x38);

	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_2);
 800b618:	78fb      	ldrb	r3, [r7, #3]
 800b61a:	2202      	movs	r2, #2
 800b61c:	4619      	mov	r1, r3
 800b61e:	6878      	ldr	r0, [r7, #4]
 800b620:	f7ff ff74 	bl	800b50c <_ICM20948_SelectUserBank>
 800b624:	4603      	mov	r3, r0
 800b626:	73fb      	strb	r3, [r7, #15]

	status = _ICM20948_WriteByte(
			hi2c,
			selectI2cAddress,
			ICM20948__USER_BANK_2__GYRO_CONFIG_1__REGISTER,
			3 << GYRO_DLPFCFG_BIT|selectGyroSensitivity << BIT_1|EN_GRYO_DLPF << GYRO_FCHOICE_BIT);
 800b628:	78bb      	ldrb	r3, [r7, #2]
 800b62a:	005b      	lsls	r3, r3, #1
 800b62c:	b25b      	sxtb	r3, r3
 800b62e:	f043 0319 	orr.w	r3, r3, #25
 800b632:	b25b      	sxtb	r3, r3
	status = _ICM20948_WriteByte(
 800b634:	b2db      	uxtb	r3, r3
 800b636:	78f9      	ldrb	r1, [r7, #3]
 800b638:	2201      	movs	r2, #1
 800b63a:	6878      	ldr	r0, [r7, #4]
 800b63c:	f7ff ff92 	bl	800b564 <_ICM20948_WriteByte>
 800b640:	4603      	mov	r3, r0
 800b642:	73fb      	strb	r3, [r7, #15]
//			hi2c,
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__TEMP_CONFIG__REGISTER,
//			0x03); // Don't understand how this works

	status = _ICM20948_WriteByte(
 800b644:	78f9      	ldrb	r1, [r7, #3]
 800b646:	2304      	movs	r3, #4
 800b648:	2200      	movs	r2, #0
 800b64a:	6878      	ldr	r0, [r7, #4]
 800b64c:	f7ff ff8a 	bl	800b564 <_ICM20948_WriteByte>
 800b650:	4603      	mov	r3, r0
 800b652:	73fb      	strb	r3, [r7, #15]
//			selectI2cAddress,
//			ICM20948__USER_BANK_2__ACCEL_SMPLRT_DIV_2__REGISTER,
//			0x04); // Don't understand how this works


	status = _ICM20948_SelectUserBank(hi2c, selectI2cAddress, USER_BANK_0);
 800b654:	78fb      	ldrb	r3, [r7, #3]
 800b656:	2200      	movs	r2, #0
 800b658:	4619      	mov	r1, r3
 800b65a:	6878      	ldr	r0, [r7, #4]
 800b65c:	f7ff ff56 	bl	800b50c <_ICM20948_SelectUserBank>
 800b660:	4603      	mov	r3, r0
 800b662:	73fb      	strb	r3, [r7, #15]
//
	status = _ICM20948_WriteByte(
 800b664:	78f9      	ldrb	r1, [r7, #3]
 800b666:	2302      	movs	r3, #2
 800b668:	220f      	movs	r2, #15
 800b66a:	6878      	ldr	r0, [r7, #4]
 800b66c:	f7ff ff7a 	bl	800b564 <_ICM20948_WriteByte>
 800b670:	4603      	mov	r3, r0
 800b672:	73fb      	strb	r3, [r7, #15]
			selectI2cAddress,
			ICM20948__USER_BANK_0__INT_PIN_CFG__REGISTER,
			0x02); // Don't understand how this works

//	status = _AK09918_WriteByte(hi2c, AK09916__CNTL2__REGISTER, 0x08);
}
 800b674:	bf00      	nop
 800b676:	3710      	adds	r7, #16
 800b678:	46bd      	mov	sp, r7
 800b67a:	bd80      	pop	{r7, pc}

0800b67c <OLED_Refresh_Gram>:

#include "../../PeripheralDriver/Inc/oledfont.h"

uint8_t OLED_GRAM[128][8];	 
void OLED_Refresh_Gram(void)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
	uint8_t i,n;		    
	for(i=0;i<8;i++)  
 800b682:	2300      	movs	r3, #0
 800b684:	71fb      	strb	r3, [r7, #7]
 800b686:	e026      	b.n	800b6d6 <OLED_Refresh_Gram+0x5a>
	{  
		OLED_WR_Byte (0xb0+i,OLED_CMD);    
 800b688:	79fb      	ldrb	r3, [r7, #7]
 800b68a:	3b50      	subs	r3, #80	; 0x50
 800b68c:	b2db      	uxtb	r3, r3
 800b68e:	2100      	movs	r1, #0
 800b690:	4618      	mov	r0, r3
 800b692:	f000 f82b 	bl	800b6ec <OLED_WR_Byte>
		OLED_WR_Byte (0x00,OLED_CMD);      
 800b696:	2100      	movs	r1, #0
 800b698:	2000      	movs	r0, #0
 800b69a:	f000 f827 	bl	800b6ec <OLED_WR_Byte>
		OLED_WR_Byte (0x10,OLED_CMD);        
 800b69e:	2100      	movs	r1, #0
 800b6a0:	2010      	movs	r0, #16
 800b6a2:	f000 f823 	bl	800b6ec <OLED_WR_Byte>
		for(n=0;n<128;n++)OLED_WR_Byte(OLED_GRAM[n][i],OLED_DATA); 
 800b6a6:	2300      	movs	r3, #0
 800b6a8:	71bb      	strb	r3, [r7, #6]
 800b6aa:	e00d      	b.n	800b6c8 <OLED_Refresh_Gram+0x4c>
 800b6ac:	79ba      	ldrb	r2, [r7, #6]
 800b6ae:	79fb      	ldrb	r3, [r7, #7]
 800b6b0:	490d      	ldr	r1, [pc, #52]	; (800b6e8 <OLED_Refresh_Gram+0x6c>)
 800b6b2:	00d2      	lsls	r2, r2, #3
 800b6b4:	440a      	add	r2, r1
 800b6b6:	4413      	add	r3, r2
 800b6b8:	781b      	ldrb	r3, [r3, #0]
 800b6ba:	2101      	movs	r1, #1
 800b6bc:	4618      	mov	r0, r3
 800b6be:	f000 f815 	bl	800b6ec <OLED_WR_Byte>
 800b6c2:	79bb      	ldrb	r3, [r7, #6]
 800b6c4:	3301      	adds	r3, #1
 800b6c6:	71bb      	strb	r3, [r7, #6]
 800b6c8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b6cc:	2b00      	cmp	r3, #0
 800b6ce:	daed      	bge.n	800b6ac <OLED_Refresh_Gram+0x30>
	for(i=0;i<8;i++)  
 800b6d0:	79fb      	ldrb	r3, [r7, #7]
 800b6d2:	3301      	adds	r3, #1
 800b6d4:	71fb      	strb	r3, [r7, #7]
 800b6d6:	79fb      	ldrb	r3, [r7, #7]
 800b6d8:	2b07      	cmp	r3, #7
 800b6da:	d9d5      	bls.n	800b688 <OLED_Refresh_Gram+0xc>
	}   
}
 800b6dc:	bf00      	nop
 800b6de:	bf00      	nop
 800b6e0:	3708      	adds	r7, #8
 800b6e2:	46bd      	mov	sp, r7
 800b6e4:	bd80      	pop	{r7, pc}
 800b6e6:	bf00      	nop
 800b6e8:	20005014 	.word	0x20005014

0800b6ec <OLED_WR_Byte>:

void OLED_WR_Byte(uint8_t dat,uint8_t cmd)
{	
 800b6ec:	b580      	push	{r7, lr}
 800b6ee:	b084      	sub	sp, #16
 800b6f0:	af00      	add	r7, sp, #0
 800b6f2:	4603      	mov	r3, r0
 800b6f4:	460a      	mov	r2, r1
 800b6f6:	71fb      	strb	r3, [r7, #7]
 800b6f8:	4613      	mov	r3, r2
 800b6fa:	71bb      	strb	r3, [r7, #6]
	uint8_t i;			  
	if(cmd)
 800b6fc:	79bb      	ldrb	r3, [r7, #6]
 800b6fe:	2b00      	cmp	r3, #0
 800b700:	d006      	beq.n	800b710 <OLED_WR_Byte+0x24>
	  OLED_RS_Set();
 800b702:	2201      	movs	r2, #1
 800b704:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b708:	481c      	ldr	r0, [pc, #112]	; (800b77c <OLED_WR_Byte+0x90>)
 800b70a:	f7f9 fa1f 	bl	8004b4c <HAL_GPIO_WritePin>
 800b70e:	e005      	b.n	800b71c <OLED_WR_Byte+0x30>
	else 
	  OLED_RS_Clr();		  
 800b710:	2200      	movs	r2, #0
 800b712:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b716:	4819      	ldr	r0, [pc, #100]	; (800b77c <OLED_WR_Byte+0x90>)
 800b718:	f7f9 fa18 	bl	8004b4c <HAL_GPIO_WritePin>
	for(i=0;i<8;i++)
 800b71c:	2300      	movs	r3, #0
 800b71e:	73fb      	strb	r3, [r7, #15]
 800b720:	e01e      	b.n	800b760 <OLED_WR_Byte+0x74>
	{			  
		OLED_SCLK_Clr();
 800b722:	2200      	movs	r2, #0
 800b724:	2120      	movs	r1, #32
 800b726:	4815      	ldr	r0, [pc, #84]	; (800b77c <OLED_WR_Byte+0x90>)
 800b728:	f7f9 fa10 	bl	8004b4c <HAL_GPIO_WritePin>
		if(dat&0x80)
 800b72c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b730:	2b00      	cmp	r3, #0
 800b732:	da05      	bge.n	800b740 <OLED_WR_Byte+0x54>
		   OLED_SDIN_Set();
 800b734:	2201      	movs	r2, #1
 800b736:	2140      	movs	r1, #64	; 0x40
 800b738:	4810      	ldr	r0, [pc, #64]	; (800b77c <OLED_WR_Byte+0x90>)
 800b73a:	f7f9 fa07 	bl	8004b4c <HAL_GPIO_WritePin>
 800b73e:	e004      	b.n	800b74a <OLED_WR_Byte+0x5e>
		else 
		   OLED_SDIN_Clr();
 800b740:	2200      	movs	r2, #0
 800b742:	2140      	movs	r1, #64	; 0x40
 800b744:	480d      	ldr	r0, [pc, #52]	; (800b77c <OLED_WR_Byte+0x90>)
 800b746:	f7f9 fa01 	bl	8004b4c <HAL_GPIO_WritePin>
		OLED_SCLK_Set();
 800b74a:	2201      	movs	r2, #1
 800b74c:	2120      	movs	r1, #32
 800b74e:	480b      	ldr	r0, [pc, #44]	; (800b77c <OLED_WR_Byte+0x90>)
 800b750:	f7f9 f9fc 	bl	8004b4c <HAL_GPIO_WritePin>
		dat<<=1;   
 800b754:	79fb      	ldrb	r3, [r7, #7]
 800b756:	005b      	lsls	r3, r3, #1
 800b758:	71fb      	strb	r3, [r7, #7]
	for(i=0;i<8;i++)
 800b75a:	7bfb      	ldrb	r3, [r7, #15]
 800b75c:	3301      	adds	r3, #1
 800b75e:	73fb      	strb	r3, [r7, #15]
 800b760:	7bfb      	ldrb	r3, [r7, #15]
 800b762:	2b07      	cmp	r3, #7
 800b764:	d9dd      	bls.n	800b722 <OLED_WR_Byte+0x36>
	}				 		  
	OLED_RS_Set();   	  
 800b766:	2201      	movs	r2, #1
 800b768:	f44f 7180 	mov.w	r1, #256	; 0x100
 800b76c:	4803      	ldr	r0, [pc, #12]	; (800b77c <OLED_WR_Byte+0x90>)
 800b76e:	f7f9 f9ed 	bl	8004b4c <HAL_GPIO_WritePin>
} 
 800b772:	bf00      	nop
 800b774:	3710      	adds	r7, #16
 800b776:	46bd      	mov	sp, r7
 800b778:	bd80      	pop	{r7, pc}
 800b77a:	bf00      	nop
 800b77c:	40021000 	.word	0x40021000

0800b780 <OLED_Clear>:

/**************************************************************************
Clear OLED
**************************************************************************/  
void OLED_Clear(void)  
{  
 800b780:	b580      	push	{r7, lr}
 800b782:	b082      	sub	sp, #8
 800b784:	af00      	add	r7, sp, #0
	uint8_t i,n;  
	for(i=0;i<8;i++)for(n=0;n<128;n++)OLED_GRAM[n][i]=0X00;  
 800b786:	2300      	movs	r3, #0
 800b788:	71fb      	strb	r3, [r7, #7]
 800b78a:	e014      	b.n	800b7b6 <OLED_Clear+0x36>
 800b78c:	2300      	movs	r3, #0
 800b78e:	71bb      	strb	r3, [r7, #6]
 800b790:	e00a      	b.n	800b7a8 <OLED_Clear+0x28>
 800b792:	79ba      	ldrb	r2, [r7, #6]
 800b794:	79fb      	ldrb	r3, [r7, #7]
 800b796:	490c      	ldr	r1, [pc, #48]	; (800b7c8 <OLED_Clear+0x48>)
 800b798:	00d2      	lsls	r2, r2, #3
 800b79a:	440a      	add	r2, r1
 800b79c:	4413      	add	r3, r2
 800b79e:	2200      	movs	r2, #0
 800b7a0:	701a      	strb	r2, [r3, #0]
 800b7a2:	79bb      	ldrb	r3, [r7, #6]
 800b7a4:	3301      	adds	r3, #1
 800b7a6:	71bb      	strb	r3, [r7, #6]
 800b7a8:	f997 3006 	ldrsb.w	r3, [r7, #6]
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	daf0      	bge.n	800b792 <OLED_Clear+0x12>
 800b7b0:	79fb      	ldrb	r3, [r7, #7]
 800b7b2:	3301      	adds	r3, #1
 800b7b4:	71fb      	strb	r3, [r7, #7]
 800b7b6:	79fb      	ldrb	r3, [r7, #7]
 800b7b8:	2b07      	cmp	r3, #7
 800b7ba:	d9e7      	bls.n	800b78c <OLED_Clear+0xc>
	OLED_Refresh_Gram();//Refresh
 800b7bc:	f7ff ff5e 	bl	800b67c <OLED_Refresh_Gram>
}
 800b7c0:	bf00      	nop
 800b7c2:	3708      	adds	r7, #8
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}
 800b7c8:	20005014 	.word	0x20005014

0800b7cc <OLED_DrawPoint>:

/**************************************************************************
Draw A Point
**************************************************************************/ 
void OLED_DrawPoint(uint8_t x,uint8_t y,uint8_t t)
{
 800b7cc:	b480      	push	{r7}
 800b7ce:	b085      	sub	sp, #20
 800b7d0:	af00      	add	r7, sp, #0
 800b7d2:	4603      	mov	r3, r0
 800b7d4:	71fb      	strb	r3, [r7, #7]
 800b7d6:	460b      	mov	r3, r1
 800b7d8:	71bb      	strb	r3, [r7, #6]
 800b7da:	4613      	mov	r3, r2
 800b7dc:	717b      	strb	r3, [r7, #5]
	uint8_t pos,bx,temp=0;
 800b7de:	2300      	movs	r3, #0
 800b7e0:	73fb      	strb	r3, [r7, #15]
	if(x>127||y>63)return;//Out of reach
 800b7e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800b7e6:	2b00      	cmp	r3, #0
 800b7e8:	db41      	blt.n	800b86e <OLED_DrawPoint+0xa2>
 800b7ea:	79bb      	ldrb	r3, [r7, #6]
 800b7ec:	2b3f      	cmp	r3, #63	; 0x3f
 800b7ee:	d83e      	bhi.n	800b86e <OLED_DrawPoint+0xa2>
	pos=7-y/8;
 800b7f0:	79bb      	ldrb	r3, [r7, #6]
 800b7f2:	08db      	lsrs	r3, r3, #3
 800b7f4:	b2db      	uxtb	r3, r3
 800b7f6:	f1c3 0307 	rsb	r3, r3, #7
 800b7fa:	73bb      	strb	r3, [r7, #14]
	bx=y%8;
 800b7fc:	79bb      	ldrb	r3, [r7, #6]
 800b7fe:	f003 0307 	and.w	r3, r3, #7
 800b802:	737b      	strb	r3, [r7, #13]
	temp=1<<(7-bx);
 800b804:	7b7b      	ldrb	r3, [r7, #13]
 800b806:	f1c3 0307 	rsb	r3, r3, #7
 800b80a:	2201      	movs	r2, #1
 800b80c:	fa02 f303 	lsl.w	r3, r2, r3
 800b810:	73fb      	strb	r3, [r7, #15]
	if(t)OLED_GRAM[x][pos]|=temp;
 800b812:	797b      	ldrb	r3, [r7, #5]
 800b814:	2b00      	cmp	r3, #0
 800b816:	d012      	beq.n	800b83e <OLED_DrawPoint+0x72>
 800b818:	79fa      	ldrb	r2, [r7, #7]
 800b81a:	7bbb      	ldrb	r3, [r7, #14]
 800b81c:	4917      	ldr	r1, [pc, #92]	; (800b87c <OLED_DrawPoint+0xb0>)
 800b81e:	00d2      	lsls	r2, r2, #3
 800b820:	440a      	add	r2, r1
 800b822:	4413      	add	r3, r2
 800b824:	7818      	ldrb	r0, [r3, #0]
 800b826:	79fa      	ldrb	r2, [r7, #7]
 800b828:	7bbb      	ldrb	r3, [r7, #14]
 800b82a:	7bf9      	ldrb	r1, [r7, #15]
 800b82c:	4301      	orrs	r1, r0
 800b82e:	b2c8      	uxtb	r0, r1
 800b830:	4912      	ldr	r1, [pc, #72]	; (800b87c <OLED_DrawPoint+0xb0>)
 800b832:	00d2      	lsls	r2, r2, #3
 800b834:	440a      	add	r2, r1
 800b836:	4413      	add	r3, r2
 800b838:	4602      	mov	r2, r0
 800b83a:	701a      	strb	r2, [r3, #0]
 800b83c:	e018      	b.n	800b870 <OLED_DrawPoint+0xa4>
	else OLED_GRAM[x][pos]&=~temp;	    
 800b83e:	79fa      	ldrb	r2, [r7, #7]
 800b840:	7bbb      	ldrb	r3, [r7, #14]
 800b842:	490e      	ldr	r1, [pc, #56]	; (800b87c <OLED_DrawPoint+0xb0>)
 800b844:	00d2      	lsls	r2, r2, #3
 800b846:	440a      	add	r2, r1
 800b848:	4413      	add	r3, r2
 800b84a:	781b      	ldrb	r3, [r3, #0]
 800b84c:	b25a      	sxtb	r2, r3
 800b84e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b852:	43db      	mvns	r3, r3
 800b854:	b25b      	sxtb	r3, r3
 800b856:	4013      	ands	r3, r2
 800b858:	b259      	sxtb	r1, r3
 800b85a:	79fa      	ldrb	r2, [r7, #7]
 800b85c:	7bbb      	ldrb	r3, [r7, #14]
 800b85e:	b2c8      	uxtb	r0, r1
 800b860:	4906      	ldr	r1, [pc, #24]	; (800b87c <OLED_DrawPoint+0xb0>)
 800b862:	00d2      	lsls	r2, r2, #3
 800b864:	440a      	add	r2, r1
 800b866:	4413      	add	r3, r2
 800b868:	4602      	mov	r2, r0
 800b86a:	701a      	strb	r2, [r3, #0]
 800b86c:	e000      	b.n	800b870 <OLED_DrawPoint+0xa4>
	if(x>127||y>63)return;//Out of reach
 800b86e:	bf00      	nop
}
 800b870:	3714      	adds	r7, #20
 800b872:	46bd      	mov	sp, r7
 800b874:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b878:	4770      	bx	lr
 800b87a:	bf00      	nop
 800b87c:	20005014 	.word	0x20005014

0800b880 <OLED_ShowChar>:
/**************************************************************************
Show Char
**************************************************************************/
void OLED_ShowChar(uint8_t x,uint8_t y,uint8_t chr,uint8_t size,uint8_t mode)
{      			    
 800b880:	b590      	push	{r4, r7, lr}
 800b882:	b085      	sub	sp, #20
 800b884:	af00      	add	r7, sp, #0
 800b886:	4604      	mov	r4, r0
 800b888:	4608      	mov	r0, r1
 800b88a:	4611      	mov	r1, r2
 800b88c:	461a      	mov	r2, r3
 800b88e:	4623      	mov	r3, r4
 800b890:	71fb      	strb	r3, [r7, #7]
 800b892:	4603      	mov	r3, r0
 800b894:	71bb      	strb	r3, [r7, #6]
 800b896:	460b      	mov	r3, r1
 800b898:	717b      	strb	r3, [r7, #5]
 800b89a:	4613      	mov	r3, r2
 800b89c:	713b      	strb	r3, [r7, #4]
	uint8_t temp,t,t1;
	uint8_t y0=y;
 800b89e:	79bb      	ldrb	r3, [r7, #6]
 800b8a0:	733b      	strb	r3, [r7, #12]
	chr=chr-' ';				   
 800b8a2:	797b      	ldrb	r3, [r7, #5]
 800b8a4:	3b20      	subs	r3, #32
 800b8a6:	717b      	strb	r3, [r7, #5]
    for(t=0;t<size;t++)
 800b8a8:	2300      	movs	r3, #0
 800b8aa:	73bb      	strb	r3, [r7, #14]
 800b8ac:	e04d      	b.n	800b94a <OLED_ShowChar+0xca>
    {   
		if(size==12)temp=oled_asc2_1206[chr][t];  //1206 Size
 800b8ae:	793b      	ldrb	r3, [r7, #4]
 800b8b0:	2b0c      	cmp	r3, #12
 800b8b2:	d10b      	bne.n	800b8cc <OLED_ShowChar+0x4c>
 800b8b4:	797a      	ldrb	r2, [r7, #5]
 800b8b6:	7bb9      	ldrb	r1, [r7, #14]
 800b8b8:	4828      	ldr	r0, [pc, #160]	; (800b95c <OLED_ShowChar+0xdc>)
 800b8ba:	4613      	mov	r3, r2
 800b8bc:	005b      	lsls	r3, r3, #1
 800b8be:	4413      	add	r3, r2
 800b8c0:	009b      	lsls	r3, r3, #2
 800b8c2:	4403      	add	r3, r0
 800b8c4:	440b      	add	r3, r1
 800b8c6:	781b      	ldrb	r3, [r3, #0]
 800b8c8:	73fb      	strb	r3, [r7, #15]
 800b8ca:	e007      	b.n	800b8dc <OLED_ShowChar+0x5c>
		else temp=oled_asc2_1608[chr][t];		 //1608 Size	                          
 800b8cc:	797a      	ldrb	r2, [r7, #5]
 800b8ce:	7bbb      	ldrb	r3, [r7, #14]
 800b8d0:	4923      	ldr	r1, [pc, #140]	; (800b960 <OLED_ShowChar+0xe0>)
 800b8d2:	0112      	lsls	r2, r2, #4
 800b8d4:	440a      	add	r2, r1
 800b8d6:	4413      	add	r3, r2
 800b8d8:	781b      	ldrb	r3, [r3, #0]
 800b8da:	73fb      	strb	r3, [r7, #15]
        for(t1=0;t1<8;t1++)
 800b8dc:	2300      	movs	r3, #0
 800b8de:	737b      	strb	r3, [r7, #13]
 800b8e0:	e02d      	b.n	800b93e <OLED_ShowChar+0xbe>
		{
			if(temp&0x80)OLED_DrawPoint(x,y,mode);
 800b8e2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b8e6:	2b00      	cmp	r3, #0
 800b8e8:	da07      	bge.n	800b8fa <OLED_ShowChar+0x7a>
 800b8ea:	f897 2020 	ldrb.w	r2, [r7, #32]
 800b8ee:	79b9      	ldrb	r1, [r7, #6]
 800b8f0:	79fb      	ldrb	r3, [r7, #7]
 800b8f2:	4618      	mov	r0, r3
 800b8f4:	f7ff ff6a 	bl	800b7cc <OLED_DrawPoint>
 800b8f8:	e00c      	b.n	800b914 <OLED_ShowChar+0x94>
			else OLED_DrawPoint(x,y,!mode);
 800b8fa:	f897 3020 	ldrb.w	r3, [r7, #32]
 800b8fe:	2b00      	cmp	r3, #0
 800b900:	bf0c      	ite	eq
 800b902:	2301      	moveq	r3, #1
 800b904:	2300      	movne	r3, #0
 800b906:	b2db      	uxtb	r3, r3
 800b908:	461a      	mov	r2, r3
 800b90a:	79b9      	ldrb	r1, [r7, #6]
 800b90c:	79fb      	ldrb	r3, [r7, #7]
 800b90e:	4618      	mov	r0, r3
 800b910:	f7ff ff5c 	bl	800b7cc <OLED_DrawPoint>
			temp<<=1;
 800b914:	7bfb      	ldrb	r3, [r7, #15]
 800b916:	005b      	lsls	r3, r3, #1
 800b918:	73fb      	strb	r3, [r7, #15]
			y++;
 800b91a:	79bb      	ldrb	r3, [r7, #6]
 800b91c:	3301      	adds	r3, #1
 800b91e:	71bb      	strb	r3, [r7, #6]
			if((y-y0)==size)
 800b920:	79ba      	ldrb	r2, [r7, #6]
 800b922:	7b3b      	ldrb	r3, [r7, #12]
 800b924:	1ad2      	subs	r2, r2, r3
 800b926:	793b      	ldrb	r3, [r7, #4]
 800b928:	429a      	cmp	r2, r3
 800b92a:	d105      	bne.n	800b938 <OLED_ShowChar+0xb8>
			{
				y=y0;
 800b92c:	7b3b      	ldrb	r3, [r7, #12]
 800b92e:	71bb      	strb	r3, [r7, #6]
				x++;
 800b930:	79fb      	ldrb	r3, [r7, #7]
 800b932:	3301      	adds	r3, #1
 800b934:	71fb      	strb	r3, [r7, #7]
				break;
 800b936:	e005      	b.n	800b944 <OLED_ShowChar+0xc4>
        for(t1=0;t1<8;t1++)
 800b938:	7b7b      	ldrb	r3, [r7, #13]
 800b93a:	3301      	adds	r3, #1
 800b93c:	737b      	strb	r3, [r7, #13]
 800b93e:	7b7b      	ldrb	r3, [r7, #13]
 800b940:	2b07      	cmp	r3, #7
 800b942:	d9ce      	bls.n	800b8e2 <OLED_ShowChar+0x62>
    for(t=0;t<size;t++)
 800b944:	7bbb      	ldrb	r3, [r7, #14]
 800b946:	3301      	adds	r3, #1
 800b948:	73bb      	strb	r3, [r7, #14]
 800b94a:	7bba      	ldrb	r2, [r7, #14]
 800b94c:	793b      	ldrb	r3, [r7, #4]
 800b94e:	429a      	cmp	r2, r3
 800b950:	d3ad      	bcc.n	800b8ae <OLED_ShowChar+0x2e>
			}
		}  	 
    }          
}
 800b952:	bf00      	nop
 800b954:	bf00      	nop
 800b956:	3714      	adds	r7, #20
 800b958:	46bd      	mov	sp, r7
 800b95a:	bd90      	pop	{r4, r7, pc}
 800b95c:	0800ec00 	.word	0x0800ec00
 800b960:	0800f074 	.word	0x0800f074

0800b964 <OLED_ShowString>:
} 
/**************************************************************************
Show The String
**************************************************************************/
void OLED_ShowString(uint8_t x,uint8_t y,const uint8_t *p)
{
 800b964:	b580      	push	{r7, lr}
 800b966:	b084      	sub	sp, #16
 800b968:	af02      	add	r7, sp, #8
 800b96a:	4603      	mov	r3, r0
 800b96c:	603a      	str	r2, [r7, #0]
 800b96e:	71fb      	strb	r3, [r7, #7]
 800b970:	460b      	mov	r3, r1
 800b972:	71bb      	strb	r3, [r7, #6]
#define MAX_CHAR_POSX 122
#define MAX_CHAR_POSY 58          
    while(*p!='\0')
 800b974:	e01f      	b.n	800b9b6 <OLED_ShowString+0x52>
    {       
        if(x>MAX_CHAR_POSX){x=0;y+=16;}
 800b976:	79fb      	ldrb	r3, [r7, #7]
 800b978:	2b7a      	cmp	r3, #122	; 0x7a
 800b97a:	d904      	bls.n	800b986 <OLED_ShowString+0x22>
 800b97c:	2300      	movs	r3, #0
 800b97e:	71fb      	strb	r3, [r7, #7]
 800b980:	79bb      	ldrb	r3, [r7, #6]
 800b982:	3310      	adds	r3, #16
 800b984:	71bb      	strb	r3, [r7, #6]
        if(y>MAX_CHAR_POSY){y=x=0;OLED_Clear();}
 800b986:	79bb      	ldrb	r3, [r7, #6]
 800b988:	2b3a      	cmp	r3, #58	; 0x3a
 800b98a:	d905      	bls.n	800b998 <OLED_ShowString+0x34>
 800b98c:	2300      	movs	r3, #0
 800b98e:	71fb      	strb	r3, [r7, #7]
 800b990:	79fb      	ldrb	r3, [r7, #7]
 800b992:	71bb      	strb	r3, [r7, #6]
 800b994:	f7ff fef4 	bl	800b780 <OLED_Clear>
        OLED_ShowChar(x,y,*p,12,1);	 
 800b998:	683b      	ldr	r3, [r7, #0]
 800b99a:	781a      	ldrb	r2, [r3, #0]
 800b99c:	79b9      	ldrb	r1, [r7, #6]
 800b99e:	79f8      	ldrb	r0, [r7, #7]
 800b9a0:	2301      	movs	r3, #1
 800b9a2:	9300      	str	r3, [sp, #0]
 800b9a4:	230c      	movs	r3, #12
 800b9a6:	f7ff ff6b 	bl	800b880 <OLED_ShowChar>
        x+=8;
 800b9aa:	79fb      	ldrb	r3, [r7, #7]
 800b9ac:	3308      	adds	r3, #8
 800b9ae:	71fb      	strb	r3, [r7, #7]
        p++;
 800b9b0:	683b      	ldr	r3, [r7, #0]
 800b9b2:	3301      	adds	r3, #1
 800b9b4:	603b      	str	r3, [r7, #0]
    while(*p!='\0')
 800b9b6:	683b      	ldr	r3, [r7, #0]
 800b9b8:	781b      	ldrb	r3, [r3, #0]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d1db      	bne.n	800b976 <OLED_ShowString+0x12>
    }  
}	 
 800b9be:	bf00      	nop
 800b9c0:	bf00      	nop
 800b9c2:	3708      	adds	r7, #8
 800b9c4:	46bd      	mov	sp, r7
 800b9c6:	bd80      	pop	{r7, pc}

0800b9c8 <OLED_Init>:

void OLED_Init(void)
{
 800b9c8:	b580      	push	{r7, lr}
 800b9ca:	af00      	add	r7, sp, #0
	HAL_PWR_EnableBkUpAccess(); //Enable access to the RTC and Backup Register
 800b9cc:	f7fa f898 	bl	8005b00 <HAL_PWR_EnableBkUpAccess>
	__HAL_RCC_LSE_CONFIG(RCC_LSE_OFF); //turn OFF the LSE oscillator, LSERDY flag goes low after 6 LSE oscillator clock cycles.
 800b9d0:	4b41      	ldr	r3, [pc, #260]	; (800bad8 <OLED_Init+0x110>)
 800b9d2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9d4:	4a40      	ldr	r2, [pc, #256]	; (800bad8 <OLED_Init+0x110>)
 800b9d6:	f023 0301 	bic.w	r3, r3, #1
 800b9da:	6713      	str	r3, [r2, #112]	; 0x70
 800b9dc:	4b3e      	ldr	r3, [pc, #248]	; (800bad8 <OLED_Init+0x110>)
 800b9de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800b9e0:	4a3d      	ldr	r2, [pc, #244]	; (800bad8 <OLED_Init+0x110>)
 800b9e2:	f023 0304 	bic.w	r3, r3, #4
 800b9e6:	6713      	str	r3, [r2, #112]	; 0x70
	                                   //LSE oscillator switch off to let PC13 PC14 PC15 be IO
	
	
	HAL_PWR_DisableBkUpAccess();
 800b9e8:	f7fa f89e 	bl	8005b28 <HAL_PWR_DisableBkUpAccess>
	
	OLED_RST_Clr();
 800b9ec:	2200      	movs	r2, #0
 800b9ee:	2180      	movs	r1, #128	; 0x80
 800b9f0:	483a      	ldr	r0, [pc, #232]	; (800badc <OLED_Init+0x114>)
 800b9f2:	f7f9 f8ab 	bl	8004b4c <HAL_GPIO_WritePin>
	HAL_Delay(100);
 800b9f6:	2064      	movs	r0, #100	; 0x64
 800b9f8:	f7f8 fb12 	bl	8004020 <HAL_Delay>
	OLED_RST_Set();
 800b9fc:	2201      	movs	r2, #1
 800b9fe:	2180      	movs	r1, #128	; 0x80
 800ba00:	4836      	ldr	r0, [pc, #216]	; (800badc <OLED_Init+0x114>)
 800ba02:	f7f9 f8a3 	bl	8004b4c <HAL_GPIO_WritePin>
	
	OLED_WR_Byte(0xAE,OLED_CMD); //Off Display
 800ba06:	2100      	movs	r1, #0
 800ba08:	20ae      	movs	r0, #174	; 0xae
 800ba0a:	f7ff fe6f 	bl	800b6ec <OLED_WR_Byte>
	
	OLED_WR_Byte(0xD5,OLED_CMD); //Set Oscillator Division
 800ba0e:	2100      	movs	r1, #0
 800ba10:	20d5      	movs	r0, #213	; 0xd5
 800ba12:	f7ff fe6b 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(80,OLED_CMD);    //[3:0]: divide ratio of the DCLK, [7:4], set the oscillator frequency. Reset
 800ba16:	2100      	movs	r1, #0
 800ba18:	2050      	movs	r0, #80	; 0x50
 800ba1a:	f7ff fe67 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xA8,OLED_CMD); //multiplex ratio
 800ba1e:	2100      	movs	r1, #0
 800ba20:	20a8      	movs	r0, #168	; 0xa8
 800ba22:	f7ff fe63 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0X3F,OLED_CMD); //duty = 0X3F(1/64) 
 800ba26:	2100      	movs	r1, #0
 800ba28:	203f      	movs	r0, #63	; 0x3f
 800ba2a:	f7ff fe5f 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xD3,OLED_CMD);  //set display offset
 800ba2e:	2100      	movs	r1, #0
 800ba30:	20d3      	movs	r0, #211	; 0xd3
 800ba32:	f7ff fe5b 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0X00,OLED_CMD); //0
 800ba36:	2100      	movs	r1, #0
 800ba38:	2000      	movs	r0, #0
 800ba3a:	f7ff fe57 	bl	800b6ec <OLED_WR_Byte>

	OLED_WR_Byte(0x40,OLED_CMD); //set display start line [5:0]- from 0-63. RESET
 800ba3e:	2100      	movs	r1, #0
 800ba40:	2040      	movs	r0, #64	; 0x40
 800ba42:	f7ff fe53 	bl	800b6ec <OLED_WR_Byte>
													
	OLED_WR_Byte(0x8D,OLED_CMD); //Set charge pump
 800ba46:	2100      	movs	r1, #0
 800ba48:	208d      	movs	r0, #141	; 0x8d
 800ba4a:	f7ff fe4f 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0x14,OLED_CMD); //Enable Charge Pump
 800ba4e:	2100      	movs	r1, #0
 800ba50:	2014      	movs	r0, #20
 800ba52:	f7ff fe4b 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0x20,OLED_CMD); //Set Memory Addressing Mode
 800ba56:	2100      	movs	r1, #0
 800ba58:	2020      	movs	r0, #32
 800ba5a:	f7ff fe47 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0x02,OLED_CMD); //Page Addressing Mode (RESET)
 800ba5e:	2100      	movs	r1, #0
 800ba60:	2002      	movs	r0, #2
 800ba62:	f7ff fe43 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xA1,OLED_CMD); //Set segment remap, bit0:0,0->0;1,0->127;
 800ba66:	2100      	movs	r1, #0
 800ba68:	20a1      	movs	r0, #161	; 0xa1
 800ba6a:	f7ff fe3f 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xC0,OLED_CMD); //Set COM Output Scan Direction
 800ba6e:	2100      	movs	r1, #0
 800ba70:	20c0      	movs	r0, #192	; 0xc0
 800ba72:	f7ff fe3b 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xDA,OLED_CMD); //Set COM Pins
 800ba76:	2100      	movs	r1, #0
 800ba78:	20da      	movs	r0, #218	; 0xda
 800ba7a:	f7ff fe37 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0x12,OLED_CMD); //[5:4] setting
 800ba7e:	2100      	movs	r1, #0
 800ba80:	2012      	movs	r0, #18
 800ba82:	f7ff fe33 	bl	800b6ec <OLED_WR_Byte>
	 
	OLED_WR_Byte(0x81,OLED_CMD); //Contrast Control
 800ba86:	2100      	movs	r1, #0
 800ba88:	2081      	movs	r0, #129	; 0x81
 800ba8a:	f7ff fe2f 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xEF,OLED_CMD); //1~256; Default: 0X7F
 800ba8e:	2100      	movs	r1, #0
 800ba90:	20ef      	movs	r0, #239	; 0xef
 800ba92:	f7ff fe2b 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xD9,OLED_CMD); //Set Pre-charge Period
 800ba96:	2100      	movs	r1, #0
 800ba98:	20d9      	movs	r0, #217	; 0xd9
 800ba9a:	f7ff fe27 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xf1,OLED_CMD); //[3:0],PHASE 1;[7:4],PHASE 2;
 800ba9e:	2100      	movs	r1, #0
 800baa0:	20f1      	movs	r0, #241	; 0xf1
 800baa2:	f7ff fe23 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xDB,OLED_CMD); //Set VCOMH
 800baa6:	2100      	movs	r1, #0
 800baa8:	20db      	movs	r0, #219	; 0xdb
 800baaa:	f7ff fe1f 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0x30,OLED_CMD);  //[6:4] 000,0.65*vcc;001,0.77*vcc;011,0.83*vcc;
 800baae:	2100      	movs	r1, #0
 800bab0:	2030      	movs	r0, #48	; 0x30
 800bab2:	f7ff fe1b 	bl	800b6ec <OLED_WR_Byte>

	OLED_WR_Byte(0xA4,OLED_CMD); //Enable display outputs according to the GDDRAM contents
 800bab6:	2100      	movs	r1, #0
 800bab8:	20a4      	movs	r0, #164	; 0xa4
 800baba:	f7ff fe17 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xA6,OLED_CMD); //Set normal display   						   
 800babe:	2100      	movs	r1, #0
 800bac0:	20a6      	movs	r0, #166	; 0xa6
 800bac2:	f7ff fe13 	bl	800b6ec <OLED_WR_Byte>
	OLED_WR_Byte(0xAF,OLED_CMD); //DISPLAY ON	 
 800bac6:	2100      	movs	r1, #0
 800bac8:	20af      	movs	r0, #175	; 0xaf
 800baca:	f7ff fe0f 	bl	800b6ec <OLED_WR_Byte>
	OLED_Clear(); 
 800bace:	f7ff fe57 	bl	800b780 <OLED_Clear>
 800bad2:	bf00      	nop
 800bad4:	bd80      	pop	{r7, pc}
 800bad6:	bf00      	nop
 800bad8:	40023800 	.word	0x40023800
 800badc:	40021000 	.word	0x40021000

0800bae0 <__errno>:
 800bae0:	4b01      	ldr	r3, [pc, #4]	; (800bae8 <__errno+0x8>)
 800bae2:	6818      	ldr	r0, [r3, #0]
 800bae4:	4770      	bx	lr
 800bae6:	bf00      	nop
 800bae8:	20000034 	.word	0x20000034

0800baec <std>:
 800baec:	2300      	movs	r3, #0
 800baee:	b510      	push	{r4, lr}
 800baf0:	4604      	mov	r4, r0
 800baf2:	e9c0 3300 	strd	r3, r3, [r0]
 800baf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bafa:	6083      	str	r3, [r0, #8]
 800bafc:	8181      	strh	r1, [r0, #12]
 800bafe:	6643      	str	r3, [r0, #100]	; 0x64
 800bb00:	81c2      	strh	r2, [r0, #14]
 800bb02:	6183      	str	r3, [r0, #24]
 800bb04:	4619      	mov	r1, r3
 800bb06:	2208      	movs	r2, #8
 800bb08:	305c      	adds	r0, #92	; 0x5c
 800bb0a:	f000 f91a 	bl	800bd42 <memset>
 800bb0e:	4b05      	ldr	r3, [pc, #20]	; (800bb24 <std+0x38>)
 800bb10:	6263      	str	r3, [r4, #36]	; 0x24
 800bb12:	4b05      	ldr	r3, [pc, #20]	; (800bb28 <std+0x3c>)
 800bb14:	62a3      	str	r3, [r4, #40]	; 0x28
 800bb16:	4b05      	ldr	r3, [pc, #20]	; (800bb2c <std+0x40>)
 800bb18:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bb1a:	4b05      	ldr	r3, [pc, #20]	; (800bb30 <std+0x44>)
 800bb1c:	6224      	str	r4, [r4, #32]
 800bb1e:	6323      	str	r3, [r4, #48]	; 0x30
 800bb20:	bd10      	pop	{r4, pc}
 800bb22:	bf00      	nop
 800bb24:	0800c885 	.word	0x0800c885
 800bb28:	0800c8a7 	.word	0x0800c8a7
 800bb2c:	0800c8df 	.word	0x0800c8df
 800bb30:	0800c903 	.word	0x0800c903

0800bb34 <_cleanup_r>:
 800bb34:	4901      	ldr	r1, [pc, #4]	; (800bb3c <_cleanup_r+0x8>)
 800bb36:	f000 b8af 	b.w	800bc98 <_fwalk_reent>
 800bb3a:	bf00      	nop
 800bb3c:	0800d751 	.word	0x0800d751

0800bb40 <__sfmoreglue>:
 800bb40:	b570      	push	{r4, r5, r6, lr}
 800bb42:	2268      	movs	r2, #104	; 0x68
 800bb44:	1e4d      	subs	r5, r1, #1
 800bb46:	4355      	muls	r5, r2
 800bb48:	460e      	mov	r6, r1
 800bb4a:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb4e:	f000 f921 	bl	800bd94 <_malloc_r>
 800bb52:	4604      	mov	r4, r0
 800bb54:	b140      	cbz	r0, 800bb68 <__sfmoreglue+0x28>
 800bb56:	2100      	movs	r1, #0
 800bb58:	e9c0 1600 	strd	r1, r6, [r0]
 800bb5c:	300c      	adds	r0, #12
 800bb5e:	60a0      	str	r0, [r4, #8]
 800bb60:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb64:	f000 f8ed 	bl	800bd42 <memset>
 800bb68:	4620      	mov	r0, r4
 800bb6a:	bd70      	pop	{r4, r5, r6, pc}

0800bb6c <__sfp_lock_acquire>:
 800bb6c:	4801      	ldr	r0, [pc, #4]	; (800bb74 <__sfp_lock_acquire+0x8>)
 800bb6e:	f000 b8d8 	b.w	800bd22 <__retarget_lock_acquire_recursive>
 800bb72:	bf00      	nop
 800bb74:	20005415 	.word	0x20005415

0800bb78 <__sfp_lock_release>:
 800bb78:	4801      	ldr	r0, [pc, #4]	; (800bb80 <__sfp_lock_release+0x8>)
 800bb7a:	f000 b8d3 	b.w	800bd24 <__retarget_lock_release_recursive>
 800bb7e:	bf00      	nop
 800bb80:	20005415 	.word	0x20005415

0800bb84 <__sinit_lock_acquire>:
 800bb84:	4801      	ldr	r0, [pc, #4]	; (800bb8c <__sinit_lock_acquire+0x8>)
 800bb86:	f000 b8cc 	b.w	800bd22 <__retarget_lock_acquire_recursive>
 800bb8a:	bf00      	nop
 800bb8c:	20005416 	.word	0x20005416

0800bb90 <__sinit_lock_release>:
 800bb90:	4801      	ldr	r0, [pc, #4]	; (800bb98 <__sinit_lock_release+0x8>)
 800bb92:	f000 b8c7 	b.w	800bd24 <__retarget_lock_release_recursive>
 800bb96:	bf00      	nop
 800bb98:	20005416 	.word	0x20005416

0800bb9c <__sinit>:
 800bb9c:	b510      	push	{r4, lr}
 800bb9e:	4604      	mov	r4, r0
 800bba0:	f7ff fff0 	bl	800bb84 <__sinit_lock_acquire>
 800bba4:	69a3      	ldr	r3, [r4, #24]
 800bba6:	b11b      	cbz	r3, 800bbb0 <__sinit+0x14>
 800bba8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bbac:	f7ff bff0 	b.w	800bb90 <__sinit_lock_release>
 800bbb0:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bbb4:	6523      	str	r3, [r4, #80]	; 0x50
 800bbb6:	4b13      	ldr	r3, [pc, #76]	; (800bc04 <__sinit+0x68>)
 800bbb8:	4a13      	ldr	r2, [pc, #76]	; (800bc08 <__sinit+0x6c>)
 800bbba:	681b      	ldr	r3, [r3, #0]
 800bbbc:	62a2      	str	r2, [r4, #40]	; 0x28
 800bbbe:	42a3      	cmp	r3, r4
 800bbc0:	bf04      	itt	eq
 800bbc2:	2301      	moveq	r3, #1
 800bbc4:	61a3      	streq	r3, [r4, #24]
 800bbc6:	4620      	mov	r0, r4
 800bbc8:	f000 f820 	bl	800bc0c <__sfp>
 800bbcc:	6060      	str	r0, [r4, #4]
 800bbce:	4620      	mov	r0, r4
 800bbd0:	f000 f81c 	bl	800bc0c <__sfp>
 800bbd4:	60a0      	str	r0, [r4, #8]
 800bbd6:	4620      	mov	r0, r4
 800bbd8:	f000 f818 	bl	800bc0c <__sfp>
 800bbdc:	2200      	movs	r2, #0
 800bbde:	60e0      	str	r0, [r4, #12]
 800bbe0:	2104      	movs	r1, #4
 800bbe2:	6860      	ldr	r0, [r4, #4]
 800bbe4:	f7ff ff82 	bl	800baec <std>
 800bbe8:	68a0      	ldr	r0, [r4, #8]
 800bbea:	2201      	movs	r2, #1
 800bbec:	2109      	movs	r1, #9
 800bbee:	f7ff ff7d 	bl	800baec <std>
 800bbf2:	68e0      	ldr	r0, [r4, #12]
 800bbf4:	2202      	movs	r2, #2
 800bbf6:	2112      	movs	r1, #18
 800bbf8:	f7ff ff78 	bl	800baec <std>
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	61a3      	str	r3, [r4, #24]
 800bc00:	e7d2      	b.n	800bba8 <__sinit+0xc>
 800bc02:	bf00      	nop
 800bc04:	0800f6c4 	.word	0x0800f6c4
 800bc08:	0800bb35 	.word	0x0800bb35

0800bc0c <__sfp>:
 800bc0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bc0e:	4607      	mov	r7, r0
 800bc10:	f7ff ffac 	bl	800bb6c <__sfp_lock_acquire>
 800bc14:	4b1e      	ldr	r3, [pc, #120]	; (800bc90 <__sfp+0x84>)
 800bc16:	681e      	ldr	r6, [r3, #0]
 800bc18:	69b3      	ldr	r3, [r6, #24]
 800bc1a:	b913      	cbnz	r3, 800bc22 <__sfp+0x16>
 800bc1c:	4630      	mov	r0, r6
 800bc1e:	f7ff ffbd 	bl	800bb9c <__sinit>
 800bc22:	3648      	adds	r6, #72	; 0x48
 800bc24:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bc28:	3b01      	subs	r3, #1
 800bc2a:	d503      	bpl.n	800bc34 <__sfp+0x28>
 800bc2c:	6833      	ldr	r3, [r6, #0]
 800bc2e:	b30b      	cbz	r3, 800bc74 <__sfp+0x68>
 800bc30:	6836      	ldr	r6, [r6, #0]
 800bc32:	e7f7      	b.n	800bc24 <__sfp+0x18>
 800bc34:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc38:	b9d5      	cbnz	r5, 800bc70 <__sfp+0x64>
 800bc3a:	4b16      	ldr	r3, [pc, #88]	; (800bc94 <__sfp+0x88>)
 800bc3c:	60e3      	str	r3, [r4, #12]
 800bc3e:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc42:	6665      	str	r5, [r4, #100]	; 0x64
 800bc44:	f000 f86c 	bl	800bd20 <__retarget_lock_init_recursive>
 800bc48:	f7ff ff96 	bl	800bb78 <__sfp_lock_release>
 800bc4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc54:	6025      	str	r5, [r4, #0]
 800bc56:	61a5      	str	r5, [r4, #24]
 800bc58:	2208      	movs	r2, #8
 800bc5a:	4629      	mov	r1, r5
 800bc5c:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc60:	f000 f86f 	bl	800bd42 <memset>
 800bc64:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc68:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc6c:	4620      	mov	r0, r4
 800bc6e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc70:	3468      	adds	r4, #104	; 0x68
 800bc72:	e7d9      	b.n	800bc28 <__sfp+0x1c>
 800bc74:	2104      	movs	r1, #4
 800bc76:	4638      	mov	r0, r7
 800bc78:	f7ff ff62 	bl	800bb40 <__sfmoreglue>
 800bc7c:	4604      	mov	r4, r0
 800bc7e:	6030      	str	r0, [r6, #0]
 800bc80:	2800      	cmp	r0, #0
 800bc82:	d1d5      	bne.n	800bc30 <__sfp+0x24>
 800bc84:	f7ff ff78 	bl	800bb78 <__sfp_lock_release>
 800bc88:	230c      	movs	r3, #12
 800bc8a:	603b      	str	r3, [r7, #0]
 800bc8c:	e7ee      	b.n	800bc6c <__sfp+0x60>
 800bc8e:	bf00      	nop
 800bc90:	0800f6c4 	.word	0x0800f6c4
 800bc94:	ffff0001 	.word	0xffff0001

0800bc98 <_fwalk_reent>:
 800bc98:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc9c:	4606      	mov	r6, r0
 800bc9e:	4688      	mov	r8, r1
 800bca0:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bca4:	2700      	movs	r7, #0
 800bca6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bcaa:	f1b9 0901 	subs.w	r9, r9, #1
 800bcae:	d505      	bpl.n	800bcbc <_fwalk_reent+0x24>
 800bcb0:	6824      	ldr	r4, [r4, #0]
 800bcb2:	2c00      	cmp	r4, #0
 800bcb4:	d1f7      	bne.n	800bca6 <_fwalk_reent+0xe>
 800bcb6:	4638      	mov	r0, r7
 800bcb8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bcbc:	89ab      	ldrh	r3, [r5, #12]
 800bcbe:	2b01      	cmp	r3, #1
 800bcc0:	d907      	bls.n	800bcd2 <_fwalk_reent+0x3a>
 800bcc2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	d003      	beq.n	800bcd2 <_fwalk_reent+0x3a>
 800bcca:	4629      	mov	r1, r5
 800bccc:	4630      	mov	r0, r6
 800bcce:	47c0      	blx	r8
 800bcd0:	4307      	orrs	r7, r0
 800bcd2:	3568      	adds	r5, #104	; 0x68
 800bcd4:	e7e9      	b.n	800bcaa <_fwalk_reent+0x12>
	...

0800bcd8 <__libc_init_array>:
 800bcd8:	b570      	push	{r4, r5, r6, lr}
 800bcda:	4d0d      	ldr	r5, [pc, #52]	; (800bd10 <__libc_init_array+0x38>)
 800bcdc:	4c0d      	ldr	r4, [pc, #52]	; (800bd14 <__libc_init_array+0x3c>)
 800bcde:	1b64      	subs	r4, r4, r5
 800bce0:	10a4      	asrs	r4, r4, #2
 800bce2:	2600      	movs	r6, #0
 800bce4:	42a6      	cmp	r6, r4
 800bce6:	d109      	bne.n	800bcfc <__libc_init_array+0x24>
 800bce8:	4d0b      	ldr	r5, [pc, #44]	; (800bd18 <__libc_init_array+0x40>)
 800bcea:	4c0c      	ldr	r4, [pc, #48]	; (800bd1c <__libc_init_array+0x44>)
 800bcec:	f002 febc 	bl	800ea68 <_init>
 800bcf0:	1b64      	subs	r4, r4, r5
 800bcf2:	10a4      	asrs	r4, r4, #2
 800bcf4:	2600      	movs	r6, #0
 800bcf6:	42a6      	cmp	r6, r4
 800bcf8:	d105      	bne.n	800bd06 <__libc_init_array+0x2e>
 800bcfa:	bd70      	pop	{r4, r5, r6, pc}
 800bcfc:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd00:	4798      	blx	r3
 800bd02:	3601      	adds	r6, #1
 800bd04:	e7ee      	b.n	800bce4 <__libc_init_array+0xc>
 800bd06:	f855 3b04 	ldr.w	r3, [r5], #4
 800bd0a:	4798      	blx	r3
 800bd0c:	3601      	adds	r6, #1
 800bd0e:	e7f2      	b.n	800bcf6 <__libc_init_array+0x1e>
 800bd10:	0800fa44 	.word	0x0800fa44
 800bd14:	0800fa44 	.word	0x0800fa44
 800bd18:	0800fa44 	.word	0x0800fa44
 800bd1c:	0800fa48 	.word	0x0800fa48

0800bd20 <__retarget_lock_init_recursive>:
 800bd20:	4770      	bx	lr

0800bd22 <__retarget_lock_acquire_recursive>:
 800bd22:	4770      	bx	lr

0800bd24 <__retarget_lock_release_recursive>:
 800bd24:	4770      	bx	lr

0800bd26 <memcpy>:
 800bd26:	440a      	add	r2, r1
 800bd28:	4291      	cmp	r1, r2
 800bd2a:	f100 33ff 	add.w	r3, r0, #4294967295
 800bd2e:	d100      	bne.n	800bd32 <memcpy+0xc>
 800bd30:	4770      	bx	lr
 800bd32:	b510      	push	{r4, lr}
 800bd34:	f811 4b01 	ldrb.w	r4, [r1], #1
 800bd38:	f803 4f01 	strb.w	r4, [r3, #1]!
 800bd3c:	4291      	cmp	r1, r2
 800bd3e:	d1f9      	bne.n	800bd34 <memcpy+0xe>
 800bd40:	bd10      	pop	{r4, pc}

0800bd42 <memset>:
 800bd42:	4402      	add	r2, r0
 800bd44:	4603      	mov	r3, r0
 800bd46:	4293      	cmp	r3, r2
 800bd48:	d100      	bne.n	800bd4c <memset+0xa>
 800bd4a:	4770      	bx	lr
 800bd4c:	f803 1b01 	strb.w	r1, [r3], #1
 800bd50:	e7f9      	b.n	800bd46 <memset+0x4>
	...

0800bd54 <sbrk_aligned>:
 800bd54:	b570      	push	{r4, r5, r6, lr}
 800bd56:	4e0e      	ldr	r6, [pc, #56]	; (800bd90 <sbrk_aligned+0x3c>)
 800bd58:	460c      	mov	r4, r1
 800bd5a:	6831      	ldr	r1, [r6, #0]
 800bd5c:	4605      	mov	r5, r0
 800bd5e:	b911      	cbnz	r1, 800bd66 <sbrk_aligned+0x12>
 800bd60:	f000 fd60 	bl	800c824 <_sbrk_r>
 800bd64:	6030      	str	r0, [r6, #0]
 800bd66:	4621      	mov	r1, r4
 800bd68:	4628      	mov	r0, r5
 800bd6a:	f000 fd5b 	bl	800c824 <_sbrk_r>
 800bd6e:	1c43      	adds	r3, r0, #1
 800bd70:	d00a      	beq.n	800bd88 <sbrk_aligned+0x34>
 800bd72:	1cc4      	adds	r4, r0, #3
 800bd74:	f024 0403 	bic.w	r4, r4, #3
 800bd78:	42a0      	cmp	r0, r4
 800bd7a:	d007      	beq.n	800bd8c <sbrk_aligned+0x38>
 800bd7c:	1a21      	subs	r1, r4, r0
 800bd7e:	4628      	mov	r0, r5
 800bd80:	f000 fd50 	bl	800c824 <_sbrk_r>
 800bd84:	3001      	adds	r0, #1
 800bd86:	d101      	bne.n	800bd8c <sbrk_aligned+0x38>
 800bd88:	f04f 34ff 	mov.w	r4, #4294967295
 800bd8c:	4620      	mov	r0, r4
 800bd8e:	bd70      	pop	{r4, r5, r6, pc}
 800bd90:	2000541c 	.word	0x2000541c

0800bd94 <_malloc_r>:
 800bd94:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bd98:	1ccd      	adds	r5, r1, #3
 800bd9a:	f025 0503 	bic.w	r5, r5, #3
 800bd9e:	3508      	adds	r5, #8
 800bda0:	2d0c      	cmp	r5, #12
 800bda2:	bf38      	it	cc
 800bda4:	250c      	movcc	r5, #12
 800bda6:	2d00      	cmp	r5, #0
 800bda8:	4607      	mov	r7, r0
 800bdaa:	db01      	blt.n	800bdb0 <_malloc_r+0x1c>
 800bdac:	42a9      	cmp	r1, r5
 800bdae:	d905      	bls.n	800bdbc <_malloc_r+0x28>
 800bdb0:	230c      	movs	r3, #12
 800bdb2:	603b      	str	r3, [r7, #0]
 800bdb4:	2600      	movs	r6, #0
 800bdb6:	4630      	mov	r0, r6
 800bdb8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bdbc:	4e2e      	ldr	r6, [pc, #184]	; (800be78 <_malloc_r+0xe4>)
 800bdbe:	f001 fd21 	bl	800d804 <__malloc_lock>
 800bdc2:	6833      	ldr	r3, [r6, #0]
 800bdc4:	461c      	mov	r4, r3
 800bdc6:	bb34      	cbnz	r4, 800be16 <_malloc_r+0x82>
 800bdc8:	4629      	mov	r1, r5
 800bdca:	4638      	mov	r0, r7
 800bdcc:	f7ff ffc2 	bl	800bd54 <sbrk_aligned>
 800bdd0:	1c43      	adds	r3, r0, #1
 800bdd2:	4604      	mov	r4, r0
 800bdd4:	d14d      	bne.n	800be72 <_malloc_r+0xde>
 800bdd6:	6834      	ldr	r4, [r6, #0]
 800bdd8:	4626      	mov	r6, r4
 800bdda:	2e00      	cmp	r6, #0
 800bddc:	d140      	bne.n	800be60 <_malloc_r+0xcc>
 800bdde:	6823      	ldr	r3, [r4, #0]
 800bde0:	4631      	mov	r1, r6
 800bde2:	4638      	mov	r0, r7
 800bde4:	eb04 0803 	add.w	r8, r4, r3
 800bde8:	f000 fd1c 	bl	800c824 <_sbrk_r>
 800bdec:	4580      	cmp	r8, r0
 800bdee:	d13a      	bne.n	800be66 <_malloc_r+0xd2>
 800bdf0:	6821      	ldr	r1, [r4, #0]
 800bdf2:	3503      	adds	r5, #3
 800bdf4:	1a6d      	subs	r5, r5, r1
 800bdf6:	f025 0503 	bic.w	r5, r5, #3
 800bdfa:	3508      	adds	r5, #8
 800bdfc:	2d0c      	cmp	r5, #12
 800bdfe:	bf38      	it	cc
 800be00:	250c      	movcc	r5, #12
 800be02:	4629      	mov	r1, r5
 800be04:	4638      	mov	r0, r7
 800be06:	f7ff ffa5 	bl	800bd54 <sbrk_aligned>
 800be0a:	3001      	adds	r0, #1
 800be0c:	d02b      	beq.n	800be66 <_malloc_r+0xd2>
 800be0e:	6823      	ldr	r3, [r4, #0]
 800be10:	442b      	add	r3, r5
 800be12:	6023      	str	r3, [r4, #0]
 800be14:	e00e      	b.n	800be34 <_malloc_r+0xa0>
 800be16:	6822      	ldr	r2, [r4, #0]
 800be18:	1b52      	subs	r2, r2, r5
 800be1a:	d41e      	bmi.n	800be5a <_malloc_r+0xc6>
 800be1c:	2a0b      	cmp	r2, #11
 800be1e:	d916      	bls.n	800be4e <_malloc_r+0xba>
 800be20:	1961      	adds	r1, r4, r5
 800be22:	42a3      	cmp	r3, r4
 800be24:	6025      	str	r5, [r4, #0]
 800be26:	bf18      	it	ne
 800be28:	6059      	strne	r1, [r3, #4]
 800be2a:	6863      	ldr	r3, [r4, #4]
 800be2c:	bf08      	it	eq
 800be2e:	6031      	streq	r1, [r6, #0]
 800be30:	5162      	str	r2, [r4, r5]
 800be32:	604b      	str	r3, [r1, #4]
 800be34:	4638      	mov	r0, r7
 800be36:	f104 060b 	add.w	r6, r4, #11
 800be3a:	f001 fce9 	bl	800d810 <__malloc_unlock>
 800be3e:	f026 0607 	bic.w	r6, r6, #7
 800be42:	1d23      	adds	r3, r4, #4
 800be44:	1af2      	subs	r2, r6, r3
 800be46:	d0b6      	beq.n	800bdb6 <_malloc_r+0x22>
 800be48:	1b9b      	subs	r3, r3, r6
 800be4a:	50a3      	str	r3, [r4, r2]
 800be4c:	e7b3      	b.n	800bdb6 <_malloc_r+0x22>
 800be4e:	6862      	ldr	r2, [r4, #4]
 800be50:	42a3      	cmp	r3, r4
 800be52:	bf0c      	ite	eq
 800be54:	6032      	streq	r2, [r6, #0]
 800be56:	605a      	strne	r2, [r3, #4]
 800be58:	e7ec      	b.n	800be34 <_malloc_r+0xa0>
 800be5a:	4623      	mov	r3, r4
 800be5c:	6864      	ldr	r4, [r4, #4]
 800be5e:	e7b2      	b.n	800bdc6 <_malloc_r+0x32>
 800be60:	4634      	mov	r4, r6
 800be62:	6876      	ldr	r6, [r6, #4]
 800be64:	e7b9      	b.n	800bdda <_malloc_r+0x46>
 800be66:	230c      	movs	r3, #12
 800be68:	603b      	str	r3, [r7, #0]
 800be6a:	4638      	mov	r0, r7
 800be6c:	f001 fcd0 	bl	800d810 <__malloc_unlock>
 800be70:	e7a1      	b.n	800bdb6 <_malloc_r+0x22>
 800be72:	6025      	str	r5, [r4, #0]
 800be74:	e7de      	b.n	800be34 <_malloc_r+0xa0>
 800be76:	bf00      	nop
 800be78:	20005418 	.word	0x20005418

0800be7c <__cvt>:
 800be7c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800be80:	ec55 4b10 	vmov	r4, r5, d0
 800be84:	2d00      	cmp	r5, #0
 800be86:	460e      	mov	r6, r1
 800be88:	4619      	mov	r1, r3
 800be8a:	462b      	mov	r3, r5
 800be8c:	bfbb      	ittet	lt
 800be8e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800be92:	461d      	movlt	r5, r3
 800be94:	2300      	movge	r3, #0
 800be96:	232d      	movlt	r3, #45	; 0x2d
 800be98:	700b      	strb	r3, [r1, #0]
 800be9a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800be9c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800bea0:	4691      	mov	r9, r2
 800bea2:	f023 0820 	bic.w	r8, r3, #32
 800bea6:	bfbc      	itt	lt
 800bea8:	4622      	movlt	r2, r4
 800beaa:	4614      	movlt	r4, r2
 800beac:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800beb0:	d005      	beq.n	800bebe <__cvt+0x42>
 800beb2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800beb6:	d100      	bne.n	800beba <__cvt+0x3e>
 800beb8:	3601      	adds	r6, #1
 800beba:	2102      	movs	r1, #2
 800bebc:	e000      	b.n	800bec0 <__cvt+0x44>
 800bebe:	2103      	movs	r1, #3
 800bec0:	ab03      	add	r3, sp, #12
 800bec2:	9301      	str	r3, [sp, #4]
 800bec4:	ab02      	add	r3, sp, #8
 800bec6:	9300      	str	r3, [sp, #0]
 800bec8:	ec45 4b10 	vmov	d0, r4, r5
 800becc:	4653      	mov	r3, sl
 800bece:	4632      	mov	r2, r6
 800bed0:	f000 fdca 	bl	800ca68 <_dtoa_r>
 800bed4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800bed8:	4607      	mov	r7, r0
 800beda:	d102      	bne.n	800bee2 <__cvt+0x66>
 800bedc:	f019 0f01 	tst.w	r9, #1
 800bee0:	d022      	beq.n	800bf28 <__cvt+0xac>
 800bee2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800bee6:	eb07 0906 	add.w	r9, r7, r6
 800beea:	d110      	bne.n	800bf0e <__cvt+0x92>
 800beec:	783b      	ldrb	r3, [r7, #0]
 800beee:	2b30      	cmp	r3, #48	; 0x30
 800bef0:	d10a      	bne.n	800bf08 <__cvt+0x8c>
 800bef2:	2200      	movs	r2, #0
 800bef4:	2300      	movs	r3, #0
 800bef6:	4620      	mov	r0, r4
 800bef8:	4629      	mov	r1, r5
 800befa:	f7f4 fde5 	bl	8000ac8 <__aeabi_dcmpeq>
 800befe:	b918      	cbnz	r0, 800bf08 <__cvt+0x8c>
 800bf00:	f1c6 0601 	rsb	r6, r6, #1
 800bf04:	f8ca 6000 	str.w	r6, [sl]
 800bf08:	f8da 3000 	ldr.w	r3, [sl]
 800bf0c:	4499      	add	r9, r3
 800bf0e:	2200      	movs	r2, #0
 800bf10:	2300      	movs	r3, #0
 800bf12:	4620      	mov	r0, r4
 800bf14:	4629      	mov	r1, r5
 800bf16:	f7f4 fdd7 	bl	8000ac8 <__aeabi_dcmpeq>
 800bf1a:	b108      	cbz	r0, 800bf20 <__cvt+0xa4>
 800bf1c:	f8cd 900c 	str.w	r9, [sp, #12]
 800bf20:	2230      	movs	r2, #48	; 0x30
 800bf22:	9b03      	ldr	r3, [sp, #12]
 800bf24:	454b      	cmp	r3, r9
 800bf26:	d307      	bcc.n	800bf38 <__cvt+0xbc>
 800bf28:	9b03      	ldr	r3, [sp, #12]
 800bf2a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800bf2c:	1bdb      	subs	r3, r3, r7
 800bf2e:	4638      	mov	r0, r7
 800bf30:	6013      	str	r3, [r2, #0]
 800bf32:	b004      	add	sp, #16
 800bf34:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800bf38:	1c59      	adds	r1, r3, #1
 800bf3a:	9103      	str	r1, [sp, #12]
 800bf3c:	701a      	strb	r2, [r3, #0]
 800bf3e:	e7f0      	b.n	800bf22 <__cvt+0xa6>

0800bf40 <__exponent>:
 800bf40:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800bf42:	4603      	mov	r3, r0
 800bf44:	2900      	cmp	r1, #0
 800bf46:	bfb8      	it	lt
 800bf48:	4249      	neglt	r1, r1
 800bf4a:	f803 2b02 	strb.w	r2, [r3], #2
 800bf4e:	bfb4      	ite	lt
 800bf50:	222d      	movlt	r2, #45	; 0x2d
 800bf52:	222b      	movge	r2, #43	; 0x2b
 800bf54:	2909      	cmp	r1, #9
 800bf56:	7042      	strb	r2, [r0, #1]
 800bf58:	dd2a      	ble.n	800bfb0 <__exponent+0x70>
 800bf5a:	f10d 0407 	add.w	r4, sp, #7
 800bf5e:	46a4      	mov	ip, r4
 800bf60:	270a      	movs	r7, #10
 800bf62:	46a6      	mov	lr, r4
 800bf64:	460a      	mov	r2, r1
 800bf66:	fb91 f6f7 	sdiv	r6, r1, r7
 800bf6a:	fb07 1516 	mls	r5, r7, r6, r1
 800bf6e:	3530      	adds	r5, #48	; 0x30
 800bf70:	2a63      	cmp	r2, #99	; 0x63
 800bf72:	f104 34ff 	add.w	r4, r4, #4294967295
 800bf76:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800bf7a:	4631      	mov	r1, r6
 800bf7c:	dcf1      	bgt.n	800bf62 <__exponent+0x22>
 800bf7e:	3130      	adds	r1, #48	; 0x30
 800bf80:	f1ae 0502 	sub.w	r5, lr, #2
 800bf84:	f804 1c01 	strb.w	r1, [r4, #-1]
 800bf88:	1c44      	adds	r4, r0, #1
 800bf8a:	4629      	mov	r1, r5
 800bf8c:	4561      	cmp	r1, ip
 800bf8e:	d30a      	bcc.n	800bfa6 <__exponent+0x66>
 800bf90:	f10d 0209 	add.w	r2, sp, #9
 800bf94:	eba2 020e 	sub.w	r2, r2, lr
 800bf98:	4565      	cmp	r5, ip
 800bf9a:	bf88      	it	hi
 800bf9c:	2200      	movhi	r2, #0
 800bf9e:	4413      	add	r3, r2
 800bfa0:	1a18      	subs	r0, r3, r0
 800bfa2:	b003      	add	sp, #12
 800bfa4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800bfa6:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bfaa:	f804 2f01 	strb.w	r2, [r4, #1]!
 800bfae:	e7ed      	b.n	800bf8c <__exponent+0x4c>
 800bfb0:	2330      	movs	r3, #48	; 0x30
 800bfb2:	3130      	adds	r1, #48	; 0x30
 800bfb4:	7083      	strb	r3, [r0, #2]
 800bfb6:	70c1      	strb	r1, [r0, #3]
 800bfb8:	1d03      	adds	r3, r0, #4
 800bfba:	e7f1      	b.n	800bfa0 <__exponent+0x60>

0800bfbc <_printf_float>:
 800bfbc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bfc0:	ed2d 8b02 	vpush	{d8}
 800bfc4:	b08d      	sub	sp, #52	; 0x34
 800bfc6:	460c      	mov	r4, r1
 800bfc8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800bfcc:	4616      	mov	r6, r2
 800bfce:	461f      	mov	r7, r3
 800bfd0:	4605      	mov	r5, r0
 800bfd2:	f001 fbf9 	bl	800d7c8 <_localeconv_r>
 800bfd6:	f8d0 a000 	ldr.w	sl, [r0]
 800bfda:	4650      	mov	r0, sl
 800bfdc:	f7f4 f8f8 	bl	80001d0 <strlen>
 800bfe0:	2300      	movs	r3, #0
 800bfe2:	930a      	str	r3, [sp, #40]	; 0x28
 800bfe4:	6823      	ldr	r3, [r4, #0]
 800bfe6:	9305      	str	r3, [sp, #20]
 800bfe8:	f8d8 3000 	ldr.w	r3, [r8]
 800bfec:	f894 b018 	ldrb.w	fp, [r4, #24]
 800bff0:	3307      	adds	r3, #7
 800bff2:	f023 0307 	bic.w	r3, r3, #7
 800bff6:	f103 0208 	add.w	r2, r3, #8
 800bffa:	f8c8 2000 	str.w	r2, [r8]
 800bffe:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c002:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800c006:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800c00a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800c00e:	9307      	str	r3, [sp, #28]
 800c010:	f8cd 8018 	str.w	r8, [sp, #24]
 800c014:	ee08 0a10 	vmov	s16, r0
 800c018:	4b9f      	ldr	r3, [pc, #636]	; (800c298 <_printf_float+0x2dc>)
 800c01a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c01e:	f04f 32ff 	mov.w	r2, #4294967295
 800c022:	f7f4 fd83 	bl	8000b2c <__aeabi_dcmpun>
 800c026:	bb88      	cbnz	r0, 800c08c <_printf_float+0xd0>
 800c028:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800c02c:	4b9a      	ldr	r3, [pc, #616]	; (800c298 <_printf_float+0x2dc>)
 800c02e:	f04f 32ff 	mov.w	r2, #4294967295
 800c032:	f7f4 fd5d 	bl	8000af0 <__aeabi_dcmple>
 800c036:	bb48      	cbnz	r0, 800c08c <_printf_float+0xd0>
 800c038:	2200      	movs	r2, #0
 800c03a:	2300      	movs	r3, #0
 800c03c:	4640      	mov	r0, r8
 800c03e:	4649      	mov	r1, r9
 800c040:	f7f4 fd4c 	bl	8000adc <__aeabi_dcmplt>
 800c044:	b110      	cbz	r0, 800c04c <_printf_float+0x90>
 800c046:	232d      	movs	r3, #45	; 0x2d
 800c048:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c04c:	4b93      	ldr	r3, [pc, #588]	; (800c29c <_printf_float+0x2e0>)
 800c04e:	4894      	ldr	r0, [pc, #592]	; (800c2a0 <_printf_float+0x2e4>)
 800c050:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800c054:	bf94      	ite	ls
 800c056:	4698      	movls	r8, r3
 800c058:	4680      	movhi	r8, r0
 800c05a:	2303      	movs	r3, #3
 800c05c:	6123      	str	r3, [r4, #16]
 800c05e:	9b05      	ldr	r3, [sp, #20]
 800c060:	f023 0204 	bic.w	r2, r3, #4
 800c064:	6022      	str	r2, [r4, #0]
 800c066:	f04f 0900 	mov.w	r9, #0
 800c06a:	9700      	str	r7, [sp, #0]
 800c06c:	4633      	mov	r3, r6
 800c06e:	aa0b      	add	r2, sp, #44	; 0x2c
 800c070:	4621      	mov	r1, r4
 800c072:	4628      	mov	r0, r5
 800c074:	f000 f9d8 	bl	800c428 <_printf_common>
 800c078:	3001      	adds	r0, #1
 800c07a:	f040 8090 	bne.w	800c19e <_printf_float+0x1e2>
 800c07e:	f04f 30ff 	mov.w	r0, #4294967295
 800c082:	b00d      	add	sp, #52	; 0x34
 800c084:	ecbd 8b02 	vpop	{d8}
 800c088:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c08c:	4642      	mov	r2, r8
 800c08e:	464b      	mov	r3, r9
 800c090:	4640      	mov	r0, r8
 800c092:	4649      	mov	r1, r9
 800c094:	f7f4 fd4a 	bl	8000b2c <__aeabi_dcmpun>
 800c098:	b140      	cbz	r0, 800c0ac <_printf_float+0xf0>
 800c09a:	464b      	mov	r3, r9
 800c09c:	2b00      	cmp	r3, #0
 800c09e:	bfbc      	itt	lt
 800c0a0:	232d      	movlt	r3, #45	; 0x2d
 800c0a2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800c0a6:	487f      	ldr	r0, [pc, #508]	; (800c2a4 <_printf_float+0x2e8>)
 800c0a8:	4b7f      	ldr	r3, [pc, #508]	; (800c2a8 <_printf_float+0x2ec>)
 800c0aa:	e7d1      	b.n	800c050 <_printf_float+0x94>
 800c0ac:	6863      	ldr	r3, [r4, #4]
 800c0ae:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800c0b2:	9206      	str	r2, [sp, #24]
 800c0b4:	1c5a      	adds	r2, r3, #1
 800c0b6:	d13f      	bne.n	800c138 <_printf_float+0x17c>
 800c0b8:	2306      	movs	r3, #6
 800c0ba:	6063      	str	r3, [r4, #4]
 800c0bc:	9b05      	ldr	r3, [sp, #20]
 800c0be:	6861      	ldr	r1, [r4, #4]
 800c0c0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800c0c4:	2300      	movs	r3, #0
 800c0c6:	9303      	str	r3, [sp, #12]
 800c0c8:	ab0a      	add	r3, sp, #40	; 0x28
 800c0ca:	e9cd b301 	strd	fp, r3, [sp, #4]
 800c0ce:	ab09      	add	r3, sp, #36	; 0x24
 800c0d0:	ec49 8b10 	vmov	d0, r8, r9
 800c0d4:	9300      	str	r3, [sp, #0]
 800c0d6:	6022      	str	r2, [r4, #0]
 800c0d8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800c0dc:	4628      	mov	r0, r5
 800c0de:	f7ff fecd 	bl	800be7c <__cvt>
 800c0e2:	9b06      	ldr	r3, [sp, #24]
 800c0e4:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c0e6:	2b47      	cmp	r3, #71	; 0x47
 800c0e8:	4680      	mov	r8, r0
 800c0ea:	d108      	bne.n	800c0fe <_printf_float+0x142>
 800c0ec:	1cc8      	adds	r0, r1, #3
 800c0ee:	db02      	blt.n	800c0f6 <_printf_float+0x13a>
 800c0f0:	6863      	ldr	r3, [r4, #4]
 800c0f2:	4299      	cmp	r1, r3
 800c0f4:	dd41      	ble.n	800c17a <_printf_float+0x1be>
 800c0f6:	f1ab 0b02 	sub.w	fp, fp, #2
 800c0fa:	fa5f fb8b 	uxtb.w	fp, fp
 800c0fe:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c102:	d820      	bhi.n	800c146 <_printf_float+0x18a>
 800c104:	3901      	subs	r1, #1
 800c106:	465a      	mov	r2, fp
 800c108:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800c10c:	9109      	str	r1, [sp, #36]	; 0x24
 800c10e:	f7ff ff17 	bl	800bf40 <__exponent>
 800c112:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c114:	1813      	adds	r3, r2, r0
 800c116:	2a01      	cmp	r2, #1
 800c118:	4681      	mov	r9, r0
 800c11a:	6123      	str	r3, [r4, #16]
 800c11c:	dc02      	bgt.n	800c124 <_printf_float+0x168>
 800c11e:	6822      	ldr	r2, [r4, #0]
 800c120:	07d2      	lsls	r2, r2, #31
 800c122:	d501      	bpl.n	800c128 <_printf_float+0x16c>
 800c124:	3301      	adds	r3, #1
 800c126:	6123      	str	r3, [r4, #16]
 800c128:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800c12c:	2b00      	cmp	r3, #0
 800c12e:	d09c      	beq.n	800c06a <_printf_float+0xae>
 800c130:	232d      	movs	r3, #45	; 0x2d
 800c132:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c136:	e798      	b.n	800c06a <_printf_float+0xae>
 800c138:	9a06      	ldr	r2, [sp, #24]
 800c13a:	2a47      	cmp	r2, #71	; 0x47
 800c13c:	d1be      	bne.n	800c0bc <_printf_float+0x100>
 800c13e:	2b00      	cmp	r3, #0
 800c140:	d1bc      	bne.n	800c0bc <_printf_float+0x100>
 800c142:	2301      	movs	r3, #1
 800c144:	e7b9      	b.n	800c0ba <_printf_float+0xfe>
 800c146:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800c14a:	d118      	bne.n	800c17e <_printf_float+0x1c2>
 800c14c:	2900      	cmp	r1, #0
 800c14e:	6863      	ldr	r3, [r4, #4]
 800c150:	dd0b      	ble.n	800c16a <_printf_float+0x1ae>
 800c152:	6121      	str	r1, [r4, #16]
 800c154:	b913      	cbnz	r3, 800c15c <_printf_float+0x1a0>
 800c156:	6822      	ldr	r2, [r4, #0]
 800c158:	07d0      	lsls	r0, r2, #31
 800c15a:	d502      	bpl.n	800c162 <_printf_float+0x1a6>
 800c15c:	3301      	adds	r3, #1
 800c15e:	440b      	add	r3, r1
 800c160:	6123      	str	r3, [r4, #16]
 800c162:	65a1      	str	r1, [r4, #88]	; 0x58
 800c164:	f04f 0900 	mov.w	r9, #0
 800c168:	e7de      	b.n	800c128 <_printf_float+0x16c>
 800c16a:	b913      	cbnz	r3, 800c172 <_printf_float+0x1b6>
 800c16c:	6822      	ldr	r2, [r4, #0]
 800c16e:	07d2      	lsls	r2, r2, #31
 800c170:	d501      	bpl.n	800c176 <_printf_float+0x1ba>
 800c172:	3302      	adds	r3, #2
 800c174:	e7f4      	b.n	800c160 <_printf_float+0x1a4>
 800c176:	2301      	movs	r3, #1
 800c178:	e7f2      	b.n	800c160 <_printf_float+0x1a4>
 800c17a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800c17e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c180:	4299      	cmp	r1, r3
 800c182:	db05      	blt.n	800c190 <_printf_float+0x1d4>
 800c184:	6823      	ldr	r3, [r4, #0]
 800c186:	6121      	str	r1, [r4, #16]
 800c188:	07d8      	lsls	r0, r3, #31
 800c18a:	d5ea      	bpl.n	800c162 <_printf_float+0x1a6>
 800c18c:	1c4b      	adds	r3, r1, #1
 800c18e:	e7e7      	b.n	800c160 <_printf_float+0x1a4>
 800c190:	2900      	cmp	r1, #0
 800c192:	bfd4      	ite	le
 800c194:	f1c1 0202 	rsble	r2, r1, #2
 800c198:	2201      	movgt	r2, #1
 800c19a:	4413      	add	r3, r2
 800c19c:	e7e0      	b.n	800c160 <_printf_float+0x1a4>
 800c19e:	6823      	ldr	r3, [r4, #0]
 800c1a0:	055a      	lsls	r2, r3, #21
 800c1a2:	d407      	bmi.n	800c1b4 <_printf_float+0x1f8>
 800c1a4:	6923      	ldr	r3, [r4, #16]
 800c1a6:	4642      	mov	r2, r8
 800c1a8:	4631      	mov	r1, r6
 800c1aa:	4628      	mov	r0, r5
 800c1ac:	47b8      	blx	r7
 800c1ae:	3001      	adds	r0, #1
 800c1b0:	d12c      	bne.n	800c20c <_printf_float+0x250>
 800c1b2:	e764      	b.n	800c07e <_printf_float+0xc2>
 800c1b4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800c1b8:	f240 80e0 	bls.w	800c37c <_printf_float+0x3c0>
 800c1bc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c1c0:	2200      	movs	r2, #0
 800c1c2:	2300      	movs	r3, #0
 800c1c4:	f7f4 fc80 	bl	8000ac8 <__aeabi_dcmpeq>
 800c1c8:	2800      	cmp	r0, #0
 800c1ca:	d034      	beq.n	800c236 <_printf_float+0x27a>
 800c1cc:	4a37      	ldr	r2, [pc, #220]	; (800c2ac <_printf_float+0x2f0>)
 800c1ce:	2301      	movs	r3, #1
 800c1d0:	4631      	mov	r1, r6
 800c1d2:	4628      	mov	r0, r5
 800c1d4:	47b8      	blx	r7
 800c1d6:	3001      	adds	r0, #1
 800c1d8:	f43f af51 	beq.w	800c07e <_printf_float+0xc2>
 800c1dc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c1e0:	429a      	cmp	r2, r3
 800c1e2:	db02      	blt.n	800c1ea <_printf_float+0x22e>
 800c1e4:	6823      	ldr	r3, [r4, #0]
 800c1e6:	07d8      	lsls	r0, r3, #31
 800c1e8:	d510      	bpl.n	800c20c <_printf_float+0x250>
 800c1ea:	ee18 3a10 	vmov	r3, s16
 800c1ee:	4652      	mov	r2, sl
 800c1f0:	4631      	mov	r1, r6
 800c1f2:	4628      	mov	r0, r5
 800c1f4:	47b8      	blx	r7
 800c1f6:	3001      	adds	r0, #1
 800c1f8:	f43f af41 	beq.w	800c07e <_printf_float+0xc2>
 800c1fc:	f04f 0800 	mov.w	r8, #0
 800c200:	f104 091a 	add.w	r9, r4, #26
 800c204:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c206:	3b01      	subs	r3, #1
 800c208:	4543      	cmp	r3, r8
 800c20a:	dc09      	bgt.n	800c220 <_printf_float+0x264>
 800c20c:	6823      	ldr	r3, [r4, #0]
 800c20e:	079b      	lsls	r3, r3, #30
 800c210:	f100 8105 	bmi.w	800c41e <_printf_float+0x462>
 800c214:	68e0      	ldr	r0, [r4, #12]
 800c216:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c218:	4298      	cmp	r0, r3
 800c21a:	bfb8      	it	lt
 800c21c:	4618      	movlt	r0, r3
 800c21e:	e730      	b.n	800c082 <_printf_float+0xc6>
 800c220:	2301      	movs	r3, #1
 800c222:	464a      	mov	r2, r9
 800c224:	4631      	mov	r1, r6
 800c226:	4628      	mov	r0, r5
 800c228:	47b8      	blx	r7
 800c22a:	3001      	adds	r0, #1
 800c22c:	f43f af27 	beq.w	800c07e <_printf_float+0xc2>
 800c230:	f108 0801 	add.w	r8, r8, #1
 800c234:	e7e6      	b.n	800c204 <_printf_float+0x248>
 800c236:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c238:	2b00      	cmp	r3, #0
 800c23a:	dc39      	bgt.n	800c2b0 <_printf_float+0x2f4>
 800c23c:	4a1b      	ldr	r2, [pc, #108]	; (800c2ac <_printf_float+0x2f0>)
 800c23e:	2301      	movs	r3, #1
 800c240:	4631      	mov	r1, r6
 800c242:	4628      	mov	r0, r5
 800c244:	47b8      	blx	r7
 800c246:	3001      	adds	r0, #1
 800c248:	f43f af19 	beq.w	800c07e <_printf_float+0xc2>
 800c24c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c250:	4313      	orrs	r3, r2
 800c252:	d102      	bne.n	800c25a <_printf_float+0x29e>
 800c254:	6823      	ldr	r3, [r4, #0]
 800c256:	07d9      	lsls	r1, r3, #31
 800c258:	d5d8      	bpl.n	800c20c <_printf_float+0x250>
 800c25a:	ee18 3a10 	vmov	r3, s16
 800c25e:	4652      	mov	r2, sl
 800c260:	4631      	mov	r1, r6
 800c262:	4628      	mov	r0, r5
 800c264:	47b8      	blx	r7
 800c266:	3001      	adds	r0, #1
 800c268:	f43f af09 	beq.w	800c07e <_printf_float+0xc2>
 800c26c:	f04f 0900 	mov.w	r9, #0
 800c270:	f104 0a1a 	add.w	sl, r4, #26
 800c274:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c276:	425b      	negs	r3, r3
 800c278:	454b      	cmp	r3, r9
 800c27a:	dc01      	bgt.n	800c280 <_printf_float+0x2c4>
 800c27c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c27e:	e792      	b.n	800c1a6 <_printf_float+0x1ea>
 800c280:	2301      	movs	r3, #1
 800c282:	4652      	mov	r2, sl
 800c284:	4631      	mov	r1, r6
 800c286:	4628      	mov	r0, r5
 800c288:	47b8      	blx	r7
 800c28a:	3001      	adds	r0, #1
 800c28c:	f43f aef7 	beq.w	800c07e <_printf_float+0xc2>
 800c290:	f109 0901 	add.w	r9, r9, #1
 800c294:	e7ee      	b.n	800c274 <_printf_float+0x2b8>
 800c296:	bf00      	nop
 800c298:	7fefffff 	.word	0x7fefffff
 800c29c:	0800f6c8 	.word	0x0800f6c8
 800c2a0:	0800f6cc 	.word	0x0800f6cc
 800c2a4:	0800f6d4 	.word	0x0800f6d4
 800c2a8:	0800f6d0 	.word	0x0800f6d0
 800c2ac:	0800f6d8 	.word	0x0800f6d8
 800c2b0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c2b2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2b4:	429a      	cmp	r2, r3
 800c2b6:	bfa8      	it	ge
 800c2b8:	461a      	movge	r2, r3
 800c2ba:	2a00      	cmp	r2, #0
 800c2bc:	4691      	mov	r9, r2
 800c2be:	dc37      	bgt.n	800c330 <_printf_float+0x374>
 800c2c0:	f04f 0b00 	mov.w	fp, #0
 800c2c4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c2c8:	f104 021a 	add.w	r2, r4, #26
 800c2cc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800c2ce:	9305      	str	r3, [sp, #20]
 800c2d0:	eba3 0309 	sub.w	r3, r3, r9
 800c2d4:	455b      	cmp	r3, fp
 800c2d6:	dc33      	bgt.n	800c340 <_printf_float+0x384>
 800c2d8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c2dc:	429a      	cmp	r2, r3
 800c2de:	db3b      	blt.n	800c358 <_printf_float+0x39c>
 800c2e0:	6823      	ldr	r3, [r4, #0]
 800c2e2:	07da      	lsls	r2, r3, #31
 800c2e4:	d438      	bmi.n	800c358 <_printf_float+0x39c>
 800c2e6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c2e8:	9a05      	ldr	r2, [sp, #20]
 800c2ea:	9909      	ldr	r1, [sp, #36]	; 0x24
 800c2ec:	1a9a      	subs	r2, r3, r2
 800c2ee:	eba3 0901 	sub.w	r9, r3, r1
 800c2f2:	4591      	cmp	r9, r2
 800c2f4:	bfa8      	it	ge
 800c2f6:	4691      	movge	r9, r2
 800c2f8:	f1b9 0f00 	cmp.w	r9, #0
 800c2fc:	dc35      	bgt.n	800c36a <_printf_float+0x3ae>
 800c2fe:	f04f 0800 	mov.w	r8, #0
 800c302:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800c306:	f104 0a1a 	add.w	sl, r4, #26
 800c30a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800c30e:	1a9b      	subs	r3, r3, r2
 800c310:	eba3 0309 	sub.w	r3, r3, r9
 800c314:	4543      	cmp	r3, r8
 800c316:	f77f af79 	ble.w	800c20c <_printf_float+0x250>
 800c31a:	2301      	movs	r3, #1
 800c31c:	4652      	mov	r2, sl
 800c31e:	4631      	mov	r1, r6
 800c320:	4628      	mov	r0, r5
 800c322:	47b8      	blx	r7
 800c324:	3001      	adds	r0, #1
 800c326:	f43f aeaa 	beq.w	800c07e <_printf_float+0xc2>
 800c32a:	f108 0801 	add.w	r8, r8, #1
 800c32e:	e7ec      	b.n	800c30a <_printf_float+0x34e>
 800c330:	4613      	mov	r3, r2
 800c332:	4631      	mov	r1, r6
 800c334:	4642      	mov	r2, r8
 800c336:	4628      	mov	r0, r5
 800c338:	47b8      	blx	r7
 800c33a:	3001      	adds	r0, #1
 800c33c:	d1c0      	bne.n	800c2c0 <_printf_float+0x304>
 800c33e:	e69e      	b.n	800c07e <_printf_float+0xc2>
 800c340:	2301      	movs	r3, #1
 800c342:	4631      	mov	r1, r6
 800c344:	4628      	mov	r0, r5
 800c346:	9205      	str	r2, [sp, #20]
 800c348:	47b8      	blx	r7
 800c34a:	3001      	adds	r0, #1
 800c34c:	f43f ae97 	beq.w	800c07e <_printf_float+0xc2>
 800c350:	9a05      	ldr	r2, [sp, #20]
 800c352:	f10b 0b01 	add.w	fp, fp, #1
 800c356:	e7b9      	b.n	800c2cc <_printf_float+0x310>
 800c358:	ee18 3a10 	vmov	r3, s16
 800c35c:	4652      	mov	r2, sl
 800c35e:	4631      	mov	r1, r6
 800c360:	4628      	mov	r0, r5
 800c362:	47b8      	blx	r7
 800c364:	3001      	adds	r0, #1
 800c366:	d1be      	bne.n	800c2e6 <_printf_float+0x32a>
 800c368:	e689      	b.n	800c07e <_printf_float+0xc2>
 800c36a:	9a05      	ldr	r2, [sp, #20]
 800c36c:	464b      	mov	r3, r9
 800c36e:	4442      	add	r2, r8
 800c370:	4631      	mov	r1, r6
 800c372:	4628      	mov	r0, r5
 800c374:	47b8      	blx	r7
 800c376:	3001      	adds	r0, #1
 800c378:	d1c1      	bne.n	800c2fe <_printf_float+0x342>
 800c37a:	e680      	b.n	800c07e <_printf_float+0xc2>
 800c37c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800c37e:	2a01      	cmp	r2, #1
 800c380:	dc01      	bgt.n	800c386 <_printf_float+0x3ca>
 800c382:	07db      	lsls	r3, r3, #31
 800c384:	d538      	bpl.n	800c3f8 <_printf_float+0x43c>
 800c386:	2301      	movs	r3, #1
 800c388:	4642      	mov	r2, r8
 800c38a:	4631      	mov	r1, r6
 800c38c:	4628      	mov	r0, r5
 800c38e:	47b8      	blx	r7
 800c390:	3001      	adds	r0, #1
 800c392:	f43f ae74 	beq.w	800c07e <_printf_float+0xc2>
 800c396:	ee18 3a10 	vmov	r3, s16
 800c39a:	4652      	mov	r2, sl
 800c39c:	4631      	mov	r1, r6
 800c39e:	4628      	mov	r0, r5
 800c3a0:	47b8      	blx	r7
 800c3a2:	3001      	adds	r0, #1
 800c3a4:	f43f ae6b 	beq.w	800c07e <_printf_float+0xc2>
 800c3a8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800c3ac:	2200      	movs	r2, #0
 800c3ae:	2300      	movs	r3, #0
 800c3b0:	f7f4 fb8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3b4:	b9d8      	cbnz	r0, 800c3ee <_printf_float+0x432>
 800c3b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3b8:	f108 0201 	add.w	r2, r8, #1
 800c3bc:	3b01      	subs	r3, #1
 800c3be:	4631      	mov	r1, r6
 800c3c0:	4628      	mov	r0, r5
 800c3c2:	47b8      	blx	r7
 800c3c4:	3001      	adds	r0, #1
 800c3c6:	d10e      	bne.n	800c3e6 <_printf_float+0x42a>
 800c3c8:	e659      	b.n	800c07e <_printf_float+0xc2>
 800c3ca:	2301      	movs	r3, #1
 800c3cc:	4652      	mov	r2, sl
 800c3ce:	4631      	mov	r1, r6
 800c3d0:	4628      	mov	r0, r5
 800c3d2:	47b8      	blx	r7
 800c3d4:	3001      	adds	r0, #1
 800c3d6:	f43f ae52 	beq.w	800c07e <_printf_float+0xc2>
 800c3da:	f108 0801 	add.w	r8, r8, #1
 800c3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3e0:	3b01      	subs	r3, #1
 800c3e2:	4543      	cmp	r3, r8
 800c3e4:	dcf1      	bgt.n	800c3ca <_printf_float+0x40e>
 800c3e6:	464b      	mov	r3, r9
 800c3e8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800c3ec:	e6dc      	b.n	800c1a8 <_printf_float+0x1ec>
 800c3ee:	f04f 0800 	mov.w	r8, #0
 800c3f2:	f104 0a1a 	add.w	sl, r4, #26
 800c3f6:	e7f2      	b.n	800c3de <_printf_float+0x422>
 800c3f8:	2301      	movs	r3, #1
 800c3fa:	4642      	mov	r2, r8
 800c3fc:	e7df      	b.n	800c3be <_printf_float+0x402>
 800c3fe:	2301      	movs	r3, #1
 800c400:	464a      	mov	r2, r9
 800c402:	4631      	mov	r1, r6
 800c404:	4628      	mov	r0, r5
 800c406:	47b8      	blx	r7
 800c408:	3001      	adds	r0, #1
 800c40a:	f43f ae38 	beq.w	800c07e <_printf_float+0xc2>
 800c40e:	f108 0801 	add.w	r8, r8, #1
 800c412:	68e3      	ldr	r3, [r4, #12]
 800c414:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800c416:	1a5b      	subs	r3, r3, r1
 800c418:	4543      	cmp	r3, r8
 800c41a:	dcf0      	bgt.n	800c3fe <_printf_float+0x442>
 800c41c:	e6fa      	b.n	800c214 <_printf_float+0x258>
 800c41e:	f04f 0800 	mov.w	r8, #0
 800c422:	f104 0919 	add.w	r9, r4, #25
 800c426:	e7f4      	b.n	800c412 <_printf_float+0x456>

0800c428 <_printf_common>:
 800c428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c42c:	4616      	mov	r6, r2
 800c42e:	4699      	mov	r9, r3
 800c430:	688a      	ldr	r2, [r1, #8]
 800c432:	690b      	ldr	r3, [r1, #16]
 800c434:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800c438:	4293      	cmp	r3, r2
 800c43a:	bfb8      	it	lt
 800c43c:	4613      	movlt	r3, r2
 800c43e:	6033      	str	r3, [r6, #0]
 800c440:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800c444:	4607      	mov	r7, r0
 800c446:	460c      	mov	r4, r1
 800c448:	b10a      	cbz	r2, 800c44e <_printf_common+0x26>
 800c44a:	3301      	adds	r3, #1
 800c44c:	6033      	str	r3, [r6, #0]
 800c44e:	6823      	ldr	r3, [r4, #0]
 800c450:	0699      	lsls	r1, r3, #26
 800c452:	bf42      	ittt	mi
 800c454:	6833      	ldrmi	r3, [r6, #0]
 800c456:	3302      	addmi	r3, #2
 800c458:	6033      	strmi	r3, [r6, #0]
 800c45a:	6825      	ldr	r5, [r4, #0]
 800c45c:	f015 0506 	ands.w	r5, r5, #6
 800c460:	d106      	bne.n	800c470 <_printf_common+0x48>
 800c462:	f104 0a19 	add.w	sl, r4, #25
 800c466:	68e3      	ldr	r3, [r4, #12]
 800c468:	6832      	ldr	r2, [r6, #0]
 800c46a:	1a9b      	subs	r3, r3, r2
 800c46c:	42ab      	cmp	r3, r5
 800c46e:	dc26      	bgt.n	800c4be <_printf_common+0x96>
 800c470:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800c474:	1e13      	subs	r3, r2, #0
 800c476:	6822      	ldr	r2, [r4, #0]
 800c478:	bf18      	it	ne
 800c47a:	2301      	movne	r3, #1
 800c47c:	0692      	lsls	r2, r2, #26
 800c47e:	d42b      	bmi.n	800c4d8 <_printf_common+0xb0>
 800c480:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800c484:	4649      	mov	r1, r9
 800c486:	4638      	mov	r0, r7
 800c488:	47c0      	blx	r8
 800c48a:	3001      	adds	r0, #1
 800c48c:	d01e      	beq.n	800c4cc <_printf_common+0xa4>
 800c48e:	6823      	ldr	r3, [r4, #0]
 800c490:	68e5      	ldr	r5, [r4, #12]
 800c492:	6832      	ldr	r2, [r6, #0]
 800c494:	f003 0306 	and.w	r3, r3, #6
 800c498:	2b04      	cmp	r3, #4
 800c49a:	bf08      	it	eq
 800c49c:	1aad      	subeq	r5, r5, r2
 800c49e:	68a3      	ldr	r3, [r4, #8]
 800c4a0:	6922      	ldr	r2, [r4, #16]
 800c4a2:	bf0c      	ite	eq
 800c4a4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800c4a8:	2500      	movne	r5, #0
 800c4aa:	4293      	cmp	r3, r2
 800c4ac:	bfc4      	itt	gt
 800c4ae:	1a9b      	subgt	r3, r3, r2
 800c4b0:	18ed      	addgt	r5, r5, r3
 800c4b2:	2600      	movs	r6, #0
 800c4b4:	341a      	adds	r4, #26
 800c4b6:	42b5      	cmp	r5, r6
 800c4b8:	d11a      	bne.n	800c4f0 <_printf_common+0xc8>
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	e008      	b.n	800c4d0 <_printf_common+0xa8>
 800c4be:	2301      	movs	r3, #1
 800c4c0:	4652      	mov	r2, sl
 800c4c2:	4649      	mov	r1, r9
 800c4c4:	4638      	mov	r0, r7
 800c4c6:	47c0      	blx	r8
 800c4c8:	3001      	adds	r0, #1
 800c4ca:	d103      	bne.n	800c4d4 <_printf_common+0xac>
 800c4cc:	f04f 30ff 	mov.w	r0, #4294967295
 800c4d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c4d4:	3501      	adds	r5, #1
 800c4d6:	e7c6      	b.n	800c466 <_printf_common+0x3e>
 800c4d8:	18e1      	adds	r1, r4, r3
 800c4da:	1c5a      	adds	r2, r3, #1
 800c4dc:	2030      	movs	r0, #48	; 0x30
 800c4de:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800c4e2:	4422      	add	r2, r4
 800c4e4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800c4e8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800c4ec:	3302      	adds	r3, #2
 800c4ee:	e7c7      	b.n	800c480 <_printf_common+0x58>
 800c4f0:	2301      	movs	r3, #1
 800c4f2:	4622      	mov	r2, r4
 800c4f4:	4649      	mov	r1, r9
 800c4f6:	4638      	mov	r0, r7
 800c4f8:	47c0      	blx	r8
 800c4fa:	3001      	adds	r0, #1
 800c4fc:	d0e6      	beq.n	800c4cc <_printf_common+0xa4>
 800c4fe:	3601      	adds	r6, #1
 800c500:	e7d9      	b.n	800c4b6 <_printf_common+0x8e>
	...

0800c504 <_printf_i>:
 800c504:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800c508:	7e0f      	ldrb	r7, [r1, #24]
 800c50a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800c50c:	2f78      	cmp	r7, #120	; 0x78
 800c50e:	4691      	mov	r9, r2
 800c510:	4680      	mov	r8, r0
 800c512:	460c      	mov	r4, r1
 800c514:	469a      	mov	sl, r3
 800c516:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800c51a:	d807      	bhi.n	800c52c <_printf_i+0x28>
 800c51c:	2f62      	cmp	r7, #98	; 0x62
 800c51e:	d80a      	bhi.n	800c536 <_printf_i+0x32>
 800c520:	2f00      	cmp	r7, #0
 800c522:	f000 80d8 	beq.w	800c6d6 <_printf_i+0x1d2>
 800c526:	2f58      	cmp	r7, #88	; 0x58
 800c528:	f000 80a3 	beq.w	800c672 <_printf_i+0x16e>
 800c52c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c530:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800c534:	e03a      	b.n	800c5ac <_printf_i+0xa8>
 800c536:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800c53a:	2b15      	cmp	r3, #21
 800c53c:	d8f6      	bhi.n	800c52c <_printf_i+0x28>
 800c53e:	a101      	add	r1, pc, #4	; (adr r1, 800c544 <_printf_i+0x40>)
 800c540:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800c544:	0800c59d 	.word	0x0800c59d
 800c548:	0800c5b1 	.word	0x0800c5b1
 800c54c:	0800c52d 	.word	0x0800c52d
 800c550:	0800c52d 	.word	0x0800c52d
 800c554:	0800c52d 	.word	0x0800c52d
 800c558:	0800c52d 	.word	0x0800c52d
 800c55c:	0800c5b1 	.word	0x0800c5b1
 800c560:	0800c52d 	.word	0x0800c52d
 800c564:	0800c52d 	.word	0x0800c52d
 800c568:	0800c52d 	.word	0x0800c52d
 800c56c:	0800c52d 	.word	0x0800c52d
 800c570:	0800c6bd 	.word	0x0800c6bd
 800c574:	0800c5e1 	.word	0x0800c5e1
 800c578:	0800c69f 	.word	0x0800c69f
 800c57c:	0800c52d 	.word	0x0800c52d
 800c580:	0800c52d 	.word	0x0800c52d
 800c584:	0800c6df 	.word	0x0800c6df
 800c588:	0800c52d 	.word	0x0800c52d
 800c58c:	0800c5e1 	.word	0x0800c5e1
 800c590:	0800c52d 	.word	0x0800c52d
 800c594:	0800c52d 	.word	0x0800c52d
 800c598:	0800c6a7 	.word	0x0800c6a7
 800c59c:	682b      	ldr	r3, [r5, #0]
 800c59e:	1d1a      	adds	r2, r3, #4
 800c5a0:	681b      	ldr	r3, [r3, #0]
 800c5a2:	602a      	str	r2, [r5, #0]
 800c5a4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800c5a8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800c5ac:	2301      	movs	r3, #1
 800c5ae:	e0a3      	b.n	800c6f8 <_printf_i+0x1f4>
 800c5b0:	6820      	ldr	r0, [r4, #0]
 800c5b2:	6829      	ldr	r1, [r5, #0]
 800c5b4:	0606      	lsls	r6, r0, #24
 800c5b6:	f101 0304 	add.w	r3, r1, #4
 800c5ba:	d50a      	bpl.n	800c5d2 <_printf_i+0xce>
 800c5bc:	680e      	ldr	r6, [r1, #0]
 800c5be:	602b      	str	r3, [r5, #0]
 800c5c0:	2e00      	cmp	r6, #0
 800c5c2:	da03      	bge.n	800c5cc <_printf_i+0xc8>
 800c5c4:	232d      	movs	r3, #45	; 0x2d
 800c5c6:	4276      	negs	r6, r6
 800c5c8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c5cc:	485e      	ldr	r0, [pc, #376]	; (800c748 <_printf_i+0x244>)
 800c5ce:	230a      	movs	r3, #10
 800c5d0:	e019      	b.n	800c606 <_printf_i+0x102>
 800c5d2:	680e      	ldr	r6, [r1, #0]
 800c5d4:	602b      	str	r3, [r5, #0]
 800c5d6:	f010 0f40 	tst.w	r0, #64	; 0x40
 800c5da:	bf18      	it	ne
 800c5dc:	b236      	sxthne	r6, r6
 800c5de:	e7ef      	b.n	800c5c0 <_printf_i+0xbc>
 800c5e0:	682b      	ldr	r3, [r5, #0]
 800c5e2:	6820      	ldr	r0, [r4, #0]
 800c5e4:	1d19      	adds	r1, r3, #4
 800c5e6:	6029      	str	r1, [r5, #0]
 800c5e8:	0601      	lsls	r1, r0, #24
 800c5ea:	d501      	bpl.n	800c5f0 <_printf_i+0xec>
 800c5ec:	681e      	ldr	r6, [r3, #0]
 800c5ee:	e002      	b.n	800c5f6 <_printf_i+0xf2>
 800c5f0:	0646      	lsls	r6, r0, #25
 800c5f2:	d5fb      	bpl.n	800c5ec <_printf_i+0xe8>
 800c5f4:	881e      	ldrh	r6, [r3, #0]
 800c5f6:	4854      	ldr	r0, [pc, #336]	; (800c748 <_printf_i+0x244>)
 800c5f8:	2f6f      	cmp	r7, #111	; 0x6f
 800c5fa:	bf0c      	ite	eq
 800c5fc:	2308      	moveq	r3, #8
 800c5fe:	230a      	movne	r3, #10
 800c600:	2100      	movs	r1, #0
 800c602:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800c606:	6865      	ldr	r5, [r4, #4]
 800c608:	60a5      	str	r5, [r4, #8]
 800c60a:	2d00      	cmp	r5, #0
 800c60c:	bfa2      	ittt	ge
 800c60e:	6821      	ldrge	r1, [r4, #0]
 800c610:	f021 0104 	bicge.w	r1, r1, #4
 800c614:	6021      	strge	r1, [r4, #0]
 800c616:	b90e      	cbnz	r6, 800c61c <_printf_i+0x118>
 800c618:	2d00      	cmp	r5, #0
 800c61a:	d04d      	beq.n	800c6b8 <_printf_i+0x1b4>
 800c61c:	4615      	mov	r5, r2
 800c61e:	fbb6 f1f3 	udiv	r1, r6, r3
 800c622:	fb03 6711 	mls	r7, r3, r1, r6
 800c626:	5dc7      	ldrb	r7, [r0, r7]
 800c628:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800c62c:	4637      	mov	r7, r6
 800c62e:	42bb      	cmp	r3, r7
 800c630:	460e      	mov	r6, r1
 800c632:	d9f4      	bls.n	800c61e <_printf_i+0x11a>
 800c634:	2b08      	cmp	r3, #8
 800c636:	d10b      	bne.n	800c650 <_printf_i+0x14c>
 800c638:	6823      	ldr	r3, [r4, #0]
 800c63a:	07de      	lsls	r6, r3, #31
 800c63c:	d508      	bpl.n	800c650 <_printf_i+0x14c>
 800c63e:	6923      	ldr	r3, [r4, #16]
 800c640:	6861      	ldr	r1, [r4, #4]
 800c642:	4299      	cmp	r1, r3
 800c644:	bfde      	ittt	le
 800c646:	2330      	movle	r3, #48	; 0x30
 800c648:	f805 3c01 	strble.w	r3, [r5, #-1]
 800c64c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800c650:	1b52      	subs	r2, r2, r5
 800c652:	6122      	str	r2, [r4, #16]
 800c654:	f8cd a000 	str.w	sl, [sp]
 800c658:	464b      	mov	r3, r9
 800c65a:	aa03      	add	r2, sp, #12
 800c65c:	4621      	mov	r1, r4
 800c65e:	4640      	mov	r0, r8
 800c660:	f7ff fee2 	bl	800c428 <_printf_common>
 800c664:	3001      	adds	r0, #1
 800c666:	d14c      	bne.n	800c702 <_printf_i+0x1fe>
 800c668:	f04f 30ff 	mov.w	r0, #4294967295
 800c66c:	b004      	add	sp, #16
 800c66e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c672:	4835      	ldr	r0, [pc, #212]	; (800c748 <_printf_i+0x244>)
 800c674:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800c678:	6829      	ldr	r1, [r5, #0]
 800c67a:	6823      	ldr	r3, [r4, #0]
 800c67c:	f851 6b04 	ldr.w	r6, [r1], #4
 800c680:	6029      	str	r1, [r5, #0]
 800c682:	061d      	lsls	r5, r3, #24
 800c684:	d514      	bpl.n	800c6b0 <_printf_i+0x1ac>
 800c686:	07df      	lsls	r7, r3, #31
 800c688:	bf44      	itt	mi
 800c68a:	f043 0320 	orrmi.w	r3, r3, #32
 800c68e:	6023      	strmi	r3, [r4, #0]
 800c690:	b91e      	cbnz	r6, 800c69a <_printf_i+0x196>
 800c692:	6823      	ldr	r3, [r4, #0]
 800c694:	f023 0320 	bic.w	r3, r3, #32
 800c698:	6023      	str	r3, [r4, #0]
 800c69a:	2310      	movs	r3, #16
 800c69c:	e7b0      	b.n	800c600 <_printf_i+0xfc>
 800c69e:	6823      	ldr	r3, [r4, #0]
 800c6a0:	f043 0320 	orr.w	r3, r3, #32
 800c6a4:	6023      	str	r3, [r4, #0]
 800c6a6:	2378      	movs	r3, #120	; 0x78
 800c6a8:	4828      	ldr	r0, [pc, #160]	; (800c74c <_printf_i+0x248>)
 800c6aa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800c6ae:	e7e3      	b.n	800c678 <_printf_i+0x174>
 800c6b0:	0659      	lsls	r1, r3, #25
 800c6b2:	bf48      	it	mi
 800c6b4:	b2b6      	uxthmi	r6, r6
 800c6b6:	e7e6      	b.n	800c686 <_printf_i+0x182>
 800c6b8:	4615      	mov	r5, r2
 800c6ba:	e7bb      	b.n	800c634 <_printf_i+0x130>
 800c6bc:	682b      	ldr	r3, [r5, #0]
 800c6be:	6826      	ldr	r6, [r4, #0]
 800c6c0:	6961      	ldr	r1, [r4, #20]
 800c6c2:	1d18      	adds	r0, r3, #4
 800c6c4:	6028      	str	r0, [r5, #0]
 800c6c6:	0635      	lsls	r5, r6, #24
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	d501      	bpl.n	800c6d0 <_printf_i+0x1cc>
 800c6cc:	6019      	str	r1, [r3, #0]
 800c6ce:	e002      	b.n	800c6d6 <_printf_i+0x1d2>
 800c6d0:	0670      	lsls	r0, r6, #25
 800c6d2:	d5fb      	bpl.n	800c6cc <_printf_i+0x1c8>
 800c6d4:	8019      	strh	r1, [r3, #0]
 800c6d6:	2300      	movs	r3, #0
 800c6d8:	6123      	str	r3, [r4, #16]
 800c6da:	4615      	mov	r5, r2
 800c6dc:	e7ba      	b.n	800c654 <_printf_i+0x150>
 800c6de:	682b      	ldr	r3, [r5, #0]
 800c6e0:	1d1a      	adds	r2, r3, #4
 800c6e2:	602a      	str	r2, [r5, #0]
 800c6e4:	681d      	ldr	r5, [r3, #0]
 800c6e6:	6862      	ldr	r2, [r4, #4]
 800c6e8:	2100      	movs	r1, #0
 800c6ea:	4628      	mov	r0, r5
 800c6ec:	f7f3 fd78 	bl	80001e0 <memchr>
 800c6f0:	b108      	cbz	r0, 800c6f6 <_printf_i+0x1f2>
 800c6f2:	1b40      	subs	r0, r0, r5
 800c6f4:	6060      	str	r0, [r4, #4]
 800c6f6:	6863      	ldr	r3, [r4, #4]
 800c6f8:	6123      	str	r3, [r4, #16]
 800c6fa:	2300      	movs	r3, #0
 800c6fc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800c700:	e7a8      	b.n	800c654 <_printf_i+0x150>
 800c702:	6923      	ldr	r3, [r4, #16]
 800c704:	462a      	mov	r2, r5
 800c706:	4649      	mov	r1, r9
 800c708:	4640      	mov	r0, r8
 800c70a:	47d0      	blx	sl
 800c70c:	3001      	adds	r0, #1
 800c70e:	d0ab      	beq.n	800c668 <_printf_i+0x164>
 800c710:	6823      	ldr	r3, [r4, #0]
 800c712:	079b      	lsls	r3, r3, #30
 800c714:	d413      	bmi.n	800c73e <_printf_i+0x23a>
 800c716:	68e0      	ldr	r0, [r4, #12]
 800c718:	9b03      	ldr	r3, [sp, #12]
 800c71a:	4298      	cmp	r0, r3
 800c71c:	bfb8      	it	lt
 800c71e:	4618      	movlt	r0, r3
 800c720:	e7a4      	b.n	800c66c <_printf_i+0x168>
 800c722:	2301      	movs	r3, #1
 800c724:	4632      	mov	r2, r6
 800c726:	4649      	mov	r1, r9
 800c728:	4640      	mov	r0, r8
 800c72a:	47d0      	blx	sl
 800c72c:	3001      	adds	r0, #1
 800c72e:	d09b      	beq.n	800c668 <_printf_i+0x164>
 800c730:	3501      	adds	r5, #1
 800c732:	68e3      	ldr	r3, [r4, #12]
 800c734:	9903      	ldr	r1, [sp, #12]
 800c736:	1a5b      	subs	r3, r3, r1
 800c738:	42ab      	cmp	r3, r5
 800c73a:	dcf2      	bgt.n	800c722 <_printf_i+0x21e>
 800c73c:	e7eb      	b.n	800c716 <_printf_i+0x212>
 800c73e:	2500      	movs	r5, #0
 800c740:	f104 0619 	add.w	r6, r4, #25
 800c744:	e7f5      	b.n	800c732 <_printf_i+0x22e>
 800c746:	bf00      	nop
 800c748:	0800f6da 	.word	0x0800f6da
 800c74c:	0800f6eb 	.word	0x0800f6eb

0800c750 <cleanup_glue>:
 800c750:	b538      	push	{r3, r4, r5, lr}
 800c752:	460c      	mov	r4, r1
 800c754:	6809      	ldr	r1, [r1, #0]
 800c756:	4605      	mov	r5, r0
 800c758:	b109      	cbz	r1, 800c75e <cleanup_glue+0xe>
 800c75a:	f7ff fff9 	bl	800c750 <cleanup_glue>
 800c75e:	4621      	mov	r1, r4
 800c760:	4628      	mov	r0, r5
 800c762:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c766:	f001 bbf3 	b.w	800df50 <_free_r>
	...

0800c76c <_reclaim_reent>:
 800c76c:	4b2c      	ldr	r3, [pc, #176]	; (800c820 <_reclaim_reent+0xb4>)
 800c76e:	681b      	ldr	r3, [r3, #0]
 800c770:	4283      	cmp	r3, r0
 800c772:	b570      	push	{r4, r5, r6, lr}
 800c774:	4604      	mov	r4, r0
 800c776:	d051      	beq.n	800c81c <_reclaim_reent+0xb0>
 800c778:	6a43      	ldr	r3, [r0, #36]	; 0x24
 800c77a:	b143      	cbz	r3, 800c78e <_reclaim_reent+0x22>
 800c77c:	68db      	ldr	r3, [r3, #12]
 800c77e:	2b00      	cmp	r3, #0
 800c780:	d14a      	bne.n	800c818 <_reclaim_reent+0xac>
 800c782:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c784:	6819      	ldr	r1, [r3, #0]
 800c786:	b111      	cbz	r1, 800c78e <_reclaim_reent+0x22>
 800c788:	4620      	mov	r0, r4
 800c78a:	f001 fbe1 	bl	800df50 <_free_r>
 800c78e:	6961      	ldr	r1, [r4, #20]
 800c790:	b111      	cbz	r1, 800c798 <_reclaim_reent+0x2c>
 800c792:	4620      	mov	r0, r4
 800c794:	f001 fbdc 	bl	800df50 <_free_r>
 800c798:	6a61      	ldr	r1, [r4, #36]	; 0x24
 800c79a:	b111      	cbz	r1, 800c7a2 <_reclaim_reent+0x36>
 800c79c:	4620      	mov	r0, r4
 800c79e:	f001 fbd7 	bl	800df50 <_free_r>
 800c7a2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 800c7a4:	b111      	cbz	r1, 800c7ac <_reclaim_reent+0x40>
 800c7a6:	4620      	mov	r0, r4
 800c7a8:	f001 fbd2 	bl	800df50 <_free_r>
 800c7ac:	6be1      	ldr	r1, [r4, #60]	; 0x3c
 800c7ae:	b111      	cbz	r1, 800c7b6 <_reclaim_reent+0x4a>
 800c7b0:	4620      	mov	r0, r4
 800c7b2:	f001 fbcd 	bl	800df50 <_free_r>
 800c7b6:	6c21      	ldr	r1, [r4, #64]	; 0x40
 800c7b8:	b111      	cbz	r1, 800c7c0 <_reclaim_reent+0x54>
 800c7ba:	4620      	mov	r0, r4
 800c7bc:	f001 fbc8 	bl	800df50 <_free_r>
 800c7c0:	6de1      	ldr	r1, [r4, #92]	; 0x5c
 800c7c2:	b111      	cbz	r1, 800c7ca <_reclaim_reent+0x5e>
 800c7c4:	4620      	mov	r0, r4
 800c7c6:	f001 fbc3 	bl	800df50 <_free_r>
 800c7ca:	6da1      	ldr	r1, [r4, #88]	; 0x58
 800c7cc:	b111      	cbz	r1, 800c7d4 <_reclaim_reent+0x68>
 800c7ce:	4620      	mov	r0, r4
 800c7d0:	f001 fbbe 	bl	800df50 <_free_r>
 800c7d4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800c7d6:	b111      	cbz	r1, 800c7de <_reclaim_reent+0x72>
 800c7d8:	4620      	mov	r0, r4
 800c7da:	f001 fbb9 	bl	800df50 <_free_r>
 800c7de:	69a3      	ldr	r3, [r4, #24]
 800c7e0:	b1e3      	cbz	r3, 800c81c <_reclaim_reent+0xb0>
 800c7e2:	6aa3      	ldr	r3, [r4, #40]	; 0x28
 800c7e4:	4620      	mov	r0, r4
 800c7e6:	4798      	blx	r3
 800c7e8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 800c7ea:	b1b9      	cbz	r1, 800c81c <_reclaim_reent+0xb0>
 800c7ec:	4620      	mov	r0, r4
 800c7ee:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c7f2:	f7ff bfad 	b.w	800c750 <cleanup_glue>
 800c7f6:	5949      	ldr	r1, [r1, r5]
 800c7f8:	b941      	cbnz	r1, 800c80c <_reclaim_reent+0xa0>
 800c7fa:	3504      	adds	r5, #4
 800c7fc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c7fe:	2d80      	cmp	r5, #128	; 0x80
 800c800:	68d9      	ldr	r1, [r3, #12]
 800c802:	d1f8      	bne.n	800c7f6 <_reclaim_reent+0x8a>
 800c804:	4620      	mov	r0, r4
 800c806:	f001 fba3 	bl	800df50 <_free_r>
 800c80a:	e7ba      	b.n	800c782 <_reclaim_reent+0x16>
 800c80c:	680e      	ldr	r6, [r1, #0]
 800c80e:	4620      	mov	r0, r4
 800c810:	f001 fb9e 	bl	800df50 <_free_r>
 800c814:	4631      	mov	r1, r6
 800c816:	e7ef      	b.n	800c7f8 <_reclaim_reent+0x8c>
 800c818:	2500      	movs	r5, #0
 800c81a:	e7ef      	b.n	800c7fc <_reclaim_reent+0x90>
 800c81c:	bd70      	pop	{r4, r5, r6, pc}
 800c81e:	bf00      	nop
 800c820:	20000034 	.word	0x20000034

0800c824 <_sbrk_r>:
 800c824:	b538      	push	{r3, r4, r5, lr}
 800c826:	4d06      	ldr	r5, [pc, #24]	; (800c840 <_sbrk_r+0x1c>)
 800c828:	2300      	movs	r3, #0
 800c82a:	4604      	mov	r4, r0
 800c82c:	4608      	mov	r0, r1
 800c82e:	602b      	str	r3, [r5, #0]
 800c830:	f7f7 fb42 	bl	8003eb8 <_sbrk>
 800c834:	1c43      	adds	r3, r0, #1
 800c836:	d102      	bne.n	800c83e <_sbrk_r+0x1a>
 800c838:	682b      	ldr	r3, [r5, #0]
 800c83a:	b103      	cbz	r3, 800c83e <_sbrk_r+0x1a>
 800c83c:	6023      	str	r3, [r4, #0]
 800c83e:	bd38      	pop	{r3, r4, r5, pc}
 800c840:	20005420 	.word	0x20005420

0800c844 <siprintf>:
 800c844:	b40e      	push	{r1, r2, r3}
 800c846:	b500      	push	{lr}
 800c848:	b09c      	sub	sp, #112	; 0x70
 800c84a:	ab1d      	add	r3, sp, #116	; 0x74
 800c84c:	9002      	str	r0, [sp, #8]
 800c84e:	9006      	str	r0, [sp, #24]
 800c850:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800c854:	4809      	ldr	r0, [pc, #36]	; (800c87c <siprintf+0x38>)
 800c856:	9107      	str	r1, [sp, #28]
 800c858:	9104      	str	r1, [sp, #16]
 800c85a:	4909      	ldr	r1, [pc, #36]	; (800c880 <siprintf+0x3c>)
 800c85c:	f853 2b04 	ldr.w	r2, [r3], #4
 800c860:	9105      	str	r1, [sp, #20]
 800c862:	6800      	ldr	r0, [r0, #0]
 800c864:	9301      	str	r3, [sp, #4]
 800c866:	a902      	add	r1, sp, #8
 800c868:	f001 fc1a 	bl	800e0a0 <_svfiprintf_r>
 800c86c:	9b02      	ldr	r3, [sp, #8]
 800c86e:	2200      	movs	r2, #0
 800c870:	701a      	strb	r2, [r3, #0]
 800c872:	b01c      	add	sp, #112	; 0x70
 800c874:	f85d eb04 	ldr.w	lr, [sp], #4
 800c878:	b003      	add	sp, #12
 800c87a:	4770      	bx	lr
 800c87c:	20000034 	.word	0x20000034
 800c880:	ffff0208 	.word	0xffff0208

0800c884 <__sread>:
 800c884:	b510      	push	{r4, lr}
 800c886:	460c      	mov	r4, r1
 800c888:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c88c:	f001 fd08 	bl	800e2a0 <_read_r>
 800c890:	2800      	cmp	r0, #0
 800c892:	bfab      	itete	ge
 800c894:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c896:	89a3      	ldrhlt	r3, [r4, #12]
 800c898:	181b      	addge	r3, r3, r0
 800c89a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c89e:	bfac      	ite	ge
 800c8a0:	6563      	strge	r3, [r4, #84]	; 0x54
 800c8a2:	81a3      	strhlt	r3, [r4, #12]
 800c8a4:	bd10      	pop	{r4, pc}

0800c8a6 <__swrite>:
 800c8a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c8aa:	461f      	mov	r7, r3
 800c8ac:	898b      	ldrh	r3, [r1, #12]
 800c8ae:	05db      	lsls	r3, r3, #23
 800c8b0:	4605      	mov	r5, r0
 800c8b2:	460c      	mov	r4, r1
 800c8b4:	4616      	mov	r6, r2
 800c8b6:	d505      	bpl.n	800c8c4 <__swrite+0x1e>
 800c8b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8bc:	2302      	movs	r3, #2
 800c8be:	2200      	movs	r2, #0
 800c8c0:	f000 ff86 	bl	800d7d0 <_lseek_r>
 800c8c4:	89a3      	ldrh	r3, [r4, #12]
 800c8c6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c8ca:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c8ce:	81a3      	strh	r3, [r4, #12]
 800c8d0:	4632      	mov	r2, r6
 800c8d2:	463b      	mov	r3, r7
 800c8d4:	4628      	mov	r0, r5
 800c8d6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c8da:	f000 b817 	b.w	800c90c <_write_r>

0800c8de <__sseek>:
 800c8de:	b510      	push	{r4, lr}
 800c8e0:	460c      	mov	r4, r1
 800c8e2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c8e6:	f000 ff73 	bl	800d7d0 <_lseek_r>
 800c8ea:	1c43      	adds	r3, r0, #1
 800c8ec:	89a3      	ldrh	r3, [r4, #12]
 800c8ee:	bf15      	itete	ne
 800c8f0:	6560      	strne	r0, [r4, #84]	; 0x54
 800c8f2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c8f6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c8fa:	81a3      	strheq	r3, [r4, #12]
 800c8fc:	bf18      	it	ne
 800c8fe:	81a3      	strhne	r3, [r4, #12]
 800c900:	bd10      	pop	{r4, pc}

0800c902 <__sclose>:
 800c902:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c906:	f000 b813 	b.w	800c930 <_close_r>
	...

0800c90c <_write_r>:
 800c90c:	b538      	push	{r3, r4, r5, lr}
 800c90e:	4d07      	ldr	r5, [pc, #28]	; (800c92c <_write_r+0x20>)
 800c910:	4604      	mov	r4, r0
 800c912:	4608      	mov	r0, r1
 800c914:	4611      	mov	r1, r2
 800c916:	2200      	movs	r2, #0
 800c918:	602a      	str	r2, [r5, #0]
 800c91a:	461a      	mov	r2, r3
 800c91c:	f7f7 fa7b 	bl	8003e16 <_write>
 800c920:	1c43      	adds	r3, r0, #1
 800c922:	d102      	bne.n	800c92a <_write_r+0x1e>
 800c924:	682b      	ldr	r3, [r5, #0]
 800c926:	b103      	cbz	r3, 800c92a <_write_r+0x1e>
 800c928:	6023      	str	r3, [r4, #0]
 800c92a:	bd38      	pop	{r3, r4, r5, pc}
 800c92c:	20005420 	.word	0x20005420

0800c930 <_close_r>:
 800c930:	b538      	push	{r3, r4, r5, lr}
 800c932:	4d06      	ldr	r5, [pc, #24]	; (800c94c <_close_r+0x1c>)
 800c934:	2300      	movs	r3, #0
 800c936:	4604      	mov	r4, r0
 800c938:	4608      	mov	r0, r1
 800c93a:	602b      	str	r3, [r5, #0]
 800c93c:	f7f7 fa87 	bl	8003e4e <_close>
 800c940:	1c43      	adds	r3, r0, #1
 800c942:	d102      	bne.n	800c94a <_close_r+0x1a>
 800c944:	682b      	ldr	r3, [r5, #0]
 800c946:	b103      	cbz	r3, 800c94a <_close_r+0x1a>
 800c948:	6023      	str	r3, [r4, #0]
 800c94a:	bd38      	pop	{r3, r4, r5, pc}
 800c94c:	20005420 	.word	0x20005420

0800c950 <quorem>:
 800c950:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c954:	6903      	ldr	r3, [r0, #16]
 800c956:	690c      	ldr	r4, [r1, #16]
 800c958:	42a3      	cmp	r3, r4
 800c95a:	4607      	mov	r7, r0
 800c95c:	f2c0 8081 	blt.w	800ca62 <quorem+0x112>
 800c960:	3c01      	subs	r4, #1
 800c962:	f101 0814 	add.w	r8, r1, #20
 800c966:	f100 0514 	add.w	r5, r0, #20
 800c96a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c96e:	9301      	str	r3, [sp, #4]
 800c970:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c974:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c978:	3301      	adds	r3, #1
 800c97a:	429a      	cmp	r2, r3
 800c97c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c980:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c984:	fbb2 f6f3 	udiv	r6, r2, r3
 800c988:	d331      	bcc.n	800c9ee <quorem+0x9e>
 800c98a:	f04f 0e00 	mov.w	lr, #0
 800c98e:	4640      	mov	r0, r8
 800c990:	46ac      	mov	ip, r5
 800c992:	46f2      	mov	sl, lr
 800c994:	f850 2b04 	ldr.w	r2, [r0], #4
 800c998:	b293      	uxth	r3, r2
 800c99a:	fb06 e303 	mla	r3, r6, r3, lr
 800c99e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c9a2:	b29b      	uxth	r3, r3
 800c9a4:	ebaa 0303 	sub.w	r3, sl, r3
 800c9a8:	f8dc a000 	ldr.w	sl, [ip]
 800c9ac:	0c12      	lsrs	r2, r2, #16
 800c9ae:	fa13 f38a 	uxtah	r3, r3, sl
 800c9b2:	fb06 e202 	mla	r2, r6, r2, lr
 800c9b6:	9300      	str	r3, [sp, #0]
 800c9b8:	9b00      	ldr	r3, [sp, #0]
 800c9ba:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c9be:	b292      	uxth	r2, r2
 800c9c0:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c9c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c9c8:	f8bd 3000 	ldrh.w	r3, [sp]
 800c9cc:	4581      	cmp	r9, r0
 800c9ce:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c9d2:	f84c 3b04 	str.w	r3, [ip], #4
 800c9d6:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c9da:	d2db      	bcs.n	800c994 <quorem+0x44>
 800c9dc:	f855 300b 	ldr.w	r3, [r5, fp]
 800c9e0:	b92b      	cbnz	r3, 800c9ee <quorem+0x9e>
 800c9e2:	9b01      	ldr	r3, [sp, #4]
 800c9e4:	3b04      	subs	r3, #4
 800c9e6:	429d      	cmp	r5, r3
 800c9e8:	461a      	mov	r2, r3
 800c9ea:	d32e      	bcc.n	800ca4a <quorem+0xfa>
 800c9ec:	613c      	str	r4, [r7, #16]
 800c9ee:	4638      	mov	r0, r7
 800c9f0:	f001 f996 	bl	800dd20 <__mcmp>
 800c9f4:	2800      	cmp	r0, #0
 800c9f6:	db24      	blt.n	800ca42 <quorem+0xf2>
 800c9f8:	3601      	adds	r6, #1
 800c9fa:	4628      	mov	r0, r5
 800c9fc:	f04f 0c00 	mov.w	ip, #0
 800ca00:	f858 2b04 	ldr.w	r2, [r8], #4
 800ca04:	f8d0 e000 	ldr.w	lr, [r0]
 800ca08:	b293      	uxth	r3, r2
 800ca0a:	ebac 0303 	sub.w	r3, ip, r3
 800ca0e:	0c12      	lsrs	r2, r2, #16
 800ca10:	fa13 f38e 	uxtah	r3, r3, lr
 800ca14:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800ca18:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ca1c:	b29b      	uxth	r3, r3
 800ca1e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ca22:	45c1      	cmp	r9, r8
 800ca24:	f840 3b04 	str.w	r3, [r0], #4
 800ca28:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800ca2c:	d2e8      	bcs.n	800ca00 <quorem+0xb0>
 800ca2e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ca32:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ca36:	b922      	cbnz	r2, 800ca42 <quorem+0xf2>
 800ca38:	3b04      	subs	r3, #4
 800ca3a:	429d      	cmp	r5, r3
 800ca3c:	461a      	mov	r2, r3
 800ca3e:	d30a      	bcc.n	800ca56 <quorem+0x106>
 800ca40:	613c      	str	r4, [r7, #16]
 800ca42:	4630      	mov	r0, r6
 800ca44:	b003      	add	sp, #12
 800ca46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca4a:	6812      	ldr	r2, [r2, #0]
 800ca4c:	3b04      	subs	r3, #4
 800ca4e:	2a00      	cmp	r2, #0
 800ca50:	d1cc      	bne.n	800c9ec <quorem+0x9c>
 800ca52:	3c01      	subs	r4, #1
 800ca54:	e7c7      	b.n	800c9e6 <quorem+0x96>
 800ca56:	6812      	ldr	r2, [r2, #0]
 800ca58:	3b04      	subs	r3, #4
 800ca5a:	2a00      	cmp	r2, #0
 800ca5c:	d1f0      	bne.n	800ca40 <quorem+0xf0>
 800ca5e:	3c01      	subs	r4, #1
 800ca60:	e7eb      	b.n	800ca3a <quorem+0xea>
 800ca62:	2000      	movs	r0, #0
 800ca64:	e7ee      	b.n	800ca44 <quorem+0xf4>
	...

0800ca68 <_dtoa_r>:
 800ca68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ca6c:	ed2d 8b04 	vpush	{d8-d9}
 800ca70:	ec57 6b10 	vmov	r6, r7, d0
 800ca74:	b093      	sub	sp, #76	; 0x4c
 800ca76:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800ca78:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800ca7c:	9106      	str	r1, [sp, #24]
 800ca7e:	ee10 aa10 	vmov	sl, s0
 800ca82:	4604      	mov	r4, r0
 800ca84:	9209      	str	r2, [sp, #36]	; 0x24
 800ca86:	930c      	str	r3, [sp, #48]	; 0x30
 800ca88:	46bb      	mov	fp, r7
 800ca8a:	b975      	cbnz	r5, 800caaa <_dtoa_r+0x42>
 800ca8c:	2010      	movs	r0, #16
 800ca8e:	f000 feb1 	bl	800d7f4 <malloc>
 800ca92:	4602      	mov	r2, r0
 800ca94:	6260      	str	r0, [r4, #36]	; 0x24
 800ca96:	b920      	cbnz	r0, 800caa2 <_dtoa_r+0x3a>
 800ca98:	4ba7      	ldr	r3, [pc, #668]	; (800cd38 <_dtoa_r+0x2d0>)
 800ca9a:	21ea      	movs	r1, #234	; 0xea
 800ca9c:	48a7      	ldr	r0, [pc, #668]	; (800cd3c <_dtoa_r+0x2d4>)
 800ca9e:	f001 fc11 	bl	800e2c4 <__assert_func>
 800caa2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800caa6:	6005      	str	r5, [r0, #0]
 800caa8:	60c5      	str	r5, [r0, #12]
 800caaa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800caac:	6819      	ldr	r1, [r3, #0]
 800caae:	b151      	cbz	r1, 800cac6 <_dtoa_r+0x5e>
 800cab0:	685a      	ldr	r2, [r3, #4]
 800cab2:	604a      	str	r2, [r1, #4]
 800cab4:	2301      	movs	r3, #1
 800cab6:	4093      	lsls	r3, r2
 800cab8:	608b      	str	r3, [r1, #8]
 800caba:	4620      	mov	r0, r4
 800cabc:	f000 feee 	bl	800d89c <_Bfree>
 800cac0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cac2:	2200      	movs	r2, #0
 800cac4:	601a      	str	r2, [r3, #0]
 800cac6:	1e3b      	subs	r3, r7, #0
 800cac8:	bfaa      	itet	ge
 800caca:	2300      	movge	r3, #0
 800cacc:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800cad0:	f8c8 3000 	strge.w	r3, [r8]
 800cad4:	4b9a      	ldr	r3, [pc, #616]	; (800cd40 <_dtoa_r+0x2d8>)
 800cad6:	bfbc      	itt	lt
 800cad8:	2201      	movlt	r2, #1
 800cada:	f8c8 2000 	strlt.w	r2, [r8]
 800cade:	ea33 030b 	bics.w	r3, r3, fp
 800cae2:	d11b      	bne.n	800cb1c <_dtoa_r+0xb4>
 800cae4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cae6:	f242 730f 	movw	r3, #9999	; 0x270f
 800caea:	6013      	str	r3, [r2, #0]
 800caec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800caf0:	4333      	orrs	r3, r6
 800caf2:	f000 8592 	beq.w	800d61a <_dtoa_r+0xbb2>
 800caf6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800caf8:	b963      	cbnz	r3, 800cb14 <_dtoa_r+0xac>
 800cafa:	4b92      	ldr	r3, [pc, #584]	; (800cd44 <_dtoa_r+0x2dc>)
 800cafc:	e022      	b.n	800cb44 <_dtoa_r+0xdc>
 800cafe:	4b92      	ldr	r3, [pc, #584]	; (800cd48 <_dtoa_r+0x2e0>)
 800cb00:	9301      	str	r3, [sp, #4]
 800cb02:	3308      	adds	r3, #8
 800cb04:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800cb06:	6013      	str	r3, [r2, #0]
 800cb08:	9801      	ldr	r0, [sp, #4]
 800cb0a:	b013      	add	sp, #76	; 0x4c
 800cb0c:	ecbd 8b04 	vpop	{d8-d9}
 800cb10:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800cb14:	4b8b      	ldr	r3, [pc, #556]	; (800cd44 <_dtoa_r+0x2dc>)
 800cb16:	9301      	str	r3, [sp, #4]
 800cb18:	3303      	adds	r3, #3
 800cb1a:	e7f3      	b.n	800cb04 <_dtoa_r+0x9c>
 800cb1c:	2200      	movs	r2, #0
 800cb1e:	2300      	movs	r3, #0
 800cb20:	4650      	mov	r0, sl
 800cb22:	4659      	mov	r1, fp
 800cb24:	f7f3 ffd0 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb28:	ec4b ab19 	vmov	d9, sl, fp
 800cb2c:	4680      	mov	r8, r0
 800cb2e:	b158      	cbz	r0, 800cb48 <_dtoa_r+0xe0>
 800cb30:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800cb32:	2301      	movs	r3, #1
 800cb34:	6013      	str	r3, [r2, #0]
 800cb36:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	f000 856b 	beq.w	800d614 <_dtoa_r+0xbac>
 800cb3e:	4883      	ldr	r0, [pc, #524]	; (800cd4c <_dtoa_r+0x2e4>)
 800cb40:	6018      	str	r0, [r3, #0]
 800cb42:	1e43      	subs	r3, r0, #1
 800cb44:	9301      	str	r3, [sp, #4]
 800cb46:	e7df      	b.n	800cb08 <_dtoa_r+0xa0>
 800cb48:	ec4b ab10 	vmov	d0, sl, fp
 800cb4c:	aa10      	add	r2, sp, #64	; 0x40
 800cb4e:	a911      	add	r1, sp, #68	; 0x44
 800cb50:	4620      	mov	r0, r4
 800cb52:	f001 f98b 	bl	800de6c <__d2b>
 800cb56:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800cb5a:	ee08 0a10 	vmov	s16, r0
 800cb5e:	2d00      	cmp	r5, #0
 800cb60:	f000 8084 	beq.w	800cc6c <_dtoa_r+0x204>
 800cb64:	ee19 3a90 	vmov	r3, s19
 800cb68:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cb6c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cb70:	4656      	mov	r6, sl
 800cb72:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cb76:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cb7a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cb7e:	4b74      	ldr	r3, [pc, #464]	; (800cd50 <_dtoa_r+0x2e8>)
 800cb80:	2200      	movs	r2, #0
 800cb82:	4630      	mov	r0, r6
 800cb84:	4639      	mov	r1, r7
 800cb86:	f7f3 fb7f 	bl	8000288 <__aeabi_dsub>
 800cb8a:	a365      	add	r3, pc, #404	; (adr r3, 800cd20 <_dtoa_r+0x2b8>)
 800cb8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb90:	f7f3 fd32 	bl	80005f8 <__aeabi_dmul>
 800cb94:	a364      	add	r3, pc, #400	; (adr r3, 800cd28 <_dtoa_r+0x2c0>)
 800cb96:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb9a:	f7f3 fb77 	bl	800028c <__adddf3>
 800cb9e:	4606      	mov	r6, r0
 800cba0:	4628      	mov	r0, r5
 800cba2:	460f      	mov	r7, r1
 800cba4:	f7f3 fcbe 	bl	8000524 <__aeabi_i2d>
 800cba8:	a361      	add	r3, pc, #388	; (adr r3, 800cd30 <_dtoa_r+0x2c8>)
 800cbaa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbae:	f7f3 fd23 	bl	80005f8 <__aeabi_dmul>
 800cbb2:	4602      	mov	r2, r0
 800cbb4:	460b      	mov	r3, r1
 800cbb6:	4630      	mov	r0, r6
 800cbb8:	4639      	mov	r1, r7
 800cbba:	f7f3 fb67 	bl	800028c <__adddf3>
 800cbbe:	4606      	mov	r6, r0
 800cbc0:	460f      	mov	r7, r1
 800cbc2:	f7f3 ffc9 	bl	8000b58 <__aeabi_d2iz>
 800cbc6:	2200      	movs	r2, #0
 800cbc8:	9000      	str	r0, [sp, #0]
 800cbca:	2300      	movs	r3, #0
 800cbcc:	4630      	mov	r0, r6
 800cbce:	4639      	mov	r1, r7
 800cbd0:	f7f3 ff84 	bl	8000adc <__aeabi_dcmplt>
 800cbd4:	b150      	cbz	r0, 800cbec <_dtoa_r+0x184>
 800cbd6:	9800      	ldr	r0, [sp, #0]
 800cbd8:	f7f3 fca4 	bl	8000524 <__aeabi_i2d>
 800cbdc:	4632      	mov	r2, r6
 800cbde:	463b      	mov	r3, r7
 800cbe0:	f7f3 ff72 	bl	8000ac8 <__aeabi_dcmpeq>
 800cbe4:	b910      	cbnz	r0, 800cbec <_dtoa_r+0x184>
 800cbe6:	9b00      	ldr	r3, [sp, #0]
 800cbe8:	3b01      	subs	r3, #1
 800cbea:	9300      	str	r3, [sp, #0]
 800cbec:	9b00      	ldr	r3, [sp, #0]
 800cbee:	2b16      	cmp	r3, #22
 800cbf0:	d85a      	bhi.n	800cca8 <_dtoa_r+0x240>
 800cbf2:	9a00      	ldr	r2, [sp, #0]
 800cbf4:	4b57      	ldr	r3, [pc, #348]	; (800cd54 <_dtoa_r+0x2ec>)
 800cbf6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cbfa:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cbfe:	ec51 0b19 	vmov	r0, r1, d9
 800cc02:	f7f3 ff6b 	bl	8000adc <__aeabi_dcmplt>
 800cc06:	2800      	cmp	r0, #0
 800cc08:	d050      	beq.n	800ccac <_dtoa_r+0x244>
 800cc0a:	9b00      	ldr	r3, [sp, #0]
 800cc0c:	3b01      	subs	r3, #1
 800cc0e:	9300      	str	r3, [sp, #0]
 800cc10:	2300      	movs	r3, #0
 800cc12:	930b      	str	r3, [sp, #44]	; 0x2c
 800cc14:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cc16:	1b5d      	subs	r5, r3, r5
 800cc18:	1e6b      	subs	r3, r5, #1
 800cc1a:	9305      	str	r3, [sp, #20]
 800cc1c:	bf45      	ittet	mi
 800cc1e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cc22:	9304      	strmi	r3, [sp, #16]
 800cc24:	2300      	movpl	r3, #0
 800cc26:	2300      	movmi	r3, #0
 800cc28:	bf4c      	ite	mi
 800cc2a:	9305      	strmi	r3, [sp, #20]
 800cc2c:	9304      	strpl	r3, [sp, #16]
 800cc2e:	9b00      	ldr	r3, [sp, #0]
 800cc30:	2b00      	cmp	r3, #0
 800cc32:	db3d      	blt.n	800ccb0 <_dtoa_r+0x248>
 800cc34:	9b05      	ldr	r3, [sp, #20]
 800cc36:	9a00      	ldr	r2, [sp, #0]
 800cc38:	920a      	str	r2, [sp, #40]	; 0x28
 800cc3a:	4413      	add	r3, r2
 800cc3c:	9305      	str	r3, [sp, #20]
 800cc3e:	2300      	movs	r3, #0
 800cc40:	9307      	str	r3, [sp, #28]
 800cc42:	9b06      	ldr	r3, [sp, #24]
 800cc44:	2b09      	cmp	r3, #9
 800cc46:	f200 8089 	bhi.w	800cd5c <_dtoa_r+0x2f4>
 800cc4a:	2b05      	cmp	r3, #5
 800cc4c:	bfc4      	itt	gt
 800cc4e:	3b04      	subgt	r3, #4
 800cc50:	9306      	strgt	r3, [sp, #24]
 800cc52:	9b06      	ldr	r3, [sp, #24]
 800cc54:	f1a3 0302 	sub.w	r3, r3, #2
 800cc58:	bfcc      	ite	gt
 800cc5a:	2500      	movgt	r5, #0
 800cc5c:	2501      	movle	r5, #1
 800cc5e:	2b03      	cmp	r3, #3
 800cc60:	f200 8087 	bhi.w	800cd72 <_dtoa_r+0x30a>
 800cc64:	e8df f003 	tbb	[pc, r3]
 800cc68:	59383a2d 	.word	0x59383a2d
 800cc6c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cc70:	441d      	add	r5, r3
 800cc72:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cc76:	2b20      	cmp	r3, #32
 800cc78:	bfc1      	itttt	gt
 800cc7a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cc7e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cc82:	fa0b f303 	lslgt.w	r3, fp, r3
 800cc86:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cc8a:	bfda      	itte	le
 800cc8c:	f1c3 0320 	rsble	r3, r3, #32
 800cc90:	fa06 f003 	lslle.w	r0, r6, r3
 800cc94:	4318      	orrgt	r0, r3
 800cc96:	f7f3 fc35 	bl	8000504 <__aeabi_ui2d>
 800cc9a:	2301      	movs	r3, #1
 800cc9c:	4606      	mov	r6, r0
 800cc9e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cca2:	3d01      	subs	r5, #1
 800cca4:	930e      	str	r3, [sp, #56]	; 0x38
 800cca6:	e76a      	b.n	800cb7e <_dtoa_r+0x116>
 800cca8:	2301      	movs	r3, #1
 800ccaa:	e7b2      	b.n	800cc12 <_dtoa_r+0x1aa>
 800ccac:	900b      	str	r0, [sp, #44]	; 0x2c
 800ccae:	e7b1      	b.n	800cc14 <_dtoa_r+0x1ac>
 800ccb0:	9b04      	ldr	r3, [sp, #16]
 800ccb2:	9a00      	ldr	r2, [sp, #0]
 800ccb4:	1a9b      	subs	r3, r3, r2
 800ccb6:	9304      	str	r3, [sp, #16]
 800ccb8:	4253      	negs	r3, r2
 800ccba:	9307      	str	r3, [sp, #28]
 800ccbc:	2300      	movs	r3, #0
 800ccbe:	930a      	str	r3, [sp, #40]	; 0x28
 800ccc0:	e7bf      	b.n	800cc42 <_dtoa_r+0x1da>
 800ccc2:	2300      	movs	r3, #0
 800ccc4:	9308      	str	r3, [sp, #32]
 800ccc6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc8:	2b00      	cmp	r3, #0
 800ccca:	dc55      	bgt.n	800cd78 <_dtoa_r+0x310>
 800cccc:	2301      	movs	r3, #1
 800ccce:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ccd2:	461a      	mov	r2, r3
 800ccd4:	9209      	str	r2, [sp, #36]	; 0x24
 800ccd6:	e00c      	b.n	800ccf2 <_dtoa_r+0x28a>
 800ccd8:	2301      	movs	r3, #1
 800ccda:	e7f3      	b.n	800ccc4 <_dtoa_r+0x25c>
 800ccdc:	2300      	movs	r3, #0
 800ccde:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cce0:	9308      	str	r3, [sp, #32]
 800cce2:	9b00      	ldr	r3, [sp, #0]
 800cce4:	4413      	add	r3, r2
 800cce6:	9302      	str	r3, [sp, #8]
 800cce8:	3301      	adds	r3, #1
 800ccea:	2b01      	cmp	r3, #1
 800ccec:	9303      	str	r3, [sp, #12]
 800ccee:	bfb8      	it	lt
 800ccf0:	2301      	movlt	r3, #1
 800ccf2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800ccf4:	2200      	movs	r2, #0
 800ccf6:	6042      	str	r2, [r0, #4]
 800ccf8:	2204      	movs	r2, #4
 800ccfa:	f102 0614 	add.w	r6, r2, #20
 800ccfe:	429e      	cmp	r6, r3
 800cd00:	6841      	ldr	r1, [r0, #4]
 800cd02:	d93d      	bls.n	800cd80 <_dtoa_r+0x318>
 800cd04:	4620      	mov	r0, r4
 800cd06:	f000 fd89 	bl	800d81c <_Balloc>
 800cd0a:	9001      	str	r0, [sp, #4]
 800cd0c:	2800      	cmp	r0, #0
 800cd0e:	d13b      	bne.n	800cd88 <_dtoa_r+0x320>
 800cd10:	4b11      	ldr	r3, [pc, #68]	; (800cd58 <_dtoa_r+0x2f0>)
 800cd12:	4602      	mov	r2, r0
 800cd14:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cd18:	e6c0      	b.n	800ca9c <_dtoa_r+0x34>
 800cd1a:	2301      	movs	r3, #1
 800cd1c:	e7df      	b.n	800ccde <_dtoa_r+0x276>
 800cd1e:	bf00      	nop
 800cd20:	636f4361 	.word	0x636f4361
 800cd24:	3fd287a7 	.word	0x3fd287a7
 800cd28:	8b60c8b3 	.word	0x8b60c8b3
 800cd2c:	3fc68a28 	.word	0x3fc68a28
 800cd30:	509f79fb 	.word	0x509f79fb
 800cd34:	3fd34413 	.word	0x3fd34413
 800cd38:	0800f709 	.word	0x0800f709
 800cd3c:	0800f720 	.word	0x0800f720
 800cd40:	7ff00000 	.word	0x7ff00000
 800cd44:	0800f705 	.word	0x0800f705
 800cd48:	0800f6fc 	.word	0x0800f6fc
 800cd4c:	0800f6d9 	.word	0x0800f6d9
 800cd50:	3ff80000 	.word	0x3ff80000
 800cd54:	0800f810 	.word	0x0800f810
 800cd58:	0800f77b 	.word	0x0800f77b
 800cd5c:	2501      	movs	r5, #1
 800cd5e:	2300      	movs	r3, #0
 800cd60:	9306      	str	r3, [sp, #24]
 800cd62:	9508      	str	r5, [sp, #32]
 800cd64:	f04f 33ff 	mov.w	r3, #4294967295
 800cd68:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cd6c:	2200      	movs	r2, #0
 800cd6e:	2312      	movs	r3, #18
 800cd70:	e7b0      	b.n	800ccd4 <_dtoa_r+0x26c>
 800cd72:	2301      	movs	r3, #1
 800cd74:	9308      	str	r3, [sp, #32]
 800cd76:	e7f5      	b.n	800cd64 <_dtoa_r+0x2fc>
 800cd78:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cd7a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cd7e:	e7b8      	b.n	800ccf2 <_dtoa_r+0x28a>
 800cd80:	3101      	adds	r1, #1
 800cd82:	6041      	str	r1, [r0, #4]
 800cd84:	0052      	lsls	r2, r2, #1
 800cd86:	e7b8      	b.n	800ccfa <_dtoa_r+0x292>
 800cd88:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cd8a:	9a01      	ldr	r2, [sp, #4]
 800cd8c:	601a      	str	r2, [r3, #0]
 800cd8e:	9b03      	ldr	r3, [sp, #12]
 800cd90:	2b0e      	cmp	r3, #14
 800cd92:	f200 809d 	bhi.w	800ced0 <_dtoa_r+0x468>
 800cd96:	2d00      	cmp	r5, #0
 800cd98:	f000 809a 	beq.w	800ced0 <_dtoa_r+0x468>
 800cd9c:	9b00      	ldr	r3, [sp, #0]
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	dd32      	ble.n	800ce08 <_dtoa_r+0x3a0>
 800cda2:	4ab7      	ldr	r2, [pc, #732]	; (800d080 <_dtoa_r+0x618>)
 800cda4:	f003 030f 	and.w	r3, r3, #15
 800cda8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cdac:	e9d3 8900 	ldrd	r8, r9, [r3]
 800cdb0:	9b00      	ldr	r3, [sp, #0]
 800cdb2:	05d8      	lsls	r0, r3, #23
 800cdb4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cdb8:	d516      	bpl.n	800cde8 <_dtoa_r+0x380>
 800cdba:	4bb2      	ldr	r3, [pc, #712]	; (800d084 <_dtoa_r+0x61c>)
 800cdbc:	ec51 0b19 	vmov	r0, r1, d9
 800cdc0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cdc4:	f7f3 fd42 	bl	800084c <__aeabi_ddiv>
 800cdc8:	f007 070f 	and.w	r7, r7, #15
 800cdcc:	4682      	mov	sl, r0
 800cdce:	468b      	mov	fp, r1
 800cdd0:	2503      	movs	r5, #3
 800cdd2:	4eac      	ldr	r6, [pc, #688]	; (800d084 <_dtoa_r+0x61c>)
 800cdd4:	b957      	cbnz	r7, 800cdec <_dtoa_r+0x384>
 800cdd6:	4642      	mov	r2, r8
 800cdd8:	464b      	mov	r3, r9
 800cdda:	4650      	mov	r0, sl
 800cddc:	4659      	mov	r1, fp
 800cdde:	f7f3 fd35 	bl	800084c <__aeabi_ddiv>
 800cde2:	4682      	mov	sl, r0
 800cde4:	468b      	mov	fp, r1
 800cde6:	e028      	b.n	800ce3a <_dtoa_r+0x3d2>
 800cde8:	2502      	movs	r5, #2
 800cdea:	e7f2      	b.n	800cdd2 <_dtoa_r+0x36a>
 800cdec:	07f9      	lsls	r1, r7, #31
 800cdee:	d508      	bpl.n	800ce02 <_dtoa_r+0x39a>
 800cdf0:	4640      	mov	r0, r8
 800cdf2:	4649      	mov	r1, r9
 800cdf4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cdf8:	f7f3 fbfe 	bl	80005f8 <__aeabi_dmul>
 800cdfc:	3501      	adds	r5, #1
 800cdfe:	4680      	mov	r8, r0
 800ce00:	4689      	mov	r9, r1
 800ce02:	107f      	asrs	r7, r7, #1
 800ce04:	3608      	adds	r6, #8
 800ce06:	e7e5      	b.n	800cdd4 <_dtoa_r+0x36c>
 800ce08:	f000 809b 	beq.w	800cf42 <_dtoa_r+0x4da>
 800ce0c:	9b00      	ldr	r3, [sp, #0]
 800ce0e:	4f9d      	ldr	r7, [pc, #628]	; (800d084 <_dtoa_r+0x61c>)
 800ce10:	425e      	negs	r6, r3
 800ce12:	4b9b      	ldr	r3, [pc, #620]	; (800d080 <_dtoa_r+0x618>)
 800ce14:	f006 020f 	and.w	r2, r6, #15
 800ce18:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ce20:	ec51 0b19 	vmov	r0, r1, d9
 800ce24:	f7f3 fbe8 	bl	80005f8 <__aeabi_dmul>
 800ce28:	1136      	asrs	r6, r6, #4
 800ce2a:	4682      	mov	sl, r0
 800ce2c:	468b      	mov	fp, r1
 800ce2e:	2300      	movs	r3, #0
 800ce30:	2502      	movs	r5, #2
 800ce32:	2e00      	cmp	r6, #0
 800ce34:	d17a      	bne.n	800cf2c <_dtoa_r+0x4c4>
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d1d3      	bne.n	800cde2 <_dtoa_r+0x37a>
 800ce3a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f000 8082 	beq.w	800cf46 <_dtoa_r+0x4de>
 800ce42:	4b91      	ldr	r3, [pc, #580]	; (800d088 <_dtoa_r+0x620>)
 800ce44:	2200      	movs	r2, #0
 800ce46:	4650      	mov	r0, sl
 800ce48:	4659      	mov	r1, fp
 800ce4a:	f7f3 fe47 	bl	8000adc <__aeabi_dcmplt>
 800ce4e:	2800      	cmp	r0, #0
 800ce50:	d079      	beq.n	800cf46 <_dtoa_r+0x4de>
 800ce52:	9b03      	ldr	r3, [sp, #12]
 800ce54:	2b00      	cmp	r3, #0
 800ce56:	d076      	beq.n	800cf46 <_dtoa_r+0x4de>
 800ce58:	9b02      	ldr	r3, [sp, #8]
 800ce5a:	2b00      	cmp	r3, #0
 800ce5c:	dd36      	ble.n	800cecc <_dtoa_r+0x464>
 800ce5e:	9b00      	ldr	r3, [sp, #0]
 800ce60:	4650      	mov	r0, sl
 800ce62:	4659      	mov	r1, fp
 800ce64:	1e5f      	subs	r7, r3, #1
 800ce66:	2200      	movs	r2, #0
 800ce68:	4b88      	ldr	r3, [pc, #544]	; (800d08c <_dtoa_r+0x624>)
 800ce6a:	f7f3 fbc5 	bl	80005f8 <__aeabi_dmul>
 800ce6e:	9e02      	ldr	r6, [sp, #8]
 800ce70:	4682      	mov	sl, r0
 800ce72:	468b      	mov	fp, r1
 800ce74:	3501      	adds	r5, #1
 800ce76:	4628      	mov	r0, r5
 800ce78:	f7f3 fb54 	bl	8000524 <__aeabi_i2d>
 800ce7c:	4652      	mov	r2, sl
 800ce7e:	465b      	mov	r3, fp
 800ce80:	f7f3 fbba 	bl	80005f8 <__aeabi_dmul>
 800ce84:	4b82      	ldr	r3, [pc, #520]	; (800d090 <_dtoa_r+0x628>)
 800ce86:	2200      	movs	r2, #0
 800ce88:	f7f3 fa00 	bl	800028c <__adddf3>
 800ce8c:	46d0      	mov	r8, sl
 800ce8e:	46d9      	mov	r9, fp
 800ce90:	4682      	mov	sl, r0
 800ce92:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800ce96:	2e00      	cmp	r6, #0
 800ce98:	d158      	bne.n	800cf4c <_dtoa_r+0x4e4>
 800ce9a:	4b7e      	ldr	r3, [pc, #504]	; (800d094 <_dtoa_r+0x62c>)
 800ce9c:	2200      	movs	r2, #0
 800ce9e:	4640      	mov	r0, r8
 800cea0:	4649      	mov	r1, r9
 800cea2:	f7f3 f9f1 	bl	8000288 <__aeabi_dsub>
 800cea6:	4652      	mov	r2, sl
 800cea8:	465b      	mov	r3, fp
 800ceaa:	4680      	mov	r8, r0
 800ceac:	4689      	mov	r9, r1
 800ceae:	f7f3 fe33 	bl	8000b18 <__aeabi_dcmpgt>
 800ceb2:	2800      	cmp	r0, #0
 800ceb4:	f040 8295 	bne.w	800d3e2 <_dtoa_r+0x97a>
 800ceb8:	4652      	mov	r2, sl
 800ceba:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cebe:	4640      	mov	r0, r8
 800cec0:	4649      	mov	r1, r9
 800cec2:	f7f3 fe0b 	bl	8000adc <__aeabi_dcmplt>
 800cec6:	2800      	cmp	r0, #0
 800cec8:	f040 8289 	bne.w	800d3de <_dtoa_r+0x976>
 800cecc:	ec5b ab19 	vmov	sl, fp, d9
 800ced0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ced2:	2b00      	cmp	r3, #0
 800ced4:	f2c0 8148 	blt.w	800d168 <_dtoa_r+0x700>
 800ced8:	9a00      	ldr	r2, [sp, #0]
 800ceda:	2a0e      	cmp	r2, #14
 800cedc:	f300 8144 	bgt.w	800d168 <_dtoa_r+0x700>
 800cee0:	4b67      	ldr	r3, [pc, #412]	; (800d080 <_dtoa_r+0x618>)
 800cee2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cee6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ceea:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ceec:	2b00      	cmp	r3, #0
 800ceee:	f280 80d5 	bge.w	800d09c <_dtoa_r+0x634>
 800cef2:	9b03      	ldr	r3, [sp, #12]
 800cef4:	2b00      	cmp	r3, #0
 800cef6:	f300 80d1 	bgt.w	800d09c <_dtoa_r+0x634>
 800cefa:	f040 826f 	bne.w	800d3dc <_dtoa_r+0x974>
 800cefe:	4b65      	ldr	r3, [pc, #404]	; (800d094 <_dtoa_r+0x62c>)
 800cf00:	2200      	movs	r2, #0
 800cf02:	4640      	mov	r0, r8
 800cf04:	4649      	mov	r1, r9
 800cf06:	f7f3 fb77 	bl	80005f8 <__aeabi_dmul>
 800cf0a:	4652      	mov	r2, sl
 800cf0c:	465b      	mov	r3, fp
 800cf0e:	f7f3 fdf9 	bl	8000b04 <__aeabi_dcmpge>
 800cf12:	9e03      	ldr	r6, [sp, #12]
 800cf14:	4637      	mov	r7, r6
 800cf16:	2800      	cmp	r0, #0
 800cf18:	f040 8245 	bne.w	800d3a6 <_dtoa_r+0x93e>
 800cf1c:	9d01      	ldr	r5, [sp, #4]
 800cf1e:	2331      	movs	r3, #49	; 0x31
 800cf20:	f805 3b01 	strb.w	r3, [r5], #1
 800cf24:	9b00      	ldr	r3, [sp, #0]
 800cf26:	3301      	adds	r3, #1
 800cf28:	9300      	str	r3, [sp, #0]
 800cf2a:	e240      	b.n	800d3ae <_dtoa_r+0x946>
 800cf2c:	07f2      	lsls	r2, r6, #31
 800cf2e:	d505      	bpl.n	800cf3c <_dtoa_r+0x4d4>
 800cf30:	e9d7 2300 	ldrd	r2, r3, [r7]
 800cf34:	f7f3 fb60 	bl	80005f8 <__aeabi_dmul>
 800cf38:	3501      	adds	r5, #1
 800cf3a:	2301      	movs	r3, #1
 800cf3c:	1076      	asrs	r6, r6, #1
 800cf3e:	3708      	adds	r7, #8
 800cf40:	e777      	b.n	800ce32 <_dtoa_r+0x3ca>
 800cf42:	2502      	movs	r5, #2
 800cf44:	e779      	b.n	800ce3a <_dtoa_r+0x3d2>
 800cf46:	9f00      	ldr	r7, [sp, #0]
 800cf48:	9e03      	ldr	r6, [sp, #12]
 800cf4a:	e794      	b.n	800ce76 <_dtoa_r+0x40e>
 800cf4c:	9901      	ldr	r1, [sp, #4]
 800cf4e:	4b4c      	ldr	r3, [pc, #304]	; (800d080 <_dtoa_r+0x618>)
 800cf50:	4431      	add	r1, r6
 800cf52:	910d      	str	r1, [sp, #52]	; 0x34
 800cf54:	9908      	ldr	r1, [sp, #32]
 800cf56:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cf5a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cf5e:	2900      	cmp	r1, #0
 800cf60:	d043      	beq.n	800cfea <_dtoa_r+0x582>
 800cf62:	494d      	ldr	r1, [pc, #308]	; (800d098 <_dtoa_r+0x630>)
 800cf64:	2000      	movs	r0, #0
 800cf66:	f7f3 fc71 	bl	800084c <__aeabi_ddiv>
 800cf6a:	4652      	mov	r2, sl
 800cf6c:	465b      	mov	r3, fp
 800cf6e:	f7f3 f98b 	bl	8000288 <__aeabi_dsub>
 800cf72:	9d01      	ldr	r5, [sp, #4]
 800cf74:	4682      	mov	sl, r0
 800cf76:	468b      	mov	fp, r1
 800cf78:	4649      	mov	r1, r9
 800cf7a:	4640      	mov	r0, r8
 800cf7c:	f7f3 fdec 	bl	8000b58 <__aeabi_d2iz>
 800cf80:	4606      	mov	r6, r0
 800cf82:	f7f3 facf 	bl	8000524 <__aeabi_i2d>
 800cf86:	4602      	mov	r2, r0
 800cf88:	460b      	mov	r3, r1
 800cf8a:	4640      	mov	r0, r8
 800cf8c:	4649      	mov	r1, r9
 800cf8e:	f7f3 f97b 	bl	8000288 <__aeabi_dsub>
 800cf92:	3630      	adds	r6, #48	; 0x30
 800cf94:	f805 6b01 	strb.w	r6, [r5], #1
 800cf98:	4652      	mov	r2, sl
 800cf9a:	465b      	mov	r3, fp
 800cf9c:	4680      	mov	r8, r0
 800cf9e:	4689      	mov	r9, r1
 800cfa0:	f7f3 fd9c 	bl	8000adc <__aeabi_dcmplt>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	d163      	bne.n	800d070 <_dtoa_r+0x608>
 800cfa8:	4642      	mov	r2, r8
 800cfaa:	464b      	mov	r3, r9
 800cfac:	4936      	ldr	r1, [pc, #216]	; (800d088 <_dtoa_r+0x620>)
 800cfae:	2000      	movs	r0, #0
 800cfb0:	f7f3 f96a 	bl	8000288 <__aeabi_dsub>
 800cfb4:	4652      	mov	r2, sl
 800cfb6:	465b      	mov	r3, fp
 800cfb8:	f7f3 fd90 	bl	8000adc <__aeabi_dcmplt>
 800cfbc:	2800      	cmp	r0, #0
 800cfbe:	f040 80b5 	bne.w	800d12c <_dtoa_r+0x6c4>
 800cfc2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cfc4:	429d      	cmp	r5, r3
 800cfc6:	d081      	beq.n	800cecc <_dtoa_r+0x464>
 800cfc8:	4b30      	ldr	r3, [pc, #192]	; (800d08c <_dtoa_r+0x624>)
 800cfca:	2200      	movs	r2, #0
 800cfcc:	4650      	mov	r0, sl
 800cfce:	4659      	mov	r1, fp
 800cfd0:	f7f3 fb12 	bl	80005f8 <__aeabi_dmul>
 800cfd4:	4b2d      	ldr	r3, [pc, #180]	; (800d08c <_dtoa_r+0x624>)
 800cfd6:	4682      	mov	sl, r0
 800cfd8:	468b      	mov	fp, r1
 800cfda:	4640      	mov	r0, r8
 800cfdc:	4649      	mov	r1, r9
 800cfde:	2200      	movs	r2, #0
 800cfe0:	f7f3 fb0a 	bl	80005f8 <__aeabi_dmul>
 800cfe4:	4680      	mov	r8, r0
 800cfe6:	4689      	mov	r9, r1
 800cfe8:	e7c6      	b.n	800cf78 <_dtoa_r+0x510>
 800cfea:	4650      	mov	r0, sl
 800cfec:	4659      	mov	r1, fp
 800cfee:	f7f3 fb03 	bl	80005f8 <__aeabi_dmul>
 800cff2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cff4:	9d01      	ldr	r5, [sp, #4]
 800cff6:	930f      	str	r3, [sp, #60]	; 0x3c
 800cff8:	4682      	mov	sl, r0
 800cffa:	468b      	mov	fp, r1
 800cffc:	4649      	mov	r1, r9
 800cffe:	4640      	mov	r0, r8
 800d000:	f7f3 fdaa 	bl	8000b58 <__aeabi_d2iz>
 800d004:	4606      	mov	r6, r0
 800d006:	f7f3 fa8d 	bl	8000524 <__aeabi_i2d>
 800d00a:	3630      	adds	r6, #48	; 0x30
 800d00c:	4602      	mov	r2, r0
 800d00e:	460b      	mov	r3, r1
 800d010:	4640      	mov	r0, r8
 800d012:	4649      	mov	r1, r9
 800d014:	f7f3 f938 	bl	8000288 <__aeabi_dsub>
 800d018:	f805 6b01 	strb.w	r6, [r5], #1
 800d01c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800d01e:	429d      	cmp	r5, r3
 800d020:	4680      	mov	r8, r0
 800d022:	4689      	mov	r9, r1
 800d024:	f04f 0200 	mov.w	r2, #0
 800d028:	d124      	bne.n	800d074 <_dtoa_r+0x60c>
 800d02a:	4b1b      	ldr	r3, [pc, #108]	; (800d098 <_dtoa_r+0x630>)
 800d02c:	4650      	mov	r0, sl
 800d02e:	4659      	mov	r1, fp
 800d030:	f7f3 f92c 	bl	800028c <__adddf3>
 800d034:	4602      	mov	r2, r0
 800d036:	460b      	mov	r3, r1
 800d038:	4640      	mov	r0, r8
 800d03a:	4649      	mov	r1, r9
 800d03c:	f7f3 fd6c 	bl	8000b18 <__aeabi_dcmpgt>
 800d040:	2800      	cmp	r0, #0
 800d042:	d173      	bne.n	800d12c <_dtoa_r+0x6c4>
 800d044:	4652      	mov	r2, sl
 800d046:	465b      	mov	r3, fp
 800d048:	4913      	ldr	r1, [pc, #76]	; (800d098 <_dtoa_r+0x630>)
 800d04a:	2000      	movs	r0, #0
 800d04c:	f7f3 f91c 	bl	8000288 <__aeabi_dsub>
 800d050:	4602      	mov	r2, r0
 800d052:	460b      	mov	r3, r1
 800d054:	4640      	mov	r0, r8
 800d056:	4649      	mov	r1, r9
 800d058:	f7f3 fd40 	bl	8000adc <__aeabi_dcmplt>
 800d05c:	2800      	cmp	r0, #0
 800d05e:	f43f af35 	beq.w	800cecc <_dtoa_r+0x464>
 800d062:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800d064:	1e6b      	subs	r3, r5, #1
 800d066:	930f      	str	r3, [sp, #60]	; 0x3c
 800d068:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800d06c:	2b30      	cmp	r3, #48	; 0x30
 800d06e:	d0f8      	beq.n	800d062 <_dtoa_r+0x5fa>
 800d070:	9700      	str	r7, [sp, #0]
 800d072:	e049      	b.n	800d108 <_dtoa_r+0x6a0>
 800d074:	4b05      	ldr	r3, [pc, #20]	; (800d08c <_dtoa_r+0x624>)
 800d076:	f7f3 fabf 	bl	80005f8 <__aeabi_dmul>
 800d07a:	4680      	mov	r8, r0
 800d07c:	4689      	mov	r9, r1
 800d07e:	e7bd      	b.n	800cffc <_dtoa_r+0x594>
 800d080:	0800f810 	.word	0x0800f810
 800d084:	0800f7e8 	.word	0x0800f7e8
 800d088:	3ff00000 	.word	0x3ff00000
 800d08c:	40240000 	.word	0x40240000
 800d090:	401c0000 	.word	0x401c0000
 800d094:	40140000 	.word	0x40140000
 800d098:	3fe00000 	.word	0x3fe00000
 800d09c:	9d01      	ldr	r5, [sp, #4]
 800d09e:	4656      	mov	r6, sl
 800d0a0:	465f      	mov	r7, fp
 800d0a2:	4642      	mov	r2, r8
 800d0a4:	464b      	mov	r3, r9
 800d0a6:	4630      	mov	r0, r6
 800d0a8:	4639      	mov	r1, r7
 800d0aa:	f7f3 fbcf 	bl	800084c <__aeabi_ddiv>
 800d0ae:	f7f3 fd53 	bl	8000b58 <__aeabi_d2iz>
 800d0b2:	4682      	mov	sl, r0
 800d0b4:	f7f3 fa36 	bl	8000524 <__aeabi_i2d>
 800d0b8:	4642      	mov	r2, r8
 800d0ba:	464b      	mov	r3, r9
 800d0bc:	f7f3 fa9c 	bl	80005f8 <__aeabi_dmul>
 800d0c0:	4602      	mov	r2, r0
 800d0c2:	460b      	mov	r3, r1
 800d0c4:	4630      	mov	r0, r6
 800d0c6:	4639      	mov	r1, r7
 800d0c8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d0cc:	f7f3 f8dc 	bl	8000288 <__aeabi_dsub>
 800d0d0:	f805 6b01 	strb.w	r6, [r5], #1
 800d0d4:	9e01      	ldr	r6, [sp, #4]
 800d0d6:	9f03      	ldr	r7, [sp, #12]
 800d0d8:	1bae      	subs	r6, r5, r6
 800d0da:	42b7      	cmp	r7, r6
 800d0dc:	4602      	mov	r2, r0
 800d0de:	460b      	mov	r3, r1
 800d0e0:	d135      	bne.n	800d14e <_dtoa_r+0x6e6>
 800d0e2:	f7f3 f8d3 	bl	800028c <__adddf3>
 800d0e6:	4642      	mov	r2, r8
 800d0e8:	464b      	mov	r3, r9
 800d0ea:	4606      	mov	r6, r0
 800d0ec:	460f      	mov	r7, r1
 800d0ee:	f7f3 fd13 	bl	8000b18 <__aeabi_dcmpgt>
 800d0f2:	b9d0      	cbnz	r0, 800d12a <_dtoa_r+0x6c2>
 800d0f4:	4642      	mov	r2, r8
 800d0f6:	464b      	mov	r3, r9
 800d0f8:	4630      	mov	r0, r6
 800d0fa:	4639      	mov	r1, r7
 800d0fc:	f7f3 fce4 	bl	8000ac8 <__aeabi_dcmpeq>
 800d100:	b110      	cbz	r0, 800d108 <_dtoa_r+0x6a0>
 800d102:	f01a 0f01 	tst.w	sl, #1
 800d106:	d110      	bne.n	800d12a <_dtoa_r+0x6c2>
 800d108:	4620      	mov	r0, r4
 800d10a:	ee18 1a10 	vmov	r1, s16
 800d10e:	f000 fbc5 	bl	800d89c <_Bfree>
 800d112:	2300      	movs	r3, #0
 800d114:	9800      	ldr	r0, [sp, #0]
 800d116:	702b      	strb	r3, [r5, #0]
 800d118:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d11a:	3001      	adds	r0, #1
 800d11c:	6018      	str	r0, [r3, #0]
 800d11e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d120:	2b00      	cmp	r3, #0
 800d122:	f43f acf1 	beq.w	800cb08 <_dtoa_r+0xa0>
 800d126:	601d      	str	r5, [r3, #0]
 800d128:	e4ee      	b.n	800cb08 <_dtoa_r+0xa0>
 800d12a:	9f00      	ldr	r7, [sp, #0]
 800d12c:	462b      	mov	r3, r5
 800d12e:	461d      	mov	r5, r3
 800d130:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d134:	2a39      	cmp	r2, #57	; 0x39
 800d136:	d106      	bne.n	800d146 <_dtoa_r+0x6de>
 800d138:	9a01      	ldr	r2, [sp, #4]
 800d13a:	429a      	cmp	r2, r3
 800d13c:	d1f7      	bne.n	800d12e <_dtoa_r+0x6c6>
 800d13e:	9901      	ldr	r1, [sp, #4]
 800d140:	2230      	movs	r2, #48	; 0x30
 800d142:	3701      	adds	r7, #1
 800d144:	700a      	strb	r2, [r1, #0]
 800d146:	781a      	ldrb	r2, [r3, #0]
 800d148:	3201      	adds	r2, #1
 800d14a:	701a      	strb	r2, [r3, #0]
 800d14c:	e790      	b.n	800d070 <_dtoa_r+0x608>
 800d14e:	4ba6      	ldr	r3, [pc, #664]	; (800d3e8 <_dtoa_r+0x980>)
 800d150:	2200      	movs	r2, #0
 800d152:	f7f3 fa51 	bl	80005f8 <__aeabi_dmul>
 800d156:	2200      	movs	r2, #0
 800d158:	2300      	movs	r3, #0
 800d15a:	4606      	mov	r6, r0
 800d15c:	460f      	mov	r7, r1
 800d15e:	f7f3 fcb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800d162:	2800      	cmp	r0, #0
 800d164:	d09d      	beq.n	800d0a2 <_dtoa_r+0x63a>
 800d166:	e7cf      	b.n	800d108 <_dtoa_r+0x6a0>
 800d168:	9a08      	ldr	r2, [sp, #32]
 800d16a:	2a00      	cmp	r2, #0
 800d16c:	f000 80d7 	beq.w	800d31e <_dtoa_r+0x8b6>
 800d170:	9a06      	ldr	r2, [sp, #24]
 800d172:	2a01      	cmp	r2, #1
 800d174:	f300 80ba 	bgt.w	800d2ec <_dtoa_r+0x884>
 800d178:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d17a:	2a00      	cmp	r2, #0
 800d17c:	f000 80b2 	beq.w	800d2e4 <_dtoa_r+0x87c>
 800d180:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d184:	9e07      	ldr	r6, [sp, #28]
 800d186:	9d04      	ldr	r5, [sp, #16]
 800d188:	9a04      	ldr	r2, [sp, #16]
 800d18a:	441a      	add	r2, r3
 800d18c:	9204      	str	r2, [sp, #16]
 800d18e:	9a05      	ldr	r2, [sp, #20]
 800d190:	2101      	movs	r1, #1
 800d192:	441a      	add	r2, r3
 800d194:	4620      	mov	r0, r4
 800d196:	9205      	str	r2, [sp, #20]
 800d198:	f000 fc38 	bl	800da0c <__i2b>
 800d19c:	4607      	mov	r7, r0
 800d19e:	2d00      	cmp	r5, #0
 800d1a0:	dd0c      	ble.n	800d1bc <_dtoa_r+0x754>
 800d1a2:	9b05      	ldr	r3, [sp, #20]
 800d1a4:	2b00      	cmp	r3, #0
 800d1a6:	dd09      	ble.n	800d1bc <_dtoa_r+0x754>
 800d1a8:	42ab      	cmp	r3, r5
 800d1aa:	9a04      	ldr	r2, [sp, #16]
 800d1ac:	bfa8      	it	ge
 800d1ae:	462b      	movge	r3, r5
 800d1b0:	1ad2      	subs	r2, r2, r3
 800d1b2:	9204      	str	r2, [sp, #16]
 800d1b4:	9a05      	ldr	r2, [sp, #20]
 800d1b6:	1aed      	subs	r5, r5, r3
 800d1b8:	1ad3      	subs	r3, r2, r3
 800d1ba:	9305      	str	r3, [sp, #20]
 800d1bc:	9b07      	ldr	r3, [sp, #28]
 800d1be:	b31b      	cbz	r3, 800d208 <_dtoa_r+0x7a0>
 800d1c0:	9b08      	ldr	r3, [sp, #32]
 800d1c2:	2b00      	cmp	r3, #0
 800d1c4:	f000 80af 	beq.w	800d326 <_dtoa_r+0x8be>
 800d1c8:	2e00      	cmp	r6, #0
 800d1ca:	dd13      	ble.n	800d1f4 <_dtoa_r+0x78c>
 800d1cc:	4639      	mov	r1, r7
 800d1ce:	4632      	mov	r2, r6
 800d1d0:	4620      	mov	r0, r4
 800d1d2:	f000 fcdb 	bl	800db8c <__pow5mult>
 800d1d6:	ee18 2a10 	vmov	r2, s16
 800d1da:	4601      	mov	r1, r0
 800d1dc:	4607      	mov	r7, r0
 800d1de:	4620      	mov	r0, r4
 800d1e0:	f000 fc2a 	bl	800da38 <__multiply>
 800d1e4:	ee18 1a10 	vmov	r1, s16
 800d1e8:	4680      	mov	r8, r0
 800d1ea:	4620      	mov	r0, r4
 800d1ec:	f000 fb56 	bl	800d89c <_Bfree>
 800d1f0:	ee08 8a10 	vmov	s16, r8
 800d1f4:	9b07      	ldr	r3, [sp, #28]
 800d1f6:	1b9a      	subs	r2, r3, r6
 800d1f8:	d006      	beq.n	800d208 <_dtoa_r+0x7a0>
 800d1fa:	ee18 1a10 	vmov	r1, s16
 800d1fe:	4620      	mov	r0, r4
 800d200:	f000 fcc4 	bl	800db8c <__pow5mult>
 800d204:	ee08 0a10 	vmov	s16, r0
 800d208:	2101      	movs	r1, #1
 800d20a:	4620      	mov	r0, r4
 800d20c:	f000 fbfe 	bl	800da0c <__i2b>
 800d210:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d212:	2b00      	cmp	r3, #0
 800d214:	4606      	mov	r6, r0
 800d216:	f340 8088 	ble.w	800d32a <_dtoa_r+0x8c2>
 800d21a:	461a      	mov	r2, r3
 800d21c:	4601      	mov	r1, r0
 800d21e:	4620      	mov	r0, r4
 800d220:	f000 fcb4 	bl	800db8c <__pow5mult>
 800d224:	9b06      	ldr	r3, [sp, #24]
 800d226:	2b01      	cmp	r3, #1
 800d228:	4606      	mov	r6, r0
 800d22a:	f340 8081 	ble.w	800d330 <_dtoa_r+0x8c8>
 800d22e:	f04f 0800 	mov.w	r8, #0
 800d232:	6933      	ldr	r3, [r6, #16]
 800d234:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d238:	6918      	ldr	r0, [r3, #16]
 800d23a:	f000 fb97 	bl	800d96c <__hi0bits>
 800d23e:	f1c0 0020 	rsb	r0, r0, #32
 800d242:	9b05      	ldr	r3, [sp, #20]
 800d244:	4418      	add	r0, r3
 800d246:	f010 001f 	ands.w	r0, r0, #31
 800d24a:	f000 8092 	beq.w	800d372 <_dtoa_r+0x90a>
 800d24e:	f1c0 0320 	rsb	r3, r0, #32
 800d252:	2b04      	cmp	r3, #4
 800d254:	f340 808a 	ble.w	800d36c <_dtoa_r+0x904>
 800d258:	f1c0 001c 	rsb	r0, r0, #28
 800d25c:	9b04      	ldr	r3, [sp, #16]
 800d25e:	4403      	add	r3, r0
 800d260:	9304      	str	r3, [sp, #16]
 800d262:	9b05      	ldr	r3, [sp, #20]
 800d264:	4403      	add	r3, r0
 800d266:	4405      	add	r5, r0
 800d268:	9305      	str	r3, [sp, #20]
 800d26a:	9b04      	ldr	r3, [sp, #16]
 800d26c:	2b00      	cmp	r3, #0
 800d26e:	dd07      	ble.n	800d280 <_dtoa_r+0x818>
 800d270:	ee18 1a10 	vmov	r1, s16
 800d274:	461a      	mov	r2, r3
 800d276:	4620      	mov	r0, r4
 800d278:	f000 fce2 	bl	800dc40 <__lshift>
 800d27c:	ee08 0a10 	vmov	s16, r0
 800d280:	9b05      	ldr	r3, [sp, #20]
 800d282:	2b00      	cmp	r3, #0
 800d284:	dd05      	ble.n	800d292 <_dtoa_r+0x82a>
 800d286:	4631      	mov	r1, r6
 800d288:	461a      	mov	r2, r3
 800d28a:	4620      	mov	r0, r4
 800d28c:	f000 fcd8 	bl	800dc40 <__lshift>
 800d290:	4606      	mov	r6, r0
 800d292:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d294:	2b00      	cmp	r3, #0
 800d296:	d06e      	beq.n	800d376 <_dtoa_r+0x90e>
 800d298:	ee18 0a10 	vmov	r0, s16
 800d29c:	4631      	mov	r1, r6
 800d29e:	f000 fd3f 	bl	800dd20 <__mcmp>
 800d2a2:	2800      	cmp	r0, #0
 800d2a4:	da67      	bge.n	800d376 <_dtoa_r+0x90e>
 800d2a6:	9b00      	ldr	r3, [sp, #0]
 800d2a8:	3b01      	subs	r3, #1
 800d2aa:	ee18 1a10 	vmov	r1, s16
 800d2ae:	9300      	str	r3, [sp, #0]
 800d2b0:	220a      	movs	r2, #10
 800d2b2:	2300      	movs	r3, #0
 800d2b4:	4620      	mov	r0, r4
 800d2b6:	f000 fb13 	bl	800d8e0 <__multadd>
 800d2ba:	9b08      	ldr	r3, [sp, #32]
 800d2bc:	ee08 0a10 	vmov	s16, r0
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	f000 81b1 	beq.w	800d628 <_dtoa_r+0xbc0>
 800d2c6:	2300      	movs	r3, #0
 800d2c8:	4639      	mov	r1, r7
 800d2ca:	220a      	movs	r2, #10
 800d2cc:	4620      	mov	r0, r4
 800d2ce:	f000 fb07 	bl	800d8e0 <__multadd>
 800d2d2:	9b02      	ldr	r3, [sp, #8]
 800d2d4:	2b00      	cmp	r3, #0
 800d2d6:	4607      	mov	r7, r0
 800d2d8:	f300 808e 	bgt.w	800d3f8 <_dtoa_r+0x990>
 800d2dc:	9b06      	ldr	r3, [sp, #24]
 800d2de:	2b02      	cmp	r3, #2
 800d2e0:	dc51      	bgt.n	800d386 <_dtoa_r+0x91e>
 800d2e2:	e089      	b.n	800d3f8 <_dtoa_r+0x990>
 800d2e4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d2e6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d2ea:	e74b      	b.n	800d184 <_dtoa_r+0x71c>
 800d2ec:	9b03      	ldr	r3, [sp, #12]
 800d2ee:	1e5e      	subs	r6, r3, #1
 800d2f0:	9b07      	ldr	r3, [sp, #28]
 800d2f2:	42b3      	cmp	r3, r6
 800d2f4:	bfbf      	itttt	lt
 800d2f6:	9b07      	ldrlt	r3, [sp, #28]
 800d2f8:	9607      	strlt	r6, [sp, #28]
 800d2fa:	1af2      	sublt	r2, r6, r3
 800d2fc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d2fe:	bfb6      	itet	lt
 800d300:	189b      	addlt	r3, r3, r2
 800d302:	1b9e      	subge	r6, r3, r6
 800d304:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d306:	9b03      	ldr	r3, [sp, #12]
 800d308:	bfb8      	it	lt
 800d30a:	2600      	movlt	r6, #0
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	bfb7      	itett	lt
 800d310:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d314:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d318:	1a9d      	sublt	r5, r3, r2
 800d31a:	2300      	movlt	r3, #0
 800d31c:	e734      	b.n	800d188 <_dtoa_r+0x720>
 800d31e:	9e07      	ldr	r6, [sp, #28]
 800d320:	9d04      	ldr	r5, [sp, #16]
 800d322:	9f08      	ldr	r7, [sp, #32]
 800d324:	e73b      	b.n	800d19e <_dtoa_r+0x736>
 800d326:	9a07      	ldr	r2, [sp, #28]
 800d328:	e767      	b.n	800d1fa <_dtoa_r+0x792>
 800d32a:	9b06      	ldr	r3, [sp, #24]
 800d32c:	2b01      	cmp	r3, #1
 800d32e:	dc18      	bgt.n	800d362 <_dtoa_r+0x8fa>
 800d330:	f1ba 0f00 	cmp.w	sl, #0
 800d334:	d115      	bne.n	800d362 <_dtoa_r+0x8fa>
 800d336:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d33a:	b993      	cbnz	r3, 800d362 <_dtoa_r+0x8fa>
 800d33c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d340:	0d1b      	lsrs	r3, r3, #20
 800d342:	051b      	lsls	r3, r3, #20
 800d344:	b183      	cbz	r3, 800d368 <_dtoa_r+0x900>
 800d346:	9b04      	ldr	r3, [sp, #16]
 800d348:	3301      	adds	r3, #1
 800d34a:	9304      	str	r3, [sp, #16]
 800d34c:	9b05      	ldr	r3, [sp, #20]
 800d34e:	3301      	adds	r3, #1
 800d350:	9305      	str	r3, [sp, #20]
 800d352:	f04f 0801 	mov.w	r8, #1
 800d356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d358:	2b00      	cmp	r3, #0
 800d35a:	f47f af6a 	bne.w	800d232 <_dtoa_r+0x7ca>
 800d35e:	2001      	movs	r0, #1
 800d360:	e76f      	b.n	800d242 <_dtoa_r+0x7da>
 800d362:	f04f 0800 	mov.w	r8, #0
 800d366:	e7f6      	b.n	800d356 <_dtoa_r+0x8ee>
 800d368:	4698      	mov	r8, r3
 800d36a:	e7f4      	b.n	800d356 <_dtoa_r+0x8ee>
 800d36c:	f43f af7d 	beq.w	800d26a <_dtoa_r+0x802>
 800d370:	4618      	mov	r0, r3
 800d372:	301c      	adds	r0, #28
 800d374:	e772      	b.n	800d25c <_dtoa_r+0x7f4>
 800d376:	9b03      	ldr	r3, [sp, #12]
 800d378:	2b00      	cmp	r3, #0
 800d37a:	dc37      	bgt.n	800d3ec <_dtoa_r+0x984>
 800d37c:	9b06      	ldr	r3, [sp, #24]
 800d37e:	2b02      	cmp	r3, #2
 800d380:	dd34      	ble.n	800d3ec <_dtoa_r+0x984>
 800d382:	9b03      	ldr	r3, [sp, #12]
 800d384:	9302      	str	r3, [sp, #8]
 800d386:	9b02      	ldr	r3, [sp, #8]
 800d388:	b96b      	cbnz	r3, 800d3a6 <_dtoa_r+0x93e>
 800d38a:	4631      	mov	r1, r6
 800d38c:	2205      	movs	r2, #5
 800d38e:	4620      	mov	r0, r4
 800d390:	f000 faa6 	bl	800d8e0 <__multadd>
 800d394:	4601      	mov	r1, r0
 800d396:	4606      	mov	r6, r0
 800d398:	ee18 0a10 	vmov	r0, s16
 800d39c:	f000 fcc0 	bl	800dd20 <__mcmp>
 800d3a0:	2800      	cmp	r0, #0
 800d3a2:	f73f adbb 	bgt.w	800cf1c <_dtoa_r+0x4b4>
 800d3a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d3a8:	9d01      	ldr	r5, [sp, #4]
 800d3aa:	43db      	mvns	r3, r3
 800d3ac:	9300      	str	r3, [sp, #0]
 800d3ae:	f04f 0800 	mov.w	r8, #0
 800d3b2:	4631      	mov	r1, r6
 800d3b4:	4620      	mov	r0, r4
 800d3b6:	f000 fa71 	bl	800d89c <_Bfree>
 800d3ba:	2f00      	cmp	r7, #0
 800d3bc:	f43f aea4 	beq.w	800d108 <_dtoa_r+0x6a0>
 800d3c0:	f1b8 0f00 	cmp.w	r8, #0
 800d3c4:	d005      	beq.n	800d3d2 <_dtoa_r+0x96a>
 800d3c6:	45b8      	cmp	r8, r7
 800d3c8:	d003      	beq.n	800d3d2 <_dtoa_r+0x96a>
 800d3ca:	4641      	mov	r1, r8
 800d3cc:	4620      	mov	r0, r4
 800d3ce:	f000 fa65 	bl	800d89c <_Bfree>
 800d3d2:	4639      	mov	r1, r7
 800d3d4:	4620      	mov	r0, r4
 800d3d6:	f000 fa61 	bl	800d89c <_Bfree>
 800d3da:	e695      	b.n	800d108 <_dtoa_r+0x6a0>
 800d3dc:	2600      	movs	r6, #0
 800d3de:	4637      	mov	r7, r6
 800d3e0:	e7e1      	b.n	800d3a6 <_dtoa_r+0x93e>
 800d3e2:	9700      	str	r7, [sp, #0]
 800d3e4:	4637      	mov	r7, r6
 800d3e6:	e599      	b.n	800cf1c <_dtoa_r+0x4b4>
 800d3e8:	40240000 	.word	0x40240000
 800d3ec:	9b08      	ldr	r3, [sp, #32]
 800d3ee:	2b00      	cmp	r3, #0
 800d3f0:	f000 80ca 	beq.w	800d588 <_dtoa_r+0xb20>
 800d3f4:	9b03      	ldr	r3, [sp, #12]
 800d3f6:	9302      	str	r3, [sp, #8]
 800d3f8:	2d00      	cmp	r5, #0
 800d3fa:	dd05      	ble.n	800d408 <_dtoa_r+0x9a0>
 800d3fc:	4639      	mov	r1, r7
 800d3fe:	462a      	mov	r2, r5
 800d400:	4620      	mov	r0, r4
 800d402:	f000 fc1d 	bl	800dc40 <__lshift>
 800d406:	4607      	mov	r7, r0
 800d408:	f1b8 0f00 	cmp.w	r8, #0
 800d40c:	d05b      	beq.n	800d4c6 <_dtoa_r+0xa5e>
 800d40e:	6879      	ldr	r1, [r7, #4]
 800d410:	4620      	mov	r0, r4
 800d412:	f000 fa03 	bl	800d81c <_Balloc>
 800d416:	4605      	mov	r5, r0
 800d418:	b928      	cbnz	r0, 800d426 <_dtoa_r+0x9be>
 800d41a:	4b87      	ldr	r3, [pc, #540]	; (800d638 <_dtoa_r+0xbd0>)
 800d41c:	4602      	mov	r2, r0
 800d41e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d422:	f7ff bb3b 	b.w	800ca9c <_dtoa_r+0x34>
 800d426:	693a      	ldr	r2, [r7, #16]
 800d428:	3202      	adds	r2, #2
 800d42a:	0092      	lsls	r2, r2, #2
 800d42c:	f107 010c 	add.w	r1, r7, #12
 800d430:	300c      	adds	r0, #12
 800d432:	f7fe fc78 	bl	800bd26 <memcpy>
 800d436:	2201      	movs	r2, #1
 800d438:	4629      	mov	r1, r5
 800d43a:	4620      	mov	r0, r4
 800d43c:	f000 fc00 	bl	800dc40 <__lshift>
 800d440:	9b01      	ldr	r3, [sp, #4]
 800d442:	f103 0901 	add.w	r9, r3, #1
 800d446:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d44a:	4413      	add	r3, r2
 800d44c:	9305      	str	r3, [sp, #20]
 800d44e:	f00a 0301 	and.w	r3, sl, #1
 800d452:	46b8      	mov	r8, r7
 800d454:	9304      	str	r3, [sp, #16]
 800d456:	4607      	mov	r7, r0
 800d458:	4631      	mov	r1, r6
 800d45a:	ee18 0a10 	vmov	r0, s16
 800d45e:	f7ff fa77 	bl	800c950 <quorem>
 800d462:	4641      	mov	r1, r8
 800d464:	9002      	str	r0, [sp, #8]
 800d466:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d46a:	ee18 0a10 	vmov	r0, s16
 800d46e:	f000 fc57 	bl	800dd20 <__mcmp>
 800d472:	463a      	mov	r2, r7
 800d474:	9003      	str	r0, [sp, #12]
 800d476:	4631      	mov	r1, r6
 800d478:	4620      	mov	r0, r4
 800d47a:	f000 fc6d 	bl	800dd58 <__mdiff>
 800d47e:	68c2      	ldr	r2, [r0, #12]
 800d480:	f109 3bff 	add.w	fp, r9, #4294967295
 800d484:	4605      	mov	r5, r0
 800d486:	bb02      	cbnz	r2, 800d4ca <_dtoa_r+0xa62>
 800d488:	4601      	mov	r1, r0
 800d48a:	ee18 0a10 	vmov	r0, s16
 800d48e:	f000 fc47 	bl	800dd20 <__mcmp>
 800d492:	4602      	mov	r2, r0
 800d494:	4629      	mov	r1, r5
 800d496:	4620      	mov	r0, r4
 800d498:	9207      	str	r2, [sp, #28]
 800d49a:	f000 f9ff 	bl	800d89c <_Bfree>
 800d49e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d4a2:	ea43 0102 	orr.w	r1, r3, r2
 800d4a6:	9b04      	ldr	r3, [sp, #16]
 800d4a8:	430b      	orrs	r3, r1
 800d4aa:	464d      	mov	r5, r9
 800d4ac:	d10f      	bne.n	800d4ce <_dtoa_r+0xa66>
 800d4ae:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d4b2:	d02a      	beq.n	800d50a <_dtoa_r+0xaa2>
 800d4b4:	9b03      	ldr	r3, [sp, #12]
 800d4b6:	2b00      	cmp	r3, #0
 800d4b8:	dd02      	ble.n	800d4c0 <_dtoa_r+0xa58>
 800d4ba:	9b02      	ldr	r3, [sp, #8]
 800d4bc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d4c0:	f88b a000 	strb.w	sl, [fp]
 800d4c4:	e775      	b.n	800d3b2 <_dtoa_r+0x94a>
 800d4c6:	4638      	mov	r0, r7
 800d4c8:	e7ba      	b.n	800d440 <_dtoa_r+0x9d8>
 800d4ca:	2201      	movs	r2, #1
 800d4cc:	e7e2      	b.n	800d494 <_dtoa_r+0xa2c>
 800d4ce:	9b03      	ldr	r3, [sp, #12]
 800d4d0:	2b00      	cmp	r3, #0
 800d4d2:	db04      	blt.n	800d4de <_dtoa_r+0xa76>
 800d4d4:	9906      	ldr	r1, [sp, #24]
 800d4d6:	430b      	orrs	r3, r1
 800d4d8:	9904      	ldr	r1, [sp, #16]
 800d4da:	430b      	orrs	r3, r1
 800d4dc:	d122      	bne.n	800d524 <_dtoa_r+0xabc>
 800d4de:	2a00      	cmp	r2, #0
 800d4e0:	ddee      	ble.n	800d4c0 <_dtoa_r+0xa58>
 800d4e2:	ee18 1a10 	vmov	r1, s16
 800d4e6:	2201      	movs	r2, #1
 800d4e8:	4620      	mov	r0, r4
 800d4ea:	f000 fba9 	bl	800dc40 <__lshift>
 800d4ee:	4631      	mov	r1, r6
 800d4f0:	ee08 0a10 	vmov	s16, r0
 800d4f4:	f000 fc14 	bl	800dd20 <__mcmp>
 800d4f8:	2800      	cmp	r0, #0
 800d4fa:	dc03      	bgt.n	800d504 <_dtoa_r+0xa9c>
 800d4fc:	d1e0      	bne.n	800d4c0 <_dtoa_r+0xa58>
 800d4fe:	f01a 0f01 	tst.w	sl, #1
 800d502:	d0dd      	beq.n	800d4c0 <_dtoa_r+0xa58>
 800d504:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d508:	d1d7      	bne.n	800d4ba <_dtoa_r+0xa52>
 800d50a:	2339      	movs	r3, #57	; 0x39
 800d50c:	f88b 3000 	strb.w	r3, [fp]
 800d510:	462b      	mov	r3, r5
 800d512:	461d      	mov	r5, r3
 800d514:	3b01      	subs	r3, #1
 800d516:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d51a:	2a39      	cmp	r2, #57	; 0x39
 800d51c:	d071      	beq.n	800d602 <_dtoa_r+0xb9a>
 800d51e:	3201      	adds	r2, #1
 800d520:	701a      	strb	r2, [r3, #0]
 800d522:	e746      	b.n	800d3b2 <_dtoa_r+0x94a>
 800d524:	2a00      	cmp	r2, #0
 800d526:	dd07      	ble.n	800d538 <_dtoa_r+0xad0>
 800d528:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d52c:	d0ed      	beq.n	800d50a <_dtoa_r+0xaa2>
 800d52e:	f10a 0301 	add.w	r3, sl, #1
 800d532:	f88b 3000 	strb.w	r3, [fp]
 800d536:	e73c      	b.n	800d3b2 <_dtoa_r+0x94a>
 800d538:	9b05      	ldr	r3, [sp, #20]
 800d53a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d53e:	4599      	cmp	r9, r3
 800d540:	d047      	beq.n	800d5d2 <_dtoa_r+0xb6a>
 800d542:	ee18 1a10 	vmov	r1, s16
 800d546:	2300      	movs	r3, #0
 800d548:	220a      	movs	r2, #10
 800d54a:	4620      	mov	r0, r4
 800d54c:	f000 f9c8 	bl	800d8e0 <__multadd>
 800d550:	45b8      	cmp	r8, r7
 800d552:	ee08 0a10 	vmov	s16, r0
 800d556:	f04f 0300 	mov.w	r3, #0
 800d55a:	f04f 020a 	mov.w	r2, #10
 800d55e:	4641      	mov	r1, r8
 800d560:	4620      	mov	r0, r4
 800d562:	d106      	bne.n	800d572 <_dtoa_r+0xb0a>
 800d564:	f000 f9bc 	bl	800d8e0 <__multadd>
 800d568:	4680      	mov	r8, r0
 800d56a:	4607      	mov	r7, r0
 800d56c:	f109 0901 	add.w	r9, r9, #1
 800d570:	e772      	b.n	800d458 <_dtoa_r+0x9f0>
 800d572:	f000 f9b5 	bl	800d8e0 <__multadd>
 800d576:	4639      	mov	r1, r7
 800d578:	4680      	mov	r8, r0
 800d57a:	2300      	movs	r3, #0
 800d57c:	220a      	movs	r2, #10
 800d57e:	4620      	mov	r0, r4
 800d580:	f000 f9ae 	bl	800d8e0 <__multadd>
 800d584:	4607      	mov	r7, r0
 800d586:	e7f1      	b.n	800d56c <_dtoa_r+0xb04>
 800d588:	9b03      	ldr	r3, [sp, #12]
 800d58a:	9302      	str	r3, [sp, #8]
 800d58c:	9d01      	ldr	r5, [sp, #4]
 800d58e:	ee18 0a10 	vmov	r0, s16
 800d592:	4631      	mov	r1, r6
 800d594:	f7ff f9dc 	bl	800c950 <quorem>
 800d598:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d59c:	9b01      	ldr	r3, [sp, #4]
 800d59e:	f805 ab01 	strb.w	sl, [r5], #1
 800d5a2:	1aea      	subs	r2, r5, r3
 800d5a4:	9b02      	ldr	r3, [sp, #8]
 800d5a6:	4293      	cmp	r3, r2
 800d5a8:	dd09      	ble.n	800d5be <_dtoa_r+0xb56>
 800d5aa:	ee18 1a10 	vmov	r1, s16
 800d5ae:	2300      	movs	r3, #0
 800d5b0:	220a      	movs	r2, #10
 800d5b2:	4620      	mov	r0, r4
 800d5b4:	f000 f994 	bl	800d8e0 <__multadd>
 800d5b8:	ee08 0a10 	vmov	s16, r0
 800d5bc:	e7e7      	b.n	800d58e <_dtoa_r+0xb26>
 800d5be:	9b02      	ldr	r3, [sp, #8]
 800d5c0:	2b00      	cmp	r3, #0
 800d5c2:	bfc8      	it	gt
 800d5c4:	461d      	movgt	r5, r3
 800d5c6:	9b01      	ldr	r3, [sp, #4]
 800d5c8:	bfd8      	it	le
 800d5ca:	2501      	movle	r5, #1
 800d5cc:	441d      	add	r5, r3
 800d5ce:	f04f 0800 	mov.w	r8, #0
 800d5d2:	ee18 1a10 	vmov	r1, s16
 800d5d6:	2201      	movs	r2, #1
 800d5d8:	4620      	mov	r0, r4
 800d5da:	f000 fb31 	bl	800dc40 <__lshift>
 800d5de:	4631      	mov	r1, r6
 800d5e0:	ee08 0a10 	vmov	s16, r0
 800d5e4:	f000 fb9c 	bl	800dd20 <__mcmp>
 800d5e8:	2800      	cmp	r0, #0
 800d5ea:	dc91      	bgt.n	800d510 <_dtoa_r+0xaa8>
 800d5ec:	d102      	bne.n	800d5f4 <_dtoa_r+0xb8c>
 800d5ee:	f01a 0f01 	tst.w	sl, #1
 800d5f2:	d18d      	bne.n	800d510 <_dtoa_r+0xaa8>
 800d5f4:	462b      	mov	r3, r5
 800d5f6:	461d      	mov	r5, r3
 800d5f8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d5fc:	2a30      	cmp	r2, #48	; 0x30
 800d5fe:	d0fa      	beq.n	800d5f6 <_dtoa_r+0xb8e>
 800d600:	e6d7      	b.n	800d3b2 <_dtoa_r+0x94a>
 800d602:	9a01      	ldr	r2, [sp, #4]
 800d604:	429a      	cmp	r2, r3
 800d606:	d184      	bne.n	800d512 <_dtoa_r+0xaaa>
 800d608:	9b00      	ldr	r3, [sp, #0]
 800d60a:	3301      	adds	r3, #1
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	2331      	movs	r3, #49	; 0x31
 800d610:	7013      	strb	r3, [r2, #0]
 800d612:	e6ce      	b.n	800d3b2 <_dtoa_r+0x94a>
 800d614:	4b09      	ldr	r3, [pc, #36]	; (800d63c <_dtoa_r+0xbd4>)
 800d616:	f7ff ba95 	b.w	800cb44 <_dtoa_r+0xdc>
 800d61a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d61c:	2b00      	cmp	r3, #0
 800d61e:	f47f aa6e 	bne.w	800cafe <_dtoa_r+0x96>
 800d622:	4b07      	ldr	r3, [pc, #28]	; (800d640 <_dtoa_r+0xbd8>)
 800d624:	f7ff ba8e 	b.w	800cb44 <_dtoa_r+0xdc>
 800d628:	9b02      	ldr	r3, [sp, #8]
 800d62a:	2b00      	cmp	r3, #0
 800d62c:	dcae      	bgt.n	800d58c <_dtoa_r+0xb24>
 800d62e:	9b06      	ldr	r3, [sp, #24]
 800d630:	2b02      	cmp	r3, #2
 800d632:	f73f aea8 	bgt.w	800d386 <_dtoa_r+0x91e>
 800d636:	e7a9      	b.n	800d58c <_dtoa_r+0xb24>
 800d638:	0800f77b 	.word	0x0800f77b
 800d63c:	0800f6d8 	.word	0x0800f6d8
 800d640:	0800f6fc 	.word	0x0800f6fc

0800d644 <__sflush_r>:
 800d644:	898a      	ldrh	r2, [r1, #12]
 800d646:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d64a:	4605      	mov	r5, r0
 800d64c:	0710      	lsls	r0, r2, #28
 800d64e:	460c      	mov	r4, r1
 800d650:	d458      	bmi.n	800d704 <__sflush_r+0xc0>
 800d652:	684b      	ldr	r3, [r1, #4]
 800d654:	2b00      	cmp	r3, #0
 800d656:	dc05      	bgt.n	800d664 <__sflush_r+0x20>
 800d658:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	dc02      	bgt.n	800d664 <__sflush_r+0x20>
 800d65e:	2000      	movs	r0, #0
 800d660:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d664:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d666:	2e00      	cmp	r6, #0
 800d668:	d0f9      	beq.n	800d65e <__sflush_r+0x1a>
 800d66a:	2300      	movs	r3, #0
 800d66c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d670:	682f      	ldr	r7, [r5, #0]
 800d672:	602b      	str	r3, [r5, #0]
 800d674:	d032      	beq.n	800d6dc <__sflush_r+0x98>
 800d676:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d678:	89a3      	ldrh	r3, [r4, #12]
 800d67a:	075a      	lsls	r2, r3, #29
 800d67c:	d505      	bpl.n	800d68a <__sflush_r+0x46>
 800d67e:	6863      	ldr	r3, [r4, #4]
 800d680:	1ac0      	subs	r0, r0, r3
 800d682:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d684:	b10b      	cbz	r3, 800d68a <__sflush_r+0x46>
 800d686:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d688:	1ac0      	subs	r0, r0, r3
 800d68a:	2300      	movs	r3, #0
 800d68c:	4602      	mov	r2, r0
 800d68e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d690:	6a21      	ldr	r1, [r4, #32]
 800d692:	4628      	mov	r0, r5
 800d694:	47b0      	blx	r6
 800d696:	1c43      	adds	r3, r0, #1
 800d698:	89a3      	ldrh	r3, [r4, #12]
 800d69a:	d106      	bne.n	800d6aa <__sflush_r+0x66>
 800d69c:	6829      	ldr	r1, [r5, #0]
 800d69e:	291d      	cmp	r1, #29
 800d6a0:	d82c      	bhi.n	800d6fc <__sflush_r+0xb8>
 800d6a2:	4a2a      	ldr	r2, [pc, #168]	; (800d74c <__sflush_r+0x108>)
 800d6a4:	40ca      	lsrs	r2, r1
 800d6a6:	07d6      	lsls	r6, r2, #31
 800d6a8:	d528      	bpl.n	800d6fc <__sflush_r+0xb8>
 800d6aa:	2200      	movs	r2, #0
 800d6ac:	6062      	str	r2, [r4, #4]
 800d6ae:	04d9      	lsls	r1, r3, #19
 800d6b0:	6922      	ldr	r2, [r4, #16]
 800d6b2:	6022      	str	r2, [r4, #0]
 800d6b4:	d504      	bpl.n	800d6c0 <__sflush_r+0x7c>
 800d6b6:	1c42      	adds	r2, r0, #1
 800d6b8:	d101      	bne.n	800d6be <__sflush_r+0x7a>
 800d6ba:	682b      	ldr	r3, [r5, #0]
 800d6bc:	b903      	cbnz	r3, 800d6c0 <__sflush_r+0x7c>
 800d6be:	6560      	str	r0, [r4, #84]	; 0x54
 800d6c0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d6c2:	602f      	str	r7, [r5, #0]
 800d6c4:	2900      	cmp	r1, #0
 800d6c6:	d0ca      	beq.n	800d65e <__sflush_r+0x1a>
 800d6c8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d6cc:	4299      	cmp	r1, r3
 800d6ce:	d002      	beq.n	800d6d6 <__sflush_r+0x92>
 800d6d0:	4628      	mov	r0, r5
 800d6d2:	f000 fc3d 	bl	800df50 <_free_r>
 800d6d6:	2000      	movs	r0, #0
 800d6d8:	6360      	str	r0, [r4, #52]	; 0x34
 800d6da:	e7c1      	b.n	800d660 <__sflush_r+0x1c>
 800d6dc:	6a21      	ldr	r1, [r4, #32]
 800d6de:	2301      	movs	r3, #1
 800d6e0:	4628      	mov	r0, r5
 800d6e2:	47b0      	blx	r6
 800d6e4:	1c41      	adds	r1, r0, #1
 800d6e6:	d1c7      	bne.n	800d678 <__sflush_r+0x34>
 800d6e8:	682b      	ldr	r3, [r5, #0]
 800d6ea:	2b00      	cmp	r3, #0
 800d6ec:	d0c4      	beq.n	800d678 <__sflush_r+0x34>
 800d6ee:	2b1d      	cmp	r3, #29
 800d6f0:	d001      	beq.n	800d6f6 <__sflush_r+0xb2>
 800d6f2:	2b16      	cmp	r3, #22
 800d6f4:	d101      	bne.n	800d6fa <__sflush_r+0xb6>
 800d6f6:	602f      	str	r7, [r5, #0]
 800d6f8:	e7b1      	b.n	800d65e <__sflush_r+0x1a>
 800d6fa:	89a3      	ldrh	r3, [r4, #12]
 800d6fc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d700:	81a3      	strh	r3, [r4, #12]
 800d702:	e7ad      	b.n	800d660 <__sflush_r+0x1c>
 800d704:	690f      	ldr	r7, [r1, #16]
 800d706:	2f00      	cmp	r7, #0
 800d708:	d0a9      	beq.n	800d65e <__sflush_r+0x1a>
 800d70a:	0793      	lsls	r3, r2, #30
 800d70c:	680e      	ldr	r6, [r1, #0]
 800d70e:	bf08      	it	eq
 800d710:	694b      	ldreq	r3, [r1, #20]
 800d712:	600f      	str	r7, [r1, #0]
 800d714:	bf18      	it	ne
 800d716:	2300      	movne	r3, #0
 800d718:	eba6 0807 	sub.w	r8, r6, r7
 800d71c:	608b      	str	r3, [r1, #8]
 800d71e:	f1b8 0f00 	cmp.w	r8, #0
 800d722:	dd9c      	ble.n	800d65e <__sflush_r+0x1a>
 800d724:	6a21      	ldr	r1, [r4, #32]
 800d726:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d728:	4643      	mov	r3, r8
 800d72a:	463a      	mov	r2, r7
 800d72c:	4628      	mov	r0, r5
 800d72e:	47b0      	blx	r6
 800d730:	2800      	cmp	r0, #0
 800d732:	dc06      	bgt.n	800d742 <__sflush_r+0xfe>
 800d734:	89a3      	ldrh	r3, [r4, #12]
 800d736:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d73a:	81a3      	strh	r3, [r4, #12]
 800d73c:	f04f 30ff 	mov.w	r0, #4294967295
 800d740:	e78e      	b.n	800d660 <__sflush_r+0x1c>
 800d742:	4407      	add	r7, r0
 800d744:	eba8 0800 	sub.w	r8, r8, r0
 800d748:	e7e9      	b.n	800d71e <__sflush_r+0xda>
 800d74a:	bf00      	nop
 800d74c:	20400001 	.word	0x20400001

0800d750 <_fflush_r>:
 800d750:	b538      	push	{r3, r4, r5, lr}
 800d752:	690b      	ldr	r3, [r1, #16]
 800d754:	4605      	mov	r5, r0
 800d756:	460c      	mov	r4, r1
 800d758:	b913      	cbnz	r3, 800d760 <_fflush_r+0x10>
 800d75a:	2500      	movs	r5, #0
 800d75c:	4628      	mov	r0, r5
 800d75e:	bd38      	pop	{r3, r4, r5, pc}
 800d760:	b118      	cbz	r0, 800d76a <_fflush_r+0x1a>
 800d762:	6983      	ldr	r3, [r0, #24]
 800d764:	b90b      	cbnz	r3, 800d76a <_fflush_r+0x1a>
 800d766:	f7fe fa19 	bl	800bb9c <__sinit>
 800d76a:	4b14      	ldr	r3, [pc, #80]	; (800d7bc <_fflush_r+0x6c>)
 800d76c:	429c      	cmp	r4, r3
 800d76e:	d11b      	bne.n	800d7a8 <_fflush_r+0x58>
 800d770:	686c      	ldr	r4, [r5, #4]
 800d772:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d776:	2b00      	cmp	r3, #0
 800d778:	d0ef      	beq.n	800d75a <_fflush_r+0xa>
 800d77a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d77c:	07d0      	lsls	r0, r2, #31
 800d77e:	d404      	bmi.n	800d78a <_fflush_r+0x3a>
 800d780:	0599      	lsls	r1, r3, #22
 800d782:	d402      	bmi.n	800d78a <_fflush_r+0x3a>
 800d784:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d786:	f7fe facc 	bl	800bd22 <__retarget_lock_acquire_recursive>
 800d78a:	4628      	mov	r0, r5
 800d78c:	4621      	mov	r1, r4
 800d78e:	f7ff ff59 	bl	800d644 <__sflush_r>
 800d792:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d794:	07da      	lsls	r2, r3, #31
 800d796:	4605      	mov	r5, r0
 800d798:	d4e0      	bmi.n	800d75c <_fflush_r+0xc>
 800d79a:	89a3      	ldrh	r3, [r4, #12]
 800d79c:	059b      	lsls	r3, r3, #22
 800d79e:	d4dd      	bmi.n	800d75c <_fflush_r+0xc>
 800d7a0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d7a2:	f7fe fabf 	bl	800bd24 <__retarget_lock_release_recursive>
 800d7a6:	e7d9      	b.n	800d75c <_fflush_r+0xc>
 800d7a8:	4b05      	ldr	r3, [pc, #20]	; (800d7c0 <_fflush_r+0x70>)
 800d7aa:	429c      	cmp	r4, r3
 800d7ac:	d101      	bne.n	800d7b2 <_fflush_r+0x62>
 800d7ae:	68ac      	ldr	r4, [r5, #8]
 800d7b0:	e7df      	b.n	800d772 <_fflush_r+0x22>
 800d7b2:	4b04      	ldr	r3, [pc, #16]	; (800d7c4 <_fflush_r+0x74>)
 800d7b4:	429c      	cmp	r4, r3
 800d7b6:	bf08      	it	eq
 800d7b8:	68ec      	ldreq	r4, [r5, #12]
 800d7ba:	e7da      	b.n	800d772 <_fflush_r+0x22>
 800d7bc:	0800f684 	.word	0x0800f684
 800d7c0:	0800f6a4 	.word	0x0800f6a4
 800d7c4:	0800f664 	.word	0x0800f664

0800d7c8 <_localeconv_r>:
 800d7c8:	4800      	ldr	r0, [pc, #0]	; (800d7cc <_localeconv_r+0x4>)
 800d7ca:	4770      	bx	lr
 800d7cc:	20000188 	.word	0x20000188

0800d7d0 <_lseek_r>:
 800d7d0:	b538      	push	{r3, r4, r5, lr}
 800d7d2:	4d07      	ldr	r5, [pc, #28]	; (800d7f0 <_lseek_r+0x20>)
 800d7d4:	4604      	mov	r4, r0
 800d7d6:	4608      	mov	r0, r1
 800d7d8:	4611      	mov	r1, r2
 800d7da:	2200      	movs	r2, #0
 800d7dc:	602a      	str	r2, [r5, #0]
 800d7de:	461a      	mov	r2, r3
 800d7e0:	f7f6 fb5c 	bl	8003e9c <_lseek>
 800d7e4:	1c43      	adds	r3, r0, #1
 800d7e6:	d102      	bne.n	800d7ee <_lseek_r+0x1e>
 800d7e8:	682b      	ldr	r3, [r5, #0]
 800d7ea:	b103      	cbz	r3, 800d7ee <_lseek_r+0x1e>
 800d7ec:	6023      	str	r3, [r4, #0]
 800d7ee:	bd38      	pop	{r3, r4, r5, pc}
 800d7f0:	20005420 	.word	0x20005420

0800d7f4 <malloc>:
 800d7f4:	4b02      	ldr	r3, [pc, #8]	; (800d800 <malloc+0xc>)
 800d7f6:	4601      	mov	r1, r0
 800d7f8:	6818      	ldr	r0, [r3, #0]
 800d7fa:	f7fe bacb 	b.w	800bd94 <_malloc_r>
 800d7fe:	bf00      	nop
 800d800:	20000034 	.word	0x20000034

0800d804 <__malloc_lock>:
 800d804:	4801      	ldr	r0, [pc, #4]	; (800d80c <__malloc_lock+0x8>)
 800d806:	f7fe ba8c 	b.w	800bd22 <__retarget_lock_acquire_recursive>
 800d80a:	bf00      	nop
 800d80c:	20005414 	.word	0x20005414

0800d810 <__malloc_unlock>:
 800d810:	4801      	ldr	r0, [pc, #4]	; (800d818 <__malloc_unlock+0x8>)
 800d812:	f7fe ba87 	b.w	800bd24 <__retarget_lock_release_recursive>
 800d816:	bf00      	nop
 800d818:	20005414 	.word	0x20005414

0800d81c <_Balloc>:
 800d81c:	b570      	push	{r4, r5, r6, lr}
 800d81e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d820:	4604      	mov	r4, r0
 800d822:	460d      	mov	r5, r1
 800d824:	b976      	cbnz	r6, 800d844 <_Balloc+0x28>
 800d826:	2010      	movs	r0, #16
 800d828:	f7ff ffe4 	bl	800d7f4 <malloc>
 800d82c:	4602      	mov	r2, r0
 800d82e:	6260      	str	r0, [r4, #36]	; 0x24
 800d830:	b920      	cbnz	r0, 800d83c <_Balloc+0x20>
 800d832:	4b18      	ldr	r3, [pc, #96]	; (800d894 <_Balloc+0x78>)
 800d834:	4818      	ldr	r0, [pc, #96]	; (800d898 <_Balloc+0x7c>)
 800d836:	2166      	movs	r1, #102	; 0x66
 800d838:	f000 fd44 	bl	800e2c4 <__assert_func>
 800d83c:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d840:	6006      	str	r6, [r0, #0]
 800d842:	60c6      	str	r6, [r0, #12]
 800d844:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800d846:	68f3      	ldr	r3, [r6, #12]
 800d848:	b183      	cbz	r3, 800d86c <_Balloc+0x50>
 800d84a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d84c:	68db      	ldr	r3, [r3, #12]
 800d84e:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800d852:	b9b8      	cbnz	r0, 800d884 <_Balloc+0x68>
 800d854:	2101      	movs	r1, #1
 800d856:	fa01 f605 	lsl.w	r6, r1, r5
 800d85a:	1d72      	adds	r2, r6, #5
 800d85c:	0092      	lsls	r2, r2, #2
 800d85e:	4620      	mov	r0, r4
 800d860:	f000 fb60 	bl	800df24 <_calloc_r>
 800d864:	b160      	cbz	r0, 800d880 <_Balloc+0x64>
 800d866:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800d86a:	e00e      	b.n	800d88a <_Balloc+0x6e>
 800d86c:	2221      	movs	r2, #33	; 0x21
 800d86e:	2104      	movs	r1, #4
 800d870:	4620      	mov	r0, r4
 800d872:	f000 fb57 	bl	800df24 <_calloc_r>
 800d876:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800d878:	60f0      	str	r0, [r6, #12]
 800d87a:	68db      	ldr	r3, [r3, #12]
 800d87c:	2b00      	cmp	r3, #0
 800d87e:	d1e4      	bne.n	800d84a <_Balloc+0x2e>
 800d880:	2000      	movs	r0, #0
 800d882:	bd70      	pop	{r4, r5, r6, pc}
 800d884:	6802      	ldr	r2, [r0, #0]
 800d886:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800d88a:	2300      	movs	r3, #0
 800d88c:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800d890:	e7f7      	b.n	800d882 <_Balloc+0x66>
 800d892:	bf00      	nop
 800d894:	0800f709 	.word	0x0800f709
 800d898:	0800f78c 	.word	0x0800f78c

0800d89c <_Bfree>:
 800d89c:	b570      	push	{r4, r5, r6, lr}
 800d89e:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800d8a0:	4605      	mov	r5, r0
 800d8a2:	460c      	mov	r4, r1
 800d8a4:	b976      	cbnz	r6, 800d8c4 <_Bfree+0x28>
 800d8a6:	2010      	movs	r0, #16
 800d8a8:	f7ff ffa4 	bl	800d7f4 <malloc>
 800d8ac:	4602      	mov	r2, r0
 800d8ae:	6268      	str	r0, [r5, #36]	; 0x24
 800d8b0:	b920      	cbnz	r0, 800d8bc <_Bfree+0x20>
 800d8b2:	4b09      	ldr	r3, [pc, #36]	; (800d8d8 <_Bfree+0x3c>)
 800d8b4:	4809      	ldr	r0, [pc, #36]	; (800d8dc <_Bfree+0x40>)
 800d8b6:	218a      	movs	r1, #138	; 0x8a
 800d8b8:	f000 fd04 	bl	800e2c4 <__assert_func>
 800d8bc:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d8c0:	6006      	str	r6, [r0, #0]
 800d8c2:	60c6      	str	r6, [r0, #12]
 800d8c4:	b13c      	cbz	r4, 800d8d6 <_Bfree+0x3a>
 800d8c6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d8c8:	6862      	ldr	r2, [r4, #4]
 800d8ca:	68db      	ldr	r3, [r3, #12]
 800d8cc:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d8d0:	6021      	str	r1, [r4, #0]
 800d8d2:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d8d6:	bd70      	pop	{r4, r5, r6, pc}
 800d8d8:	0800f709 	.word	0x0800f709
 800d8dc:	0800f78c 	.word	0x0800f78c

0800d8e0 <__multadd>:
 800d8e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d8e4:	690d      	ldr	r5, [r1, #16]
 800d8e6:	4607      	mov	r7, r0
 800d8e8:	460c      	mov	r4, r1
 800d8ea:	461e      	mov	r6, r3
 800d8ec:	f101 0c14 	add.w	ip, r1, #20
 800d8f0:	2000      	movs	r0, #0
 800d8f2:	f8dc 3000 	ldr.w	r3, [ip]
 800d8f6:	b299      	uxth	r1, r3
 800d8f8:	fb02 6101 	mla	r1, r2, r1, r6
 800d8fc:	0c1e      	lsrs	r6, r3, #16
 800d8fe:	0c0b      	lsrs	r3, r1, #16
 800d900:	fb02 3306 	mla	r3, r2, r6, r3
 800d904:	b289      	uxth	r1, r1
 800d906:	3001      	adds	r0, #1
 800d908:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d90c:	4285      	cmp	r5, r0
 800d90e:	f84c 1b04 	str.w	r1, [ip], #4
 800d912:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d916:	dcec      	bgt.n	800d8f2 <__multadd+0x12>
 800d918:	b30e      	cbz	r6, 800d95e <__multadd+0x7e>
 800d91a:	68a3      	ldr	r3, [r4, #8]
 800d91c:	42ab      	cmp	r3, r5
 800d91e:	dc19      	bgt.n	800d954 <__multadd+0x74>
 800d920:	6861      	ldr	r1, [r4, #4]
 800d922:	4638      	mov	r0, r7
 800d924:	3101      	adds	r1, #1
 800d926:	f7ff ff79 	bl	800d81c <_Balloc>
 800d92a:	4680      	mov	r8, r0
 800d92c:	b928      	cbnz	r0, 800d93a <__multadd+0x5a>
 800d92e:	4602      	mov	r2, r0
 800d930:	4b0c      	ldr	r3, [pc, #48]	; (800d964 <__multadd+0x84>)
 800d932:	480d      	ldr	r0, [pc, #52]	; (800d968 <__multadd+0x88>)
 800d934:	21b5      	movs	r1, #181	; 0xb5
 800d936:	f000 fcc5 	bl	800e2c4 <__assert_func>
 800d93a:	6922      	ldr	r2, [r4, #16]
 800d93c:	3202      	adds	r2, #2
 800d93e:	f104 010c 	add.w	r1, r4, #12
 800d942:	0092      	lsls	r2, r2, #2
 800d944:	300c      	adds	r0, #12
 800d946:	f7fe f9ee 	bl	800bd26 <memcpy>
 800d94a:	4621      	mov	r1, r4
 800d94c:	4638      	mov	r0, r7
 800d94e:	f7ff ffa5 	bl	800d89c <_Bfree>
 800d952:	4644      	mov	r4, r8
 800d954:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d958:	3501      	adds	r5, #1
 800d95a:	615e      	str	r6, [r3, #20]
 800d95c:	6125      	str	r5, [r4, #16]
 800d95e:	4620      	mov	r0, r4
 800d960:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d964:	0800f77b 	.word	0x0800f77b
 800d968:	0800f78c 	.word	0x0800f78c

0800d96c <__hi0bits>:
 800d96c:	0c03      	lsrs	r3, r0, #16
 800d96e:	041b      	lsls	r3, r3, #16
 800d970:	b9d3      	cbnz	r3, 800d9a8 <__hi0bits+0x3c>
 800d972:	0400      	lsls	r0, r0, #16
 800d974:	2310      	movs	r3, #16
 800d976:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d97a:	bf04      	itt	eq
 800d97c:	0200      	lsleq	r0, r0, #8
 800d97e:	3308      	addeq	r3, #8
 800d980:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d984:	bf04      	itt	eq
 800d986:	0100      	lsleq	r0, r0, #4
 800d988:	3304      	addeq	r3, #4
 800d98a:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d98e:	bf04      	itt	eq
 800d990:	0080      	lsleq	r0, r0, #2
 800d992:	3302      	addeq	r3, #2
 800d994:	2800      	cmp	r0, #0
 800d996:	db05      	blt.n	800d9a4 <__hi0bits+0x38>
 800d998:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d99c:	f103 0301 	add.w	r3, r3, #1
 800d9a0:	bf08      	it	eq
 800d9a2:	2320      	moveq	r3, #32
 800d9a4:	4618      	mov	r0, r3
 800d9a6:	4770      	bx	lr
 800d9a8:	2300      	movs	r3, #0
 800d9aa:	e7e4      	b.n	800d976 <__hi0bits+0xa>

0800d9ac <__lo0bits>:
 800d9ac:	6803      	ldr	r3, [r0, #0]
 800d9ae:	f013 0207 	ands.w	r2, r3, #7
 800d9b2:	4601      	mov	r1, r0
 800d9b4:	d00b      	beq.n	800d9ce <__lo0bits+0x22>
 800d9b6:	07da      	lsls	r2, r3, #31
 800d9b8:	d423      	bmi.n	800da02 <__lo0bits+0x56>
 800d9ba:	0798      	lsls	r0, r3, #30
 800d9bc:	bf49      	itett	mi
 800d9be:	085b      	lsrmi	r3, r3, #1
 800d9c0:	089b      	lsrpl	r3, r3, #2
 800d9c2:	2001      	movmi	r0, #1
 800d9c4:	600b      	strmi	r3, [r1, #0]
 800d9c6:	bf5c      	itt	pl
 800d9c8:	600b      	strpl	r3, [r1, #0]
 800d9ca:	2002      	movpl	r0, #2
 800d9cc:	4770      	bx	lr
 800d9ce:	b298      	uxth	r0, r3
 800d9d0:	b9a8      	cbnz	r0, 800d9fe <__lo0bits+0x52>
 800d9d2:	0c1b      	lsrs	r3, r3, #16
 800d9d4:	2010      	movs	r0, #16
 800d9d6:	b2da      	uxtb	r2, r3
 800d9d8:	b90a      	cbnz	r2, 800d9de <__lo0bits+0x32>
 800d9da:	3008      	adds	r0, #8
 800d9dc:	0a1b      	lsrs	r3, r3, #8
 800d9de:	071a      	lsls	r2, r3, #28
 800d9e0:	bf04      	itt	eq
 800d9e2:	091b      	lsreq	r3, r3, #4
 800d9e4:	3004      	addeq	r0, #4
 800d9e6:	079a      	lsls	r2, r3, #30
 800d9e8:	bf04      	itt	eq
 800d9ea:	089b      	lsreq	r3, r3, #2
 800d9ec:	3002      	addeq	r0, #2
 800d9ee:	07da      	lsls	r2, r3, #31
 800d9f0:	d403      	bmi.n	800d9fa <__lo0bits+0x4e>
 800d9f2:	085b      	lsrs	r3, r3, #1
 800d9f4:	f100 0001 	add.w	r0, r0, #1
 800d9f8:	d005      	beq.n	800da06 <__lo0bits+0x5a>
 800d9fa:	600b      	str	r3, [r1, #0]
 800d9fc:	4770      	bx	lr
 800d9fe:	4610      	mov	r0, r2
 800da00:	e7e9      	b.n	800d9d6 <__lo0bits+0x2a>
 800da02:	2000      	movs	r0, #0
 800da04:	4770      	bx	lr
 800da06:	2020      	movs	r0, #32
 800da08:	4770      	bx	lr
	...

0800da0c <__i2b>:
 800da0c:	b510      	push	{r4, lr}
 800da0e:	460c      	mov	r4, r1
 800da10:	2101      	movs	r1, #1
 800da12:	f7ff ff03 	bl	800d81c <_Balloc>
 800da16:	4602      	mov	r2, r0
 800da18:	b928      	cbnz	r0, 800da26 <__i2b+0x1a>
 800da1a:	4b05      	ldr	r3, [pc, #20]	; (800da30 <__i2b+0x24>)
 800da1c:	4805      	ldr	r0, [pc, #20]	; (800da34 <__i2b+0x28>)
 800da1e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800da22:	f000 fc4f 	bl	800e2c4 <__assert_func>
 800da26:	2301      	movs	r3, #1
 800da28:	6144      	str	r4, [r0, #20]
 800da2a:	6103      	str	r3, [r0, #16]
 800da2c:	bd10      	pop	{r4, pc}
 800da2e:	bf00      	nop
 800da30:	0800f77b 	.word	0x0800f77b
 800da34:	0800f78c 	.word	0x0800f78c

0800da38 <__multiply>:
 800da38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800da3c:	4691      	mov	r9, r2
 800da3e:	690a      	ldr	r2, [r1, #16]
 800da40:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800da44:	429a      	cmp	r2, r3
 800da46:	bfb8      	it	lt
 800da48:	460b      	movlt	r3, r1
 800da4a:	460c      	mov	r4, r1
 800da4c:	bfbc      	itt	lt
 800da4e:	464c      	movlt	r4, r9
 800da50:	4699      	movlt	r9, r3
 800da52:	6927      	ldr	r7, [r4, #16]
 800da54:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800da58:	68a3      	ldr	r3, [r4, #8]
 800da5a:	6861      	ldr	r1, [r4, #4]
 800da5c:	eb07 060a 	add.w	r6, r7, sl
 800da60:	42b3      	cmp	r3, r6
 800da62:	b085      	sub	sp, #20
 800da64:	bfb8      	it	lt
 800da66:	3101      	addlt	r1, #1
 800da68:	f7ff fed8 	bl	800d81c <_Balloc>
 800da6c:	b930      	cbnz	r0, 800da7c <__multiply+0x44>
 800da6e:	4602      	mov	r2, r0
 800da70:	4b44      	ldr	r3, [pc, #272]	; (800db84 <__multiply+0x14c>)
 800da72:	4845      	ldr	r0, [pc, #276]	; (800db88 <__multiply+0x150>)
 800da74:	f240 115d 	movw	r1, #349	; 0x15d
 800da78:	f000 fc24 	bl	800e2c4 <__assert_func>
 800da7c:	f100 0514 	add.w	r5, r0, #20
 800da80:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800da84:	462b      	mov	r3, r5
 800da86:	2200      	movs	r2, #0
 800da88:	4543      	cmp	r3, r8
 800da8a:	d321      	bcc.n	800dad0 <__multiply+0x98>
 800da8c:	f104 0314 	add.w	r3, r4, #20
 800da90:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800da94:	f109 0314 	add.w	r3, r9, #20
 800da98:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800da9c:	9202      	str	r2, [sp, #8]
 800da9e:	1b3a      	subs	r2, r7, r4
 800daa0:	3a15      	subs	r2, #21
 800daa2:	f022 0203 	bic.w	r2, r2, #3
 800daa6:	3204      	adds	r2, #4
 800daa8:	f104 0115 	add.w	r1, r4, #21
 800daac:	428f      	cmp	r7, r1
 800daae:	bf38      	it	cc
 800dab0:	2204      	movcc	r2, #4
 800dab2:	9201      	str	r2, [sp, #4]
 800dab4:	9a02      	ldr	r2, [sp, #8]
 800dab6:	9303      	str	r3, [sp, #12]
 800dab8:	429a      	cmp	r2, r3
 800daba:	d80c      	bhi.n	800dad6 <__multiply+0x9e>
 800dabc:	2e00      	cmp	r6, #0
 800dabe:	dd03      	ble.n	800dac8 <__multiply+0x90>
 800dac0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dac4:	2b00      	cmp	r3, #0
 800dac6:	d05a      	beq.n	800db7e <__multiply+0x146>
 800dac8:	6106      	str	r6, [r0, #16]
 800daca:	b005      	add	sp, #20
 800dacc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dad0:	f843 2b04 	str.w	r2, [r3], #4
 800dad4:	e7d8      	b.n	800da88 <__multiply+0x50>
 800dad6:	f8b3 a000 	ldrh.w	sl, [r3]
 800dada:	f1ba 0f00 	cmp.w	sl, #0
 800dade:	d024      	beq.n	800db2a <__multiply+0xf2>
 800dae0:	f104 0e14 	add.w	lr, r4, #20
 800dae4:	46a9      	mov	r9, r5
 800dae6:	f04f 0c00 	mov.w	ip, #0
 800daea:	f85e 2b04 	ldr.w	r2, [lr], #4
 800daee:	f8d9 1000 	ldr.w	r1, [r9]
 800daf2:	fa1f fb82 	uxth.w	fp, r2
 800daf6:	b289      	uxth	r1, r1
 800daf8:	fb0a 110b 	mla	r1, sl, fp, r1
 800dafc:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800db00:	f8d9 2000 	ldr.w	r2, [r9]
 800db04:	4461      	add	r1, ip
 800db06:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db0a:	fb0a c20b 	mla	r2, sl, fp, ip
 800db0e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800db12:	b289      	uxth	r1, r1
 800db14:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800db18:	4577      	cmp	r7, lr
 800db1a:	f849 1b04 	str.w	r1, [r9], #4
 800db1e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800db22:	d8e2      	bhi.n	800daea <__multiply+0xb2>
 800db24:	9a01      	ldr	r2, [sp, #4]
 800db26:	f845 c002 	str.w	ip, [r5, r2]
 800db2a:	9a03      	ldr	r2, [sp, #12]
 800db2c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800db30:	3304      	adds	r3, #4
 800db32:	f1b9 0f00 	cmp.w	r9, #0
 800db36:	d020      	beq.n	800db7a <__multiply+0x142>
 800db38:	6829      	ldr	r1, [r5, #0]
 800db3a:	f104 0c14 	add.w	ip, r4, #20
 800db3e:	46ae      	mov	lr, r5
 800db40:	f04f 0a00 	mov.w	sl, #0
 800db44:	f8bc b000 	ldrh.w	fp, [ip]
 800db48:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800db4c:	fb09 220b 	mla	r2, r9, fp, r2
 800db50:	4492      	add	sl, r2
 800db52:	b289      	uxth	r1, r1
 800db54:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800db58:	f84e 1b04 	str.w	r1, [lr], #4
 800db5c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800db60:	f8be 1000 	ldrh.w	r1, [lr]
 800db64:	0c12      	lsrs	r2, r2, #16
 800db66:	fb09 1102 	mla	r1, r9, r2, r1
 800db6a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800db6e:	4567      	cmp	r7, ip
 800db70:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800db74:	d8e6      	bhi.n	800db44 <__multiply+0x10c>
 800db76:	9a01      	ldr	r2, [sp, #4]
 800db78:	50a9      	str	r1, [r5, r2]
 800db7a:	3504      	adds	r5, #4
 800db7c:	e79a      	b.n	800dab4 <__multiply+0x7c>
 800db7e:	3e01      	subs	r6, #1
 800db80:	e79c      	b.n	800dabc <__multiply+0x84>
 800db82:	bf00      	nop
 800db84:	0800f77b 	.word	0x0800f77b
 800db88:	0800f78c 	.word	0x0800f78c

0800db8c <__pow5mult>:
 800db8c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800db90:	4615      	mov	r5, r2
 800db92:	f012 0203 	ands.w	r2, r2, #3
 800db96:	4606      	mov	r6, r0
 800db98:	460f      	mov	r7, r1
 800db9a:	d007      	beq.n	800dbac <__pow5mult+0x20>
 800db9c:	4c25      	ldr	r4, [pc, #148]	; (800dc34 <__pow5mult+0xa8>)
 800db9e:	3a01      	subs	r2, #1
 800dba0:	2300      	movs	r3, #0
 800dba2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800dba6:	f7ff fe9b 	bl	800d8e0 <__multadd>
 800dbaa:	4607      	mov	r7, r0
 800dbac:	10ad      	asrs	r5, r5, #2
 800dbae:	d03d      	beq.n	800dc2c <__pow5mult+0xa0>
 800dbb0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800dbb2:	b97c      	cbnz	r4, 800dbd4 <__pow5mult+0x48>
 800dbb4:	2010      	movs	r0, #16
 800dbb6:	f7ff fe1d 	bl	800d7f4 <malloc>
 800dbba:	4602      	mov	r2, r0
 800dbbc:	6270      	str	r0, [r6, #36]	; 0x24
 800dbbe:	b928      	cbnz	r0, 800dbcc <__pow5mult+0x40>
 800dbc0:	4b1d      	ldr	r3, [pc, #116]	; (800dc38 <__pow5mult+0xac>)
 800dbc2:	481e      	ldr	r0, [pc, #120]	; (800dc3c <__pow5mult+0xb0>)
 800dbc4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800dbc8:	f000 fb7c 	bl	800e2c4 <__assert_func>
 800dbcc:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800dbd0:	6004      	str	r4, [r0, #0]
 800dbd2:	60c4      	str	r4, [r0, #12]
 800dbd4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800dbd8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800dbdc:	b94c      	cbnz	r4, 800dbf2 <__pow5mult+0x66>
 800dbde:	f240 2171 	movw	r1, #625	; 0x271
 800dbe2:	4630      	mov	r0, r6
 800dbe4:	f7ff ff12 	bl	800da0c <__i2b>
 800dbe8:	2300      	movs	r3, #0
 800dbea:	f8c8 0008 	str.w	r0, [r8, #8]
 800dbee:	4604      	mov	r4, r0
 800dbf0:	6003      	str	r3, [r0, #0]
 800dbf2:	f04f 0900 	mov.w	r9, #0
 800dbf6:	07eb      	lsls	r3, r5, #31
 800dbf8:	d50a      	bpl.n	800dc10 <__pow5mult+0x84>
 800dbfa:	4639      	mov	r1, r7
 800dbfc:	4622      	mov	r2, r4
 800dbfe:	4630      	mov	r0, r6
 800dc00:	f7ff ff1a 	bl	800da38 <__multiply>
 800dc04:	4639      	mov	r1, r7
 800dc06:	4680      	mov	r8, r0
 800dc08:	4630      	mov	r0, r6
 800dc0a:	f7ff fe47 	bl	800d89c <_Bfree>
 800dc0e:	4647      	mov	r7, r8
 800dc10:	106d      	asrs	r5, r5, #1
 800dc12:	d00b      	beq.n	800dc2c <__pow5mult+0xa0>
 800dc14:	6820      	ldr	r0, [r4, #0]
 800dc16:	b938      	cbnz	r0, 800dc28 <__pow5mult+0x9c>
 800dc18:	4622      	mov	r2, r4
 800dc1a:	4621      	mov	r1, r4
 800dc1c:	4630      	mov	r0, r6
 800dc1e:	f7ff ff0b 	bl	800da38 <__multiply>
 800dc22:	6020      	str	r0, [r4, #0]
 800dc24:	f8c0 9000 	str.w	r9, [r0]
 800dc28:	4604      	mov	r4, r0
 800dc2a:	e7e4      	b.n	800dbf6 <__pow5mult+0x6a>
 800dc2c:	4638      	mov	r0, r7
 800dc2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800dc32:	bf00      	nop
 800dc34:	0800f8d8 	.word	0x0800f8d8
 800dc38:	0800f709 	.word	0x0800f709
 800dc3c:	0800f78c 	.word	0x0800f78c

0800dc40 <__lshift>:
 800dc40:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dc44:	460c      	mov	r4, r1
 800dc46:	6849      	ldr	r1, [r1, #4]
 800dc48:	6923      	ldr	r3, [r4, #16]
 800dc4a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800dc4e:	68a3      	ldr	r3, [r4, #8]
 800dc50:	4607      	mov	r7, r0
 800dc52:	4691      	mov	r9, r2
 800dc54:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800dc58:	f108 0601 	add.w	r6, r8, #1
 800dc5c:	42b3      	cmp	r3, r6
 800dc5e:	db0b      	blt.n	800dc78 <__lshift+0x38>
 800dc60:	4638      	mov	r0, r7
 800dc62:	f7ff fddb 	bl	800d81c <_Balloc>
 800dc66:	4605      	mov	r5, r0
 800dc68:	b948      	cbnz	r0, 800dc7e <__lshift+0x3e>
 800dc6a:	4602      	mov	r2, r0
 800dc6c:	4b2a      	ldr	r3, [pc, #168]	; (800dd18 <__lshift+0xd8>)
 800dc6e:	482b      	ldr	r0, [pc, #172]	; (800dd1c <__lshift+0xdc>)
 800dc70:	f240 11d9 	movw	r1, #473	; 0x1d9
 800dc74:	f000 fb26 	bl	800e2c4 <__assert_func>
 800dc78:	3101      	adds	r1, #1
 800dc7a:	005b      	lsls	r3, r3, #1
 800dc7c:	e7ee      	b.n	800dc5c <__lshift+0x1c>
 800dc7e:	2300      	movs	r3, #0
 800dc80:	f100 0114 	add.w	r1, r0, #20
 800dc84:	f100 0210 	add.w	r2, r0, #16
 800dc88:	4618      	mov	r0, r3
 800dc8a:	4553      	cmp	r3, sl
 800dc8c:	db37      	blt.n	800dcfe <__lshift+0xbe>
 800dc8e:	6920      	ldr	r0, [r4, #16]
 800dc90:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800dc94:	f104 0314 	add.w	r3, r4, #20
 800dc98:	f019 091f 	ands.w	r9, r9, #31
 800dc9c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800dca0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800dca4:	d02f      	beq.n	800dd06 <__lshift+0xc6>
 800dca6:	f1c9 0e20 	rsb	lr, r9, #32
 800dcaa:	468a      	mov	sl, r1
 800dcac:	f04f 0c00 	mov.w	ip, #0
 800dcb0:	681a      	ldr	r2, [r3, #0]
 800dcb2:	fa02 f209 	lsl.w	r2, r2, r9
 800dcb6:	ea42 020c 	orr.w	r2, r2, ip
 800dcba:	f84a 2b04 	str.w	r2, [sl], #4
 800dcbe:	f853 2b04 	ldr.w	r2, [r3], #4
 800dcc2:	4298      	cmp	r0, r3
 800dcc4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800dcc8:	d8f2      	bhi.n	800dcb0 <__lshift+0x70>
 800dcca:	1b03      	subs	r3, r0, r4
 800dccc:	3b15      	subs	r3, #21
 800dcce:	f023 0303 	bic.w	r3, r3, #3
 800dcd2:	3304      	adds	r3, #4
 800dcd4:	f104 0215 	add.w	r2, r4, #21
 800dcd8:	4290      	cmp	r0, r2
 800dcda:	bf38      	it	cc
 800dcdc:	2304      	movcc	r3, #4
 800dcde:	f841 c003 	str.w	ip, [r1, r3]
 800dce2:	f1bc 0f00 	cmp.w	ip, #0
 800dce6:	d001      	beq.n	800dcec <__lshift+0xac>
 800dce8:	f108 0602 	add.w	r6, r8, #2
 800dcec:	3e01      	subs	r6, #1
 800dcee:	4638      	mov	r0, r7
 800dcf0:	612e      	str	r6, [r5, #16]
 800dcf2:	4621      	mov	r1, r4
 800dcf4:	f7ff fdd2 	bl	800d89c <_Bfree>
 800dcf8:	4628      	mov	r0, r5
 800dcfa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dcfe:	f842 0f04 	str.w	r0, [r2, #4]!
 800dd02:	3301      	adds	r3, #1
 800dd04:	e7c1      	b.n	800dc8a <__lshift+0x4a>
 800dd06:	3904      	subs	r1, #4
 800dd08:	f853 2b04 	ldr.w	r2, [r3], #4
 800dd0c:	f841 2f04 	str.w	r2, [r1, #4]!
 800dd10:	4298      	cmp	r0, r3
 800dd12:	d8f9      	bhi.n	800dd08 <__lshift+0xc8>
 800dd14:	e7ea      	b.n	800dcec <__lshift+0xac>
 800dd16:	bf00      	nop
 800dd18:	0800f77b 	.word	0x0800f77b
 800dd1c:	0800f78c 	.word	0x0800f78c

0800dd20 <__mcmp>:
 800dd20:	b530      	push	{r4, r5, lr}
 800dd22:	6902      	ldr	r2, [r0, #16]
 800dd24:	690c      	ldr	r4, [r1, #16]
 800dd26:	1b12      	subs	r2, r2, r4
 800dd28:	d10e      	bne.n	800dd48 <__mcmp+0x28>
 800dd2a:	f100 0314 	add.w	r3, r0, #20
 800dd2e:	3114      	adds	r1, #20
 800dd30:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800dd34:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800dd38:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800dd3c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800dd40:	42a5      	cmp	r5, r4
 800dd42:	d003      	beq.n	800dd4c <__mcmp+0x2c>
 800dd44:	d305      	bcc.n	800dd52 <__mcmp+0x32>
 800dd46:	2201      	movs	r2, #1
 800dd48:	4610      	mov	r0, r2
 800dd4a:	bd30      	pop	{r4, r5, pc}
 800dd4c:	4283      	cmp	r3, r0
 800dd4e:	d3f3      	bcc.n	800dd38 <__mcmp+0x18>
 800dd50:	e7fa      	b.n	800dd48 <__mcmp+0x28>
 800dd52:	f04f 32ff 	mov.w	r2, #4294967295
 800dd56:	e7f7      	b.n	800dd48 <__mcmp+0x28>

0800dd58 <__mdiff>:
 800dd58:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd5c:	460c      	mov	r4, r1
 800dd5e:	4606      	mov	r6, r0
 800dd60:	4611      	mov	r1, r2
 800dd62:	4620      	mov	r0, r4
 800dd64:	4690      	mov	r8, r2
 800dd66:	f7ff ffdb 	bl	800dd20 <__mcmp>
 800dd6a:	1e05      	subs	r5, r0, #0
 800dd6c:	d110      	bne.n	800dd90 <__mdiff+0x38>
 800dd6e:	4629      	mov	r1, r5
 800dd70:	4630      	mov	r0, r6
 800dd72:	f7ff fd53 	bl	800d81c <_Balloc>
 800dd76:	b930      	cbnz	r0, 800dd86 <__mdiff+0x2e>
 800dd78:	4b3a      	ldr	r3, [pc, #232]	; (800de64 <__mdiff+0x10c>)
 800dd7a:	4602      	mov	r2, r0
 800dd7c:	f240 2132 	movw	r1, #562	; 0x232
 800dd80:	4839      	ldr	r0, [pc, #228]	; (800de68 <__mdiff+0x110>)
 800dd82:	f000 fa9f 	bl	800e2c4 <__assert_func>
 800dd86:	2301      	movs	r3, #1
 800dd88:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800dd8c:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd90:	bfa4      	itt	ge
 800dd92:	4643      	movge	r3, r8
 800dd94:	46a0      	movge	r8, r4
 800dd96:	4630      	mov	r0, r6
 800dd98:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800dd9c:	bfa6      	itte	ge
 800dd9e:	461c      	movge	r4, r3
 800dda0:	2500      	movge	r5, #0
 800dda2:	2501      	movlt	r5, #1
 800dda4:	f7ff fd3a 	bl	800d81c <_Balloc>
 800dda8:	b920      	cbnz	r0, 800ddb4 <__mdiff+0x5c>
 800ddaa:	4b2e      	ldr	r3, [pc, #184]	; (800de64 <__mdiff+0x10c>)
 800ddac:	4602      	mov	r2, r0
 800ddae:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ddb2:	e7e5      	b.n	800dd80 <__mdiff+0x28>
 800ddb4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ddb8:	6926      	ldr	r6, [r4, #16]
 800ddba:	60c5      	str	r5, [r0, #12]
 800ddbc:	f104 0914 	add.w	r9, r4, #20
 800ddc0:	f108 0514 	add.w	r5, r8, #20
 800ddc4:	f100 0e14 	add.w	lr, r0, #20
 800ddc8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ddcc:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ddd0:	f108 0210 	add.w	r2, r8, #16
 800ddd4:	46f2      	mov	sl, lr
 800ddd6:	2100      	movs	r1, #0
 800ddd8:	f859 3b04 	ldr.w	r3, [r9], #4
 800dddc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800dde0:	fa1f f883 	uxth.w	r8, r3
 800dde4:	fa11 f18b 	uxtah	r1, r1, fp
 800dde8:	0c1b      	lsrs	r3, r3, #16
 800ddea:	eba1 0808 	sub.w	r8, r1, r8
 800ddee:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800ddf2:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800ddf6:	fa1f f888 	uxth.w	r8, r8
 800ddfa:	1419      	asrs	r1, r3, #16
 800ddfc:	454e      	cmp	r6, r9
 800ddfe:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800de02:	f84a 3b04 	str.w	r3, [sl], #4
 800de06:	d8e7      	bhi.n	800ddd8 <__mdiff+0x80>
 800de08:	1b33      	subs	r3, r6, r4
 800de0a:	3b15      	subs	r3, #21
 800de0c:	f023 0303 	bic.w	r3, r3, #3
 800de10:	3304      	adds	r3, #4
 800de12:	3415      	adds	r4, #21
 800de14:	42a6      	cmp	r6, r4
 800de16:	bf38      	it	cc
 800de18:	2304      	movcc	r3, #4
 800de1a:	441d      	add	r5, r3
 800de1c:	4473      	add	r3, lr
 800de1e:	469e      	mov	lr, r3
 800de20:	462e      	mov	r6, r5
 800de22:	4566      	cmp	r6, ip
 800de24:	d30e      	bcc.n	800de44 <__mdiff+0xec>
 800de26:	f10c 0203 	add.w	r2, ip, #3
 800de2a:	1b52      	subs	r2, r2, r5
 800de2c:	f022 0203 	bic.w	r2, r2, #3
 800de30:	3d03      	subs	r5, #3
 800de32:	45ac      	cmp	ip, r5
 800de34:	bf38      	it	cc
 800de36:	2200      	movcc	r2, #0
 800de38:	441a      	add	r2, r3
 800de3a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800de3e:	b17b      	cbz	r3, 800de60 <__mdiff+0x108>
 800de40:	6107      	str	r7, [r0, #16]
 800de42:	e7a3      	b.n	800dd8c <__mdiff+0x34>
 800de44:	f856 8b04 	ldr.w	r8, [r6], #4
 800de48:	fa11 f288 	uxtah	r2, r1, r8
 800de4c:	1414      	asrs	r4, r2, #16
 800de4e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800de52:	b292      	uxth	r2, r2
 800de54:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800de58:	f84e 2b04 	str.w	r2, [lr], #4
 800de5c:	1421      	asrs	r1, r4, #16
 800de5e:	e7e0      	b.n	800de22 <__mdiff+0xca>
 800de60:	3f01      	subs	r7, #1
 800de62:	e7ea      	b.n	800de3a <__mdiff+0xe2>
 800de64:	0800f77b 	.word	0x0800f77b
 800de68:	0800f78c 	.word	0x0800f78c

0800de6c <__d2b>:
 800de6c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800de70:	4689      	mov	r9, r1
 800de72:	2101      	movs	r1, #1
 800de74:	ec57 6b10 	vmov	r6, r7, d0
 800de78:	4690      	mov	r8, r2
 800de7a:	f7ff fccf 	bl	800d81c <_Balloc>
 800de7e:	4604      	mov	r4, r0
 800de80:	b930      	cbnz	r0, 800de90 <__d2b+0x24>
 800de82:	4602      	mov	r2, r0
 800de84:	4b25      	ldr	r3, [pc, #148]	; (800df1c <__d2b+0xb0>)
 800de86:	4826      	ldr	r0, [pc, #152]	; (800df20 <__d2b+0xb4>)
 800de88:	f240 310a 	movw	r1, #778	; 0x30a
 800de8c:	f000 fa1a 	bl	800e2c4 <__assert_func>
 800de90:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800de94:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800de98:	bb35      	cbnz	r5, 800dee8 <__d2b+0x7c>
 800de9a:	2e00      	cmp	r6, #0
 800de9c:	9301      	str	r3, [sp, #4]
 800de9e:	d028      	beq.n	800def2 <__d2b+0x86>
 800dea0:	4668      	mov	r0, sp
 800dea2:	9600      	str	r6, [sp, #0]
 800dea4:	f7ff fd82 	bl	800d9ac <__lo0bits>
 800dea8:	9900      	ldr	r1, [sp, #0]
 800deaa:	b300      	cbz	r0, 800deee <__d2b+0x82>
 800deac:	9a01      	ldr	r2, [sp, #4]
 800deae:	f1c0 0320 	rsb	r3, r0, #32
 800deb2:	fa02 f303 	lsl.w	r3, r2, r3
 800deb6:	430b      	orrs	r3, r1
 800deb8:	40c2      	lsrs	r2, r0
 800deba:	6163      	str	r3, [r4, #20]
 800debc:	9201      	str	r2, [sp, #4]
 800debe:	9b01      	ldr	r3, [sp, #4]
 800dec0:	61a3      	str	r3, [r4, #24]
 800dec2:	2b00      	cmp	r3, #0
 800dec4:	bf14      	ite	ne
 800dec6:	2202      	movne	r2, #2
 800dec8:	2201      	moveq	r2, #1
 800deca:	6122      	str	r2, [r4, #16]
 800decc:	b1d5      	cbz	r5, 800df04 <__d2b+0x98>
 800dece:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ded2:	4405      	add	r5, r0
 800ded4:	f8c9 5000 	str.w	r5, [r9]
 800ded8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800dedc:	f8c8 0000 	str.w	r0, [r8]
 800dee0:	4620      	mov	r0, r4
 800dee2:	b003      	add	sp, #12
 800dee4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800dee8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800deec:	e7d5      	b.n	800de9a <__d2b+0x2e>
 800deee:	6161      	str	r1, [r4, #20]
 800def0:	e7e5      	b.n	800debe <__d2b+0x52>
 800def2:	a801      	add	r0, sp, #4
 800def4:	f7ff fd5a 	bl	800d9ac <__lo0bits>
 800def8:	9b01      	ldr	r3, [sp, #4]
 800defa:	6163      	str	r3, [r4, #20]
 800defc:	2201      	movs	r2, #1
 800defe:	6122      	str	r2, [r4, #16]
 800df00:	3020      	adds	r0, #32
 800df02:	e7e3      	b.n	800decc <__d2b+0x60>
 800df04:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800df08:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800df0c:	f8c9 0000 	str.w	r0, [r9]
 800df10:	6918      	ldr	r0, [r3, #16]
 800df12:	f7ff fd2b 	bl	800d96c <__hi0bits>
 800df16:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800df1a:	e7df      	b.n	800dedc <__d2b+0x70>
 800df1c:	0800f77b 	.word	0x0800f77b
 800df20:	0800f78c 	.word	0x0800f78c

0800df24 <_calloc_r>:
 800df24:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df26:	fba1 2402 	umull	r2, r4, r1, r2
 800df2a:	b94c      	cbnz	r4, 800df40 <_calloc_r+0x1c>
 800df2c:	4611      	mov	r1, r2
 800df2e:	9201      	str	r2, [sp, #4]
 800df30:	f7fd ff30 	bl	800bd94 <_malloc_r>
 800df34:	9a01      	ldr	r2, [sp, #4]
 800df36:	4605      	mov	r5, r0
 800df38:	b930      	cbnz	r0, 800df48 <_calloc_r+0x24>
 800df3a:	4628      	mov	r0, r5
 800df3c:	b003      	add	sp, #12
 800df3e:	bd30      	pop	{r4, r5, pc}
 800df40:	220c      	movs	r2, #12
 800df42:	6002      	str	r2, [r0, #0]
 800df44:	2500      	movs	r5, #0
 800df46:	e7f8      	b.n	800df3a <_calloc_r+0x16>
 800df48:	4621      	mov	r1, r4
 800df4a:	f7fd fefa 	bl	800bd42 <memset>
 800df4e:	e7f4      	b.n	800df3a <_calloc_r+0x16>

0800df50 <_free_r>:
 800df50:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800df52:	2900      	cmp	r1, #0
 800df54:	d044      	beq.n	800dfe0 <_free_r+0x90>
 800df56:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800df5a:	9001      	str	r0, [sp, #4]
 800df5c:	2b00      	cmp	r3, #0
 800df5e:	f1a1 0404 	sub.w	r4, r1, #4
 800df62:	bfb8      	it	lt
 800df64:	18e4      	addlt	r4, r4, r3
 800df66:	f7ff fc4d 	bl	800d804 <__malloc_lock>
 800df6a:	4a1e      	ldr	r2, [pc, #120]	; (800dfe4 <_free_r+0x94>)
 800df6c:	9801      	ldr	r0, [sp, #4]
 800df6e:	6813      	ldr	r3, [r2, #0]
 800df70:	b933      	cbnz	r3, 800df80 <_free_r+0x30>
 800df72:	6063      	str	r3, [r4, #4]
 800df74:	6014      	str	r4, [r2, #0]
 800df76:	b003      	add	sp, #12
 800df78:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800df7c:	f7ff bc48 	b.w	800d810 <__malloc_unlock>
 800df80:	42a3      	cmp	r3, r4
 800df82:	d908      	bls.n	800df96 <_free_r+0x46>
 800df84:	6825      	ldr	r5, [r4, #0]
 800df86:	1961      	adds	r1, r4, r5
 800df88:	428b      	cmp	r3, r1
 800df8a:	bf01      	itttt	eq
 800df8c:	6819      	ldreq	r1, [r3, #0]
 800df8e:	685b      	ldreq	r3, [r3, #4]
 800df90:	1949      	addeq	r1, r1, r5
 800df92:	6021      	streq	r1, [r4, #0]
 800df94:	e7ed      	b.n	800df72 <_free_r+0x22>
 800df96:	461a      	mov	r2, r3
 800df98:	685b      	ldr	r3, [r3, #4]
 800df9a:	b10b      	cbz	r3, 800dfa0 <_free_r+0x50>
 800df9c:	42a3      	cmp	r3, r4
 800df9e:	d9fa      	bls.n	800df96 <_free_r+0x46>
 800dfa0:	6811      	ldr	r1, [r2, #0]
 800dfa2:	1855      	adds	r5, r2, r1
 800dfa4:	42a5      	cmp	r5, r4
 800dfa6:	d10b      	bne.n	800dfc0 <_free_r+0x70>
 800dfa8:	6824      	ldr	r4, [r4, #0]
 800dfaa:	4421      	add	r1, r4
 800dfac:	1854      	adds	r4, r2, r1
 800dfae:	42a3      	cmp	r3, r4
 800dfb0:	6011      	str	r1, [r2, #0]
 800dfb2:	d1e0      	bne.n	800df76 <_free_r+0x26>
 800dfb4:	681c      	ldr	r4, [r3, #0]
 800dfb6:	685b      	ldr	r3, [r3, #4]
 800dfb8:	6053      	str	r3, [r2, #4]
 800dfba:	4421      	add	r1, r4
 800dfbc:	6011      	str	r1, [r2, #0]
 800dfbe:	e7da      	b.n	800df76 <_free_r+0x26>
 800dfc0:	d902      	bls.n	800dfc8 <_free_r+0x78>
 800dfc2:	230c      	movs	r3, #12
 800dfc4:	6003      	str	r3, [r0, #0]
 800dfc6:	e7d6      	b.n	800df76 <_free_r+0x26>
 800dfc8:	6825      	ldr	r5, [r4, #0]
 800dfca:	1961      	adds	r1, r4, r5
 800dfcc:	428b      	cmp	r3, r1
 800dfce:	bf04      	itt	eq
 800dfd0:	6819      	ldreq	r1, [r3, #0]
 800dfd2:	685b      	ldreq	r3, [r3, #4]
 800dfd4:	6063      	str	r3, [r4, #4]
 800dfd6:	bf04      	itt	eq
 800dfd8:	1949      	addeq	r1, r1, r5
 800dfda:	6021      	streq	r1, [r4, #0]
 800dfdc:	6054      	str	r4, [r2, #4]
 800dfde:	e7ca      	b.n	800df76 <_free_r+0x26>
 800dfe0:	b003      	add	sp, #12
 800dfe2:	bd30      	pop	{r4, r5, pc}
 800dfe4:	20005418 	.word	0x20005418

0800dfe8 <__ssputs_r>:
 800dfe8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dfec:	688e      	ldr	r6, [r1, #8]
 800dfee:	429e      	cmp	r6, r3
 800dff0:	4682      	mov	sl, r0
 800dff2:	460c      	mov	r4, r1
 800dff4:	4690      	mov	r8, r2
 800dff6:	461f      	mov	r7, r3
 800dff8:	d838      	bhi.n	800e06c <__ssputs_r+0x84>
 800dffa:	898a      	ldrh	r2, [r1, #12]
 800dffc:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e000:	d032      	beq.n	800e068 <__ssputs_r+0x80>
 800e002:	6825      	ldr	r5, [r4, #0]
 800e004:	6909      	ldr	r1, [r1, #16]
 800e006:	eba5 0901 	sub.w	r9, r5, r1
 800e00a:	6965      	ldr	r5, [r4, #20]
 800e00c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e010:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e014:	3301      	adds	r3, #1
 800e016:	444b      	add	r3, r9
 800e018:	106d      	asrs	r5, r5, #1
 800e01a:	429d      	cmp	r5, r3
 800e01c:	bf38      	it	cc
 800e01e:	461d      	movcc	r5, r3
 800e020:	0553      	lsls	r3, r2, #21
 800e022:	d531      	bpl.n	800e088 <__ssputs_r+0xa0>
 800e024:	4629      	mov	r1, r5
 800e026:	f7fd feb5 	bl	800bd94 <_malloc_r>
 800e02a:	4606      	mov	r6, r0
 800e02c:	b950      	cbnz	r0, 800e044 <__ssputs_r+0x5c>
 800e02e:	230c      	movs	r3, #12
 800e030:	f8ca 3000 	str.w	r3, [sl]
 800e034:	89a3      	ldrh	r3, [r4, #12]
 800e036:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e03a:	81a3      	strh	r3, [r4, #12]
 800e03c:	f04f 30ff 	mov.w	r0, #4294967295
 800e040:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e044:	6921      	ldr	r1, [r4, #16]
 800e046:	464a      	mov	r2, r9
 800e048:	f7fd fe6d 	bl	800bd26 <memcpy>
 800e04c:	89a3      	ldrh	r3, [r4, #12]
 800e04e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e052:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e056:	81a3      	strh	r3, [r4, #12]
 800e058:	6126      	str	r6, [r4, #16]
 800e05a:	6165      	str	r5, [r4, #20]
 800e05c:	444e      	add	r6, r9
 800e05e:	eba5 0509 	sub.w	r5, r5, r9
 800e062:	6026      	str	r6, [r4, #0]
 800e064:	60a5      	str	r5, [r4, #8]
 800e066:	463e      	mov	r6, r7
 800e068:	42be      	cmp	r6, r7
 800e06a:	d900      	bls.n	800e06e <__ssputs_r+0x86>
 800e06c:	463e      	mov	r6, r7
 800e06e:	6820      	ldr	r0, [r4, #0]
 800e070:	4632      	mov	r2, r6
 800e072:	4641      	mov	r1, r8
 800e074:	f000 f968 	bl	800e348 <memmove>
 800e078:	68a3      	ldr	r3, [r4, #8]
 800e07a:	1b9b      	subs	r3, r3, r6
 800e07c:	60a3      	str	r3, [r4, #8]
 800e07e:	6823      	ldr	r3, [r4, #0]
 800e080:	4433      	add	r3, r6
 800e082:	6023      	str	r3, [r4, #0]
 800e084:	2000      	movs	r0, #0
 800e086:	e7db      	b.n	800e040 <__ssputs_r+0x58>
 800e088:	462a      	mov	r2, r5
 800e08a:	f000 f977 	bl	800e37c <_realloc_r>
 800e08e:	4606      	mov	r6, r0
 800e090:	2800      	cmp	r0, #0
 800e092:	d1e1      	bne.n	800e058 <__ssputs_r+0x70>
 800e094:	6921      	ldr	r1, [r4, #16]
 800e096:	4650      	mov	r0, sl
 800e098:	f7ff ff5a 	bl	800df50 <_free_r>
 800e09c:	e7c7      	b.n	800e02e <__ssputs_r+0x46>
	...

0800e0a0 <_svfiprintf_r>:
 800e0a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e0a4:	4698      	mov	r8, r3
 800e0a6:	898b      	ldrh	r3, [r1, #12]
 800e0a8:	061b      	lsls	r3, r3, #24
 800e0aa:	b09d      	sub	sp, #116	; 0x74
 800e0ac:	4607      	mov	r7, r0
 800e0ae:	460d      	mov	r5, r1
 800e0b0:	4614      	mov	r4, r2
 800e0b2:	d50e      	bpl.n	800e0d2 <_svfiprintf_r+0x32>
 800e0b4:	690b      	ldr	r3, [r1, #16]
 800e0b6:	b963      	cbnz	r3, 800e0d2 <_svfiprintf_r+0x32>
 800e0b8:	2140      	movs	r1, #64	; 0x40
 800e0ba:	f7fd fe6b 	bl	800bd94 <_malloc_r>
 800e0be:	6028      	str	r0, [r5, #0]
 800e0c0:	6128      	str	r0, [r5, #16]
 800e0c2:	b920      	cbnz	r0, 800e0ce <_svfiprintf_r+0x2e>
 800e0c4:	230c      	movs	r3, #12
 800e0c6:	603b      	str	r3, [r7, #0]
 800e0c8:	f04f 30ff 	mov.w	r0, #4294967295
 800e0cc:	e0d1      	b.n	800e272 <_svfiprintf_r+0x1d2>
 800e0ce:	2340      	movs	r3, #64	; 0x40
 800e0d0:	616b      	str	r3, [r5, #20]
 800e0d2:	2300      	movs	r3, #0
 800e0d4:	9309      	str	r3, [sp, #36]	; 0x24
 800e0d6:	2320      	movs	r3, #32
 800e0d8:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e0dc:	f8cd 800c 	str.w	r8, [sp, #12]
 800e0e0:	2330      	movs	r3, #48	; 0x30
 800e0e2:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800e28c <_svfiprintf_r+0x1ec>
 800e0e6:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e0ea:	f04f 0901 	mov.w	r9, #1
 800e0ee:	4623      	mov	r3, r4
 800e0f0:	469a      	mov	sl, r3
 800e0f2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e0f6:	b10a      	cbz	r2, 800e0fc <_svfiprintf_r+0x5c>
 800e0f8:	2a25      	cmp	r2, #37	; 0x25
 800e0fa:	d1f9      	bne.n	800e0f0 <_svfiprintf_r+0x50>
 800e0fc:	ebba 0b04 	subs.w	fp, sl, r4
 800e100:	d00b      	beq.n	800e11a <_svfiprintf_r+0x7a>
 800e102:	465b      	mov	r3, fp
 800e104:	4622      	mov	r2, r4
 800e106:	4629      	mov	r1, r5
 800e108:	4638      	mov	r0, r7
 800e10a:	f7ff ff6d 	bl	800dfe8 <__ssputs_r>
 800e10e:	3001      	adds	r0, #1
 800e110:	f000 80aa 	beq.w	800e268 <_svfiprintf_r+0x1c8>
 800e114:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e116:	445a      	add	r2, fp
 800e118:	9209      	str	r2, [sp, #36]	; 0x24
 800e11a:	f89a 3000 	ldrb.w	r3, [sl]
 800e11e:	2b00      	cmp	r3, #0
 800e120:	f000 80a2 	beq.w	800e268 <_svfiprintf_r+0x1c8>
 800e124:	2300      	movs	r3, #0
 800e126:	f04f 32ff 	mov.w	r2, #4294967295
 800e12a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e12e:	f10a 0a01 	add.w	sl, sl, #1
 800e132:	9304      	str	r3, [sp, #16]
 800e134:	9307      	str	r3, [sp, #28]
 800e136:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e13a:	931a      	str	r3, [sp, #104]	; 0x68
 800e13c:	4654      	mov	r4, sl
 800e13e:	2205      	movs	r2, #5
 800e140:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e144:	4851      	ldr	r0, [pc, #324]	; (800e28c <_svfiprintf_r+0x1ec>)
 800e146:	f7f2 f84b 	bl	80001e0 <memchr>
 800e14a:	9a04      	ldr	r2, [sp, #16]
 800e14c:	b9d8      	cbnz	r0, 800e186 <_svfiprintf_r+0xe6>
 800e14e:	06d0      	lsls	r0, r2, #27
 800e150:	bf44      	itt	mi
 800e152:	2320      	movmi	r3, #32
 800e154:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e158:	0711      	lsls	r1, r2, #28
 800e15a:	bf44      	itt	mi
 800e15c:	232b      	movmi	r3, #43	; 0x2b
 800e15e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e162:	f89a 3000 	ldrb.w	r3, [sl]
 800e166:	2b2a      	cmp	r3, #42	; 0x2a
 800e168:	d015      	beq.n	800e196 <_svfiprintf_r+0xf6>
 800e16a:	9a07      	ldr	r2, [sp, #28]
 800e16c:	4654      	mov	r4, sl
 800e16e:	2000      	movs	r0, #0
 800e170:	f04f 0c0a 	mov.w	ip, #10
 800e174:	4621      	mov	r1, r4
 800e176:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e17a:	3b30      	subs	r3, #48	; 0x30
 800e17c:	2b09      	cmp	r3, #9
 800e17e:	d94e      	bls.n	800e21e <_svfiprintf_r+0x17e>
 800e180:	b1b0      	cbz	r0, 800e1b0 <_svfiprintf_r+0x110>
 800e182:	9207      	str	r2, [sp, #28]
 800e184:	e014      	b.n	800e1b0 <_svfiprintf_r+0x110>
 800e186:	eba0 0308 	sub.w	r3, r0, r8
 800e18a:	fa09 f303 	lsl.w	r3, r9, r3
 800e18e:	4313      	orrs	r3, r2
 800e190:	9304      	str	r3, [sp, #16]
 800e192:	46a2      	mov	sl, r4
 800e194:	e7d2      	b.n	800e13c <_svfiprintf_r+0x9c>
 800e196:	9b03      	ldr	r3, [sp, #12]
 800e198:	1d19      	adds	r1, r3, #4
 800e19a:	681b      	ldr	r3, [r3, #0]
 800e19c:	9103      	str	r1, [sp, #12]
 800e19e:	2b00      	cmp	r3, #0
 800e1a0:	bfbb      	ittet	lt
 800e1a2:	425b      	neglt	r3, r3
 800e1a4:	f042 0202 	orrlt.w	r2, r2, #2
 800e1a8:	9307      	strge	r3, [sp, #28]
 800e1aa:	9307      	strlt	r3, [sp, #28]
 800e1ac:	bfb8      	it	lt
 800e1ae:	9204      	strlt	r2, [sp, #16]
 800e1b0:	7823      	ldrb	r3, [r4, #0]
 800e1b2:	2b2e      	cmp	r3, #46	; 0x2e
 800e1b4:	d10c      	bne.n	800e1d0 <_svfiprintf_r+0x130>
 800e1b6:	7863      	ldrb	r3, [r4, #1]
 800e1b8:	2b2a      	cmp	r3, #42	; 0x2a
 800e1ba:	d135      	bne.n	800e228 <_svfiprintf_r+0x188>
 800e1bc:	9b03      	ldr	r3, [sp, #12]
 800e1be:	1d1a      	adds	r2, r3, #4
 800e1c0:	681b      	ldr	r3, [r3, #0]
 800e1c2:	9203      	str	r2, [sp, #12]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	bfb8      	it	lt
 800e1c8:	f04f 33ff 	movlt.w	r3, #4294967295
 800e1cc:	3402      	adds	r4, #2
 800e1ce:	9305      	str	r3, [sp, #20]
 800e1d0:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800e29c <_svfiprintf_r+0x1fc>
 800e1d4:	7821      	ldrb	r1, [r4, #0]
 800e1d6:	2203      	movs	r2, #3
 800e1d8:	4650      	mov	r0, sl
 800e1da:	f7f2 f801 	bl	80001e0 <memchr>
 800e1de:	b140      	cbz	r0, 800e1f2 <_svfiprintf_r+0x152>
 800e1e0:	2340      	movs	r3, #64	; 0x40
 800e1e2:	eba0 000a 	sub.w	r0, r0, sl
 800e1e6:	fa03 f000 	lsl.w	r0, r3, r0
 800e1ea:	9b04      	ldr	r3, [sp, #16]
 800e1ec:	4303      	orrs	r3, r0
 800e1ee:	3401      	adds	r4, #1
 800e1f0:	9304      	str	r3, [sp, #16]
 800e1f2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e1f6:	4826      	ldr	r0, [pc, #152]	; (800e290 <_svfiprintf_r+0x1f0>)
 800e1f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e1fc:	2206      	movs	r2, #6
 800e1fe:	f7f1 ffef 	bl	80001e0 <memchr>
 800e202:	2800      	cmp	r0, #0
 800e204:	d038      	beq.n	800e278 <_svfiprintf_r+0x1d8>
 800e206:	4b23      	ldr	r3, [pc, #140]	; (800e294 <_svfiprintf_r+0x1f4>)
 800e208:	bb1b      	cbnz	r3, 800e252 <_svfiprintf_r+0x1b2>
 800e20a:	9b03      	ldr	r3, [sp, #12]
 800e20c:	3307      	adds	r3, #7
 800e20e:	f023 0307 	bic.w	r3, r3, #7
 800e212:	3308      	adds	r3, #8
 800e214:	9303      	str	r3, [sp, #12]
 800e216:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e218:	4433      	add	r3, r6
 800e21a:	9309      	str	r3, [sp, #36]	; 0x24
 800e21c:	e767      	b.n	800e0ee <_svfiprintf_r+0x4e>
 800e21e:	fb0c 3202 	mla	r2, ip, r2, r3
 800e222:	460c      	mov	r4, r1
 800e224:	2001      	movs	r0, #1
 800e226:	e7a5      	b.n	800e174 <_svfiprintf_r+0xd4>
 800e228:	2300      	movs	r3, #0
 800e22a:	3401      	adds	r4, #1
 800e22c:	9305      	str	r3, [sp, #20]
 800e22e:	4619      	mov	r1, r3
 800e230:	f04f 0c0a 	mov.w	ip, #10
 800e234:	4620      	mov	r0, r4
 800e236:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e23a:	3a30      	subs	r2, #48	; 0x30
 800e23c:	2a09      	cmp	r2, #9
 800e23e:	d903      	bls.n	800e248 <_svfiprintf_r+0x1a8>
 800e240:	2b00      	cmp	r3, #0
 800e242:	d0c5      	beq.n	800e1d0 <_svfiprintf_r+0x130>
 800e244:	9105      	str	r1, [sp, #20]
 800e246:	e7c3      	b.n	800e1d0 <_svfiprintf_r+0x130>
 800e248:	fb0c 2101 	mla	r1, ip, r1, r2
 800e24c:	4604      	mov	r4, r0
 800e24e:	2301      	movs	r3, #1
 800e250:	e7f0      	b.n	800e234 <_svfiprintf_r+0x194>
 800e252:	ab03      	add	r3, sp, #12
 800e254:	9300      	str	r3, [sp, #0]
 800e256:	462a      	mov	r2, r5
 800e258:	4b0f      	ldr	r3, [pc, #60]	; (800e298 <_svfiprintf_r+0x1f8>)
 800e25a:	a904      	add	r1, sp, #16
 800e25c:	4638      	mov	r0, r7
 800e25e:	f7fd fead 	bl	800bfbc <_printf_float>
 800e262:	1c42      	adds	r2, r0, #1
 800e264:	4606      	mov	r6, r0
 800e266:	d1d6      	bne.n	800e216 <_svfiprintf_r+0x176>
 800e268:	89ab      	ldrh	r3, [r5, #12]
 800e26a:	065b      	lsls	r3, r3, #25
 800e26c:	f53f af2c 	bmi.w	800e0c8 <_svfiprintf_r+0x28>
 800e270:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e272:	b01d      	add	sp, #116	; 0x74
 800e274:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e278:	ab03      	add	r3, sp, #12
 800e27a:	9300      	str	r3, [sp, #0]
 800e27c:	462a      	mov	r2, r5
 800e27e:	4b06      	ldr	r3, [pc, #24]	; (800e298 <_svfiprintf_r+0x1f8>)
 800e280:	a904      	add	r1, sp, #16
 800e282:	4638      	mov	r0, r7
 800e284:	f7fe f93e 	bl	800c504 <_printf_i>
 800e288:	e7eb      	b.n	800e262 <_svfiprintf_r+0x1c2>
 800e28a:	bf00      	nop
 800e28c:	0800f8e4 	.word	0x0800f8e4
 800e290:	0800f8ee 	.word	0x0800f8ee
 800e294:	0800bfbd 	.word	0x0800bfbd
 800e298:	0800dfe9 	.word	0x0800dfe9
 800e29c:	0800f8ea 	.word	0x0800f8ea

0800e2a0 <_read_r>:
 800e2a0:	b538      	push	{r3, r4, r5, lr}
 800e2a2:	4d07      	ldr	r5, [pc, #28]	; (800e2c0 <_read_r+0x20>)
 800e2a4:	4604      	mov	r4, r0
 800e2a6:	4608      	mov	r0, r1
 800e2a8:	4611      	mov	r1, r2
 800e2aa:	2200      	movs	r2, #0
 800e2ac:	602a      	str	r2, [r5, #0]
 800e2ae:	461a      	mov	r2, r3
 800e2b0:	f7f5 fd94 	bl	8003ddc <_read>
 800e2b4:	1c43      	adds	r3, r0, #1
 800e2b6:	d102      	bne.n	800e2be <_read_r+0x1e>
 800e2b8:	682b      	ldr	r3, [r5, #0]
 800e2ba:	b103      	cbz	r3, 800e2be <_read_r+0x1e>
 800e2bc:	6023      	str	r3, [r4, #0]
 800e2be:	bd38      	pop	{r3, r4, r5, pc}
 800e2c0:	20005420 	.word	0x20005420

0800e2c4 <__assert_func>:
 800e2c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800e2c6:	4614      	mov	r4, r2
 800e2c8:	461a      	mov	r2, r3
 800e2ca:	4b09      	ldr	r3, [pc, #36]	; (800e2f0 <__assert_func+0x2c>)
 800e2cc:	681b      	ldr	r3, [r3, #0]
 800e2ce:	4605      	mov	r5, r0
 800e2d0:	68d8      	ldr	r0, [r3, #12]
 800e2d2:	b14c      	cbz	r4, 800e2e8 <__assert_func+0x24>
 800e2d4:	4b07      	ldr	r3, [pc, #28]	; (800e2f4 <__assert_func+0x30>)
 800e2d6:	9100      	str	r1, [sp, #0]
 800e2d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800e2dc:	4906      	ldr	r1, [pc, #24]	; (800e2f8 <__assert_func+0x34>)
 800e2de:	462b      	mov	r3, r5
 800e2e0:	f000 f80e 	bl	800e300 <fiprintf>
 800e2e4:	f000 faa0 	bl	800e828 <abort>
 800e2e8:	4b04      	ldr	r3, [pc, #16]	; (800e2fc <__assert_func+0x38>)
 800e2ea:	461c      	mov	r4, r3
 800e2ec:	e7f3      	b.n	800e2d6 <__assert_func+0x12>
 800e2ee:	bf00      	nop
 800e2f0:	20000034 	.word	0x20000034
 800e2f4:	0800f8f5 	.word	0x0800f8f5
 800e2f8:	0800f902 	.word	0x0800f902
 800e2fc:	0800f930 	.word	0x0800f930

0800e300 <fiprintf>:
 800e300:	b40e      	push	{r1, r2, r3}
 800e302:	b503      	push	{r0, r1, lr}
 800e304:	4601      	mov	r1, r0
 800e306:	ab03      	add	r3, sp, #12
 800e308:	4805      	ldr	r0, [pc, #20]	; (800e320 <fiprintf+0x20>)
 800e30a:	f853 2b04 	ldr.w	r2, [r3], #4
 800e30e:	6800      	ldr	r0, [r0, #0]
 800e310:	9301      	str	r3, [sp, #4]
 800e312:	f000 f88b 	bl	800e42c <_vfiprintf_r>
 800e316:	b002      	add	sp, #8
 800e318:	f85d eb04 	ldr.w	lr, [sp], #4
 800e31c:	b003      	add	sp, #12
 800e31e:	4770      	bx	lr
 800e320:	20000034 	.word	0x20000034

0800e324 <__ascii_mbtowc>:
 800e324:	b082      	sub	sp, #8
 800e326:	b901      	cbnz	r1, 800e32a <__ascii_mbtowc+0x6>
 800e328:	a901      	add	r1, sp, #4
 800e32a:	b142      	cbz	r2, 800e33e <__ascii_mbtowc+0x1a>
 800e32c:	b14b      	cbz	r3, 800e342 <__ascii_mbtowc+0x1e>
 800e32e:	7813      	ldrb	r3, [r2, #0]
 800e330:	600b      	str	r3, [r1, #0]
 800e332:	7812      	ldrb	r2, [r2, #0]
 800e334:	1e10      	subs	r0, r2, #0
 800e336:	bf18      	it	ne
 800e338:	2001      	movne	r0, #1
 800e33a:	b002      	add	sp, #8
 800e33c:	4770      	bx	lr
 800e33e:	4610      	mov	r0, r2
 800e340:	e7fb      	b.n	800e33a <__ascii_mbtowc+0x16>
 800e342:	f06f 0001 	mvn.w	r0, #1
 800e346:	e7f8      	b.n	800e33a <__ascii_mbtowc+0x16>

0800e348 <memmove>:
 800e348:	4288      	cmp	r0, r1
 800e34a:	b510      	push	{r4, lr}
 800e34c:	eb01 0402 	add.w	r4, r1, r2
 800e350:	d902      	bls.n	800e358 <memmove+0x10>
 800e352:	4284      	cmp	r4, r0
 800e354:	4623      	mov	r3, r4
 800e356:	d807      	bhi.n	800e368 <memmove+0x20>
 800e358:	1e43      	subs	r3, r0, #1
 800e35a:	42a1      	cmp	r1, r4
 800e35c:	d008      	beq.n	800e370 <memmove+0x28>
 800e35e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e362:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e366:	e7f8      	b.n	800e35a <memmove+0x12>
 800e368:	4402      	add	r2, r0
 800e36a:	4601      	mov	r1, r0
 800e36c:	428a      	cmp	r2, r1
 800e36e:	d100      	bne.n	800e372 <memmove+0x2a>
 800e370:	bd10      	pop	{r4, pc}
 800e372:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e376:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e37a:	e7f7      	b.n	800e36c <memmove+0x24>

0800e37c <_realloc_r>:
 800e37c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e380:	4680      	mov	r8, r0
 800e382:	4614      	mov	r4, r2
 800e384:	460e      	mov	r6, r1
 800e386:	b921      	cbnz	r1, 800e392 <_realloc_r+0x16>
 800e388:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e38c:	4611      	mov	r1, r2
 800e38e:	f7fd bd01 	b.w	800bd94 <_malloc_r>
 800e392:	b92a      	cbnz	r2, 800e3a0 <_realloc_r+0x24>
 800e394:	f7ff fddc 	bl	800df50 <_free_r>
 800e398:	4625      	mov	r5, r4
 800e39a:	4628      	mov	r0, r5
 800e39c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e3a0:	f000 faae 	bl	800e900 <_malloc_usable_size_r>
 800e3a4:	4284      	cmp	r4, r0
 800e3a6:	4607      	mov	r7, r0
 800e3a8:	d802      	bhi.n	800e3b0 <_realloc_r+0x34>
 800e3aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e3ae:	d812      	bhi.n	800e3d6 <_realloc_r+0x5a>
 800e3b0:	4621      	mov	r1, r4
 800e3b2:	4640      	mov	r0, r8
 800e3b4:	f7fd fcee 	bl	800bd94 <_malloc_r>
 800e3b8:	4605      	mov	r5, r0
 800e3ba:	2800      	cmp	r0, #0
 800e3bc:	d0ed      	beq.n	800e39a <_realloc_r+0x1e>
 800e3be:	42bc      	cmp	r4, r7
 800e3c0:	4622      	mov	r2, r4
 800e3c2:	4631      	mov	r1, r6
 800e3c4:	bf28      	it	cs
 800e3c6:	463a      	movcs	r2, r7
 800e3c8:	f7fd fcad 	bl	800bd26 <memcpy>
 800e3cc:	4631      	mov	r1, r6
 800e3ce:	4640      	mov	r0, r8
 800e3d0:	f7ff fdbe 	bl	800df50 <_free_r>
 800e3d4:	e7e1      	b.n	800e39a <_realloc_r+0x1e>
 800e3d6:	4635      	mov	r5, r6
 800e3d8:	e7df      	b.n	800e39a <_realloc_r+0x1e>

0800e3da <__sfputc_r>:
 800e3da:	6893      	ldr	r3, [r2, #8]
 800e3dc:	3b01      	subs	r3, #1
 800e3de:	2b00      	cmp	r3, #0
 800e3e0:	b410      	push	{r4}
 800e3e2:	6093      	str	r3, [r2, #8]
 800e3e4:	da08      	bge.n	800e3f8 <__sfputc_r+0x1e>
 800e3e6:	6994      	ldr	r4, [r2, #24]
 800e3e8:	42a3      	cmp	r3, r4
 800e3ea:	db01      	blt.n	800e3f0 <__sfputc_r+0x16>
 800e3ec:	290a      	cmp	r1, #10
 800e3ee:	d103      	bne.n	800e3f8 <__sfputc_r+0x1e>
 800e3f0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e3f4:	f000 b94a 	b.w	800e68c <__swbuf_r>
 800e3f8:	6813      	ldr	r3, [r2, #0]
 800e3fa:	1c58      	adds	r0, r3, #1
 800e3fc:	6010      	str	r0, [r2, #0]
 800e3fe:	7019      	strb	r1, [r3, #0]
 800e400:	4608      	mov	r0, r1
 800e402:	f85d 4b04 	ldr.w	r4, [sp], #4
 800e406:	4770      	bx	lr

0800e408 <__sfputs_r>:
 800e408:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e40a:	4606      	mov	r6, r0
 800e40c:	460f      	mov	r7, r1
 800e40e:	4614      	mov	r4, r2
 800e410:	18d5      	adds	r5, r2, r3
 800e412:	42ac      	cmp	r4, r5
 800e414:	d101      	bne.n	800e41a <__sfputs_r+0x12>
 800e416:	2000      	movs	r0, #0
 800e418:	e007      	b.n	800e42a <__sfputs_r+0x22>
 800e41a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e41e:	463a      	mov	r2, r7
 800e420:	4630      	mov	r0, r6
 800e422:	f7ff ffda 	bl	800e3da <__sfputc_r>
 800e426:	1c43      	adds	r3, r0, #1
 800e428:	d1f3      	bne.n	800e412 <__sfputs_r+0xa>
 800e42a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800e42c <_vfiprintf_r>:
 800e42c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e430:	460d      	mov	r5, r1
 800e432:	b09d      	sub	sp, #116	; 0x74
 800e434:	4614      	mov	r4, r2
 800e436:	4698      	mov	r8, r3
 800e438:	4606      	mov	r6, r0
 800e43a:	b118      	cbz	r0, 800e444 <_vfiprintf_r+0x18>
 800e43c:	6983      	ldr	r3, [r0, #24]
 800e43e:	b90b      	cbnz	r3, 800e444 <_vfiprintf_r+0x18>
 800e440:	f7fd fbac 	bl	800bb9c <__sinit>
 800e444:	4b89      	ldr	r3, [pc, #548]	; (800e66c <_vfiprintf_r+0x240>)
 800e446:	429d      	cmp	r5, r3
 800e448:	d11b      	bne.n	800e482 <_vfiprintf_r+0x56>
 800e44a:	6875      	ldr	r5, [r6, #4]
 800e44c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e44e:	07d9      	lsls	r1, r3, #31
 800e450:	d405      	bmi.n	800e45e <_vfiprintf_r+0x32>
 800e452:	89ab      	ldrh	r3, [r5, #12]
 800e454:	059a      	lsls	r2, r3, #22
 800e456:	d402      	bmi.n	800e45e <_vfiprintf_r+0x32>
 800e458:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e45a:	f7fd fc62 	bl	800bd22 <__retarget_lock_acquire_recursive>
 800e45e:	89ab      	ldrh	r3, [r5, #12]
 800e460:	071b      	lsls	r3, r3, #28
 800e462:	d501      	bpl.n	800e468 <_vfiprintf_r+0x3c>
 800e464:	692b      	ldr	r3, [r5, #16]
 800e466:	b9eb      	cbnz	r3, 800e4a4 <_vfiprintf_r+0x78>
 800e468:	4629      	mov	r1, r5
 800e46a:	4630      	mov	r0, r6
 800e46c:	f000 f96e 	bl	800e74c <__swsetup_r>
 800e470:	b1c0      	cbz	r0, 800e4a4 <_vfiprintf_r+0x78>
 800e472:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e474:	07dc      	lsls	r4, r3, #31
 800e476:	d50e      	bpl.n	800e496 <_vfiprintf_r+0x6a>
 800e478:	f04f 30ff 	mov.w	r0, #4294967295
 800e47c:	b01d      	add	sp, #116	; 0x74
 800e47e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e482:	4b7b      	ldr	r3, [pc, #492]	; (800e670 <_vfiprintf_r+0x244>)
 800e484:	429d      	cmp	r5, r3
 800e486:	d101      	bne.n	800e48c <_vfiprintf_r+0x60>
 800e488:	68b5      	ldr	r5, [r6, #8]
 800e48a:	e7df      	b.n	800e44c <_vfiprintf_r+0x20>
 800e48c:	4b79      	ldr	r3, [pc, #484]	; (800e674 <_vfiprintf_r+0x248>)
 800e48e:	429d      	cmp	r5, r3
 800e490:	bf08      	it	eq
 800e492:	68f5      	ldreq	r5, [r6, #12]
 800e494:	e7da      	b.n	800e44c <_vfiprintf_r+0x20>
 800e496:	89ab      	ldrh	r3, [r5, #12]
 800e498:	0598      	lsls	r0, r3, #22
 800e49a:	d4ed      	bmi.n	800e478 <_vfiprintf_r+0x4c>
 800e49c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e49e:	f7fd fc41 	bl	800bd24 <__retarget_lock_release_recursive>
 800e4a2:	e7e9      	b.n	800e478 <_vfiprintf_r+0x4c>
 800e4a4:	2300      	movs	r3, #0
 800e4a6:	9309      	str	r3, [sp, #36]	; 0x24
 800e4a8:	2320      	movs	r3, #32
 800e4aa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e4ae:	f8cd 800c 	str.w	r8, [sp, #12]
 800e4b2:	2330      	movs	r3, #48	; 0x30
 800e4b4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e678 <_vfiprintf_r+0x24c>
 800e4b8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e4bc:	f04f 0901 	mov.w	r9, #1
 800e4c0:	4623      	mov	r3, r4
 800e4c2:	469a      	mov	sl, r3
 800e4c4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e4c8:	b10a      	cbz	r2, 800e4ce <_vfiprintf_r+0xa2>
 800e4ca:	2a25      	cmp	r2, #37	; 0x25
 800e4cc:	d1f9      	bne.n	800e4c2 <_vfiprintf_r+0x96>
 800e4ce:	ebba 0b04 	subs.w	fp, sl, r4
 800e4d2:	d00b      	beq.n	800e4ec <_vfiprintf_r+0xc0>
 800e4d4:	465b      	mov	r3, fp
 800e4d6:	4622      	mov	r2, r4
 800e4d8:	4629      	mov	r1, r5
 800e4da:	4630      	mov	r0, r6
 800e4dc:	f7ff ff94 	bl	800e408 <__sfputs_r>
 800e4e0:	3001      	adds	r0, #1
 800e4e2:	f000 80aa 	beq.w	800e63a <_vfiprintf_r+0x20e>
 800e4e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e4e8:	445a      	add	r2, fp
 800e4ea:	9209      	str	r2, [sp, #36]	; 0x24
 800e4ec:	f89a 3000 	ldrb.w	r3, [sl]
 800e4f0:	2b00      	cmp	r3, #0
 800e4f2:	f000 80a2 	beq.w	800e63a <_vfiprintf_r+0x20e>
 800e4f6:	2300      	movs	r3, #0
 800e4f8:	f04f 32ff 	mov.w	r2, #4294967295
 800e4fc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e500:	f10a 0a01 	add.w	sl, sl, #1
 800e504:	9304      	str	r3, [sp, #16]
 800e506:	9307      	str	r3, [sp, #28]
 800e508:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e50c:	931a      	str	r3, [sp, #104]	; 0x68
 800e50e:	4654      	mov	r4, sl
 800e510:	2205      	movs	r2, #5
 800e512:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e516:	4858      	ldr	r0, [pc, #352]	; (800e678 <_vfiprintf_r+0x24c>)
 800e518:	f7f1 fe62 	bl	80001e0 <memchr>
 800e51c:	9a04      	ldr	r2, [sp, #16]
 800e51e:	b9d8      	cbnz	r0, 800e558 <_vfiprintf_r+0x12c>
 800e520:	06d1      	lsls	r1, r2, #27
 800e522:	bf44      	itt	mi
 800e524:	2320      	movmi	r3, #32
 800e526:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e52a:	0713      	lsls	r3, r2, #28
 800e52c:	bf44      	itt	mi
 800e52e:	232b      	movmi	r3, #43	; 0x2b
 800e530:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e534:	f89a 3000 	ldrb.w	r3, [sl]
 800e538:	2b2a      	cmp	r3, #42	; 0x2a
 800e53a:	d015      	beq.n	800e568 <_vfiprintf_r+0x13c>
 800e53c:	9a07      	ldr	r2, [sp, #28]
 800e53e:	4654      	mov	r4, sl
 800e540:	2000      	movs	r0, #0
 800e542:	f04f 0c0a 	mov.w	ip, #10
 800e546:	4621      	mov	r1, r4
 800e548:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e54c:	3b30      	subs	r3, #48	; 0x30
 800e54e:	2b09      	cmp	r3, #9
 800e550:	d94e      	bls.n	800e5f0 <_vfiprintf_r+0x1c4>
 800e552:	b1b0      	cbz	r0, 800e582 <_vfiprintf_r+0x156>
 800e554:	9207      	str	r2, [sp, #28]
 800e556:	e014      	b.n	800e582 <_vfiprintf_r+0x156>
 800e558:	eba0 0308 	sub.w	r3, r0, r8
 800e55c:	fa09 f303 	lsl.w	r3, r9, r3
 800e560:	4313      	orrs	r3, r2
 800e562:	9304      	str	r3, [sp, #16]
 800e564:	46a2      	mov	sl, r4
 800e566:	e7d2      	b.n	800e50e <_vfiprintf_r+0xe2>
 800e568:	9b03      	ldr	r3, [sp, #12]
 800e56a:	1d19      	adds	r1, r3, #4
 800e56c:	681b      	ldr	r3, [r3, #0]
 800e56e:	9103      	str	r1, [sp, #12]
 800e570:	2b00      	cmp	r3, #0
 800e572:	bfbb      	ittet	lt
 800e574:	425b      	neglt	r3, r3
 800e576:	f042 0202 	orrlt.w	r2, r2, #2
 800e57a:	9307      	strge	r3, [sp, #28]
 800e57c:	9307      	strlt	r3, [sp, #28]
 800e57e:	bfb8      	it	lt
 800e580:	9204      	strlt	r2, [sp, #16]
 800e582:	7823      	ldrb	r3, [r4, #0]
 800e584:	2b2e      	cmp	r3, #46	; 0x2e
 800e586:	d10c      	bne.n	800e5a2 <_vfiprintf_r+0x176>
 800e588:	7863      	ldrb	r3, [r4, #1]
 800e58a:	2b2a      	cmp	r3, #42	; 0x2a
 800e58c:	d135      	bne.n	800e5fa <_vfiprintf_r+0x1ce>
 800e58e:	9b03      	ldr	r3, [sp, #12]
 800e590:	1d1a      	adds	r2, r3, #4
 800e592:	681b      	ldr	r3, [r3, #0]
 800e594:	9203      	str	r2, [sp, #12]
 800e596:	2b00      	cmp	r3, #0
 800e598:	bfb8      	it	lt
 800e59a:	f04f 33ff 	movlt.w	r3, #4294967295
 800e59e:	3402      	adds	r4, #2
 800e5a0:	9305      	str	r3, [sp, #20]
 800e5a2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e688 <_vfiprintf_r+0x25c>
 800e5a6:	7821      	ldrb	r1, [r4, #0]
 800e5a8:	2203      	movs	r2, #3
 800e5aa:	4650      	mov	r0, sl
 800e5ac:	f7f1 fe18 	bl	80001e0 <memchr>
 800e5b0:	b140      	cbz	r0, 800e5c4 <_vfiprintf_r+0x198>
 800e5b2:	2340      	movs	r3, #64	; 0x40
 800e5b4:	eba0 000a 	sub.w	r0, r0, sl
 800e5b8:	fa03 f000 	lsl.w	r0, r3, r0
 800e5bc:	9b04      	ldr	r3, [sp, #16]
 800e5be:	4303      	orrs	r3, r0
 800e5c0:	3401      	adds	r4, #1
 800e5c2:	9304      	str	r3, [sp, #16]
 800e5c4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e5c8:	482c      	ldr	r0, [pc, #176]	; (800e67c <_vfiprintf_r+0x250>)
 800e5ca:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800e5ce:	2206      	movs	r2, #6
 800e5d0:	f7f1 fe06 	bl	80001e0 <memchr>
 800e5d4:	2800      	cmp	r0, #0
 800e5d6:	d03f      	beq.n	800e658 <_vfiprintf_r+0x22c>
 800e5d8:	4b29      	ldr	r3, [pc, #164]	; (800e680 <_vfiprintf_r+0x254>)
 800e5da:	bb1b      	cbnz	r3, 800e624 <_vfiprintf_r+0x1f8>
 800e5dc:	9b03      	ldr	r3, [sp, #12]
 800e5de:	3307      	adds	r3, #7
 800e5e0:	f023 0307 	bic.w	r3, r3, #7
 800e5e4:	3308      	adds	r3, #8
 800e5e6:	9303      	str	r3, [sp, #12]
 800e5e8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800e5ea:	443b      	add	r3, r7
 800e5ec:	9309      	str	r3, [sp, #36]	; 0x24
 800e5ee:	e767      	b.n	800e4c0 <_vfiprintf_r+0x94>
 800e5f0:	fb0c 3202 	mla	r2, ip, r2, r3
 800e5f4:	460c      	mov	r4, r1
 800e5f6:	2001      	movs	r0, #1
 800e5f8:	e7a5      	b.n	800e546 <_vfiprintf_r+0x11a>
 800e5fa:	2300      	movs	r3, #0
 800e5fc:	3401      	adds	r4, #1
 800e5fe:	9305      	str	r3, [sp, #20]
 800e600:	4619      	mov	r1, r3
 800e602:	f04f 0c0a 	mov.w	ip, #10
 800e606:	4620      	mov	r0, r4
 800e608:	f810 2b01 	ldrb.w	r2, [r0], #1
 800e60c:	3a30      	subs	r2, #48	; 0x30
 800e60e:	2a09      	cmp	r2, #9
 800e610:	d903      	bls.n	800e61a <_vfiprintf_r+0x1ee>
 800e612:	2b00      	cmp	r3, #0
 800e614:	d0c5      	beq.n	800e5a2 <_vfiprintf_r+0x176>
 800e616:	9105      	str	r1, [sp, #20]
 800e618:	e7c3      	b.n	800e5a2 <_vfiprintf_r+0x176>
 800e61a:	fb0c 2101 	mla	r1, ip, r1, r2
 800e61e:	4604      	mov	r4, r0
 800e620:	2301      	movs	r3, #1
 800e622:	e7f0      	b.n	800e606 <_vfiprintf_r+0x1da>
 800e624:	ab03      	add	r3, sp, #12
 800e626:	9300      	str	r3, [sp, #0]
 800e628:	462a      	mov	r2, r5
 800e62a:	4b16      	ldr	r3, [pc, #88]	; (800e684 <_vfiprintf_r+0x258>)
 800e62c:	a904      	add	r1, sp, #16
 800e62e:	4630      	mov	r0, r6
 800e630:	f7fd fcc4 	bl	800bfbc <_printf_float>
 800e634:	4607      	mov	r7, r0
 800e636:	1c78      	adds	r0, r7, #1
 800e638:	d1d6      	bne.n	800e5e8 <_vfiprintf_r+0x1bc>
 800e63a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800e63c:	07d9      	lsls	r1, r3, #31
 800e63e:	d405      	bmi.n	800e64c <_vfiprintf_r+0x220>
 800e640:	89ab      	ldrh	r3, [r5, #12]
 800e642:	059a      	lsls	r2, r3, #22
 800e644:	d402      	bmi.n	800e64c <_vfiprintf_r+0x220>
 800e646:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e648:	f7fd fb6c 	bl	800bd24 <__retarget_lock_release_recursive>
 800e64c:	89ab      	ldrh	r3, [r5, #12]
 800e64e:	065b      	lsls	r3, r3, #25
 800e650:	f53f af12 	bmi.w	800e478 <_vfiprintf_r+0x4c>
 800e654:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e656:	e711      	b.n	800e47c <_vfiprintf_r+0x50>
 800e658:	ab03      	add	r3, sp, #12
 800e65a:	9300      	str	r3, [sp, #0]
 800e65c:	462a      	mov	r2, r5
 800e65e:	4b09      	ldr	r3, [pc, #36]	; (800e684 <_vfiprintf_r+0x258>)
 800e660:	a904      	add	r1, sp, #16
 800e662:	4630      	mov	r0, r6
 800e664:	f7fd ff4e 	bl	800c504 <_printf_i>
 800e668:	e7e4      	b.n	800e634 <_vfiprintf_r+0x208>
 800e66a:	bf00      	nop
 800e66c:	0800f684 	.word	0x0800f684
 800e670:	0800f6a4 	.word	0x0800f6a4
 800e674:	0800f664 	.word	0x0800f664
 800e678:	0800f8e4 	.word	0x0800f8e4
 800e67c:	0800f8ee 	.word	0x0800f8ee
 800e680:	0800bfbd 	.word	0x0800bfbd
 800e684:	0800e409 	.word	0x0800e409
 800e688:	0800f8ea 	.word	0x0800f8ea

0800e68c <__swbuf_r>:
 800e68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e68e:	460e      	mov	r6, r1
 800e690:	4614      	mov	r4, r2
 800e692:	4605      	mov	r5, r0
 800e694:	b118      	cbz	r0, 800e69e <__swbuf_r+0x12>
 800e696:	6983      	ldr	r3, [r0, #24]
 800e698:	b90b      	cbnz	r3, 800e69e <__swbuf_r+0x12>
 800e69a:	f7fd fa7f 	bl	800bb9c <__sinit>
 800e69e:	4b21      	ldr	r3, [pc, #132]	; (800e724 <__swbuf_r+0x98>)
 800e6a0:	429c      	cmp	r4, r3
 800e6a2:	d12b      	bne.n	800e6fc <__swbuf_r+0x70>
 800e6a4:	686c      	ldr	r4, [r5, #4]
 800e6a6:	69a3      	ldr	r3, [r4, #24]
 800e6a8:	60a3      	str	r3, [r4, #8]
 800e6aa:	89a3      	ldrh	r3, [r4, #12]
 800e6ac:	071a      	lsls	r2, r3, #28
 800e6ae:	d52f      	bpl.n	800e710 <__swbuf_r+0x84>
 800e6b0:	6923      	ldr	r3, [r4, #16]
 800e6b2:	b36b      	cbz	r3, 800e710 <__swbuf_r+0x84>
 800e6b4:	6923      	ldr	r3, [r4, #16]
 800e6b6:	6820      	ldr	r0, [r4, #0]
 800e6b8:	1ac0      	subs	r0, r0, r3
 800e6ba:	6963      	ldr	r3, [r4, #20]
 800e6bc:	b2f6      	uxtb	r6, r6
 800e6be:	4283      	cmp	r3, r0
 800e6c0:	4637      	mov	r7, r6
 800e6c2:	dc04      	bgt.n	800e6ce <__swbuf_r+0x42>
 800e6c4:	4621      	mov	r1, r4
 800e6c6:	4628      	mov	r0, r5
 800e6c8:	f7ff f842 	bl	800d750 <_fflush_r>
 800e6cc:	bb30      	cbnz	r0, 800e71c <__swbuf_r+0x90>
 800e6ce:	68a3      	ldr	r3, [r4, #8]
 800e6d0:	3b01      	subs	r3, #1
 800e6d2:	60a3      	str	r3, [r4, #8]
 800e6d4:	6823      	ldr	r3, [r4, #0]
 800e6d6:	1c5a      	adds	r2, r3, #1
 800e6d8:	6022      	str	r2, [r4, #0]
 800e6da:	701e      	strb	r6, [r3, #0]
 800e6dc:	6963      	ldr	r3, [r4, #20]
 800e6de:	3001      	adds	r0, #1
 800e6e0:	4283      	cmp	r3, r0
 800e6e2:	d004      	beq.n	800e6ee <__swbuf_r+0x62>
 800e6e4:	89a3      	ldrh	r3, [r4, #12]
 800e6e6:	07db      	lsls	r3, r3, #31
 800e6e8:	d506      	bpl.n	800e6f8 <__swbuf_r+0x6c>
 800e6ea:	2e0a      	cmp	r6, #10
 800e6ec:	d104      	bne.n	800e6f8 <__swbuf_r+0x6c>
 800e6ee:	4621      	mov	r1, r4
 800e6f0:	4628      	mov	r0, r5
 800e6f2:	f7ff f82d 	bl	800d750 <_fflush_r>
 800e6f6:	b988      	cbnz	r0, 800e71c <__swbuf_r+0x90>
 800e6f8:	4638      	mov	r0, r7
 800e6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e6fc:	4b0a      	ldr	r3, [pc, #40]	; (800e728 <__swbuf_r+0x9c>)
 800e6fe:	429c      	cmp	r4, r3
 800e700:	d101      	bne.n	800e706 <__swbuf_r+0x7a>
 800e702:	68ac      	ldr	r4, [r5, #8]
 800e704:	e7cf      	b.n	800e6a6 <__swbuf_r+0x1a>
 800e706:	4b09      	ldr	r3, [pc, #36]	; (800e72c <__swbuf_r+0xa0>)
 800e708:	429c      	cmp	r4, r3
 800e70a:	bf08      	it	eq
 800e70c:	68ec      	ldreq	r4, [r5, #12]
 800e70e:	e7ca      	b.n	800e6a6 <__swbuf_r+0x1a>
 800e710:	4621      	mov	r1, r4
 800e712:	4628      	mov	r0, r5
 800e714:	f000 f81a 	bl	800e74c <__swsetup_r>
 800e718:	2800      	cmp	r0, #0
 800e71a:	d0cb      	beq.n	800e6b4 <__swbuf_r+0x28>
 800e71c:	f04f 37ff 	mov.w	r7, #4294967295
 800e720:	e7ea      	b.n	800e6f8 <__swbuf_r+0x6c>
 800e722:	bf00      	nop
 800e724:	0800f684 	.word	0x0800f684
 800e728:	0800f6a4 	.word	0x0800f6a4
 800e72c:	0800f664 	.word	0x0800f664

0800e730 <__ascii_wctomb>:
 800e730:	b149      	cbz	r1, 800e746 <__ascii_wctomb+0x16>
 800e732:	2aff      	cmp	r2, #255	; 0xff
 800e734:	bf85      	ittet	hi
 800e736:	238a      	movhi	r3, #138	; 0x8a
 800e738:	6003      	strhi	r3, [r0, #0]
 800e73a:	700a      	strbls	r2, [r1, #0]
 800e73c:	f04f 30ff 	movhi.w	r0, #4294967295
 800e740:	bf98      	it	ls
 800e742:	2001      	movls	r0, #1
 800e744:	4770      	bx	lr
 800e746:	4608      	mov	r0, r1
 800e748:	4770      	bx	lr
	...

0800e74c <__swsetup_r>:
 800e74c:	4b32      	ldr	r3, [pc, #200]	; (800e818 <__swsetup_r+0xcc>)
 800e74e:	b570      	push	{r4, r5, r6, lr}
 800e750:	681d      	ldr	r5, [r3, #0]
 800e752:	4606      	mov	r6, r0
 800e754:	460c      	mov	r4, r1
 800e756:	b125      	cbz	r5, 800e762 <__swsetup_r+0x16>
 800e758:	69ab      	ldr	r3, [r5, #24]
 800e75a:	b913      	cbnz	r3, 800e762 <__swsetup_r+0x16>
 800e75c:	4628      	mov	r0, r5
 800e75e:	f7fd fa1d 	bl	800bb9c <__sinit>
 800e762:	4b2e      	ldr	r3, [pc, #184]	; (800e81c <__swsetup_r+0xd0>)
 800e764:	429c      	cmp	r4, r3
 800e766:	d10f      	bne.n	800e788 <__swsetup_r+0x3c>
 800e768:	686c      	ldr	r4, [r5, #4]
 800e76a:	89a3      	ldrh	r3, [r4, #12]
 800e76c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e770:	0719      	lsls	r1, r3, #28
 800e772:	d42c      	bmi.n	800e7ce <__swsetup_r+0x82>
 800e774:	06dd      	lsls	r5, r3, #27
 800e776:	d411      	bmi.n	800e79c <__swsetup_r+0x50>
 800e778:	2309      	movs	r3, #9
 800e77a:	6033      	str	r3, [r6, #0]
 800e77c:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e780:	81a3      	strh	r3, [r4, #12]
 800e782:	f04f 30ff 	mov.w	r0, #4294967295
 800e786:	e03e      	b.n	800e806 <__swsetup_r+0xba>
 800e788:	4b25      	ldr	r3, [pc, #148]	; (800e820 <__swsetup_r+0xd4>)
 800e78a:	429c      	cmp	r4, r3
 800e78c:	d101      	bne.n	800e792 <__swsetup_r+0x46>
 800e78e:	68ac      	ldr	r4, [r5, #8]
 800e790:	e7eb      	b.n	800e76a <__swsetup_r+0x1e>
 800e792:	4b24      	ldr	r3, [pc, #144]	; (800e824 <__swsetup_r+0xd8>)
 800e794:	429c      	cmp	r4, r3
 800e796:	bf08      	it	eq
 800e798:	68ec      	ldreq	r4, [r5, #12]
 800e79a:	e7e6      	b.n	800e76a <__swsetup_r+0x1e>
 800e79c:	0758      	lsls	r0, r3, #29
 800e79e:	d512      	bpl.n	800e7c6 <__swsetup_r+0x7a>
 800e7a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e7a2:	b141      	cbz	r1, 800e7b6 <__swsetup_r+0x6a>
 800e7a4:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e7a8:	4299      	cmp	r1, r3
 800e7aa:	d002      	beq.n	800e7b2 <__swsetup_r+0x66>
 800e7ac:	4630      	mov	r0, r6
 800e7ae:	f7ff fbcf 	bl	800df50 <_free_r>
 800e7b2:	2300      	movs	r3, #0
 800e7b4:	6363      	str	r3, [r4, #52]	; 0x34
 800e7b6:	89a3      	ldrh	r3, [r4, #12]
 800e7b8:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e7bc:	81a3      	strh	r3, [r4, #12]
 800e7be:	2300      	movs	r3, #0
 800e7c0:	6063      	str	r3, [r4, #4]
 800e7c2:	6923      	ldr	r3, [r4, #16]
 800e7c4:	6023      	str	r3, [r4, #0]
 800e7c6:	89a3      	ldrh	r3, [r4, #12]
 800e7c8:	f043 0308 	orr.w	r3, r3, #8
 800e7cc:	81a3      	strh	r3, [r4, #12]
 800e7ce:	6923      	ldr	r3, [r4, #16]
 800e7d0:	b94b      	cbnz	r3, 800e7e6 <__swsetup_r+0x9a>
 800e7d2:	89a3      	ldrh	r3, [r4, #12]
 800e7d4:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e7d8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e7dc:	d003      	beq.n	800e7e6 <__swsetup_r+0x9a>
 800e7de:	4621      	mov	r1, r4
 800e7e0:	4630      	mov	r0, r6
 800e7e2:	f000 f84d 	bl	800e880 <__smakebuf_r>
 800e7e6:	89a0      	ldrh	r0, [r4, #12]
 800e7e8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e7ec:	f010 0301 	ands.w	r3, r0, #1
 800e7f0:	d00a      	beq.n	800e808 <__swsetup_r+0xbc>
 800e7f2:	2300      	movs	r3, #0
 800e7f4:	60a3      	str	r3, [r4, #8]
 800e7f6:	6963      	ldr	r3, [r4, #20]
 800e7f8:	425b      	negs	r3, r3
 800e7fa:	61a3      	str	r3, [r4, #24]
 800e7fc:	6923      	ldr	r3, [r4, #16]
 800e7fe:	b943      	cbnz	r3, 800e812 <__swsetup_r+0xc6>
 800e800:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e804:	d1ba      	bne.n	800e77c <__swsetup_r+0x30>
 800e806:	bd70      	pop	{r4, r5, r6, pc}
 800e808:	0781      	lsls	r1, r0, #30
 800e80a:	bf58      	it	pl
 800e80c:	6963      	ldrpl	r3, [r4, #20]
 800e80e:	60a3      	str	r3, [r4, #8]
 800e810:	e7f4      	b.n	800e7fc <__swsetup_r+0xb0>
 800e812:	2000      	movs	r0, #0
 800e814:	e7f7      	b.n	800e806 <__swsetup_r+0xba>
 800e816:	bf00      	nop
 800e818:	20000034 	.word	0x20000034
 800e81c:	0800f684 	.word	0x0800f684
 800e820:	0800f6a4 	.word	0x0800f6a4
 800e824:	0800f664 	.word	0x0800f664

0800e828 <abort>:
 800e828:	b508      	push	{r3, lr}
 800e82a:	2006      	movs	r0, #6
 800e82c:	f000 f898 	bl	800e960 <raise>
 800e830:	2001      	movs	r0, #1
 800e832:	f7f5 fac9 	bl	8003dc8 <_exit>

0800e836 <__swhatbuf_r>:
 800e836:	b570      	push	{r4, r5, r6, lr}
 800e838:	460e      	mov	r6, r1
 800e83a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e83e:	2900      	cmp	r1, #0
 800e840:	b096      	sub	sp, #88	; 0x58
 800e842:	4614      	mov	r4, r2
 800e844:	461d      	mov	r5, r3
 800e846:	da08      	bge.n	800e85a <__swhatbuf_r+0x24>
 800e848:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e84c:	2200      	movs	r2, #0
 800e84e:	602a      	str	r2, [r5, #0]
 800e850:	061a      	lsls	r2, r3, #24
 800e852:	d410      	bmi.n	800e876 <__swhatbuf_r+0x40>
 800e854:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e858:	e00e      	b.n	800e878 <__swhatbuf_r+0x42>
 800e85a:	466a      	mov	r2, sp
 800e85c:	f000 f89c 	bl	800e998 <_fstat_r>
 800e860:	2800      	cmp	r0, #0
 800e862:	dbf1      	blt.n	800e848 <__swhatbuf_r+0x12>
 800e864:	9a01      	ldr	r2, [sp, #4]
 800e866:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e86a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e86e:	425a      	negs	r2, r3
 800e870:	415a      	adcs	r2, r3
 800e872:	602a      	str	r2, [r5, #0]
 800e874:	e7ee      	b.n	800e854 <__swhatbuf_r+0x1e>
 800e876:	2340      	movs	r3, #64	; 0x40
 800e878:	2000      	movs	r0, #0
 800e87a:	6023      	str	r3, [r4, #0]
 800e87c:	b016      	add	sp, #88	; 0x58
 800e87e:	bd70      	pop	{r4, r5, r6, pc}

0800e880 <__smakebuf_r>:
 800e880:	898b      	ldrh	r3, [r1, #12]
 800e882:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e884:	079d      	lsls	r5, r3, #30
 800e886:	4606      	mov	r6, r0
 800e888:	460c      	mov	r4, r1
 800e88a:	d507      	bpl.n	800e89c <__smakebuf_r+0x1c>
 800e88c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e890:	6023      	str	r3, [r4, #0]
 800e892:	6123      	str	r3, [r4, #16]
 800e894:	2301      	movs	r3, #1
 800e896:	6163      	str	r3, [r4, #20]
 800e898:	b002      	add	sp, #8
 800e89a:	bd70      	pop	{r4, r5, r6, pc}
 800e89c:	ab01      	add	r3, sp, #4
 800e89e:	466a      	mov	r2, sp
 800e8a0:	f7ff ffc9 	bl	800e836 <__swhatbuf_r>
 800e8a4:	9900      	ldr	r1, [sp, #0]
 800e8a6:	4605      	mov	r5, r0
 800e8a8:	4630      	mov	r0, r6
 800e8aa:	f7fd fa73 	bl	800bd94 <_malloc_r>
 800e8ae:	b948      	cbnz	r0, 800e8c4 <__smakebuf_r+0x44>
 800e8b0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e8b4:	059a      	lsls	r2, r3, #22
 800e8b6:	d4ef      	bmi.n	800e898 <__smakebuf_r+0x18>
 800e8b8:	f023 0303 	bic.w	r3, r3, #3
 800e8bc:	f043 0302 	orr.w	r3, r3, #2
 800e8c0:	81a3      	strh	r3, [r4, #12]
 800e8c2:	e7e3      	b.n	800e88c <__smakebuf_r+0xc>
 800e8c4:	4b0d      	ldr	r3, [pc, #52]	; (800e8fc <__smakebuf_r+0x7c>)
 800e8c6:	62b3      	str	r3, [r6, #40]	; 0x28
 800e8c8:	89a3      	ldrh	r3, [r4, #12]
 800e8ca:	6020      	str	r0, [r4, #0]
 800e8cc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8d0:	81a3      	strh	r3, [r4, #12]
 800e8d2:	9b00      	ldr	r3, [sp, #0]
 800e8d4:	6163      	str	r3, [r4, #20]
 800e8d6:	9b01      	ldr	r3, [sp, #4]
 800e8d8:	6120      	str	r0, [r4, #16]
 800e8da:	b15b      	cbz	r3, 800e8f4 <__smakebuf_r+0x74>
 800e8dc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e8e0:	4630      	mov	r0, r6
 800e8e2:	f000 f86b 	bl	800e9bc <_isatty_r>
 800e8e6:	b128      	cbz	r0, 800e8f4 <__smakebuf_r+0x74>
 800e8e8:	89a3      	ldrh	r3, [r4, #12]
 800e8ea:	f023 0303 	bic.w	r3, r3, #3
 800e8ee:	f043 0301 	orr.w	r3, r3, #1
 800e8f2:	81a3      	strh	r3, [r4, #12]
 800e8f4:	89a0      	ldrh	r0, [r4, #12]
 800e8f6:	4305      	orrs	r5, r0
 800e8f8:	81a5      	strh	r5, [r4, #12]
 800e8fa:	e7cd      	b.n	800e898 <__smakebuf_r+0x18>
 800e8fc:	0800bb35 	.word	0x0800bb35

0800e900 <_malloc_usable_size_r>:
 800e900:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e904:	1f18      	subs	r0, r3, #4
 800e906:	2b00      	cmp	r3, #0
 800e908:	bfbc      	itt	lt
 800e90a:	580b      	ldrlt	r3, [r1, r0]
 800e90c:	18c0      	addlt	r0, r0, r3
 800e90e:	4770      	bx	lr

0800e910 <_raise_r>:
 800e910:	291f      	cmp	r1, #31
 800e912:	b538      	push	{r3, r4, r5, lr}
 800e914:	4604      	mov	r4, r0
 800e916:	460d      	mov	r5, r1
 800e918:	d904      	bls.n	800e924 <_raise_r+0x14>
 800e91a:	2316      	movs	r3, #22
 800e91c:	6003      	str	r3, [r0, #0]
 800e91e:	f04f 30ff 	mov.w	r0, #4294967295
 800e922:	bd38      	pop	{r3, r4, r5, pc}
 800e924:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e926:	b112      	cbz	r2, 800e92e <_raise_r+0x1e>
 800e928:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e92c:	b94b      	cbnz	r3, 800e942 <_raise_r+0x32>
 800e92e:	4620      	mov	r0, r4
 800e930:	f000 f830 	bl	800e994 <_getpid_r>
 800e934:	462a      	mov	r2, r5
 800e936:	4601      	mov	r1, r0
 800e938:	4620      	mov	r0, r4
 800e93a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e93e:	f000 b817 	b.w	800e970 <_kill_r>
 800e942:	2b01      	cmp	r3, #1
 800e944:	d00a      	beq.n	800e95c <_raise_r+0x4c>
 800e946:	1c59      	adds	r1, r3, #1
 800e948:	d103      	bne.n	800e952 <_raise_r+0x42>
 800e94a:	2316      	movs	r3, #22
 800e94c:	6003      	str	r3, [r0, #0]
 800e94e:	2001      	movs	r0, #1
 800e950:	e7e7      	b.n	800e922 <_raise_r+0x12>
 800e952:	2400      	movs	r4, #0
 800e954:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e958:	4628      	mov	r0, r5
 800e95a:	4798      	blx	r3
 800e95c:	2000      	movs	r0, #0
 800e95e:	e7e0      	b.n	800e922 <_raise_r+0x12>

0800e960 <raise>:
 800e960:	4b02      	ldr	r3, [pc, #8]	; (800e96c <raise+0xc>)
 800e962:	4601      	mov	r1, r0
 800e964:	6818      	ldr	r0, [r3, #0]
 800e966:	f7ff bfd3 	b.w	800e910 <_raise_r>
 800e96a:	bf00      	nop
 800e96c:	20000034 	.word	0x20000034

0800e970 <_kill_r>:
 800e970:	b538      	push	{r3, r4, r5, lr}
 800e972:	4d07      	ldr	r5, [pc, #28]	; (800e990 <_kill_r+0x20>)
 800e974:	2300      	movs	r3, #0
 800e976:	4604      	mov	r4, r0
 800e978:	4608      	mov	r0, r1
 800e97a:	4611      	mov	r1, r2
 800e97c:	602b      	str	r3, [r5, #0]
 800e97e:	f7f5 fa13 	bl	8003da8 <_kill>
 800e982:	1c43      	adds	r3, r0, #1
 800e984:	d102      	bne.n	800e98c <_kill_r+0x1c>
 800e986:	682b      	ldr	r3, [r5, #0]
 800e988:	b103      	cbz	r3, 800e98c <_kill_r+0x1c>
 800e98a:	6023      	str	r3, [r4, #0]
 800e98c:	bd38      	pop	{r3, r4, r5, pc}
 800e98e:	bf00      	nop
 800e990:	20005420 	.word	0x20005420

0800e994 <_getpid_r>:
 800e994:	f7f5 ba00 	b.w	8003d98 <_getpid>

0800e998 <_fstat_r>:
 800e998:	b538      	push	{r3, r4, r5, lr}
 800e99a:	4d07      	ldr	r5, [pc, #28]	; (800e9b8 <_fstat_r+0x20>)
 800e99c:	2300      	movs	r3, #0
 800e99e:	4604      	mov	r4, r0
 800e9a0:	4608      	mov	r0, r1
 800e9a2:	4611      	mov	r1, r2
 800e9a4:	602b      	str	r3, [r5, #0]
 800e9a6:	f7f5 fa5e 	bl	8003e66 <_fstat>
 800e9aa:	1c43      	adds	r3, r0, #1
 800e9ac:	d102      	bne.n	800e9b4 <_fstat_r+0x1c>
 800e9ae:	682b      	ldr	r3, [r5, #0]
 800e9b0:	b103      	cbz	r3, 800e9b4 <_fstat_r+0x1c>
 800e9b2:	6023      	str	r3, [r4, #0]
 800e9b4:	bd38      	pop	{r3, r4, r5, pc}
 800e9b6:	bf00      	nop
 800e9b8:	20005420 	.word	0x20005420

0800e9bc <_isatty_r>:
 800e9bc:	b538      	push	{r3, r4, r5, lr}
 800e9be:	4d06      	ldr	r5, [pc, #24]	; (800e9d8 <_isatty_r+0x1c>)
 800e9c0:	2300      	movs	r3, #0
 800e9c2:	4604      	mov	r4, r0
 800e9c4:	4608      	mov	r0, r1
 800e9c6:	602b      	str	r3, [r5, #0]
 800e9c8:	f7f5 fa5d 	bl	8003e86 <_isatty>
 800e9cc:	1c43      	adds	r3, r0, #1
 800e9ce:	d102      	bne.n	800e9d6 <_isatty_r+0x1a>
 800e9d0:	682b      	ldr	r3, [r5, #0]
 800e9d2:	b103      	cbz	r3, 800e9d6 <_isatty_r+0x1a>
 800e9d4:	6023      	str	r3, [r4, #0]
 800e9d6:	bd38      	pop	{r3, r4, r5, pc}
 800e9d8:	20005420 	.word	0x20005420

0800e9dc <round>:
 800e9dc:	ec51 0b10 	vmov	r0, r1, d0
 800e9e0:	b570      	push	{r4, r5, r6, lr}
 800e9e2:	f3c1 550a 	ubfx	r5, r1, #20, #11
 800e9e6:	f2a5 34ff 	subw	r4, r5, #1023	; 0x3ff
 800e9ea:	2c13      	cmp	r4, #19
 800e9ec:	ee10 2a10 	vmov	r2, s0
 800e9f0:	460b      	mov	r3, r1
 800e9f2:	dc19      	bgt.n	800ea28 <round+0x4c>
 800e9f4:	2c00      	cmp	r4, #0
 800e9f6:	da09      	bge.n	800ea0c <round+0x30>
 800e9f8:	3401      	adds	r4, #1
 800e9fa:	f001 4300 	and.w	r3, r1, #2147483648	; 0x80000000
 800e9fe:	d103      	bne.n	800ea08 <round+0x2c>
 800ea00:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800ea04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ea08:	2200      	movs	r2, #0
 800ea0a:	e028      	b.n	800ea5e <round+0x82>
 800ea0c:	4d15      	ldr	r5, [pc, #84]	; (800ea64 <round+0x88>)
 800ea0e:	4125      	asrs	r5, r4
 800ea10:	ea01 0605 	and.w	r6, r1, r5
 800ea14:	4332      	orrs	r2, r6
 800ea16:	d00e      	beq.n	800ea36 <round+0x5a>
 800ea18:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800ea1c:	fa42 f404 	asr.w	r4, r2, r4
 800ea20:	4423      	add	r3, r4
 800ea22:	ea23 0305 	bic.w	r3, r3, r5
 800ea26:	e7ef      	b.n	800ea08 <round+0x2c>
 800ea28:	2c33      	cmp	r4, #51	; 0x33
 800ea2a:	dd07      	ble.n	800ea3c <round+0x60>
 800ea2c:	f5b4 6f80 	cmp.w	r4, #1024	; 0x400
 800ea30:	d101      	bne.n	800ea36 <round+0x5a>
 800ea32:	f7f1 fc2b 	bl	800028c <__adddf3>
 800ea36:	ec41 0b10 	vmov	d0, r0, r1
 800ea3a:	bd70      	pop	{r4, r5, r6, pc}
 800ea3c:	f2a5 4613 	subw	r6, r5, #1043	; 0x413
 800ea40:	f04f 35ff 	mov.w	r5, #4294967295
 800ea44:	40f5      	lsrs	r5, r6
 800ea46:	4228      	tst	r0, r5
 800ea48:	d0f5      	beq.n	800ea36 <round+0x5a>
 800ea4a:	2101      	movs	r1, #1
 800ea4c:	f1c4 0433 	rsb	r4, r4, #51	; 0x33
 800ea50:	fa01 f404 	lsl.w	r4, r1, r4
 800ea54:	1912      	adds	r2, r2, r4
 800ea56:	bf28      	it	cs
 800ea58:	185b      	addcs	r3, r3, r1
 800ea5a:	ea22 0205 	bic.w	r2, r2, r5
 800ea5e:	4619      	mov	r1, r3
 800ea60:	4610      	mov	r0, r2
 800ea62:	e7e8      	b.n	800ea36 <round+0x5a>
 800ea64:	000fffff 	.word	0x000fffff

0800ea68 <_init>:
 800ea68:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea6a:	bf00      	nop
 800ea6c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea6e:	bc08      	pop	{r3}
 800ea70:	469e      	mov	lr, r3
 800ea72:	4770      	bx	lr

0800ea74 <_fini>:
 800ea74:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ea76:	bf00      	nop
 800ea78:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ea7a:	bc08      	pop	{r3}
 800ea7c:	469e      	mov	lr, r3
 800ea7e:	4770      	bx	lr
